/*
 * File: hybridparser_sfunction.cpp
 *
 *
 *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
 *
 *   This file is an S-function produced by the S-Function
 *   Builder which only recognizes certain fields.  Changes made
 *   outside these fields will be lost the next time the block is
 *   used to load, edit, and resave this file. This file will be overwritten
 *   by the S-function Builder block. If you want to edit this file by hand,
 *   you must change it only in the area defined as:
 *
 *        %%%-SFUNWIZ_defines_Changes_BEGIN
 *        #define NAME 'replacement text'
 *        %%% SFUNWIZ_defines_Changes_END
 *
 *   DO NOT change NAME--Change the 'replacement text' only.
 *
 *   For better compatibility with the Simulink Coder, the
 *   "wrapper" S-function technique is used.  This is discussed
 *   in the Simulink Coder's Manual in the Chapter titled,
 *   "Wrapper S-functions".
 *
 *  -------------------------------------------------------------------------
 * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
 *  -------------------------------------------------------------------------
 *
 * Created: Fri Jul 28 13:06:08 2023
 */

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME hybridparser_sfunction

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NUM_INPUTS 1

/* Input Port  0 */
#define IN_PORT_0_NAME ununsed
#define INPUT_0_DIMS_ND \
  { 1, 1 }
#define INPUT_0_NUM_ELEMS 1
#define INPUT_0_WIDTH 1
#define INPUT_DIMS_0_COL 1
#define INPUT_0_DTYPE real_T
#define INPUT_0_COMPLEX COMPLEX_NO
#define IN_0_BUS_BASED 0
#define IN_0_BUS_NAME
#define IN_0_DIMS 1 - D
#define INPUT_0_FEEDTHROUGH 1
#define IN_0_ISSIGNED 0
#define IN_0_WORDLENGTH 8
#define IN_0_FIXPOINTSCALING 1
#define IN_0_FRACTIONLENGTH 9
#define IN_0_BIAS 0
#define IN_0_SLOPE 0.125
#define NUM_OUTPUTS 6

/* Output Port  0 */
#define OUT_PORT_0_NAME EnableP2
#define OUTPUT_0_DIMS_ND \
  { 1, 1 }
#define OUTPUT_0_NUM_ELEMS 1
#define OUTPUT_0_WIDTH 1
#define OUTPUT_DIMS_0_COL 1
#define OUTPUT_0_DTYPE real_T
#define OUTPUT_0_COMPLEX COMPLEX_NO
#define OUT_0_BUS_BASED 0
#define OUT_0_BUS_NAME
#define OUT_0_DIMS 1 - D
#define OUT_0_ISSIGNED 1
#define OUT_0_WORDLENGTH 8
#define OUT_0_FIXPOINTSCALING 1
#define OUT_0_FRACTIONLENGTH 3
#define OUT_0_BIAS 0
#define OUT_0_SLOPE 0.125

/* Output Port  1 */
#define OUT_PORT_1_NAME EnableP3
#define OUTPUT_1_DIMS_ND \
  { 1, 1 }
#define OUTPUT_1_NUM_ELEMS 1
#define OUTPUT_1_WIDTH 1
#define OUTPUT_DIMS_1_COL 1
#define OUTPUT_1_DTYPE real_T
#define OUTPUT_1_COMPLEX COMPLEX_NO
#define OUT_1_BUS_BASED 0
#define OUT_1_BUS_NAME
#define OUT_1_DIMS 1 - D
#define OUT_1_ISSIGNED 1
#define OUT_1_WORDLENGTH 8
#define OUT_1_FIXPOINTSCALING 1
#define OUT_1_FRACTIONLENGTH 3
#define OUT_1_BIAS 0
#define OUT_1_SLOPE 0.125

/* Output Port  2 */
#define OUT_PORT_2_NAME EnableP4
#define OUTPUT_2_DIMS_ND \
  { 1, 1 }
#define OUTPUT_2_NUM_ELEMS 1
#define OUTPUT_2_WIDTH 1
#define OUTPUT_DIMS_2_COL 1
#define OUTPUT_2_DTYPE real_T
#define OUTPUT_2_COMPLEX COMPLEX_NO
#define OUT_2_BUS_BASED 0
#define OUT_2_BUS_NAME
#define OUT_2_DIMS 1 - D
#define OUT_2_ISSIGNED 1
#define OUT_2_WORDLENGTH 8
#define OUT_2_FIXPOINTSCALING 1
#define OUT_2_FRACTIONLENGTH 3
#define OUT_2_BIAS 0
#define OUT_2_SLOPE 0.125

/* Output Port  3 */
#define OUT_PORT_3_NAME EngToGenerator_GearRatio
#define OUTPUT_3_DIMS_ND \
  { 1, 1 }
#define OUTPUT_3_NUM_ELEMS 1
#define OUTPUT_3_WIDTH 1
#define OUTPUT_DIMS_3_COL 1
#define OUTPUT_3_DTYPE real_T
#define OUTPUT_3_COMPLEX COMPLEX_NO
#define OUT_3_BUS_BASED 0
#define OUT_3_BUS_NAME
#define OUT_3_DIMS 1 - D
#define OUT_3_ISSIGNED 1
#define OUT_3_WORDLENGTH 8
#define OUT_3_FIXPOINTSCALING 1
#define OUT_3_FRACTIONLENGTH 3
#define OUT_3_BIAS 0
#define OUT_3_SLOPE 0.125

/* Output Port  4 */
#define OUT_PORT_4_NAME EngClutch_TimeConst
#define OUTPUT_4_DIMS_ND \
  { 1, 1 }
#define OUTPUT_4_NUM_ELEMS 1
#define OUTPUT_4_WIDTH 1
#define OUTPUT_DIMS_4_COL 1
#define OUTPUT_4_DTYPE real_T
#define OUTPUT_4_COMPLEX COMPLEX_NO
#define OUT_4_BUS_BASED 0
#define OUT_4_BUS_NAME
#define OUT_4_DIMS 1 - D
#define OUT_4_ISSIGNED 1
#define OUT_4_WORDLENGTH 8
#define OUT_4_FIXPOINTSCALING 1
#define OUT_4_FRACTIONLENGTH 3
#define OUT_4_BIAS 0
#define OUT_4_SLOPE 0.125

/* Output Port  5 */
#define OUT_PORT_5_NAME FrontMotGearRatio
#define OUTPUT_5_DIMS_ND \
  { 1, 1 }
#define OUTPUT_5_NUM_ELEMS 1
#define OUTPUT_5_WIDTH 1
#define OUTPUT_DIMS_5_COL 1
#define OUTPUT_5_DTYPE real_T
#define OUTPUT_5_COMPLEX COMPLEX_NO
#define OUT_5_BUS_BASED 0
#define OUT_5_BUS_NAME
#define OUT_5_DIMS 1 - D
#define OUT_5_ISSIGNED 1
#define OUT_5_WORDLENGTH 8
#define OUT_5_FIXPOINTSCALING 1
#define OUT_5_FRACTIONLENGTH 3
#define OUT_5_BIAS 0
#define OUT_5_SLOPE 0.125
#define NPARAMS 2

/* Parameter 0 */
#define PARAMETER_0_NAME lic_path
#define PARAMETER_0_DTYPE int8_T
#define PARAMETER_0_COMPLEX COMPLEX_NO

/* Parameter 1 */
#define PARAMETER_1_NAME par_path
#define PARAMETER_1_DTYPE int8_T
#define PARAMETER_1_COMPLEX COMPLEX_NO
#define SAMPLE_TIME_0 0.001
#define NUM_DISC_STATES 0
#define DISC_STATES_IC [0]
#define NUM_CONT_STATES 0
#define CONT_STATES_IC [0]
#define SFUNWIZ_GENERATE_TLC 1
#define SOURCEFILES                                                                               \
  "__SFB__LIB_PATH ../../build_win/Release__SFB__LIB_PATH ../../deps/lib/Release__SFB__INC_PATH " \
  "../../inc/r2022b__SFB__INC_PATH ../../deps/__SFB__INC_PATH ../../src__SFB__INC_PATH ../../__SFB__tx_car.lib"
#define PANELINDEX N / A
#define USE_SIMSTRUCT 0
#define SHOW_COMPILE_STEPS 1
#define CREATE_DEBUG_MEXFILE 0
#define SAVE_CODE_ONLY 1
#define SFUNWIZ_REVISION 3.0

/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "simstruc.h"
#define PARAM_DEF0(S) ssGetSFcnParam(S, 0)
#define PARAM_DEF1(S) ssGetSFcnParam(S, 1)
#define IS_PARAM_INT8(pVal)                                                                                  \
  (mxIsNumeric(pVal) && !mxIsLogical(pVal) && !mxIsEmpty(pVal) && !mxIsSparse(pVal) && !mxIsComplex(pVal) && \
   mxIsInt8(pVal))

extern void hybridparser_sfunction_Start_wrapper(const int8_T *lic_path, const int_T p_width0, const int8_T *par_path,
                                                 const int_T p_width1);
extern void hybridparser_sfunction_Outputs_wrapper(const real_T *ununsed, real_T *EnableP2, real_T *EnableP3,
                                                   real_T *EnableP4, real_T *EngToGenerator_GearRatio,
                                                   real_T *EngClutch_TimeConst, real_T *FrontMotGearRatio,
                                                   const int8_T *lic_path, const int_T p_width0, const int8_T *par_path,
                                                   const int_T p_width1);
extern void hybridparser_sfunction_Terminate_wrapper(const int8_T *lic_path, const int_T p_width0,
                                                     const int8_T *par_path, const int_T p_width1);

/*====================*
 * S-function methods *
 *====================*/
#define MDL_CHECK_PARAMETERS
#if defined(MDL_CHECK_PARAMETERS) && defined(MATLAB_MEX_FILE)

/* Function: mdlCheckParameters =============================================
 * Abstract:
 *     Verify parameter definitions and types.
 */
static void mdlCheckParameters(SimStruct *S) {
  int paramIndex = 0;
  bool invalidParam = false;

  /* All parameters must match the S-function Builder Dialog */
  {
    const mxArray *pVal0 = ssGetSFcnParam(S, 0);
    if (!IS_PARAM_INT8(pVal0)) {
      invalidParam = true;
      paramIndex = 0;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal1 = ssGetSFcnParam(S, 1);
    if (!IS_PARAM_INT8(pVal1)) {
      invalidParam = true;
      paramIndex = 1;
      goto EXIT_POINT;
    }
  }

EXIT_POINT:
  if (invalidParam) {
    static char parameterErrorMsg[1024];
    sprintf(parameterErrorMsg,
            "The data type and or complexity of parameter %d does not match the "
            "information specified in the S-function Builder dialog. "
            "For non-double parameters you will need to cast them using int8, int16, "
            "int32, uint8, uint16, uint32 or boolean.",
            paramIndex + 1);
    ssSetLocalErrorStatus(S, parameterErrorMsg);
  }

  return;
}

#endif /* MDL_CHECK_PARAMETERS */

/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S) {
  DECL_AND_INIT_DIMSINFO(inputDimsInfo);
  DECL_AND_INIT_DIMSINFO(outputDimsInfo);
  ssSetNumSFcnParams(S, NPARAMS); /* Number of expected parameters */

#if defined(MATLAB_MEX_FILE)

  if (ssGetNumSFcnParams(S) == ssGetSFcnParamsCount(S)) {
    mdlCheckParameters(S);
    if (ssGetErrorStatus(S) != NULL) {
      return;
    }
  } else {
    return; /* Parameter mismatch will be reported by Simulink */
  }

#endif

  ssSetArrayLayoutForCodeGen(S, SS_COLUMN_MAJOR);
  ssSetOperatingPointCompliance(S, USE_DEFAULT_OPERATING_POINT);
  ssSetNumContStates(S, NUM_CONT_STATES);
  ssSetNumDiscStates(S, NUM_DISC_STATES);
  if (!ssSetNumInputPorts(S, NUM_INPUTS)) return;

  /* Input Port 0 */
  ssSetInputPortWidth(S, 0, INPUT_0_NUM_ELEMS);
  ssSetInputPortDataType(S, 0, SS_DOUBLE);
  ssSetInputPortComplexSignal(S, 0, INPUT_0_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 0, INPUT_0_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/
  if (!ssSetNumOutputPorts(S, NUM_OUTPUTS)) return;

  /* Output Port 0 */
  ssSetOutputPortWidth(S, 0, OUTPUT_0_NUM_ELEMS);
  ssSetOutputPortDataType(S, 0, SS_DOUBLE);
  ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);

  /* Output Port 1 */
  ssSetOutputPortWidth(S, 1, OUTPUT_1_NUM_ELEMS);
  ssSetOutputPortDataType(S, 1, SS_DOUBLE);
  ssSetOutputPortComplexSignal(S, 1, OUTPUT_1_COMPLEX);

  /* Output Port 2 */
  ssSetOutputPortWidth(S, 2, OUTPUT_2_NUM_ELEMS);
  ssSetOutputPortDataType(S, 2, SS_DOUBLE);
  ssSetOutputPortComplexSignal(S, 2, OUTPUT_2_COMPLEX);

  /* Output Port 3 */
  ssSetOutputPortWidth(S, 3, OUTPUT_3_NUM_ELEMS);
  ssSetOutputPortDataType(S, 3, SS_DOUBLE);
  ssSetOutputPortComplexSignal(S, 3, OUTPUT_3_COMPLEX);

  /* Output Port 4 */
  ssSetOutputPortWidth(S, 4, OUTPUT_4_NUM_ELEMS);
  ssSetOutputPortDataType(S, 4, SS_DOUBLE);
  ssSetOutputPortComplexSignal(S, 4, OUTPUT_4_COMPLEX);

  /* Output Port 5 */
  ssSetOutputPortWidth(S, 5, OUTPUT_5_NUM_ELEMS);
  ssSetOutputPortDataType(S, 5, SS_DOUBLE);
  ssSetOutputPortComplexSignal(S, 5, OUTPUT_5_COMPLEX);
  ssSetNumPWork(S, 0);
  ssSetNumSampleTimes(S, 1);
  ssSetNumRWork(S, 0);
  ssSetNumIWork(S, 0);
  ssSetNumModes(S, 0);
  ssSetNumNonsampledZCs(S, 0);
  ssSetSimulinkVersionGeneratedIn(S, "10.6");

  /* Take care when specifying exception free code - see sfuntmpl_doc.c */
  ssSetOptions(S,
               (SS_OPTION_EXCEPTION_FREE_CODE | SS_OPTION_USE_TLC_WITH_ACCELERATOR | SS_OPTION_WORKS_WITH_CODE_REUSE));
}

#if defined(MATLAB_MEX_FILE)
#  define MDL_SET_INPUT_PORT_DIMENSION_INFO

static void mdlSetInputPortDimensionInfo(SimStruct *S, int_T port, const DimsInfo_T *dimsInfo) {
  if (!ssSetInputPortDimensionInfo(S, port, dimsInfo)) return;
}

#endif

#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO)

static void mdlSetOutputPortDimensionInfo(SimStruct *S, int_T port, const DimsInfo_T *dimsInfo) {
  if (!ssSetOutputPortDimensionInfo(S, port, dimsInfo)) return;
}

#endif

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S) {
  ssSetSampleTime(S, 0, SAMPLE_TIME_0);
  ssSetModelReferenceSampleTimeDefaultInheritance(S);
  ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_SET_INPUT_PORT_DATA_TYPE

static void mdlSetInputPortDataType(SimStruct *S, int port, DTypeId dType) { ssSetInputPortDataType(S, 0, dType); }

#define MDL_SET_OUTPUT_PORT_DATA_TYPE

static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType) { ssSetOutputPortDataType(S, 0, dType); }

#define MDL_SET_DEFAULT_PORT_DATA_TYPES

static void mdlSetDefaultPortDataTypes(SimStruct *S) {
  ssSetInputPortDataType(S, 0, SS_DOUBLE);
  ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}

#define MDL_SET_WORK_WIDTHS
#if defined(MDL_SET_WORK_WIDTHS) && defined(MATLAB_MEX_FILE)

static void mdlSetWorkWidths(SimStruct *S) {
  const char_T *rtParamNames[] = {"P1", "P2"};

  ssRegAllTunableParamsAsRunTimeParams(S, rtParamNames);
}

#endif

#define MDL_START /* Change to #undef to remove function */
#if defined(MDL_START)

/* Function: mdlStart =======================================================
 * Abstract:
 *    This function is called once at start of model execution. If you
 *    have states that should be initialized once, this is the place
 *    to do it.
 */
static void mdlStart(SimStruct *S) {
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int8_T *lic_path = (const int8_T *)mxGetData(PARAM_DEF0(S));
  const int8_T *par_path = (const int8_T *)mxGetData(PARAM_DEF1(S));
  hybridparser_sfunction_Start_wrapper(lic_path, p_width0, par_path, p_width1);
}

#endif /*  MDL_START */

/* Function: mdlOutputs =======================================================
 *
 */
static void mdlOutputs(SimStruct *S, int_T tid) {
  const real_T *ununsed = (real_T *)ssGetInputPortRealSignal(S, 0);
  real_T *EnableP2 = (real_T *)ssGetOutputPortRealSignal(S, 0);
  real_T *EnableP3 = (real_T *)ssGetOutputPortRealSignal(S, 1);
  real_T *EnableP4 = (real_T *)ssGetOutputPortRealSignal(S, 2);
  real_T *EngToGenerator_GearRatio = (real_T *)ssGetOutputPortRealSignal(S, 3);
  real_T *EngClutch_TimeConst = (real_T *)ssGetOutputPortRealSignal(S, 4);
  real_T *FrontMotGearRatio = (real_T *)ssGetOutputPortRealSignal(S, 5);
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int8_T *lic_path = (const int8_T *)mxGetData(PARAM_DEF0(S));
  const int8_T *par_path = (const int8_T *)mxGetData(PARAM_DEF1(S));
  hybridparser_sfunction_Outputs_wrapper(ununsed, EnableP2, EnableP3, EnableP4, EngToGenerator_GearRatio,
                                         EngClutch_TimeConst, FrontMotGearRatio, lic_path, p_width0, par_path,
                                         p_width1);
}

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S) {
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int8_T *lic_path = (const int8_T *)mxGetData(PARAM_DEF0(S));
  const int8_T *par_path = (const int8_T *)mxGetData(PARAM_DEF1(S));
  hybridparser_sfunction_Terminate_wrapper(lic_path, p_width0, par_path, p_width1);
}

#ifdef MATLAB_MEX_FILE  /* Is this file being compiled as a MEX-file? */
#  include "simulink.c" /* MEX-file interface mechanism */
#else
#  include "cg_sfun.h" /* Code generation registration function */
#endif
