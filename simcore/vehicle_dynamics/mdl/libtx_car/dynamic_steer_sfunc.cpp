/*
 * File: dynamic_steer_sfunc.cpp
 *
 *
 *   --- THIS FILE GENERATED BY S-FUNCTION BUILDER: 3.0 ---
 *
 *   This file is an S-function produced by the S-Function
 *   Builder which only recognizes certain fields.  Changes made
 *   outside these fields will be lost the next time the block is
 *   used to load, edit, and resave this file. This file will be overwritten
 *   by the S-function Builder block. If you want to edit this file by hand,
 *   you must change it only in the area defined as:
 *
 *        %%%-SFUNWIZ_defines_Changes_BEGIN
 *        #define NAME 'replacement text'
 *        %%% SFUNWIZ_defines_Changes_END
 *
 *   DO NOT change NAME--Change the 'replacement text' only.
 *
 *   For better compatibility with the Simulink Coder, the
 *   "wrapper" S-function technique is used.  This is discussed
 *   in the Simulink Coder's Manual in the Chapter titled,
 *   "Wrapper S-functions".
 *
 *  -------------------------------------------------------------------------
 * | See matlabroot/simulink/src/sfuntmpl_doc.c for a more detailed template |
 *  -------------------------------------------------------------------------
 *
 * Created: Mon Apr 17 10:27:37 2023
 */

#define S_FUNCTION_LEVEL 2
#define S_FUNCTION_NAME dynamic_steer_sfunc

/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
/* %%%-SFUNWIZ_defines_Changes_BEGIN --- EDIT HERE TO _END */
#define NUM_INPUTS 4

/* Input Port  0 */
#define IN_PORT_0_NAME driver_in
#define INPUT_0_DIMS_ND \
  { 1, 1 }
#define INPUT_0_NUM_ELEMS 1
#define INPUT_0_WIDTH 1
#define INPUT_DIMS_0_COL 1
#define INPUT_0_DTYPE real_T
#define INPUT_0_COMPLEX COMPLEX_NO
#define IN_0_BUS_BASED 1
#define IN_0_BUS_NAME Ctrl_Input
#define IN_0_DIMS 1 - D
#define INPUT_0_FEEDTHROUGH 1
#define IN_0_ISSIGNED 0
#define IN_0_WORDLENGTH 8
#define IN_0_FIXPOINTSCALING 1
#define IN_0_FRACTIONLENGTH 9
#define IN_0_BIAS 0
#define IN_0_SLOPE 0.125

/* Input Port  1 */
#define IN_PORT_1_NAME body_in
#define INPUT_1_DIMS_ND \
  { 1, 1 }
#define INPUT_1_NUM_ELEMS 1
#define INPUT_1_WIDTH 1
#define INPUT_DIMS_1_COL 1
#define INPUT_1_DTYPE real_T
#define INPUT_1_COMPLEX COMPLEX_NO
#define IN_1_BUS_BASED 1
#define IN_1_BUS_NAME Vehicle_Body_Output
#define IN_1_DIMS 1 - D
#define INPUT_1_FEEDTHROUGH 1
#define IN_1_ISSIGNED 0
#define IN_1_WORDLENGTH 8
#define IN_1_FIXPOINTSCALING 1
#define IN_1_FRACTIONLENGTH 9
#define IN_1_BIAS 0
#define IN_1_SLOPE 0.125

/* Input Port  2 */
#define IN_PORT_2_NAME susp_in
#define INPUT_2_DIMS_ND \
  { 1, 1 }
#define INPUT_2_NUM_ELEMS 1
#define INPUT_2_WIDTH 1
#define INPUT_DIMS_2_COL 1
#define INPUT_2_DTYPE real_T
#define INPUT_2_COMPLEX COMPLEX_NO
#define IN_2_BUS_BASED 1
#define IN_2_BUS_NAME Susp_Output
#define IN_2_DIMS 1 - D
#define INPUT_2_FEEDTHROUGH 1
#define IN_2_ISSIGNED 0
#define IN_2_WORDLENGTH 8
#define IN_2_FIXPOINTSCALING 1
#define IN_2_FRACTIONLENGTH 9
#define IN_2_BIAS 0
#define IN_2_SLOPE 0.125

/* Input Port  3 */
#define IN_PORT_3_NAME wheel_in
#define INPUT_3_DIMS_ND \
  { 1, 1 }
#define INPUT_3_NUM_ELEMS 1
#define INPUT_3_WIDTH 1
#define INPUT_DIMS_3_COL 1
#define INPUT_3_DTYPE real_T
#define INPUT_3_COMPLEX COMPLEX_NO
#define IN_3_BUS_BASED 1
#define IN_3_BUS_NAME Wheels_Output
#define IN_3_DIMS 1 - D
#define INPUT_3_FEEDTHROUGH 1
#define IN_3_ISSIGNED 0
#define IN_3_WORDLENGTH 8
#define IN_3_FIXPOINTSCALING 1
#define IN_3_FRACTIONLENGTH 9
#define IN_3_BIAS 0
#define IN_3_SLOPE 0.125
#define NUM_OUTPUTS 1

/* Output Port  0 */
#define OUT_PORT_0_NAME steer_out
#define OUTPUT_0_DIMS_ND \
  { 1, 1 }
#define OUTPUT_0_NUM_ELEMS 1
#define OUTPUT_0_WIDTH 1
#define OUTPUT_DIMS_0_COL 1
#define OUTPUT_0_DTYPE real_T
#define OUTPUT_0_COMPLEX COMPLEX_NO
#define OUT_0_BUS_BASED 1
#define OUT_0_BUS_NAME Steer_Output
#define OUT_0_DIMS 1 - D
#define OUT_0_ISSIGNED 1
#define OUT_0_WORDLENGTH 8
#define OUT_0_FIXPOINTSCALING 1
#define OUT_0_FRACTIONLENGTH 3
#define OUT_0_BIAS 0
#define OUT_0_SLOPE 0.125
#define NPARAMS 2

/* Parameter 0 */
#define PARAMETER_0_NAME lic_path
#define PARAMETER_0_DTYPE int8_T
#define PARAMETER_0_COMPLEX COMPLEX_NO

/* Parameter 1 */
#define PARAMETER_1_NAME par_path
#define PARAMETER_1_DTYPE int8_T
#define PARAMETER_1_COMPLEX COMPLEX_NO
#define SAMPLE_TIME_0 0.001
#define NUM_DISC_STATES 0
#define DISC_STATES_IC [0]
#define NUM_CONT_STATES 0
#define CONT_STATES_IC [0]
#define SFUNWIZ_GENERATE_TLC 1
#define SOURCEFILES                                                                                               \
  "__SFB__LIB_PATH ..\..\build_win\Release__SFB__INC_PATH ../../__SFB__INC_PATH ..\..\inc\r2022b__SFB__INC_PATH " \
  "../../src__SFB__tx_car.lib"
#define PANELINDEX N / A
#define USE_SIMSTRUCT 0
#define SHOW_COMPILE_STEPS 1
#define CREATE_DEBUG_MEXFILE 0
#define SAVE_CODE_ONLY 1
#define SFUNWIZ_REVISION 3.0

/* %%%-SFUNWIZ_defines_Changes_END --- EDIT HERE TO _BEGIN */
/*<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<*/
#include "dynamic_steer_sfunc_bus.h"
#include "simstruc.h"

/*
 * Code Generation Environment flag (simulation or standalone target).
 */
static int_T isSimulationTarget;

/* Utility function prototypes. */
static int_T GetRTWEnvironmentMode(SimStruct *S);

/* Macro used to check if Simulation mode is set to accelerator */
#define isBusDWorkPresent \
  (((!ssRTWGenIsCodeGen(S) || isSimulationTarget) && !ssIsExternalSim(S)) || ssIsRapidAcceleratorActive(S))

typedef struct {
  int_T offset;
  int_T elemSize;
  int_T numElems;
} busInfoStruct;

#define PARAM_DEF0(S) ssGetSFcnParam(S, 0)
#define PARAM_DEF1(S) ssGetSFcnParam(S, 1)
#define IS_PARAM_INT8(pVal)                                                                                  \
  (mxIsNumeric(pVal) && !mxIsLogical(pVal) && !mxIsEmpty(pVal) && !mxIsSparse(pVal) && !mxIsComplex(pVal) && \
   mxIsInt8(pVal))

extern void dynamic_steer_sfunc_Start_wrapper(const int8_T *lic_path, const int_T p_width0, const int8_T *par_path,
                                              const int_T p_width1);
extern void dynamic_steer_sfunc_Outputs_wrapper(const Ctrl_Input *driver_in, const Vehicle_Body_Output *body_in,
                                                const Susp_Output *susp_in, const Wheels_Output *wheel_in,
                                                Steer_Output *steer_out, const int8_T *lic_path, const int_T p_width0,
                                                const int8_T *par_path, const int_T p_width1);
extern void dynamic_steer_sfunc_Terminate_wrapper(const int8_T *lic_path, const int_T p_width0, const int8_T *par_path,
                                                  const int_T p_width1);

/*====================*
 * S-function methods *
 *====================*/
#define MDL_CHECK_PARAMETERS
#if defined(MDL_CHECK_PARAMETERS) && defined(MATLAB_MEX_FILE)

/* Function: mdlCheckParameters =============================================
 * Abstract:
 *     Verify parameter definitions and types.
 */
static void mdlCheckParameters(SimStruct *S) {
  int paramIndex = 0;
  bool invalidParam = false;

  /* All parameters must match the S-function Builder Dialog */
  {
    const mxArray *pVal0 = ssGetSFcnParam(S, 0);
    if (!IS_PARAM_INT8(pVal0)) {
      invalidParam = true;
      paramIndex = 0;
      goto EXIT_POINT;
    }
  }

  {
    const mxArray *pVal1 = ssGetSFcnParam(S, 1);
    if (!IS_PARAM_INT8(pVal1)) {
      invalidParam = true;
      paramIndex = 1;
      goto EXIT_POINT;
    }
  }

EXIT_POINT:
  if (invalidParam) {
    static char parameterErrorMsg[1024];
    sprintf(parameterErrorMsg,
            "The data type and or complexity of parameter %d does not match the "
            "information specified in the S-function Builder dialog. "
            "For non-double parameters you will need to cast them using int8, int16, "
            "int32, uint8, uint16, uint32 or boolean.",
            paramIndex + 1);
    ssSetLocalErrorStatus(S, parameterErrorMsg);
  }

  return;
}

#endif /* MDL_CHECK_PARAMETERS */

/* Function: mdlInitializeSizes ===============================================
 * Abstract:
 *   Setup sizes of the various vectors.
 */
static void mdlInitializeSizes(SimStruct *S) {
  DECL_AND_INIT_DIMSINFO(inputDimsInfo);
  DECL_AND_INIT_DIMSINFO(outputDimsInfo);
  ssSetNumSFcnParams(S, NPARAMS); /* Number of expected parameters */

#if defined(MATLAB_MEX_FILE)

  if (ssGetNumSFcnParams(S) == ssGetSFcnParamsCount(S)) {
    mdlCheckParameters(S);
    if (ssGetErrorStatus(S) != NULL) {
      return;
    }
  } else {
    return; /* Parameter mismatch will be reported by Simulink */
  }

#endif

  ssSetArrayLayoutForCodeGen(S, SS_COLUMN_MAJOR);
  ssSetOperatingPointCompliance(S, USE_DEFAULT_OPERATING_POINT);
  ssSetNumContStates(S, NUM_CONT_STATES);
  ssSetNumDiscStates(S, NUM_DISC_STATES);
  if (!ssSetNumInputPorts(S, NUM_INPUTS)) return;

    /* Input Port 0 */

    /* Register Ctrl_Input datatype for Input port 0 */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Ctrl_Input", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    ssSetInputPortDataType(S, 0, dataTypeIdReg);
  }

#endif

  ssSetInputPortWidth(S, 0, INPUT_0_NUM_ELEMS);
  ssSetInputPortComplexSignal(S, 0, INPUT_0_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 0, INPUT_0_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 0, 1); /*direct input signal access*/
  ssSetBusInputAsStruct(S, 0, IN_0_BUS_BASED);
  ssSetInputPortBusMode(S, 0, SL_BUS_MODE);

  /* Input Port 1 */

  /* Register Vehicle_Body_Output datatype for Input port 1 */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Vehicle_Body_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    ssSetInputPortDataType(S, 1, dataTypeIdReg);
  }

#endif

  ssSetInputPortWidth(S, 1, INPUT_1_NUM_ELEMS);
  ssSetInputPortComplexSignal(S, 1, INPUT_1_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 1, INPUT_1_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 1, 1); /*direct input signal access*/
  ssSetBusInputAsStruct(S, 1, IN_1_BUS_BASED);
  ssSetInputPortBusMode(S, 1, SL_BUS_MODE);

  /* Input Port 2 */

  /* Register Susp_Output datatype for Input port 2 */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Susp_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    ssSetInputPortDataType(S, 2, dataTypeIdReg);
  }

#endif

  ssSetInputPortWidth(S, 2, INPUT_2_NUM_ELEMS);
  ssSetInputPortComplexSignal(S, 2, INPUT_2_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 2, INPUT_2_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 2, 1); /*direct input signal access*/
  ssSetBusInputAsStruct(S, 2, IN_2_BUS_BASED);
  ssSetInputPortBusMode(S, 2, SL_BUS_MODE);

  /* Input Port 3 */

  /* Register Wheels_Output datatype for Input port 3 */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Wheels_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    ssSetInputPortDataType(S, 3, dataTypeIdReg);
  }

#endif

  ssSetInputPortWidth(S, 3, INPUT_3_NUM_ELEMS);
  ssSetInputPortComplexSignal(S, 3, INPUT_3_COMPLEX);
  ssSetInputPortDirectFeedThrough(S, 3, INPUT_3_FEEDTHROUGH);
  ssSetInputPortRequiredContiguous(S, 3, 1); /*direct input signal access*/
  ssSetBusInputAsStruct(S, 3, IN_3_BUS_BASED);
  ssSetInputPortBusMode(S, 3, SL_BUS_MODE);
  if (!ssSetNumOutputPorts(S, NUM_OUTPUTS)) return;

    /* Output Port 0 */

    /* Register Steer_Output datatype for Output port 0 */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Steer_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    ssSetOutputPortDataType(S, 0, dataTypeIdReg);
  }

#endif

  ssSetOutputPortWidth(S, 0, OUTPUT_0_NUM_ELEMS);
  ssSetBusOutputObjectName(S, 0, (void *)"Steer_Output");
  ssSetOutputPortComplexSignal(S, 0, OUTPUT_0_COMPLEX);
  ssSetBusOutputAsStruct(S, 0, OUT_0_BUS_BASED);
  ssSetOutputPortBusMode(S, 0, SL_BUS_MODE);
  if (ssRTWGenIsCodeGen(S)) {
    isSimulationTarget = GetRTWEnvironmentMode(S);
    if (isSimulationTarget == -1) {
      ssSetLocalErrorStatus(S, " Unable to determine a valid code generation environment mode");
      return;
    }

    isSimulationTarget |= ssRTWGenIsModelReferenceSimTarget(S);
  }

  /* Set the number of dworks */
  if (!ssSetNumDWork(S, 5)) return;

    /*
     * Configure the dwork 0 (driver_inBUS)
     */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Ctrl_Input", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    if (isBusDWorkPresent) {
      ssSetDWorkDataType(S, 0, dataTypeIdReg);
    } else {
      ssSetDWorkDataType(S, 0, SS_POINTER);
    }
  }

#endif

  ssSetDWorkUsageType(S, 0, SS_DWORK_USED_AS_DWORK);
  ssSetDWorkName(S, 0, "driver_inBUS");
  ssSetDWorkWidth(S, 0, DYNAMICALLY_SIZED);
  ssSetDWorkComplexSignal(S, 0, COMPLEX_NO);

  /*
   * Configure the dwork 1 (body_inBUS)
   */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Vehicle_Body_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    if (isBusDWorkPresent) {
      ssSetDWorkDataType(S, 1, dataTypeIdReg);
    } else {
      ssSetDWorkDataType(S, 1, SS_POINTER);
    }
  }

#endif

  ssSetDWorkUsageType(S, 1, SS_DWORK_USED_AS_DWORK);
  ssSetDWorkName(S, 1, "body_inBUS");
  ssSetDWorkWidth(S, 1, DYNAMICALLY_SIZED);
  ssSetDWorkComplexSignal(S, 1, COMPLEX_NO);

  /*
   * Configure the dwork 2 (susp_inBUS)
   */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Susp_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    if (isBusDWorkPresent) {
      ssSetDWorkDataType(S, 2, dataTypeIdReg);
    } else {
      ssSetDWorkDataType(S, 2, SS_POINTER);
    }
  }

#endif

  ssSetDWorkUsageType(S, 2, SS_DWORK_USED_AS_DWORK);
  ssSetDWorkName(S, 2, "susp_inBUS");
  ssSetDWorkWidth(S, 2, DYNAMICALLY_SIZED);
  ssSetDWorkComplexSignal(S, 2, COMPLEX_NO);

  /*
   * Configure the dwork 3 (wheel_inBUS)
   */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Wheels_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    if (isBusDWorkPresent) {
      ssSetDWorkDataType(S, 3, dataTypeIdReg);
    } else {
      ssSetDWorkDataType(S, 3, SS_POINTER);
    }
  }

#endif

  ssSetDWorkUsageType(S, 3, SS_DWORK_USED_AS_DWORK);
  ssSetDWorkName(S, 3, "wheel_inBUS");
  ssSetDWorkWidth(S, 3, DYNAMICALLY_SIZED);
  ssSetDWorkComplexSignal(S, 3, COMPLEX_NO);

  /*
   * Configure the dwork 4 (steer_outBUS)
   */
#if defined(MATLAB_MEX_FILE)

  if (ssGetSimMode(S) != SS_SIMMODE_SIZES_CALL_ONLY) {
    DTypeId dataTypeIdReg;
    ssRegisterTypeFromNamedObject(S, "Steer_Output", &dataTypeIdReg);
    if (dataTypeIdReg == INVALID_DTYPE_ID) return;
    if (isBusDWorkPresent) {
      ssSetDWorkDataType(S, 4, dataTypeIdReg);
    } else {
      ssSetDWorkDataType(S, 4, SS_POINTER);
    }
  }

#endif

  ssSetDWorkUsageType(S, 4, SS_DWORK_USED_AS_DWORK);
  ssSetDWorkName(S, 4, "steer_outBUS");
  ssSetDWorkWidth(S, 4, DYNAMICALLY_SIZED);
  ssSetDWorkComplexSignal(S, 4, COMPLEX_NO);
  ssSetNumPWork(S, 0);
  ssSetNumSampleTimes(S, 1);
  ssSetNumRWork(S, 0);
  ssSetNumIWork(S, 0);
  ssSetNumModes(S, 0);
  ssSetNumNonsampledZCs(S, 0);
  ssSetSimulinkVersionGeneratedIn(S, "10.6");

  /* Take care when specifying exception free code - see sfuntmpl_doc.c */
  ssSetOptions(S,
               (SS_OPTION_EXCEPTION_FREE_CODE | SS_OPTION_USE_TLC_WITH_ACCELERATOR | SS_OPTION_WORKS_WITH_CODE_REUSE));
}

#if defined(MATLAB_MEX_FILE)
#  define MDL_SET_INPUT_PORT_DIMENSION_INFO

static void mdlSetInputPortDimensionInfo(SimStruct *S, int_T port, const DimsInfo_T *dimsInfo) {
  if (!ssSetInputPortDimensionInfo(S, port, dimsInfo)) return;
}

#endif

#define MDL_SET_OUTPUT_PORT_DIMENSION_INFO
#if defined(MDL_SET_OUTPUT_PORT_DIMENSION_INFO)

static void mdlSetOutputPortDimensionInfo(SimStruct *S, int_T port, const DimsInfo_T *dimsInfo) {
  if (!ssSetOutputPortDimensionInfo(S, port, dimsInfo)) return;
}

#endif

/* Function: mdlInitializeSampleTimes =========================================
 * Abstract:
 *    Specifiy  the sample time.
 */
static void mdlInitializeSampleTimes(SimStruct *S) {
  ssSetSampleTime(S, 0, SAMPLE_TIME_0);
  ssSetModelReferenceSampleTimeDefaultInheritance(S);
  ssSetOffsetTime(S, 0, 0.0);
}

#define MDL_SET_INPUT_PORT_DATA_TYPE

static void mdlSetInputPortDataType(SimStruct *S, int port, DTypeId dType) { ssSetInputPortDataType(S, 0, dType); }

#define MDL_SET_OUTPUT_PORT_DATA_TYPE

static void mdlSetOutputPortDataType(SimStruct *S, int port, DTypeId dType) { ssSetOutputPortDataType(S, 0, dType); }

#define MDL_SET_DEFAULT_PORT_DATA_TYPES

static void mdlSetDefaultPortDataTypes(SimStruct *S) {
  ssSetInputPortDataType(S, 0, SS_DOUBLE);
  ssSetOutputPortDataType(S, 0, SS_DOUBLE);
}

#define MDL_SET_WORK_WIDTHS
#if defined(MDL_SET_WORK_WIDTHS) && defined(MATLAB_MEX_FILE)

static void mdlSetWorkWidths(SimStruct *S) {
  /* Set the width of DWork(s) used for marshalling the IOs */
  if (isBusDWorkPresent) {
    /* Update dwork 0 */
    ssSetDWorkWidth(S, 0, ssGetInputPortWidth(S, 0));

    /* Update dwork 1 */
    ssSetDWorkWidth(S, 1, ssGetInputPortWidth(S, 1));

    /* Update dwork 2 */
    ssSetDWorkWidth(S, 2, ssGetInputPortWidth(S, 2));

    /* Update dwork 3 */
    ssSetDWorkWidth(S, 3, ssGetInputPortWidth(S, 3));

    /* Update dwork 4 */
    ssSetDWorkWidth(S, 4, ssGetOutputPortWidth(S, 0));
  }

  {
    const char_T *rtParamNames[] = {"P1", "P2"};

    ssRegAllTunableParamsAsRunTimeParams(S, rtParamNames);
  }
}

#endif

#define MDL_START /* Change to #undef to remove function */
#if defined(MDL_START)

/* Function: mdlStart =======================================================
 * Abstract:
 *    This function is called once at start of model execution. If you
 *    have states that should be initialized once, this is the place
 *    to do it.
 */
static void mdlStart(SimStruct *S) {
  /* Bus Information */
  slDataTypeAccess *dta = ssGetDataTypeAccess(S);
  const char *bpath = ssGetPath(S);
  DTypeId BdyFrm_AccId = ssGetDataTypeId(S, "BdyFrm_Acc");
  DTypeId BdyFrm_AngAccId = ssGetDataTypeId(S, "BdyFrm_AngAcc");
  DTypeId BdyFrm_AngVelId = ssGetDataTypeId(S, "BdyFrm_AngVel");
  DTypeId BdyFrm_AngleId = ssGetDataTypeId(S, "BdyFrm_Angle");
  DTypeId BdyFrm_CgId = ssGetDataTypeId(S, "BdyFrm_Cg");
  DTypeId BdyFrm_DispId = ssGetDataTypeId(S, "BdyFrm_Disp");
  DTypeId BdyFrm_DispVelId = ssGetDataTypeId(S, "BdyFrm_DispVel");
  DTypeId BdyFrm_DispVelAngId = ssGetDataTypeId(S, "BdyFrm_DispVelAng");
  DTypeId BdyFrm_ForceId = ssGetDataTypeId(S, "BdyFrm_Force");
  DTypeId BdyFrm_ForcesId = ssGetDataTypeId(S, "BdyFrm_Forces");
  DTypeId BdyFrm_LftRght_DispVelId = ssGetDataTypeId(S, "BdyFrm_LftRght_DispVel");
  DTypeId BdyFrm_LftRght_ForceId = ssGetDataTypeId(S, "BdyFrm_LftRght_Force");
  DTypeId BdyFrm_MomentId = ssGetDataTypeId(S, "BdyFrm_Moment");
  DTypeId BdyFrm_MomentsId = ssGetDataTypeId(S, "BdyFrm_Moments");
  DTypeId BdyFrm_PwrId = ssGetDataTypeId(S, "BdyFrm_Pwr");
  DTypeId BdyFrm_TiresId = ssGetDataTypeId(S, "BdyFrm_Tires");
  DTypeId BdyFrm_VelId = ssGetDataTypeId(S, "BdyFrm_Vel");
  DTypeId Ctrl_InputId = ssGetDataTypeId(S, "Ctrl_Input");
  DTypeId InertFrm_AngleId = ssGetDataTypeId(S, "InertFrm_Angle");
  DTypeId InertFrm_AxleId = ssGetDataTypeId(S, "InertFrm_Axle");
  DTypeId InertFrm_DispId = ssGetDataTypeId(S, "InertFrm_Disp");
  DTypeId InertFrm_DispVelId = ssGetDataTypeId(S, "InertFrm_DispVel");
  DTypeId InertFrm_DispVelAngId = ssGetDataTypeId(S, "InertFrm_DispVelAng");
  DTypeId InertFrm_VelId = ssGetDataTypeId(S, "InertFrm_Vel");
  DTypeId Steer_OutputId = ssGetDataTypeId(S, "Steer_Output");
  DTypeId Susp_OutputId = ssGetDataTypeId(S, "Susp_Output");
  DTypeId Susp_VehId = ssGetDataTypeId(S, "Susp_Veh");
  DTypeId Susp_WhlId = ssGetDataTypeId(S, "Susp_Whl");
  DTypeId Vehicle_BdyFrm_OutputId = ssGetDataTypeId(S, "Vehicle_BdyFrm_Output");
  DTypeId Vehicle_Body_OutputId = ssGetDataTypeId(S, "Vehicle_Body_Output");
  DTypeId Vehicle_InertFrm_OutputId = ssGetDataTypeId(S, "Vehicle_InertFrm_Output");
  DTypeId Wheels_OutputId = ssGetDataTypeId(S, "Wheels_Output");
  DTypeId Wheels_Steer_OutputId = ssGetDataTypeId(S, "Wheels_Steer_Output");
  DTypeId Wheels_TireFrame_OutputId = ssGetDataTypeId(S, "Wheels_TireFrame_Output");
  busInfoStruct *busInfo = (busInfoStruct *)malloc(274 * sizeof(busInfoStruct));
  if (busInfo == NULL) {
    ssSetLocalErrorStatus(S, "Memory allocation failure");
    return;
  }

  /*offsets info for all unique bus structures*/
  busInfo[0].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 0);
  busInfo[0].elemSize = dtaGetDataTypeSize(dta, bpath, SS_UINT8);
  busInfo[0].numElems = 1;
  busInfo[1].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 1);
  busInfo[1].elemSize = dtaGetDataTypeSize(dta, bpath, SS_UINT8);
  busInfo[1].numElems = 1;
  busInfo[2].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 2);
  busInfo[2].elemSize = dtaGetDataTypeSize(dta, bpath, SS_UINT8);
  busInfo[2].numElems = 1;
  busInfo[3].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 3);
  busInfo[3].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[3].numElems = 1;
  busInfo[4].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 4);
  busInfo[4].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[4].numElems = 1;
  busInfo[5].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 5);
  busInfo[5].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[5].numElems = 1;
  busInfo[6].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 6);
  busInfo[6].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[6].numElems = 1;
  busInfo[7].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 7);
  busInfo[7].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[7].numElems = 1;
  busInfo[8].offset = dtaGetDataTypeElementOffset(dta, bpath, Ctrl_InputId, 8);
  busInfo[8].elemSize = dtaGetDataTypeSize(dta, bpath, SS_UINT8);
  busInfo[8].numElems = 1;
  busInfo[9].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_Body_OutputId, 0);
  busInfo[9].elemSize = dtaGetDataTypeSize(dta, bpath, Vehicle_InertFrm_OutputId);
  busInfo[9].numElems = 1;
  busInfo[10].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_InertFrm_OutputId, 0);
  busInfo[10].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_DispVelAngId);
  busInfo[10].numElems = 1;
  busInfo[11].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispVelAngId, 0);
  busInfo[11].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_DispId);
  busInfo[11].numElems = 1;
  busInfo[12].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispId, 0);
  busInfo[12].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[12].numElems = 1;
  busInfo[13].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispId, 1);
  busInfo[13].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[13].numElems = 1;
  busInfo[14].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispId, 2);
  busInfo[14].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[14].numElems = 1;
  busInfo[15].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispVelAngId, 1);
  busInfo[15].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_VelId);
  busInfo[15].numElems = 1;
  busInfo[16].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_VelId, 0);
  busInfo[16].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[16].numElems = 1;
  busInfo[17].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_VelId, 1);
  busInfo[17].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[17].numElems = 1;
  busInfo[18].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_VelId, 2);
  busInfo[18].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[18].numElems = 1;
  busInfo[19].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispVelAngId, 2);
  busInfo[19].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_AngleId);
  busInfo[19].numElems = 1;
  busInfo[20].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_AngleId, 0);
  busInfo[20].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[20].numElems = 1;
  busInfo[21].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_AngleId, 1);
  busInfo[21].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[21].numElems = 1;
  busInfo[22].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_AngleId, 2);
  busInfo[22].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[22].numElems = 1;
  busInfo[23].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_InertFrm_OutputId, 1);
  busInfo[23].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_AxleId);
  busInfo[23].numElems = 1;
  busInfo[24].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_AxleId, 0);
  busInfo[24].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_DispVelId);
  busInfo[24].numElems = 1;
  busInfo[25].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispVelId, 0);
  busInfo[25].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_DispId);
  busInfo[25].numElems = 1;
  busInfo[29].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_DispVelId, 1);
  busInfo[29].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_VelId);
  busInfo[29].numElems = 1;
  busInfo[33].offset = dtaGetDataTypeElementOffset(dta, bpath, InertFrm_AxleId, 1);
  busInfo[33].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_DispVelId);
  busInfo[33].numElems = 1;
  busInfo[42].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_InertFrm_OutputId, 2);
  busInfo[42].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_AxleId);
  busInfo[42].numElems = 1;
  busInfo[61].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_InertFrm_OutputId, 3);
  busInfo[61].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_DispVelId);
  busInfo[61].numElems = 1;
  busInfo[70].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_InertFrm_OutputId, 4);
  busInfo[70].elemSize = dtaGetDataTypeSize(dta, bpath, InertFrm_DispVelId);
  busInfo[70].numElems = 1;
  busInfo[79].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_Body_OutputId, 1);
  busInfo[79].elemSize = dtaGetDataTypeSize(dta, bpath, Vehicle_BdyFrm_OutputId);
  busInfo[79].numElems = 1;
  busInfo[80].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 0);
  busInfo[80].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_CgId);
  busInfo[80].numElems = 1;
  busInfo[81].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_CgId, 0);
  busInfo[81].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_VelId);
  busInfo[81].numElems = 1;
  busInfo[82].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_VelId, 0);
  busInfo[82].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[82].numElems = 1;
  busInfo[83].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_VelId, 1);
  busInfo[83].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[83].numElems = 1;
  busInfo[84].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_VelId, 2);
  busInfo[84].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[84].numElems = 1;
  busInfo[85].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_CgId, 1);
  busInfo[85].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_AngleId);
  busInfo[85].numElems = 1;
  busInfo[86].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AngleId, 0);
  busInfo[86].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[86].numElems = 1;
  busInfo[87].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_CgId, 2);
  busInfo[87].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_AngVelId);
  busInfo[87].numElems = 1;
  busInfo[88].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AngVelId, 0);
  busInfo[88].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[88].numElems = 1;
  busInfo[89].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AngVelId, 1);
  busInfo[89].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[89].numElems = 1;
  busInfo[90].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AngVelId, 2);
  busInfo[90].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[90].numElems = 1;
  busInfo[91].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_CgId, 3);
  busInfo[91].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_AccId);
  busInfo[91].numElems = 1;
  busInfo[92].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AccId, 0);
  busInfo[92].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[92].numElems = 1;
  busInfo[93].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AccId, 1);
  busInfo[93].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[93].numElems = 1;
  busInfo[94].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AccId, 2);
  busInfo[94].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[94].numElems = 1;
  busInfo[95].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AccId, 3);
  busInfo[95].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[95].numElems = 1;
  busInfo[96].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AccId, 4);
  busInfo[96].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[96].numElems = 1;
  busInfo[97].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AccId, 5);
  busInfo[97].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[97].numElems = 1;
  busInfo[98].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_CgId, 4);
  busInfo[98].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_AngAccId);
  busInfo[98].numElems = 1;
  busInfo[99].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AngAccId, 0);
  busInfo[99].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[99].numElems = 1;
  busInfo[100].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AngAccId, 1);
  busInfo[100].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[100].numElems = 1;
  busInfo[101].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_AngAccId, 2);
  busInfo[101].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[101].numElems = 1;
  busInfo[102].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_CgId, 5);
  busInfo[102].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[102].numElems = 9;
  busInfo[103].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 1);
  busInfo[103].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForcesId);
  busInfo[103].numElems = 1;
  busInfo[104].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 0);
  busInfo[104].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForceId);
  busInfo[104].numElems = 1;
  busInfo[105].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForceId, 0);
  busInfo[105].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[105].numElems = 1;
  busInfo[106].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForceId, 1);
  busInfo[106].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[106].numElems = 1;
  busInfo[107].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForceId, 2);
  busInfo[107].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[107].numElems = 1;
  busInfo[108].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 1);
  busInfo[108].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForceId);
  busInfo[108].numElems = 1;
  busInfo[112].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 2);
  busInfo[112].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_LftRght_ForceId);
  busInfo[112].numElems = 1;
  busInfo[113].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_LftRght_ForceId, 0);
  busInfo[113].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForceId);
  busInfo[113].numElems = 1;
  busInfo[117].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_LftRght_ForceId, 1);
  busInfo[117].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForceId);
  busInfo[117].numElems = 1;
  busInfo[121].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 3);
  busInfo[121].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_LftRght_ForceId);
  busInfo[121].numElems = 1;
  busInfo[130].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 4);
  busInfo[130].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForceId);
  busInfo[130].numElems = 1;
  busInfo[134].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 5);
  busInfo[134].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_TiresId);
  busInfo[134].numElems = 1;
  busInfo[135].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_TiresId, 0);
  busInfo[135].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_LftRght_ForceId);
  busInfo[135].numElems = 1;
  busInfo[144].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_TiresId, 1);
  busInfo[144].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_LftRght_ForceId);
  busInfo[144].numElems = 1;
  busInfo[153].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 6);
  busInfo[153].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForceId);
  busInfo[153].numElems = 1;
  busInfo[157].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_ForcesId, 7);
  busInfo[157].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_ForceId);
  busInfo[157].numElems = 1;
  busInfo[161].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 2);
  busInfo[161].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_MomentsId);
  busInfo[161].numElems = 1;
  busInfo[162].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_MomentsId, 0);
  busInfo[162].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_MomentId);
  busInfo[162].numElems = 1;
  busInfo[163].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_MomentId, 0);
  busInfo[163].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[163].numElems = 1;
  busInfo[164].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_MomentId, 1);
  busInfo[164].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[164].numElems = 1;
  busInfo[165].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_MomentId, 2);
  busInfo[165].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[165].numElems = 1;
  busInfo[166].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_MomentsId, 1);
  busInfo[166].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_MomentId);
  busInfo[166].numElems = 1;
  busInfo[170].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_MomentsId, 2);
  busInfo[170].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_MomentId);
  busInfo[170].numElems = 1;
  busInfo[174].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_MomentsId, 3);
  busInfo[174].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_MomentId);
  busInfo[174].numElems = 1;
  busInfo[178].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 3);
  busInfo[178].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_LftRght_DispVelId);
  busInfo[178].numElems = 1;
  busInfo[179].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_LftRght_DispVelId, 0);
  busInfo[179].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_DispVelId);
  busInfo[179].numElems = 1;
  busInfo[180].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispVelId, 0);
  busInfo[180].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_DispId);
  busInfo[180].numElems = 1;
  busInfo[181].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispId, 0);
  busInfo[181].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[181].numElems = 1;
  busInfo[182].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispId, 1);
  busInfo[182].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[182].numElems = 1;
  busInfo[183].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispId, 2);
  busInfo[183].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[183].numElems = 1;
  busInfo[184].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispVelId, 1);
  busInfo[184].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_VelId);
  busInfo[184].numElems = 1;
  busInfo[188].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_LftRght_DispVelId, 1);
  busInfo[188].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_DispVelId);
  busInfo[188].numElems = 1;
  busInfo[197].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 4);
  busInfo[197].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_LftRght_DispVelId);
  busInfo[197].numElems = 1;
  busInfo[216].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 5);
  busInfo[216].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_DispVelId);
  busInfo[216].numElems = 1;
  busInfo[225].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 6);
  busInfo[225].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_PwrId);
  busInfo[225].numElems = 1;
  busInfo[226].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_PwrId, 0);
  busInfo[226].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[226].numElems = 1;
  busInfo[227].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_PwrId, 1);
  busInfo[227].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[227].numElems = 1;
  busInfo[228].offset = dtaGetDataTypeElementOffset(dta, bpath, Vehicle_BdyFrm_OutputId, 7);
  busInfo[228].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_DispVelAngId);
  busInfo[228].numElems = 1;
  busInfo[229].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispVelAngId, 0);
  busInfo[229].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_DispId);
  busInfo[229].numElems = 1;
  busInfo[233].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispVelAngId, 1);
  busInfo[233].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_VelId);
  busInfo[233].numElems = 1;
  busInfo[237].offset = dtaGetDataTypeElementOffset(dta, bpath, BdyFrm_DispVelAngId, 2);
  busInfo[237].elemSize = dtaGetDataTypeSize(dta, bpath, BdyFrm_AngleId);
  busInfo[237].numElems = 1;
  busInfo[239].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_OutputId, 0);
  busInfo[239].elemSize = dtaGetDataTypeSize(dta, bpath, Susp_VehId);
  busInfo[239].numElems = 1;
  busInfo[240].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_VehId, 0);
  busInfo[240].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[240].numElems = 12;
  busInfo[241].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_VehId, 1);
  busInfo[241].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[241].numElems = 12;
  busInfo[242].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_OutputId, 1);
  busInfo[242].elemSize = dtaGetDataTypeSize(dta, bpath, Susp_WhlId);
  busInfo[242].numElems = 1;
  busInfo[243].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_WhlId, 0);
  busInfo[243].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[243].numElems = 12;
  busInfo[244].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_WhlId, 1);
  busInfo[244].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[244].numElems = 4;
  busInfo[245].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_WhlId, 2);
  busInfo[245].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[245].numElems = 4;
  busInfo[246].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_WhlId, 3);
  busInfo[246].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[246].numElems = 12;
  busInfo[247].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_WhlId, 4);
  busInfo[247].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[247].numElems = 4;
  busInfo[248].offset = dtaGetDataTypeElementOffset(dta, bpath, Susp_WhlId, 5);
  busInfo[248].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[248].numElems = 12;
  busInfo[249].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_OutputId, 0);
  busInfo[249].elemSize = dtaGetDataTypeSize(dta, bpath, Wheels_TireFrame_OutputId);
  busInfo[249].numElems = 1;
  busInfo[250].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 0);
  busInfo[250].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[250].numElems = 4;
  busInfo[251].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 1);
  busInfo[251].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[251].numElems = 4;
  busInfo[252].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 2);
  busInfo[252].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[252].numElems = 4;
  busInfo[253].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 3);
  busInfo[253].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[253].numElems = 4;
  busInfo[254].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 4);
  busInfo[254].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[254].numElems = 4;
  busInfo[255].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 5);
  busInfo[255].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[255].numElems = 4;
  busInfo[256].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 6);
  busInfo[256].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[256].numElems = 4;
  busInfo[257].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 7);
  busInfo[257].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[257].numElems = 4;
  busInfo[258].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 8);
  busInfo[258].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[258].numElems = 4;
  busInfo[259].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 9);
  busInfo[259].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[259].numElems = 4;
  busInfo[260].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 10);
  busInfo[260].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[260].numElems = 4;
  busInfo[261].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 11);
  busInfo[261].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[261].numElems = 4;
  busInfo[262].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_TireFrame_OutputId, 12);
  busInfo[262].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[262].numElems = 4;
  busInfo[263].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_OutputId, 1);
  busInfo[263].elemSize = dtaGetDataTypeSize(dta, bpath, Wheels_Steer_OutputId);
  busInfo[263].numElems = 1;
  busInfo[264].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_Steer_OutputId, 0);
  busInfo[264].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[264].numElems = 4;
  busInfo[265].offset = dtaGetDataTypeElementOffset(dta, bpath, Wheels_Steer_OutputId, 1);
  busInfo[265].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[265].numElems = 4;
  busInfo[266].offset = dtaGetDataTypeElementOffset(dta, bpath, Steer_OutputId, 0);
  busInfo[266].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[266].numElems = 4;
  busInfo[267].offset = dtaGetDataTypeElementOffset(dta, bpath, Steer_OutputId, 1);
  busInfo[267].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[267].numElems = 1;
  busInfo[268].offset = dtaGetDataTypeElementOffset(dta, bpath, Steer_OutputId, 2);
  busInfo[268].elemSize = dtaGetDataTypeSize(dta, bpath, SS_DOUBLE);
  busInfo[268].numElems = 1;
  busInfo[269].elemSize = dtaGetDataTypeSize(dta, bpath, Ctrl_InputId);
  busInfo[269].numElems = 1;
  busInfo[270].elemSize = dtaGetDataTypeSize(dta, bpath, Vehicle_Body_OutputId);
  busInfo[270].numElems = 1;
  busInfo[271].elemSize = dtaGetDataTypeSize(dta, bpath, Susp_OutputId);
  busInfo[271].numElems = 1;
  busInfo[272].elemSize = dtaGetDataTypeSize(dta, bpath, Wheels_OutputId);
  busInfo[272].numElems = 1;
  busInfo[273].elemSize = dtaGetDataTypeSize(dta, bpath, Steer_OutputId);
  busInfo[273].numElems = 1;
  ssSetUserData(S, busInfo);

  /* Allocate memory for arrays or nested arrays of buses DWork pointers */
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int8_T *lic_path = (const int8_T *)mxGetData(PARAM_DEF0(S));
  const int8_T *par_path = (const int8_T *)mxGetData(PARAM_DEF1(S));
  dynamic_steer_sfunc_Start_wrapper(lic_path, p_width0, par_path, p_width1);
}

#endif /*  MDL_START */

/* Function: mdlOutputs =======================================================
 *
 */
static void mdlOutputs(SimStruct *S, int_T tid) {
  const char *driver_in = (char *)ssGetInputPortSignal(S, 0);
  const char *body_in = (char *)ssGetInputPortSignal(S, 1);
  const char *susp_in = (char *)ssGetInputPortSignal(S, 2);
  const char *wheel_in = (char *)ssGetInputPortSignal(S, 3);
  char *steer_out = (char *)ssGetOutputPortSignal(S, 0);
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int8_T *lic_path = (const int8_T *)mxGetData(PARAM_DEF0(S));
  const int8_T *par_path = (const int8_T *)mxGetData(PARAM_DEF1(S));
  busInfoStruct *busInfo = (busInfoStruct *)ssGetUserData(S);

  /* Temporary bus copy declarations */
  Ctrl_Input _driver_inBUS;
  Vehicle_Body_Output _body_inBUS;
  Susp_Output _susp_inBUS;
  Wheels_Output _wheel_inBUS;
  Steer_Output _steer_outBUS;
  slDataTypeAccess *dta = ssGetDataTypeAccess(S);
  const char *bpath = ssGetPath(S);

  /*Copy from Simulink to bus structure*/

  /*Copy from Simulink to _driver_inBUS for Input port 0*/
  (_driver_inBUS).acc_control_mode = *((uint8_T *)((char *)driver_in + busInfo[0].offset));
  (_driver_inBUS).brake_control_mode = *((uint8_T *)((char *)driver_in + busInfo[1].offset));
  (_driver_inBUS).steer_control_mode = *((uint8_T *)((char *)driver_in + busInfo[2].offset));
  (_driver_inBUS).target_acc_m_s2 = *((real_T *)((char *)driver_in + busInfo[3].offset));
  (_driver_inBUS).request_torque = *((real_T *)((char *)driver_in + busInfo[4].offset));
  (_driver_inBUS).brake_pressure_01 = *((real_T *)((char *)driver_in + busInfo[5].offset));
  (_driver_inBUS).steer_request_torque = *((real_T *)((char *)driver_in + busInfo[6].offset));
  (_driver_inBUS).steer_cmd_rad = *((real_T *)((char *)driver_in + busInfo[7].offset));
  (_driver_inBUS).gear_cmd__0N1D2R3P = *((uint8_T *)((char *)driver_in + busInfo[8].offset));

  /*Copy from Simulink to _body_inBUS for Input port 1*/
  (_body_inBUS).InertFrm.Cg.Disp.X =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[11].offset + busInfo[12].offset));
  (_body_inBUS).InertFrm.Cg.Disp.Y =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[11].offset + busInfo[13].offset));
  (_body_inBUS).InertFrm.Cg.Disp.Z =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[11].offset + busInfo[14].offset));
  (_body_inBUS).InertFrm.Cg.Vel.Xdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[15].offset + busInfo[16].offset));
  (_body_inBUS).InertFrm.Cg.Vel.Ydot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[15].offset + busInfo[17].offset));
  (_body_inBUS).InertFrm.Cg.Vel.Zdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[15].offset + busInfo[18].offset));
  (_body_inBUS).InertFrm.Cg.Ang.phi =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[19].offset + busInfo[20].offset));
  (_body_inBUS).InertFrm.Cg.Ang.theta =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[19].offset + busInfo[21].offset));
  (_body_inBUS).InertFrm.Cg.Ang.psi =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[10].offset + busInfo[19].offset + busInfo[22].offset));
  (_body_inBUS).InertFrm.FrntAxl.Lft.Disp.X =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[24].offset + busInfo[25].offset +
                   busInfo[12].offset));
  (_body_inBUS).InertFrm.FrntAxl.Lft.Disp.Y =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[24].offset + busInfo[25].offset +
                   busInfo[13].offset));
  (_body_inBUS).InertFrm.FrntAxl.Lft.Disp.Z =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[24].offset + busInfo[25].offset +
                   busInfo[14].offset));
  (_body_inBUS).InertFrm.FrntAxl.Lft.Vel.Xdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[24].offset + busInfo[29].offset +
                   busInfo[16].offset));
  (_body_inBUS).InertFrm.FrntAxl.Lft.Vel.Ydot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[24].offset + busInfo[29].offset +
                   busInfo[17].offset));
  (_body_inBUS).InertFrm.FrntAxl.Lft.Vel.Zdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[24].offset + busInfo[29].offset +
                   busInfo[18].offset));
  (_body_inBUS).InertFrm.FrntAxl.Rght.Disp.X =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[33].offset + busInfo[25].offset +
                   busInfo[12].offset));
  (_body_inBUS).InertFrm.FrntAxl.Rght.Disp.Y =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[33].offset + busInfo[25].offset +
                   busInfo[13].offset));
  (_body_inBUS).InertFrm.FrntAxl.Rght.Disp.Z =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[33].offset + busInfo[25].offset +
                   busInfo[14].offset));
  (_body_inBUS).InertFrm.FrntAxl.Rght.Vel.Xdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[33].offset + busInfo[29].offset +
                   busInfo[16].offset));
  (_body_inBUS).InertFrm.FrntAxl.Rght.Vel.Ydot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[33].offset + busInfo[29].offset +
                   busInfo[17].offset));
  (_body_inBUS).InertFrm.FrntAxl.Rght.Vel.Zdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[23].offset + busInfo[33].offset + busInfo[29].offset +
                   busInfo[18].offset));
  (_body_inBUS).InertFrm.RearAxl.Lft.Disp.X =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[24].offset + busInfo[25].offset +
                   busInfo[12].offset));
  (_body_inBUS).InertFrm.RearAxl.Lft.Disp.Y =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[24].offset + busInfo[25].offset +
                   busInfo[13].offset));
  (_body_inBUS).InertFrm.RearAxl.Lft.Disp.Z =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[24].offset + busInfo[25].offset +
                   busInfo[14].offset));
  (_body_inBUS).InertFrm.RearAxl.Lft.Vel.Xdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[24].offset + busInfo[29].offset +
                   busInfo[16].offset));
  (_body_inBUS).InertFrm.RearAxl.Lft.Vel.Ydot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[24].offset + busInfo[29].offset +
                   busInfo[17].offset));
  (_body_inBUS).InertFrm.RearAxl.Lft.Vel.Zdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[24].offset + busInfo[29].offset +
                   busInfo[18].offset));
  (_body_inBUS).InertFrm.RearAxl.Rght.Disp.X =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[33].offset + busInfo[25].offset +
                   busInfo[12].offset));
  (_body_inBUS).InertFrm.RearAxl.Rght.Disp.Y =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[33].offset + busInfo[25].offset +
                   busInfo[13].offset));
  (_body_inBUS).InertFrm.RearAxl.Rght.Disp.Z =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[33].offset + busInfo[25].offset +
                   busInfo[14].offset));
  (_body_inBUS).InertFrm.RearAxl.Rght.Vel.Xdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[33].offset + busInfo[29].offset +
                   busInfo[16].offset));
  (_body_inBUS).InertFrm.RearAxl.Rght.Vel.Ydot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[33].offset + busInfo[29].offset +
                   busInfo[17].offset));
  (_body_inBUS).InertFrm.RearAxl.Rght.Vel.Zdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[42].offset + busInfo[33].offset + busInfo[29].offset +
                   busInfo[18].offset));
  (_body_inBUS).InertFrm.Hitch.Disp.X =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[61].offset + busInfo[25].offset + busInfo[12].offset));
  (_body_inBUS).InertFrm.Hitch.Disp.Y =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[61].offset + busInfo[25].offset + busInfo[13].offset));
  (_body_inBUS).InertFrm.Hitch.Disp.Z =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[61].offset + busInfo[25].offset + busInfo[14].offset));
  (_body_inBUS).InertFrm.Hitch.Vel.Xdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[61].offset + busInfo[29].offset + busInfo[16].offset));
  (_body_inBUS).InertFrm.Hitch.Vel.Ydot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[61].offset + busInfo[29].offset + busInfo[17].offset));
  (_body_inBUS).InertFrm.Hitch.Vel.Zdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[61].offset + busInfo[29].offset + busInfo[18].offset));
  (_body_inBUS).InertFrm.Geom.Disp.X =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[70].offset + busInfo[25].offset + busInfo[12].offset));
  (_body_inBUS).InertFrm.Geom.Disp.Y =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[70].offset + busInfo[25].offset + busInfo[13].offset));
  (_body_inBUS).InertFrm.Geom.Disp.Z =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[70].offset + busInfo[25].offset + busInfo[14].offset));
  (_body_inBUS).InertFrm.Geom.Vel.Xdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[70].offset + busInfo[29].offset + busInfo[16].offset));
  (_body_inBUS).InertFrm.Geom.Vel.Ydot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[70].offset + busInfo[29].offset + busInfo[17].offset));
  (_body_inBUS).InertFrm.Geom.Vel.Zdot =
      *((real_T *)((char *)body_in + busInfo[9].offset + busInfo[70].offset + busInfo[29].offset + busInfo[18].offset));
  (_body_inBUS).BdyFrm.Cg.Vel.xdot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[81].offset + busInfo[82].offset));
  (_body_inBUS).BdyFrm.Cg.Vel.ydot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[81].offset + busInfo[83].offset));
  (_body_inBUS).BdyFrm.Cg.Vel.zdot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[81].offset + busInfo[84].offset));
  (_body_inBUS).BdyFrm.Cg.Ang.Beta = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[85].offset + busInfo[86].offset));
  (_body_inBUS).BdyFrm.Cg.AngVel.p = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[87].offset + busInfo[88].offset));
  (_body_inBUS).BdyFrm.Cg.AngVel.q = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[87].offset + busInfo[89].offset));
  (_body_inBUS).BdyFrm.Cg.AngVel.r = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[87].offset + busInfo[90].offset));
  (_body_inBUS).BdyFrm.Cg.Acc.ax = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[91].offset + busInfo[92].offset));
  (_body_inBUS).BdyFrm.Cg.Acc.ay = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[91].offset + busInfo[93].offset));
  (_body_inBUS).BdyFrm.Cg.Acc.az = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[91].offset + busInfo[94].offset));
  (_body_inBUS).BdyFrm.Cg.Acc.xddot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[91].offset + busInfo[95].offset));
  (_body_inBUS).BdyFrm.Cg.Acc.yddot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[91].offset + busInfo[96].offset));
  (_body_inBUS).BdyFrm.Cg.Acc.zddot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[91].offset + busInfo[97].offset));
  (_body_inBUS).BdyFrm.Cg.AngAcc.pdot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[98].offset + busInfo[99].offset));
  (_body_inBUS).BdyFrm.Cg.AngAcc.qdot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[98].offset + busInfo[100].offset));
  (_body_inBUS).BdyFrm.Cg.AngAcc.rdot = *(
      (real_T *)((char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[98].offset + busInfo[101].offset));
  (void)memcpy((_body_inBUS).BdyFrm.Cg.DCM,
               (char *)body_in + busInfo[79].offset + busInfo[80].offset + busInfo[102].offset,
               9 * busInfo[102].elemSize);
  (_body_inBUS).BdyFrm.Forces.Body.Fx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                     busInfo[104].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Body.Fy = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                     busInfo[104].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Body.Fz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                     busInfo[104].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Ext.Fx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                    busInfo[108].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Ext.Fy = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                    busInfo[108].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Ext.Fz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                    busInfo[108].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.FrntAxl.Lft.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[112].offset +
                   busInfo[113].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.FrntAxl.Lft.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[112].offset +
                   busInfo[113].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.FrntAxl.Lft.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[112].offset +
                   busInfo[113].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.FrntAxl.Rght.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[112].offset +
                   busInfo[117].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.FrntAxl.Rght.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[112].offset +
                   busInfo[117].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.FrntAxl.Rght.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[112].offset +
                   busInfo[117].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.RearAxl.Lft.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[121].offset +
                   busInfo[113].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.RearAxl.Lft.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[121].offset +
                   busInfo[113].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.RearAxl.Lft.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[121].offset +
                   busInfo[113].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.RearAxl.Rght.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[121].offset +
                   busInfo[117].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.RearAxl.Rght.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[121].offset +
                   busInfo[117].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.RearAxl.Rght.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[121].offset +
                   busInfo[117].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Hitch.Fx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                      busInfo[130].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Hitch.Fy = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                      busInfo[130].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Hitch.Fz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                      busInfo[130].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.FrntTires.Lft.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[135].offset + busInfo[113].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.FrntTires.Lft.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[135].offset + busInfo[113].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.FrntTires.Lft.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[135].offset + busInfo[113].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.FrntTires.Rght.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[135].offset + busInfo[117].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.FrntTires.Rght.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[135].offset + busInfo[117].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.FrntTires.Rght.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[135].offset + busInfo[117].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.RearTires.Lft.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[144].offset + busInfo[113].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.RearTires.Lft.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[144].offset + busInfo[113].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.RearTires.Lft.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[144].offset + busInfo[113].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.RearTires.Rght.Fx =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[144].offset + busInfo[117].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.RearTires.Rght.Fy =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[144].offset + busInfo[117].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Tires.RearTires.Rght.Fz =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset + busInfo[134].offset +
                   busInfo[144].offset + busInfo[117].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Drag.Fx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                     busInfo[153].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Drag.Fy = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                     busInfo[153].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Drag.Fz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                     busInfo[153].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Forces.Grvty.Fx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                      busInfo[157].offset + busInfo[105].offset));
  (_body_inBUS).BdyFrm.Forces.Grvty.Fy = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                      busInfo[157].offset + busInfo[106].offset));
  (_body_inBUS).BdyFrm.Forces.Grvty.Fz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[103].offset +
                                                      busInfo[157].offset + busInfo[107].offset));
  (_body_inBUS).BdyFrm.Moments.Body.Mx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                      busInfo[162].offset + busInfo[163].offset));
  (_body_inBUS).BdyFrm.Moments.Body.My = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                      busInfo[162].offset + busInfo[164].offset));
  (_body_inBUS).BdyFrm.Moments.Body.Mz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                      busInfo[162].offset + busInfo[165].offset));
  (_body_inBUS).BdyFrm.Moments.Drag.Mx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                      busInfo[166].offset + busInfo[163].offset));
  (_body_inBUS).BdyFrm.Moments.Drag.My = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                      busInfo[166].offset + busInfo[164].offset));
  (_body_inBUS).BdyFrm.Moments.Drag.Mz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                      busInfo[166].offset + busInfo[165].offset));
  (_body_inBUS).BdyFrm.Moments.Ext.Mx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                     busInfo[170].offset + busInfo[163].offset));
  (_body_inBUS).BdyFrm.Moments.Ext.My = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                     busInfo[170].offset + busInfo[164].offset));
  (_body_inBUS).BdyFrm.Moments.Ext.Mz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                     busInfo[170].offset + busInfo[165].offset));
  (_body_inBUS).BdyFrm.Moments.Hitch.Mx = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                       busInfo[174].offset + busInfo[163].offset));
  (_body_inBUS).BdyFrm.Moments.Hitch.My = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                       busInfo[174].offset + busInfo[164].offset));
  (_body_inBUS).BdyFrm.Moments.Hitch.Mz = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[161].offset +
                                                       busInfo[174].offset + busInfo[165].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Lft.Disp.x =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[179].offset +
                   busInfo[180].offset + busInfo[181].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Lft.Disp.y =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[179].offset +
                   busInfo[180].offset + busInfo[182].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Lft.Disp.z =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[179].offset +
                   busInfo[180].offset + busInfo[183].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Lft.Vel.xdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[179].offset +
                   busInfo[184].offset + busInfo[82].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Lft.Vel.ydot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[179].offset +
                   busInfo[184].offset + busInfo[83].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Lft.Vel.zdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[179].offset +
                   busInfo[184].offset + busInfo[84].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Rght.Disp.x =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[188].offset +
                   busInfo[180].offset + busInfo[181].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Rght.Disp.y =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[188].offset +
                   busInfo[180].offset + busInfo[182].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Rght.Disp.z =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[188].offset +
                   busInfo[180].offset + busInfo[183].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Rght.Vel.xdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[188].offset +
                   busInfo[184].offset + busInfo[82].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Rght.Vel.ydot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[188].offset +
                   busInfo[184].offset + busInfo[83].offset));
  (_body_inBUS).BdyFrm.FrntAxl.Rght.Vel.zdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[178].offset + busInfo[188].offset +
                   busInfo[184].offset + busInfo[84].offset));
  (_body_inBUS).BdyFrm.RearAxl.Lft.Disp.x =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[179].offset +
                   busInfo[180].offset + busInfo[181].offset));
  (_body_inBUS).BdyFrm.RearAxl.Lft.Disp.y =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[179].offset +
                   busInfo[180].offset + busInfo[182].offset));
  (_body_inBUS).BdyFrm.RearAxl.Lft.Disp.z =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[179].offset +
                   busInfo[180].offset + busInfo[183].offset));
  (_body_inBUS).BdyFrm.RearAxl.Lft.Vel.xdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[179].offset +
                   busInfo[184].offset + busInfo[82].offset));
  (_body_inBUS).BdyFrm.RearAxl.Lft.Vel.ydot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[179].offset +
                   busInfo[184].offset + busInfo[83].offset));
  (_body_inBUS).BdyFrm.RearAxl.Lft.Vel.zdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[179].offset +
                   busInfo[184].offset + busInfo[84].offset));
  (_body_inBUS).BdyFrm.RearAxl.Rght.Disp.x =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[188].offset +
                   busInfo[180].offset + busInfo[181].offset));
  (_body_inBUS).BdyFrm.RearAxl.Rght.Disp.y =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[188].offset +
                   busInfo[180].offset + busInfo[182].offset));
  (_body_inBUS).BdyFrm.RearAxl.Rght.Disp.z =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[188].offset +
                   busInfo[180].offset + busInfo[183].offset));
  (_body_inBUS).BdyFrm.RearAxl.Rght.Vel.xdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[188].offset +
                   busInfo[184].offset + busInfo[82].offset));
  (_body_inBUS).BdyFrm.RearAxl.Rght.Vel.ydot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[188].offset +
                   busInfo[184].offset + busInfo[83].offset));
  (_body_inBUS).BdyFrm.RearAxl.Rght.Vel.zdot =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[197].offset + busInfo[188].offset +
                   busInfo[184].offset + busInfo[84].offset));
  (_body_inBUS).BdyFrm.Hitch.Disp.x = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[216].offset +
                                                   busInfo[180].offset + busInfo[181].offset));
  (_body_inBUS).BdyFrm.Hitch.Disp.y = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[216].offset +
                                                   busInfo[180].offset + busInfo[182].offset));
  (_body_inBUS).BdyFrm.Hitch.Disp.z = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[216].offset +
                                                   busInfo[180].offset + busInfo[183].offset));
  (_body_inBUS).BdyFrm.Hitch.Vel.xdot = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[216].offset +
                                                     busInfo[184].offset + busInfo[82].offset));
  (_body_inBUS).BdyFrm.Hitch.Vel.ydot = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[216].offset +
                                                     busInfo[184].offset + busInfo[83].offset));
  (_body_inBUS).BdyFrm.Hitch.Vel.zdot = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[216].offset +
                                                     busInfo[184].offset + busInfo[84].offset));
  (_body_inBUS).BdyFrm.Pwr.PwrExt =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[225].offset + busInfo[226].offset));
  (_body_inBUS).BdyFrm.Pwr.Drag =
      *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[225].offset + busInfo[227].offset));
  (_body_inBUS).BdyFrm.Geom.Disp.x = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[228].offset +
                                                  busInfo[229].offset + busInfo[181].offset));
  (_body_inBUS).BdyFrm.Geom.Disp.y = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[228].offset +
                                                  busInfo[229].offset + busInfo[182].offset));
  (_body_inBUS).BdyFrm.Geom.Disp.z = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[228].offset +
                                                  busInfo[229].offset + busInfo[183].offset));
  (_body_inBUS).BdyFrm.Geom.Vel.xdot = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[228].offset +
                                                    busInfo[233].offset + busInfo[82].offset));
  (_body_inBUS).BdyFrm.Geom.Vel.ydot = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[228].offset +
                                                    busInfo[233].offset + busInfo[83].offset));
  (_body_inBUS).BdyFrm.Geom.Vel.zdot = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[228].offset +
                                                    busInfo[233].offset + busInfo[84].offset));
  (_body_inBUS).BdyFrm.Geom.Ang.Beta = *((real_T *)((char *)body_in + busInfo[79].offset + busInfo[228].offset +
                                                    busInfo[237].offset + busInfo[86].offset));

  /*Copy from Simulink to _susp_inBUS for Input port 2*/
  (void)memcpy((_susp_inBUS).Veh.F, (char *)susp_in + busInfo[239].offset + busInfo[240].offset,
               12 * busInfo[240].elemSize);
  (void)memcpy((_susp_inBUS).Veh.M, (char *)susp_in + busInfo[239].offset + busInfo[241].offset,
               12 * busInfo[241].elemSize);
  (void)memcpy((_susp_inBUS).Whl.F, (char *)susp_in + busInfo[242].offset + busInfo[243].offset,
               12 * busInfo[243].elemSize);
  (void)memcpy((_susp_inBUS).Whl.xdot, (char *)susp_in + busInfo[242].offset + busInfo[244].offset,
               4 * busInfo[244].elemSize);
  (void)memcpy((_susp_inBUS).Whl.ydot, (char *)susp_in + busInfo[242].offset + busInfo[245].offset,
               4 * busInfo[245].elemSize);
  (void)memcpy((_susp_inBUS).Whl.Ang, (char *)susp_in + busInfo[242].offset + busInfo[246].offset,
               12 * busInfo[246].elemSize);
  (void)memcpy((_susp_inBUS).Whl.z, (char *)susp_in + busInfo[242].offset + busInfo[247].offset,
               4 * busInfo[247].elemSize);
  (void)memcpy((_susp_inBUS).Whl.AngVel, (char *)susp_in + busInfo[242].offset + busInfo[248].offset,
               12 * busInfo[248].elemSize);

  /*Copy from Simulink to _wheel_inBUS for Input port 3*/
  (void)memcpy((_wheel_inBUS).TireFrame.Omega, (char *)wheel_in + busInfo[249].offset + busInfo[250].offset,
               4 * busInfo[250].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Fx, (char *)wheel_in + busInfo[249].offset + busInfo[251].offset,
               4 * busInfo[251].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Fy, (char *)wheel_in + busInfo[249].offset + busInfo[252].offset,
               4 * busInfo[252].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Fz, (char *)wheel_in + busInfo[249].offset + busInfo[253].offset,
               4 * busInfo[253].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Mx, (char *)wheel_in + busInfo[249].offset + busInfo[254].offset,
               4 * busInfo[254].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.My, (char *)wheel_in + busInfo[249].offset + busInfo[255].offset,
               4 * busInfo[255].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Mz, (char *)wheel_in + busInfo[249].offset + busInfo[256].offset,
               4 * busInfo[256].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Re, (char *)wheel_in + busInfo[249].offset + busInfo[257].offset,
               4 * busInfo[257].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.dz, (char *)wheel_in + busInfo[249].offset + busInfo[258].offset,
               4 * busInfo[258].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.z, (char *)wheel_in + busInfo[249].offset + busInfo[259].offset,
               4 * busInfo[259].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.zdot, (char *)wheel_in + busInfo[249].offset + busInfo[260].offset,
               4 * busInfo[260].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Kappa, (char *)wheel_in + busInfo[249].offset + busInfo[261].offset,
               4 * busInfo[261].elemSize);
  (void)memcpy((_wheel_inBUS).TireFrame.Alpha, (char *)wheel_in + busInfo[249].offset + busInfo[262].offset,
               4 * busInfo[262].elemSize);
  (void)memcpy((_wheel_inBUS).Steering.WhlAng, (char *)wheel_in + busInfo[263].offset + busInfo[264].offset,
               4 * busInfo[264].elemSize);
  (void)memcpy((_wheel_inBUS).Steering.WhlCmb, (char *)wheel_in + busInfo[263].offset + busInfo[265].offset,
               4 * busInfo[265].elemSize);
  dynamic_steer_sfunc_Outputs_wrapper(&_driver_inBUS, &_body_inBUS, &_susp_inBUS, &_wheel_inBUS, &_steer_outBUS,
                                      lic_path, p_width0, par_path, p_width1);

  /*Copy from bus structure to Simulink*/

  /*Copy from _steer_outBUS to Simulink for Output port 0*/
  (void)memcpy((char *)steer_out + busInfo[266].offset, (_steer_outBUS).wheel_angle, 4 * busInfo[266].elemSize);
  *((real_T *)((char *)steer_out + busInfo[267].offset)) = (_steer_outBUS).steerWheelFeedback;
  *((real_T *)((char *)steer_out + busInfo[268].offset)) = (_steer_outBUS).steerTorqueInput;
}

/* Function: mdlTerminate =====================================================
 * Abstract:
 *    In this function, you should perform any actions that are necessary
 *    at the termination of a simulation.  For example, if memory was
 *    allocated in mdlStart, this is the place to free it.
 */
static void mdlTerminate(SimStruct *S) {
  const int_T p_width0 = mxGetNumberOfElements(PARAM_DEF0(S));
  const int_T p_width1 = mxGetNumberOfElements(PARAM_DEF1(S));
  const int8_T *lic_path = (const int8_T *)mxGetData(PARAM_DEF0(S));
  const int8_T *par_path = (const int8_T *)mxGetData(PARAM_DEF1(S));
  dynamic_steer_sfunc_Terminate_wrapper(lic_path, p_width0, par_path, p_width1);

  /* Free stored bus information */
  busInfoStruct *busInfo = (busInfoStruct *)ssGetUserData(S);
  if (busInfo != NULL) {
    free(busInfo);
  }

  if (!isBusDWorkPresent) {
  }
}

static int_T GetRTWEnvironmentMode(SimStruct *S) {
  int_T status = -1;
  mxArray *plhs[1];
  mxArray *prhs[1];
  mxArray *err;

  /*
   * Get the name of the Simulink block diagram
   */
  prhs[0] = mxCreateString(ssGetBlockDiagramName(S));
  plhs[0] = NULL;

  /*
   * Call "isSimulationTarget = rtwenvironmentmode(modelName)" in MATLAB
   */
  err = mexCallMATLABWithTrap(1, plhs, 1, prhs, "rtwenvironmentmode");
  mxDestroyArray(prhs[0]);

  /*
   * Set the error status if an error occurred
   */
  if (err) {
    if (plhs[0]) {
      mxDestroyArray(plhs[0]);
      plhs[0] = NULL;
    }

    ssSetLocalErrorStatus(S, "Unknown error during call to 'rtwenvironmentmode'.");
    return -1;
  }

  /*
   * Get the value returned by rtwenvironmentmode(modelName)
   */
  if (plhs[0]) {
    status = (int_T)(mxGetScalar(plhs[0]) != 0);
    mxDestroyArray(plhs[0]);
    plhs[0] = NULL;
  }

  return (status);
}

#ifdef MATLAB_MEX_FILE  /* Is this file being compiled as a MEX-file? */
#  include "simulink.c" /* MEX-file interface mechanism */
#else
#  include "cg_sfun.h" /* Code generation registration function */
#endif
