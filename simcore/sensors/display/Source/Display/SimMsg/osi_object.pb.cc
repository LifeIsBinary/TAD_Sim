// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_object.proto
#pragma warning (disable : 4125)

#include "osi_object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseMoving_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseStationary_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalReference_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MovingObject_VehicleClassification_LightState_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpatialSignalStrength_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StatePoint_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StationaryObject_Classification_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WavelengthData_osi_5fcommon_2eproto;
namespace osi3 {
class StationaryObject_Classification_EmittingStructureAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StationaryObject_Classification_EmittingStructureAttribute> _instance;
} _StationaryObject_Classification_EmittingStructureAttribute_default_instance_;
class StationaryObject_ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StationaryObject_Classification> _instance;
} _StationaryObject_Classification_default_instance_;
class StationaryObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StationaryObject> _instance;
} _StationaryObject_default_instance_;
class MovingObject_VehicleAttributes_WheelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovingObject_VehicleAttributes_WheelData> _instance;
} _MovingObject_VehicleAttributes_WheelData_default_instance_;
class MovingObject_VehicleAttributesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovingObject_VehicleAttributes> _instance;
} _MovingObject_VehicleAttributes_default_instance_;
class MovingObject_MovingObjectClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovingObject_MovingObjectClassification> _instance;
} _MovingObject_MovingObjectClassification_default_instance_;
class MovingObject_VehicleClassification_LightStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovingObject_VehicleClassification_LightState> _instance;
} _MovingObject_VehicleClassification_LightState_default_instance_;
class MovingObject_VehicleClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovingObject_VehicleClassification> _instance;
} _MovingObject_VehicleClassification_default_instance_;
class MovingObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovingObject> _instance;
} _MovingObject_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_MovingObject_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_MovingObject_default_instance_;
    new (ptr) ::osi3::MovingObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_MovingObject_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_MovingObject_osi_5fobject_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_BaseMoving_osi_5fcommon_2eproto.base,
      &scc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto.base,
      &scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto.base,
      &scc_info_StatePoint_osi_5fcommon_2eproto.base,
      &scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_MovingObject_MovingObjectClassification_default_instance_;
    new (ptr) ::osi3::MovingObject_MovingObjectClassification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_MovingObjectClassification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_MovingObject_VehicleAttributes_default_instance_;
    new (ptr) ::osi3::MovingObject_VehicleAttributes();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_VehicleAttributes::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_MovingObject_VehicleAttributes_WheelData_default_instance_;
    new (ptr) ::osi3::MovingObject_VehicleAttributes_WheelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_VehicleAttributes_WheelData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_Orientation3d_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_MovingObject_VehicleClassification_default_instance_;
    new (ptr) ::osi3::MovingObject_VehicleClassification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_VehicleClassification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto}, {
      &scc_info_MovingObject_VehicleClassification_LightState_osi_5fobject_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_MovingObject_VehicleClassification_LightState_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_MovingObject_VehicleClassification_LightState_default_instance_;
    new (ptr) ::osi3::MovingObject_VehicleClassification_LightState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::MovingObject_VehicleClassification_LightState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MovingObject_VehicleClassification_LightState_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MovingObject_VehicleClassification_LightState_osi_5fobject_2eproto}, {}};

static void InitDefaultsscc_info_StationaryObject_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_StationaryObject_default_instance_;
    new (ptr) ::osi3::StationaryObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::StationaryObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StationaryObject_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_StationaryObject_osi_5fobject_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,
      &scc_info_StationaryObject_Classification_osi_5fobject_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_StationaryObject_Classification_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_StationaryObject_Classification_default_instance_;
    new (ptr) ::osi3::StationaryObject_Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::StationaryObject_Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StationaryObject_Classification_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_StationaryObject_Classification_osi_5fobject_2eproto}, {
      &scc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_StationaryObject_Classification_EmittingStructureAttribute_default_instance_;
    new (ptr) ::osi3::StationaryObject_Classification_EmittingStructureAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::StationaryObject_Classification_EmittingStructureAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto}, {
      &scc_info_WavelengthData_osi_5fcommon_2eproto.base,
      &scc_info_SpatialSignalStrength_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fobject_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fobject_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fobject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification_EmittingStructureAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification_EmittingStructureAttribute, wavelength_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification_EmittingStructureAttribute, emitted_spatial_signal_strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, material_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, density_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, color_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, emitting_structure_attribute_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, assigned_lane_percentage_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject_Classification, logical_lane_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::StationaryObject, color_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, axle_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, index_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, wheel_radius_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, rim_radius_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, width_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, rotation_rate_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes_WheelData, friction_coefficient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, driver_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, radius_wheel_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, number_wheels_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, bbcenter_to_rear_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, bbcenter_to_front_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, ground_clearance_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, wheel_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleAttributes, steering_wheel_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_MovingObjectClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_MovingObjectClassification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_MovingObjectClassification, assigned_lane_percentage_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_MovingObjectClassification, logical_lane_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, indicator_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, front_fog_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, rear_fog_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, head_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, high_beam_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, reversing_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, brake_light_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, license_plate_illumination_rear_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, emergency_vehicle_illumination_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification_LightState, service_vehicle_illumination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, light_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, has_trailer_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, trailer_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject_VehicleClassification, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, vehicle_attributes_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, vehicle_classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, future_trajectory_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, moving_object_classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::MovingObject, color_description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::StationaryObject_Classification_EmittingStructureAttribute)},
  { 7, -1, sizeof(::osi3::StationaryObject_Classification)},
  { 20, -1, sizeof(::osi3::StationaryObject)},
  { 31, -1, sizeof(::osi3::MovingObject_VehicleAttributes_WheelData)},
  { 46, -1, sizeof(::osi3::MovingObject_VehicleAttributes)},
  { 59, -1, sizeof(::osi3::MovingObject_MovingObjectClassification)},
  { 67, -1, sizeof(::osi3::MovingObject_VehicleClassification_LightState)},
  { 82, -1, sizeof(::osi3::MovingObject_VehicleClassification)},
  { 92, -1, sizeof(::osi3::MovingObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_StationaryObject_Classification_EmittingStructureAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_StationaryObject_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_StationaryObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleAttributes_WheelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleAttributes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_MovingObjectClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleClassification_LightState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_VehicleClassification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_MovingObject_default_instance_),
};

const char descriptor_table_protodef_osi_5fobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020osi_object.proto\022\004osi3\032\020osi_common.pro"
  "to\"\374\016\n\020StationaryObject\022\034\n\002id\030\001 \001(\0132\020.os"
  "i3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseS"
  "tationary\022=\n\016classification\030\003 \001(\0132%.osi3"
  ".StationaryObject.Classification\022\027\n\017mode"
  "l_reference\030\004 \001(\t\0221\n\020source_reference\030\005 "
  "\003(\0132\027.osi3.ExternalReference\0221\n\021color_de"
  "scription\030\006 \001(\0132\026.osi3.ColorDescription\032"
  "\347\014\n\016Classification\0228\n\004type\030\001 \001(\0162*.osi3."
  "StationaryObject.Classification.Type\022@\n\010"
  "material\030\002 \001(\0162..osi3.StationaryObject.C"
  "lassification.Material\022>\n\007density\030\003 \001(\0162"
  "-.osi3.StationaryObject.Classification.D"
  "ensity\022:\n\005color\030\004 \001(\0162+.osi3.StationaryO"
  "bject.Classification.Color\022f\n\034emitting_s"
  "tructure_attribute\030\005 \001(\0132@.osi3.Stationa"
  "ryObject.Classification.EmittingStructur"
  "eAttribute\022*\n\020assigned_lane_id\030\006 \003(\0132\020.o"
  "si3.Identifier\022 \n\030assigned_lane_percenta"
  "ge\030\007 \003(\001\022<\n\027logical_lane_assignment\030\010 \003("
  "\0132\033.osi3.LogicalLaneAssignment\032\221\001\n\032Emitt"
  "ingStructureAttribute\022-\n\017wavelength_data"
  "\030\001 \003(\0132\024.osi3.WavelengthData\022D\n\037emitted_"
  "spatial_signal_strength\030\003 \003(\0132\033.osi3.Spa"
  "tialSignalStrength\"\250\003\n\004Type\022\020\n\014TYPE_UNKN"
  "OWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\017\n\013TYPE_BRIDGE\020\002\022\021"
  "\n\rTYPE_BUILDING\020\003\022\r\n\tTYPE_POLE\020\004\022\016\n\nTYPE"
  "_PYLON\020\005\022\023\n\017TYPE_DELINEATOR\020\006\022\r\n\tTYPE_TR"
  "EE\020\007\022\020\n\014TYPE_BARRIER\020\010\022\023\n\017TYPE_VEGETATIO"
  "N\020\t\022\022\n\016TYPE_CURBSTONE\020\n\022\r\n\tTYPE_WALL\020\013\022\033"
  "\n\027TYPE_VERTICAL_STRUCTURE\020\014\022\036\n\032TYPE_RECT"
  "ANGULAR_STRUCTURE\020\r\022\033\n\027TYPE_OVERHEAD_STR"
  "UCTURE\020\016\022\035\n\031TYPE_REFLECTIVE_STRUCTURE\020\017\022"
  "\"\n\036TYPE_CONSTRUCTION_SITE_ELEMENT\020\020\022\023\n\017T"
  "YPE_SPEED_BUMP\020\021\022\033\n\027TYPE_EMITTING_STRUCT"
  "URE\020\022\"\301\001\n\010Material\022\024\n\020MATERIAL_UNKNOWN\020\000"
  "\022\022\n\016MATERIAL_OTHER\020\001\022\021\n\rMATERIAL_WOOD\020\002\022"
  "\024\n\020MATERIAL_PLASTIC\020\003\022\025\n\021MATERIAL_CONCRE"
  "TE\020\004\022\022\n\016MATERIAL_METAL\020\005\022\022\n\016MATERIAL_STO"
  "NE\020\006\022\021\n\rMATERIAL_GLAS\020\007\022\020\n\014MATERIAL_MUD\020"
  "\010\"\237\001\n\007Density\022\023\n\017DENSITY_UNKNOWN\020\000\022\021\n\rDE"
  "NSITY_OTHER\020\001\022\021\n\rDENSITY_SOLID\020\002\022\026\n\022DENS"
  "ITY_SMALL_MESH\020\003\022\027\n\023DENSITY_MEDIAN_MESH\020"
  "\004\022\026\n\022DENSITY_LARGE_MESH\020\005\022\020\n\014DENSITY_OPE"
  "N\020\006\"\303\001\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013COLO"
  "R_OTHER\020\001\022\020\n\014COLOR_YELLOW\020\002\022\017\n\013COLOR_GRE"
  "EN\020\003\022\016\n\nCOLOR_BLUE\020\004\022\020\n\014COLOR_VIOLET\020\005\022\r"
  "\n\tCOLOR_RED\020\006\022\020\n\014COLOR_ORANGE\020\007\022\017\n\013COLOR"
  "_BLACK\020\010\022\016\n\nCOLOR_GREY\020\t\022\017\n\013COLOR_WHITE\020"
  "\n\"\241\036\n\014MovingObject\022\034\n\002id\030\001 \001(\0132\020.osi3.Id"
  "entifier\022\036\n\004base\030\002 \001(\0132\020.osi3.BaseMoving"
  "\022%\n\004type\030\003 \001(\0162\027.osi3.MovingObject.Type\022"
  "*\n\020assigned_lane_id\030\004 \003(\0132\020.osi3.Identif"
  "ier\022@\n\022vehicle_attributes\030\005 \001(\0132$.osi3.M"
  "ovingObject.VehicleAttributes\022H\n\026vehicle"
  "_classification\030\006 \001(\0132(.osi3.MovingObjec"
  "t.VehicleClassification\022\027\n\017model_referen"
  "ce\030\007 \001(\t\022+\n\021future_trajectory\030\010 \003(\0132\020.os"
  "i3.StatePoint\022S\n\034moving_object_classific"
  "ation\030\t \001(\0132-.osi3.MovingObject.MovingOb"
  "jectClassification\0221\n\020source_reference\030\n"
  " \003(\0132\027.osi3.ExternalReference\0221\n\021color_d"
  "escription\030\013 \001(\0132\026.osi3.ColorDescription"
  "\032\264\004\n\021VehicleAttributes\022#\n\tdriver_id\030\001 \001("
  "\0132\020.osi3.Identifier\022\024\n\014radius_wheel\030\002 \001("
  "\001\022\025\n\rnumber_wheels\030\003 \001(\r\022(\n\020bbcenter_to_"
  "rear\030\004 \001(\0132\016.osi3.Vector3d\022)\n\021bbcenter_t"
  "o_front\030\005 \001(\0132\016.osi3.Vector3d\022\030\n\020ground_"
  "clearance\030\006 \001(\001\022B\n\nwheel_data\030\007 \003(\0132..os"
  "i3.MovingObject.VehicleAttributes.WheelD"
  "ata\022\034\n\024steering_wheel_angle\030\010 \001(\001\032\373\001\n\tWh"
  "eelData\022\014\n\004axle\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022 \n\010"
  "position\030\003 \001(\0132\016.osi3.Vector3d\022\024\n\014wheel_"
  "radius\030\004 \001(\001\022\022\n\nrim_radius\030\005 \001(\001\022\r\n\005widt"
  "h\030\006 \001(\001\022(\n\013orientation\030\007 \001(\0132\023.osi3.Orie"
  "ntation3d\022\025\n\rrotation_rate\030\010 \001(\001\022\027\n\017mode"
  "l_reference\030\t \001(\t\022\034\n\024friction_coefficien"
  "t\030\n \001(\001\032\250\001\n\032MovingObjectClassification\022*"
  "\n\020assigned_lane_id\030\001 \003(\0132\020.osi3.Identifi"
  "er\022 \n\030assigned_lane_percentage\030\002 \003(\001\022<\n\027"
  "logical_lane_assignment\030\003 \003(\0132\033.osi3.Log"
  "icalLaneAssignment\032\256\023\n\025VehicleClassifica"
  "tion\022;\n\004type\030\001 \001(\0162-.osi3.MovingObject.V"
  "ehicleClassification.Type\022H\n\013light_state"
  "\030\002 \001(\01323.osi3.MovingObject.VehicleClassi"
  "fication.LightState\022\023\n\013has_trailer\030\003 \001(\010"
  "\022$\n\ntrailer_id\030\004 \001(\0132\020.osi3.Identifier\022;"
  "\n\004role\030\005 \001(\0162-.osi3.MovingObject.Vehicle"
  "Classification.Role\032\323\014\n\nLightState\022[\n\017in"
  "dicator_state\030\001 \001(\0162B.osi3.MovingObject."
  "VehicleClassification.LightState.Indicat"
  "orState\022^\n\017front_fog_light\030\002 \001(\0162E.osi3."
  "MovingObject.VehicleClassification.Light"
  "State.GenericLightState\022]\n\016rear_fog_ligh"
  "t\030\003 \001(\0162E.osi3.MovingObject.VehicleClass"
  "ification.LightState.GenericLightState\022Y"
  "\n\nhead_light\030\004 \001(\0162E.osi3.MovingObject.V"
  "ehicleClassification.LightState.GenericL"
  "ightState\022X\n\thigh_beam\030\005 \001(\0162E.osi3.Movi"
  "ngObject.VehicleClassification.LightStat"
  "e.GenericLightState\022^\n\017reversing_light\030\006"
  " \001(\0162E.osi3.MovingObject.VehicleClassifi"
  "cation.LightState.GenericLightState\022^\n\021b"
  "rake_light_state\030\007 \001(\0162C.osi3.MovingObje"
  "ct.VehicleClassification.LightState.Brak"
  "eLightState\022n\n\037license_plate_illuminatio"
  "n_rear\030\010 \001(\0162E.osi3.MovingObject.Vehicle"
  "Classification.LightState.GenericLightSt"
  "ate\022m\n\036emergency_vehicle_illumination\030\t "
  "\001(\0162E.osi3.MovingObject.VehicleClassific"
  "ation.LightState.GenericLightState\022k\n\034se"
  "rvice_vehicle_illumination\030\n \001(\0162E.osi3."
  "MovingObject.VehicleClassification.Light"
  "State.GenericLightState\"\263\001\n\016IndicatorSta"
  "te\022\033\n\027INDICATOR_STATE_UNKNOWN\020\000\022\031\n\025INDIC"
  "ATOR_STATE_OTHER\020\001\022\027\n\023INDICATOR_STATE_OF"
  "F\020\002\022\030\n\024INDICATOR_STATE_LEFT\020\003\022\031\n\025INDICAT"
  "OR_STATE_RIGHT\020\004\022\033\n\027INDICATOR_STATE_WARN"
  "ING\020\005\"\212\002\n\021GenericLightState\022\037\n\033GENERIC_L"
  "IGHT_STATE_UNKNOWN\020\000\022\035\n\031GENERIC_LIGHT_ST"
  "ATE_OTHER\020\001\022\033\n\027GENERIC_LIGHT_STATE_OFF\020\002"
  "\022\032\n\026GENERIC_LIGHT_STATE_ON\020\003\022%\n!GENERIC_"
  "LIGHT_STATE_FLASHING_BLUE\020\004\022-\n)GENERIC_L"
  "IGHT_STATE_FLASHING_BLUE_AND_RED\020\005\022&\n\"GE"
  "NERIC_LIGHT_STATE_FLASHING_AMBER\020\006\"\244\001\n\017B"
  "rakeLightState\022\035\n\031BRAKE_LIGHT_STATE_UNKN"
  "OWN\020\000\022\033\n\027BRAKE_LIGHT_STATE_OTHER\020\001\022\031\n\025BR"
  "AKE_LIGHT_STATE_OFF\020\002\022\034\n\030BRAKE_LIGHT_STA"
  "TE_NORMAL\020\003\022\034\n\030BRAKE_LIGHT_STATE_STRONG\020"
  "\004\"\317\002\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTH"
  "ER\020\001\022\022\n\016TYPE_SMALL_CAR\020\002\022\024\n\020TYPE_COMPACT"
  "_CAR\020\003\022\023\n\017TYPE_MEDIUM_CAR\020\004\022\023\n\017TYPE_LUXU"
  "RY_CAR\020\005\022\025\n\021TYPE_DELIVERY_VAN\020\006\022\024\n\020TYPE_"
  "HEAVY_TRUCK\020\007\022\024\n\020TYPE_SEMITRACTOR\020\020\022\024\n\020T"
  "YPE_SEMITRAILER\020\010\022\020\n\014TYPE_TRAILER\020\t\022\022\n\016T"
  "YPE_MOTORBIKE\020\n\022\020\n\014TYPE_BICYCLE\020\013\022\014\n\010TYP"
  "E_BUS\020\014\022\r\n\tTYPE_TRAM\020\r\022\016\n\nTYPE_TRAIN\020\016\022\023"
  "\n\017TYPE_WHEELCHAIR\020\017\"\355\001\n\004Role\022\020\n\014ROLE_UNK"
  "NOWN\020\000\022\016\n\nROLE_OTHER\020\001\022\016\n\nROLE_CIVIL\020\002\022\022"
  "\n\016ROLE_AMBULANCE\020\003\022\r\n\tROLE_FIRE\020\004\022\017\n\013ROL"
  "E_POLICE\020\005\022\031\n\025ROLE_PUBLIC_TRANSPORT\020\006\022\030\n"
  "\024ROLE_ROAD_ASSISTANCE\020\007\022\033\n\027ROLE_GARBAGE_"
  "COLLECTION\020\010\022\032\n\026ROLE_ROAD_CONSTRUCTION\020\t"
  "\022\021\n\rROLE_MILITARY\020\n\"`\n\004Type\022\020\n\014TYPE_UNKN"
  "OWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE_VEHICLE\020\002\022"
  "\023\n\017TYPE_PEDESTRIAN\020\003\022\017\n\013TYPE_ANIMAL\020\004B\002H"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fobject_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fobject_2eproto_sccs[9] = {
  &scc_info_MovingObject_osi_5fobject_2eproto.base,
  &scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto.base,
  &scc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto.base,
  &scc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto.base,
  &scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto.base,
  &scc_info_MovingObject_VehicleClassification_LightState_osi_5fobject_2eproto.base,
  &scc_info_StationaryObject_osi_5fobject_2eproto.base,
  &scc_info_StationaryObject_Classification_osi_5fobject_2eproto.base,
  &scc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fobject_2eproto_once;
static bool descriptor_table_osi_5fobject_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fobject_2eproto = {
  &descriptor_table_osi_5fobject_2eproto_initialized, descriptor_table_protodef_osi_5fobject_2eproto, "osi_object.proto", 5849,
  &descriptor_table_osi_5fobject_2eproto_once, descriptor_table_osi_5fobject_2eproto_sccs, descriptor_table_osi_5fobject_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_osi_5fobject_2eproto::offsets,
  file_level_metadata_osi_5fobject_2eproto, 9, file_level_enum_descriptors_osi_5fobject_2eproto, file_level_service_descriptors_osi_5fobject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fobject_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fobject_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[0];
}
bool StationaryObject_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_UNKNOWN;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OTHER;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BRIDGE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BUILDING;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_POLE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_PYLON;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_DELINEATOR;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_TREE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_BARRIER;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VEGETATION;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CURBSTONE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_WALL;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_VERTICAL_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_RECTANGULAR_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_OVERHEAD_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_REFLECTIVE_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_CONSTRUCTION_SITE_ELEMENT;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_SPEED_BUMP;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::TYPE_EMITTING_STRUCTURE;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::Type_MIN;
constexpr StationaryObject_Classification_Type StationaryObject_Classification::Type_MAX;
constexpr int StationaryObject_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Material_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[1];
}
bool StationaryObject_Classification_Material_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_UNKNOWN;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_OTHER;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_WOOD;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_PLASTIC;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_CONCRETE;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_METAL;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_STONE;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_GLAS;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::MATERIAL_MUD;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::Material_MIN;
constexpr StationaryObject_Classification_Material StationaryObject_Classification::Material_MAX;
constexpr int StationaryObject_Classification::Material_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Density_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[2];
}
bool StationaryObject_Classification_Density_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_UNKNOWN;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OTHER;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SOLID;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_SMALL_MESH;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_MEDIAN_MESH;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_LARGE_MESH;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::DENSITY_OPEN;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::Density_MIN;
constexpr StationaryObject_Classification_Density StationaryObject_Classification::Density_MAX;
constexpr int StationaryObject_Classification::Density_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StationaryObject_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[3];
}
bool StationaryObject_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_UNKNOWN;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_OTHER;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_YELLOW;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREEN;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLUE;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_VIOLET;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_RED;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_ORANGE;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_BLACK;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_GREY;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::COLOR_WHITE;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::Color_MIN;
constexpr StationaryObject_Classification_Color StationaryObject_Classification::Color_MAX;
constexpr int StationaryObject_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_LightState_IndicatorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[4];
}
bool MovingObject_VehicleClassification_LightState_IndicatorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_UNKNOWN;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OTHER;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_OFF;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_LEFT;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_RIGHT;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::INDICATOR_STATE_WARNING;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MIN;
constexpr MovingObject_VehicleClassification_LightState_IndicatorState MovingObject_VehicleClassification_LightState::IndicatorState_MAX;
constexpr int MovingObject_VehicleClassification_LightState::IndicatorState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_LightState_GenericLightState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[5];
}
bool MovingObject_VehicleClassification_LightState_GenericLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_UNKNOWN;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OTHER;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_OFF;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_ON;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_BLUE;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_BLUE_AND_RED;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GENERIC_LIGHT_STATE_FLASHING_AMBER;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MIN;
constexpr MovingObject_VehicleClassification_LightState_GenericLightState MovingObject_VehicleClassification_LightState::GenericLightState_MAX;
constexpr int MovingObject_VehicleClassification_LightState::GenericLightState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_LightState_BrakeLightState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[6];
}
bool MovingObject_VehicleClassification_LightState_BrakeLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_UNKNOWN;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OTHER;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_OFF;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_NORMAL;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BRAKE_LIGHT_STATE_STRONG;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MIN;
constexpr MovingObject_VehicleClassification_LightState_BrakeLightState MovingObject_VehicleClassification_LightState::BrakeLightState_MAX;
constexpr int MovingObject_VehicleClassification_LightState::BrakeLightState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[7];
}
bool MovingObject_VehicleClassification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_UNKNOWN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_OTHER;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SMALL_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_COMPACT_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MEDIUM_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_LUXURY_CAR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_DELIVERY_VAN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_HEAVY_TRUCK;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SEMITRACTOR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_SEMITRAILER;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAILER;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_MOTORBIKE;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BICYCLE;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_BUS;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAM;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_TRAIN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::TYPE_WHEELCHAIR;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MIN;
constexpr MovingObject_VehicleClassification_Type MovingObject_VehicleClassification::Type_MAX;
constexpr int MovingObject_VehicleClassification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_VehicleClassification_Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[8];
}
bool MovingObject_VehicleClassification_Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_UNKNOWN;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_OTHER;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_CIVIL;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_AMBULANCE;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_FIRE;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_POLICE;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_PUBLIC_TRANSPORT;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_ROAD_ASSISTANCE;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_GARBAGE_COLLECTION;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_ROAD_CONSTRUCTION;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::ROLE_MILITARY;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::Role_MIN;
constexpr MovingObject_VehicleClassification_Role MovingObject_VehicleClassification::Role_MAX;
constexpr int MovingObject_VehicleClassification::Role_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MovingObject_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fobject_2eproto);
  return file_level_enum_descriptors_osi_5fobject_2eproto[9];
}
bool MovingObject_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MovingObject_Type MovingObject::TYPE_UNKNOWN;
constexpr MovingObject_Type MovingObject::TYPE_OTHER;
constexpr MovingObject_Type MovingObject::TYPE_VEHICLE;
constexpr MovingObject_Type MovingObject::TYPE_PEDESTRIAN;
constexpr MovingObject_Type MovingObject::TYPE_ANIMAL;
constexpr MovingObject_Type MovingObject::Type_MIN;
constexpr MovingObject_Type MovingObject::Type_MAX;
constexpr int MovingObject::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StationaryObject_Classification_EmittingStructureAttribute::InitAsDefaultInstance() {
}
class StationaryObject_Classification_EmittingStructureAttribute::_Internal {
 public:
};

void StationaryObject_Classification_EmittingStructureAttribute::clear_wavelength_data() {
  wavelength_data_.Clear();
}
void StationaryObject_Classification_EmittingStructureAttribute::clear_emitted_spatial_signal_strength() {
  emitted_spatial_signal_strength_.Clear();
}
StationaryObject_Classification_EmittingStructureAttribute::StationaryObject_Classification_EmittingStructureAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.StationaryObject.Classification.EmittingStructureAttribute)
}
StationaryObject_Classification_EmittingStructureAttribute::StationaryObject_Classification_EmittingStructureAttribute(const StationaryObject_Classification_EmittingStructureAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      wavelength_data_(from.wavelength_data_),
      emitted_spatial_signal_strength_(from.emitted_spatial_signal_strength_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject.Classification.EmittingStructureAttribute)
}

void StationaryObject_Classification_EmittingStructureAttribute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto.base);
}

StationaryObject_Classification_EmittingStructureAttribute::~StationaryObject_Classification_EmittingStructureAttribute() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  SharedDtor();
}

void StationaryObject_Classification_EmittingStructureAttribute::SharedDtor() {
}

void StationaryObject_Classification_EmittingStructureAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StationaryObject_Classification_EmittingStructureAttribute& StationaryObject_Classification_EmittingStructureAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StationaryObject_Classification_EmittingStructureAttribute_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void StationaryObject_Classification_EmittingStructureAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wavelength_data_.Clear();
  emitted_spatial_signal_strength_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StationaryObject_Classification_EmittingStructureAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.WavelengthData wavelength_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_wavelength_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_emitted_spatial_signal_strength(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StationaryObject_Classification_EmittingStructureAttribute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.WavelengthData wavelength_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wavelength_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_emitted_spatial_signal_strength()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StationaryObject_Classification_EmittingStructureAttribute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.WavelengthData wavelength_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wavelength_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->wavelength_data(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->emitted_spatial_signal_strength_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->emitted_spatial_signal_strength(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.StationaryObject.Classification.EmittingStructureAttribute)
}

::PROTOBUF_NAMESPACE_ID::uint8* StationaryObject_Classification_EmittingStructureAttribute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.WavelengthData wavelength_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wavelength_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->wavelength_data(static_cast<int>(i)), target);
  }

  // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->emitted_spatial_signal_strength_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->emitted_spatial_signal_strength(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  return target;
}

size_t StationaryObject_Classification_EmittingStructureAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.WavelengthData wavelength_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->wavelength_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wavelength_data(static_cast<int>(i)));
    }
  }

  // repeated .osi3.SpatialSignalStrength emitted_spatial_signal_strength = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->emitted_spatial_signal_strength_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->emitted_spatial_signal_strength(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StationaryObject_Classification_EmittingStructureAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const StationaryObject_Classification_EmittingStructureAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StationaryObject_Classification_EmittingStructureAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.StationaryObject.Classification.EmittingStructureAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.StationaryObject.Classification.EmittingStructureAttribute)
    MergeFrom(*source);
  }
}

void StationaryObject_Classification_EmittingStructureAttribute::MergeFrom(const StationaryObject_Classification_EmittingStructureAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wavelength_data_.MergeFrom(from.wavelength_data_);
  emitted_spatial_signal_strength_.MergeFrom(from.emitted_spatial_signal_strength_);
}

void StationaryObject_Classification_EmittingStructureAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationaryObject_Classification_EmittingStructureAttribute::CopyFrom(const StationaryObject_Classification_EmittingStructureAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject.Classification.EmittingStructureAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject_Classification_EmittingStructureAttribute::IsInitialized() const {
  return true;
}

void StationaryObject_Classification_EmittingStructureAttribute::InternalSwap(StationaryObject_Classification_EmittingStructureAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&wavelength_data_)->InternalSwap(CastToBase(&other->wavelength_data_));
  CastToBase(&emitted_spatial_signal_strength_)->InternalSwap(CastToBase(&other->emitted_spatial_signal_strength_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StationaryObject_Classification_EmittingStructureAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StationaryObject_Classification::InitAsDefaultInstance() {
  ::osi3::_StationaryObject_Classification_default_instance_._instance.get_mutable()->emitting_structure_attribute_ = const_cast< ::osi3::StationaryObject_Classification_EmittingStructureAttribute*>(
      ::osi3::StationaryObject_Classification_EmittingStructureAttribute::internal_default_instance());
}
class StationaryObject_Classification::_Internal {
 public:
  static const ::osi3::StationaryObject_Classification_EmittingStructureAttribute& emitting_structure_attribute(const StationaryObject_Classification* msg);
};

const ::osi3::StationaryObject_Classification_EmittingStructureAttribute&
StationaryObject_Classification::_Internal::emitting_structure_attribute(const StationaryObject_Classification* msg) {
  return *msg->emitting_structure_attribute_;
}
void StationaryObject_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void StationaryObject_Classification::clear_logical_lane_assignment() {
  logical_lane_assignment_.Clear();
}
StationaryObject_Classification::StationaryObject_Classification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.StationaryObject.Classification)
}
StationaryObject_Classification::StationaryObject_Classification(const StationaryObject_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assigned_lane_id_(from.assigned_lane_id_),
      assigned_lane_percentage_(from.assigned_lane_percentage_),
      logical_lane_assignment_(from.logical_lane_assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_emitting_structure_attribute()) {
    emitting_structure_attribute_ = new ::osi3::StationaryObject_Classification_EmittingStructureAttribute(*from.emitting_structure_attribute_);
  } else {
    emitting_structure_attribute_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject.Classification)
}

void StationaryObject_Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StationaryObject_Classification_osi_5fobject_2eproto.base);
  ::memset(&emitting_structure_attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&emitting_structure_attribute_)) + sizeof(color_));
}

StationaryObject_Classification::~StationaryObject_Classification() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject.Classification)
  SharedDtor();
}

void StationaryObject_Classification::SharedDtor() {
  if (this != internal_default_instance()) delete emitting_structure_attribute_;
}

void StationaryObject_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StationaryObject_Classification& StationaryObject_Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StationaryObject_Classification_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void StationaryObject_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  assigned_lane_percentage_.Clear();
  logical_lane_assignment_.Clear();
  if (GetArenaNoVirtual() == nullptr && emitting_structure_attribute_ != nullptr) {
    delete emitting_structure_attribute_;
  }
  emitting_structure_attribute_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&type_)) + sizeof(color_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StationaryObject_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.StationaryObject.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::StationaryObject_Classification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.StationaryObject.Classification.Material material = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_material(static_cast<::osi3::StationaryObject_Classification_Material>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.StationaryObject.Classification.Density density = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_density(static_cast<::osi3::StationaryObject_Classification_Density>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.StationaryObject.Classification.Color color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_color(static_cast<::osi3::StationaryObject_Classification_Color>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_emitting_structure_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated double assigned_lane_percentage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_assigned_lane_percentage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57) {
          add_assigned_lane_percentage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StationaryObject_Classification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.StationaryObject.Classification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.StationaryObject.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::StationaryObject_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification.Material material = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_material(static_cast< ::osi3::StationaryObject_Classification_Material >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification.Density density = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_density(static_cast< ::osi3::StationaryObject_Classification_Density >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification.Color color = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::StationaryObject_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_emitting_structure_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double assigned_lane_percentage = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_assigned_lane_percentage())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 58u, input, this->mutable_assigned_lane_percentage())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.StationaryObject.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.StationaryObject.Classification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StationaryObject_Classification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.StationaryObject.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.StationaryObject.Classification.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.StationaryObject.Classification.Material material = 2;
  if (this->material() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->material(), output);
  }

  // .osi3.StationaryObject.Classification.Density density = 3;
  if (this->density() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->density(), output);
  }

  // .osi3.StationaryObject.Classification.Color color = 4;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->color(), output);
  }

  // .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
  if (this->has_emitting_structure_attribute()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::emitting_structure_attribute(this), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->assigned_lane_id(static_cast<int>(i)),
      output);
  }

  // repeated double assigned_lane_percentage = 7;
  if (this->assigned_lane_percentage_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(7, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_assigned_lane_percentage_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->assigned_lane_percentage().data(), this->assigned_lane_percentage_size(), output);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->logical_lane_assignment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.StationaryObject.Classification)
}

::PROTOBUF_NAMESPACE_ID::uint8* StationaryObject_Classification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.StationaryObject.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.StationaryObject.Classification.Material material = 2;
  if (this->material() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->material(), target);
  }

  // .osi3.StationaryObject.Classification.Density density = 3;
  if (this->density() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->density(), target);
  }

  // .osi3.StationaryObject.Classification.Color color = 4;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->color(), target);
  }

  // .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
  if (this->has_emitting_structure_attribute()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::emitting_structure_attribute(this), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->assigned_lane_id(static_cast<int>(i)), target);
  }

  // repeated double assigned_lane_percentage = 7;
  if (this->assigned_lane_percentage_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      7,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _assigned_lane_percentage_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->assigned_lane_percentage_, target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->logical_lane_assignment(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject.Classification)
  return target;
}

size_t StationaryObject_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject.Classification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated double assigned_lane_percentage = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_percentage_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _assigned_lane_percentage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_assignment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane_assignment(static_cast<int>(i)));
    }
  }

  // .osi3.StationaryObject.Classification.EmittingStructureAttribute emitting_structure_attribute = 5;
  if (this->has_emitting_structure_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *emitting_structure_attribute_);
  }

  // .osi3.StationaryObject.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.StationaryObject.Classification.Material material = 2;
  if (this->material() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->material());
  }

  // .osi3.StationaryObject.Classification.Density density = 3;
  if (this->density() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->density());
  }

  // .osi3.StationaryObject.Classification.Color color = 4;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StationaryObject_Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.StationaryObject.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const StationaryObject_Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StationaryObject_Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.StationaryObject.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.StationaryObject.Classification)
    MergeFrom(*source);
  }
}

void StationaryObject_Classification::MergeFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  assigned_lane_percentage_.MergeFrom(from.assigned_lane_percentage_);
  logical_lane_assignment_.MergeFrom(from.logical_lane_assignment_);
  if (from.has_emitting_structure_attribute()) {
    mutable_emitting_structure_attribute()->::osi3::StationaryObject_Classification_EmittingStructureAttribute::MergeFrom(from.emitting_structure_attribute());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.material() != 0) {
    set_material(from.material());
  }
  if (from.density() != 0) {
    set_density(from.density());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void StationaryObject_Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.StationaryObject.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationaryObject_Classification::CopyFrom(const StationaryObject_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject_Classification::IsInitialized() const {
  return true;
}

void StationaryObject_Classification::InternalSwap(StationaryObject_Classification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&assigned_lane_id_)->InternalSwap(CastToBase(&other->assigned_lane_id_));
  assigned_lane_percentage_.InternalSwap(&other->assigned_lane_percentage_);
  CastToBase(&logical_lane_assignment_)->InternalSwap(CastToBase(&other->logical_lane_assignment_));
  swap(emitting_structure_attribute_, other->emitting_structure_attribute_);
  swap(type_, other->type_);
  swap(material_, other->material_);
  swap(density_, other->density_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StationaryObject_Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StationaryObject::InitAsDefaultInstance() {
  ::osi3::_StationaryObject_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_StationaryObject_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_StationaryObject_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::StationaryObject_Classification*>(
      ::osi3::StationaryObject_Classification::internal_default_instance());
  ::osi3::_StationaryObject_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class StationaryObject::_Internal {
 public:
  static const ::osi3::Identifier& id(const StationaryObject* msg);
  static const ::osi3::BaseStationary& base(const StationaryObject* msg);
  static const ::osi3::StationaryObject_Classification& classification(const StationaryObject* msg);
  static const ::osi3::ColorDescription& color_description(const StationaryObject* msg);
};

const ::osi3::Identifier&
StationaryObject::_Internal::id(const StationaryObject* msg) {
  return *msg->id_;
}
const ::osi3::BaseStationary&
StationaryObject::_Internal::base(const StationaryObject* msg) {
  return *msg->base_;
}
const ::osi3::StationaryObject_Classification&
StationaryObject::_Internal::classification(const StationaryObject* msg) {
  return *msg->classification_;
}
const ::osi3::ColorDescription&
StationaryObject::_Internal::color_description(const StationaryObject* msg) {
  return *msg->color_description_;
}
void StationaryObject::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void StationaryObject::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void StationaryObject::clear_source_reference() {
  source_reference_.Clear();
}
void StationaryObject::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
StationaryObject::StationaryObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.StationaryObject)
}
StationaryObject::StationaryObject(const StationaryObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_reference().empty()) {
    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::StationaryObject_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.StationaryObject)
}

void StationaryObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StationaryObject_osi_5fobject_2eproto.base);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_description_) -
      reinterpret_cast<char*>(&id_)) + sizeof(color_description_));
}

StationaryObject::~StationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.StationaryObject)
  SharedDtor();
}

void StationaryObject::SharedDtor() {
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void StationaryObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StationaryObject& StationaryObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StationaryObject_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void StationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.StationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StationaryObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.StationaryObject.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_reference(), ptr, ctx, "osi3.StationaryObject.model_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StationaryObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.StationaryObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification classification = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.StationaryObject.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.StationaryObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.StationaryObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StationaryObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.StationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.StationaryObject.Classification classification = 3;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::classification(this), output);
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.StationaryObject.model_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model_reference(), output);
  }

  // repeated .osi3.ExternalReference source_reference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.StationaryObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* StationaryObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.StationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.StationaryObject.Classification classification = 3;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::classification(this), target);
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.StationaryObject.model_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->model_reference(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->source_reference(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.StationaryObject)
  return target;
}

size_t StationaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.StationaryObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.StationaryObject.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StationaryObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.StationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  const StationaryObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StationaryObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.StationaryObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.StationaryObject)
    MergeFrom(*source);
  }
}

void StationaryObject::MergeFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.StationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::StationaryObject_Classification::MergeFrom(from.classification());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
}

void StationaryObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.StationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StationaryObject::CopyFrom(const StationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.StationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StationaryObject::IsInitialized() const {
  return true;
}

void StationaryObject::InternalSwap(StationaryObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  model_reference_.Swap(&other->model_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  swap(color_description_, other->color_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StationaryObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovingObject_VehicleAttributes_WheelData::InitAsDefaultInstance() {
  ::osi3::_MovingObject_VehicleAttributes_WheelData_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_MovingObject_VehicleAttributes_WheelData_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::osi3::Orientation3d*>(
      ::osi3::Orientation3d::internal_default_instance());
}
class MovingObject_VehicleAttributes_WheelData::_Internal {
 public:
  static const ::osi3::Vector3d& position(const MovingObject_VehicleAttributes_WheelData* msg);
  static const ::osi3::Orientation3d& orientation(const MovingObject_VehicleAttributes_WheelData* msg);
};

const ::osi3::Vector3d&
MovingObject_VehicleAttributes_WheelData::_Internal::position(const MovingObject_VehicleAttributes_WheelData* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
MovingObject_VehicleAttributes_WheelData::_Internal::orientation(const MovingObject_VehicleAttributes_WheelData* msg) {
  return *msg->orientation_;
}
void MovingObject_VehicleAttributes_WheelData::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void MovingObject_VehicleAttributes_WheelData::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
MovingObject_VehicleAttributes_WheelData::MovingObject_VehicleAttributes_WheelData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleAttributes.WheelData)
}
MovingObject_VehicleAttributes_WheelData::MovingObject_VehicleAttributes_WheelData(const MovingObject_VehicleAttributes_WheelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_reference().empty()) {
    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&axle_, &from.axle_,
    static_cast<size_t>(reinterpret_cast<char*>(&friction_coefficient_) -
    reinterpret_cast<char*>(&axle_)) + sizeof(friction_coefficient_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleAttributes.WheelData)
}

void MovingObject_VehicleAttributes_WheelData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto.base);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friction_coefficient_) -
      reinterpret_cast<char*>(&position_)) + sizeof(friction_coefficient_));
}

MovingObject_VehicleAttributes_WheelData::~MovingObject_VehicleAttributes_WheelData() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleAttributes.WheelData)
  SharedDtor();
}

void MovingObject_VehicleAttributes_WheelData::SharedDtor() {
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void MovingObject_VehicleAttributes_WheelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovingObject_VehicleAttributes_WheelData& MovingObject_VehicleAttributes_WheelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovingObject_VehicleAttributes_WheelData_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MovingObject_VehicleAttributes_WheelData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleAttributes.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&axle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&friction_coefficient_) -
      reinterpret_cast<char*>(&axle_)) + sizeof(friction_coefficient_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovingObject_VehicleAttributes_WheelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 axle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double wheel_radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          wheel_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rim_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          rim_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Orientation3d orientation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rotation_rate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string model_reference = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_reference(), ptr, ctx, "osi3.MovingObject.VehicleAttributes.WheelData.model_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double friction_coefficient = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          friction_coefficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovingObject_VehicleAttributes_WheelData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleAttributes.WheelData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 axle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &axle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_radius = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rim_radius = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rim_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Orientation3d orientation = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_rate = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.MovingObject.VehicleAttributes.WheelData.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double friction_coefficient = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &friction_coefficient_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleAttributes.WheelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleAttributes.WheelData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovingObject_VehicleAttributes_WheelData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleAttributes.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 axle = 1;
  if (this->axle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->axle(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // .osi3.Vector3d position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::position(this), output);
  }

  // double wheel_radius = 4;
  if (!(this->wheel_radius() <= 0 && this->wheel_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->wheel_radius(), output);
  }

  // double rim_radius = 5;
  if (!(this->rim_radius() <= 0 && this->rim_radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->rim_radius(), output);
  }

  // double width = 6;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // .osi3.Orientation3d orientation = 7;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::orientation(this), output);
  }

  // double rotation_rate = 8;
  if (!(this->rotation_rate() <= 0 && this->rotation_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->rotation_rate(), output);
  }

  // string model_reference = 9;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.MovingObject.VehicleAttributes.WheelData.model_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->model_reference(), output);
  }

  // double friction_coefficient = 10;
  if (!(this->friction_coefficient() <= 0 && this->friction_coefficient() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->friction_coefficient(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleAttributes.WheelData)
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleAttributes_WheelData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleAttributes.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 axle = 1;
  if (this->axle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->axle(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // .osi3.Vector3d position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::position(this), target);
  }

  // double wheel_radius = 4;
  if (!(this->wheel_radius() <= 0 && this->wheel_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->wheel_radius(), target);
  }

  // double rim_radius = 5;
  if (!(this->rim_radius() <= 0 && this->rim_radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->rim_radius(), target);
  }

  // double width = 6;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->width(), target);
  }

  // .osi3.Orientation3d orientation = 7;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::orientation(this), target);
  }

  // double rotation_rate = 8;
  if (!(this->rotation_rate() <= 0 && this->rotation_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->rotation_rate(), target);
  }

  // string model_reference = 9;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.MovingObject.VehicleAttributes.WheelData.model_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->model_reference(), target);
  }

  // double friction_coefficient = 10;
  if (!(this->friction_coefficient() <= 0 && this->friction_coefficient() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->friction_coefficient(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleAttributes.WheelData)
  return target;
}

size_t MovingObject_VehicleAttributes_WheelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleAttributes.WheelData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_reference = 9;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.Vector3d position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .osi3.Orientation3d orientation = 7;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // uint32 axle = 1;
  if (this->axle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->axle());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // double wheel_radius = 4;
  if (!(this->wheel_radius() <= 0 && this->wheel_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // double rim_radius = 5;
  if (!(this->rim_radius() <= 0 && this->rim_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 6;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double rotation_rate = 8;
  if (!(this->rotation_rate() <= 0 && this->rotation_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double friction_coefficient = 10;
  if (!(this->friction_coefficient() <= 0 && this->friction_coefficient() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingObject_VehicleAttributes_WheelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleAttributes.WheelData)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_VehicleAttributes_WheelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingObject_VehicleAttributes_WheelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleAttributes.WheelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleAttributes.WheelData)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleAttributes_WheelData::MergeFrom(const MovingObject_VehicleAttributes_WheelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleAttributes.WheelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::osi3::Orientation3d::MergeFrom(from.orientation());
  }
  if (from.axle() != 0) {
    set_axle(from.axle());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (!(from.wheel_radius() <= 0 && from.wheel_radius() >= 0)) {
    set_wheel_radius(from.wheel_radius());
  }
  if (!(from.rim_radius() <= 0 && from.rim_radius() >= 0)) {
    set_rim_radius(from.rim_radius());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.rotation_rate() <= 0 && from.rotation_rate() >= 0)) {
    set_rotation_rate(from.rotation_rate());
  }
  if (!(from.friction_coefficient() <= 0 && from.friction_coefficient() >= 0)) {
    set_friction_coefficient(from.friction_coefficient());
  }
}

void MovingObject_VehicleAttributes_WheelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleAttributes.WheelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleAttributes_WheelData::CopyFrom(const MovingObject_VehicleAttributes_WheelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleAttributes.WheelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleAttributes_WheelData::IsInitialized() const {
  return true;
}

void MovingObject_VehicleAttributes_WheelData::InternalSwap(MovingObject_VehicleAttributes_WheelData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_reference_.Swap(&other->model_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(axle_, other->axle_);
  swap(index_, other->index_);
  swap(wheel_radius_, other->wheel_radius_);
  swap(rim_radius_, other->rim_radius_);
  swap(width_, other->width_);
  swap(rotation_rate_, other->rotation_rate_);
  swap(friction_coefficient_, other->friction_coefficient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleAttributes_WheelData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovingObject_VehicleAttributes::InitAsDefaultInstance() {
  ::osi3::_MovingObject_VehicleAttributes_default_instance_._instance.get_mutable()->driver_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_MovingObject_VehicleAttributes_default_instance_._instance.get_mutable()->bbcenter_to_rear_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_MovingObject_VehicleAttributes_default_instance_._instance.get_mutable()->bbcenter_to_front_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
class MovingObject_VehicleAttributes::_Internal {
 public:
  static const ::osi3::Identifier& driver_id(const MovingObject_VehicleAttributes* msg);
  static const ::osi3::Vector3d& bbcenter_to_rear(const MovingObject_VehicleAttributes* msg);
  static const ::osi3::Vector3d& bbcenter_to_front(const MovingObject_VehicleAttributes* msg);
};

const ::osi3::Identifier&
MovingObject_VehicleAttributes::_Internal::driver_id(const MovingObject_VehicleAttributes* msg) {
  return *msg->driver_id_;
}
const ::osi3::Vector3d&
MovingObject_VehicleAttributes::_Internal::bbcenter_to_rear(const MovingObject_VehicleAttributes* msg) {
  return *msg->bbcenter_to_rear_;
}
const ::osi3::Vector3d&
MovingObject_VehicleAttributes::_Internal::bbcenter_to_front(const MovingObject_VehicleAttributes* msg) {
  return *msg->bbcenter_to_front_;
}
void MovingObject_VehicleAttributes::clear_driver_id() {
  if (GetArenaNoVirtual() == nullptr && driver_id_ != nullptr) {
    delete driver_id_;
  }
  driver_id_ = nullptr;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_rear() {
  if (GetArenaNoVirtual() == nullptr && bbcenter_to_rear_ != nullptr) {
    delete bbcenter_to_rear_;
  }
  bbcenter_to_rear_ = nullptr;
}
void MovingObject_VehicleAttributes::clear_bbcenter_to_front() {
  if (GetArenaNoVirtual() == nullptr && bbcenter_to_front_ != nullptr) {
    delete bbcenter_to_front_;
  }
  bbcenter_to_front_ = nullptr;
}
MovingObject_VehicleAttributes::MovingObject_VehicleAttributes()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleAttributes)
}
MovingObject_VehicleAttributes::MovingObject_VehicleAttributes(const MovingObject_VehicleAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      wheel_data_(from.wheel_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_driver_id()) {
    driver_id_ = new ::osi3::Identifier(*from.driver_id_);
  } else {
    driver_id_ = nullptr;
  }
  if (from.has_bbcenter_to_rear()) {
    bbcenter_to_rear_ = new ::osi3::Vector3d(*from.bbcenter_to_rear_);
  } else {
    bbcenter_to_rear_ = nullptr;
  }
  if (from.has_bbcenter_to_front()) {
    bbcenter_to_front_ = new ::osi3::Vector3d(*from.bbcenter_to_front_);
  } else {
    bbcenter_to_front_ = nullptr;
  }
  ::memcpy(&radius_wheel_, &from.radius_wheel_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_wheels_) -
    reinterpret_cast<char*>(&radius_wheel_)) + sizeof(number_wheels_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleAttributes)
}

void MovingObject_VehicleAttributes::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto.base);
  ::memset(&driver_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_wheels_) -
      reinterpret_cast<char*>(&driver_id_)) + sizeof(number_wheels_));
}

MovingObject_VehicleAttributes::~MovingObject_VehicleAttributes() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleAttributes)
  SharedDtor();
}

void MovingObject_VehicleAttributes::SharedDtor() {
  if (this != internal_default_instance()) delete driver_id_;
  if (this != internal_default_instance()) delete bbcenter_to_rear_;
  if (this != internal_default_instance()) delete bbcenter_to_front_;
}

void MovingObject_VehicleAttributes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovingObject_VehicleAttributes& MovingObject_VehicleAttributes::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovingObject_VehicleAttributes_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MovingObject_VehicleAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && driver_id_ != nullptr) {
    delete driver_id_;
  }
  driver_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bbcenter_to_rear_ != nullptr) {
    delete bbcenter_to_rear_;
  }
  bbcenter_to_rear_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bbcenter_to_front_ != nullptr) {
    delete bbcenter_to_front_;
  }
  bbcenter_to_front_ = nullptr;
  ::memset(&radius_wheel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_wheels_) -
      reinterpret_cast<char*>(&radius_wheel_)) + sizeof(number_wheels_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovingObject_VehicleAttributes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier driver_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_driver_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius_wheel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_wheel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 number_wheels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_wheels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d bbcenter_to_rear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_bbcenter_to_rear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d bbcenter_to_front = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_bbcenter_to_front(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ground_clearance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ground_clearance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_wheel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // double steering_wheel_angle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          steering_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovingObject_VehicleAttributes::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleAttributes)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier driver_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_driver_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius_wheel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_wheel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_wheels = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_wheels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d bbcenter_to_rear = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bbcenter_to_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d bbcenter_to_front = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bbcenter_to_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ground_clearance = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ground_clearance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wheel_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_wheel_angle = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleAttributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleAttributes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovingObject_VehicleAttributes::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier driver_id = 1;
  if (this->has_driver_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::driver_id(this), output);
  }

  // double radius_wheel = 2;
  if (!(this->radius_wheel() <= 0 && this->radius_wheel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->radius_wheel(), output);
  }

  // uint32 number_wheels = 3;
  if (this->number_wheels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->number_wheels(), output);
  }

  // .osi3.Vector3d bbcenter_to_rear = 4;
  if (this->has_bbcenter_to_rear()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::bbcenter_to_rear(this), output);
  }

  // .osi3.Vector3d bbcenter_to_front = 5;
  if (this->has_bbcenter_to_front()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::bbcenter_to_front(this), output);
  }

  // double ground_clearance = 6;
  if (!(this->ground_clearance() <= 0 && this->ground_clearance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->ground_clearance(), output);
  }

  // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->wheel_data(static_cast<int>(i)),
      output);
  }

  // double steering_wheel_angle = 8;
  if (!(this->steering_wheel_angle() <= 0 && this->steering_wheel_angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->steering_wheel_angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleAttributes)
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleAttributes::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleAttributes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier driver_id = 1;
  if (this->has_driver_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::driver_id(this), target);
  }

  // double radius_wheel = 2;
  if (!(this->radius_wheel() <= 0 && this->radius_wheel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->radius_wheel(), target);
  }

  // uint32 number_wheels = 3;
  if (this->number_wheels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->number_wheels(), target);
  }

  // .osi3.Vector3d bbcenter_to_rear = 4;
  if (this->has_bbcenter_to_rear()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::bbcenter_to_rear(this), target);
  }

  // .osi3.Vector3d bbcenter_to_front = 5;
  if (this->has_bbcenter_to_front()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::bbcenter_to_front(this), target);
  }

  // double ground_clearance = 6;
  if (!(this->ground_clearance() <= 0 && this->ground_clearance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->ground_clearance(), target);
  }

  // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->wheel_data(static_cast<int>(i)), target);
  }

  // double steering_wheel_angle = 8;
  if (!(this->steering_wheel_angle() <= 0 && this->steering_wheel_angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->steering_wheel_angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleAttributes)
  return target;
}

size_t MovingObject_VehicleAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleAttributes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.MovingObject.VehicleAttributes.WheelData wheel_data = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->wheel_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wheel_data(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier driver_id = 1;
  if (this->has_driver_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *driver_id_);
  }

  // .osi3.Vector3d bbcenter_to_rear = 4;
  if (this->has_bbcenter_to_rear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbcenter_to_rear_);
  }

  // .osi3.Vector3d bbcenter_to_front = 5;
  if (this->has_bbcenter_to_front()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bbcenter_to_front_);
  }

  // double radius_wheel = 2;
  if (!(this->radius_wheel() <= 0 && this->radius_wheel() >= 0)) {
    total_size += 1 + 8;
  }

  // double ground_clearance = 6;
  if (!(this->ground_clearance() <= 0 && this->ground_clearance() >= 0)) {
    total_size += 1 + 8;
  }

  // double steering_wheel_angle = 8;
  if (!(this->steering_wheel_angle() <= 0 && this->steering_wheel_angle() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 number_wheels = 3;
  if (this->number_wheels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_wheels());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingObject_VehicleAttributes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_VehicleAttributes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingObject_VehicleAttributes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleAttributes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleAttributes)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleAttributes::MergeFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleAttributes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_data_.MergeFrom(from.wheel_data_);
  if (from.has_driver_id()) {
    mutable_driver_id()->::osi3::Identifier::MergeFrom(from.driver_id());
  }
  if (from.has_bbcenter_to_rear()) {
    mutable_bbcenter_to_rear()->::osi3::Vector3d::MergeFrom(from.bbcenter_to_rear());
  }
  if (from.has_bbcenter_to_front()) {
    mutable_bbcenter_to_front()->::osi3::Vector3d::MergeFrom(from.bbcenter_to_front());
  }
  if (!(from.radius_wheel() <= 0 && from.radius_wheel() >= 0)) {
    set_radius_wheel(from.radius_wheel());
  }
  if (!(from.ground_clearance() <= 0 && from.ground_clearance() >= 0)) {
    set_ground_clearance(from.ground_clearance());
  }
  if (!(from.steering_wheel_angle() <= 0 && from.steering_wheel_angle() >= 0)) {
    set_steering_wheel_angle(from.steering_wheel_angle());
  }
  if (from.number_wheels() != 0) {
    set_number_wheels(from.number_wheels());
  }
}

void MovingObject_VehicleAttributes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleAttributes::CopyFrom(const MovingObject_VehicleAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleAttributes::IsInitialized() const {
  return true;
}

void MovingObject_VehicleAttributes::InternalSwap(MovingObject_VehicleAttributes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&wheel_data_)->InternalSwap(CastToBase(&other->wheel_data_));
  swap(driver_id_, other->driver_id_);
  swap(bbcenter_to_rear_, other->bbcenter_to_rear_);
  swap(bbcenter_to_front_, other->bbcenter_to_front_);
  swap(radius_wheel_, other->radius_wheel_);
  swap(ground_clearance_, other->ground_clearance_);
  swap(steering_wheel_angle_, other->steering_wheel_angle_);
  swap(number_wheels_, other->number_wheels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleAttributes::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovingObject_MovingObjectClassification::InitAsDefaultInstance() {
}
class MovingObject_MovingObjectClassification::_Internal {
 public:
};

void MovingObject_MovingObjectClassification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void MovingObject_MovingObjectClassification::clear_logical_lane_assignment() {
  logical_lane_assignment_.Clear();
}
MovingObject_MovingObjectClassification::MovingObject_MovingObjectClassification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.MovingObjectClassification)
}
MovingObject_MovingObjectClassification::MovingObject_MovingObjectClassification(const MovingObject_MovingObjectClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assigned_lane_id_(from.assigned_lane_id_),
      assigned_lane_percentage_(from.assigned_lane_percentage_),
      logical_lane_assignment_(from.logical_lane_assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.MovingObjectClassification)
}

void MovingObject_MovingObjectClassification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto.base);
}

MovingObject_MovingObjectClassification::~MovingObject_MovingObjectClassification() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.MovingObjectClassification)
  SharedDtor();
}

void MovingObject_MovingObjectClassification::SharedDtor() {
}

void MovingObject_MovingObjectClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovingObject_MovingObjectClassification& MovingObject_MovingObjectClassification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MovingObject_MovingObjectClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.MovingObjectClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  assigned_lane_percentage_.Clear();
  logical_lane_assignment_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovingObject_MovingObjectClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.Identifier assigned_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated double assigned_lane_percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_assigned_lane_percentage(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          add_assigned_lane_percentage(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovingObject_MovingObjectClassification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.MovingObjectClassification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.Identifier assigned_lane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double assigned_lane_percentage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_assigned_lane_percentage())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18u, input, this->mutable_assigned_lane_percentage())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.MovingObjectClassification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.MovingObjectClassification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovingObject_MovingObjectClassification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.MovingObjectClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->assigned_lane_id(static_cast<int>(i)),
      output);
  }

  // repeated double assigned_lane_percentage = 2;
  if (this->assigned_lane_percentage_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_assigned_lane_percentage_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->assigned_lane_percentage().data(), this->assigned_lane_percentage_size(), output);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->logical_lane_assignment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.MovingObjectClassification)
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_MovingObjectClassification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.MovingObjectClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->assigned_lane_id(static_cast<int>(i)), target);
  }

  // repeated double assigned_lane_percentage = 2;
  if (this->assigned_lane_percentage_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _assigned_lane_percentage_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->assigned_lane_percentage_, target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->logical_lane_assignment(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.MovingObjectClassification)
  return target;
}

size_t MovingObject_MovingObjectClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.MovingObjectClassification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated double assigned_lane_percentage = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_percentage_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _assigned_lane_percentage_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_assignment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane_assignment(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingObject_MovingObjectClassification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.MovingObjectClassification)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_MovingObjectClassification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingObject_MovingObjectClassification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.MovingObjectClassification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.MovingObjectClassification)
    MergeFrom(*source);
  }
}

void MovingObject_MovingObjectClassification::MergeFrom(const MovingObject_MovingObjectClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.MovingObjectClassification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  assigned_lane_percentage_.MergeFrom(from.assigned_lane_percentage_);
  logical_lane_assignment_.MergeFrom(from.logical_lane_assignment_);
}

void MovingObject_MovingObjectClassification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.MovingObjectClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_MovingObjectClassification::CopyFrom(const MovingObject_MovingObjectClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.MovingObjectClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_MovingObjectClassification::IsInitialized() const {
  return true;
}

void MovingObject_MovingObjectClassification::InternalSwap(MovingObject_MovingObjectClassification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&assigned_lane_id_)->InternalSwap(CastToBase(&other->assigned_lane_id_));
  assigned_lane_percentage_.InternalSwap(&other->assigned_lane_percentage_);
  CastToBase(&logical_lane_assignment_)->InternalSwap(CastToBase(&other->logical_lane_assignment_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_MovingObjectClassification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovingObject_VehicleClassification_LightState::InitAsDefaultInstance() {
}
class MovingObject_VehicleClassification_LightState::_Internal {
 public:
};

MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleClassification.LightState)
}
MovingObject_VehicleClassification_LightState::MovingObject_VehicleClassification_LightState(const MovingObject_VehicleClassification_LightState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&indicator_state_, &from.indicator_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&service_vehicle_illumination_) -
    reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification.LightState)
}

void MovingObject_VehicleClassification_LightState::SharedCtor() {
  ::memset(&indicator_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_vehicle_illumination_) -
      reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
}

MovingObject_VehicleClassification_LightState::~MovingObject_VehicleClassification_LightState() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification.LightState)
  SharedDtor();
}

void MovingObject_VehicleClassification_LightState::SharedDtor() {
}

void MovingObject_VehicleClassification_LightState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovingObject_VehicleClassification_LightState& MovingObject_VehicleClassification_LightState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovingObject_VehicleClassification_LightState_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MovingObject_VehicleClassification_LightState::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification.LightState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&indicator_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&service_vehicle_illumination_) -
      reinterpret_cast<char*>(&indicator_state_)) + sizeof(service_vehicle_illumination_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovingObject_VehicleClassification_LightState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_indicator_state(static_cast<::osi3::MovingObject_VehicleClassification_LightState_IndicatorState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_front_fog_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rear_fog_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_head_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_high_beam(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_reversing_light(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_brake_light_state(static_cast<::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_license_plate_illumination_rear(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_emergency_vehicle_illumination(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_service_vehicle_illumination(static_cast<::osi3::MovingObject_VehicleClassification_LightState_GenericLightState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovingObject_VehicleClassification_LightState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleClassification.LightState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_indicator_state(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_IndicatorState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_front_fog_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rear_fog_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_head_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_high_beam(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reversing_light(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_brake_light_state(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_BrakeLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_license_plate_illumination_rear(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emergency_vehicle_illumination(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_service_vehicle_illumination(static_cast< ::osi3::MovingObject_VehicleClassification_LightState_GenericLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleClassification.LightState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleClassification.LightState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovingObject_VehicleClassification_LightState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleClassification.LightState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->indicator_state(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (this->front_fog_light() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->front_fog_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (this->rear_fog_light() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->rear_fog_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (this->head_light() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->head_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (this->high_beam() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->high_beam(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (this->reversing_light() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->reversing_light(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (this->brake_light_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->brake_light_state(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (this->license_plate_illumination_rear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->license_plate_illumination_rear(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
  if (this->emergency_vehicle_illumination() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->emergency_vehicle_illumination(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
  if (this->service_vehicle_illumination() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->service_vehicle_illumination(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleClassification.LightState)
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleClassification_LightState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification.LightState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->indicator_state(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (this->front_fog_light() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->front_fog_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (this->rear_fog_light() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->rear_fog_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (this->head_light() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->head_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (this->high_beam() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->high_beam(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (this->reversing_light() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->reversing_light(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (this->brake_light_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->brake_light_state(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (this->license_plate_illumination_rear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->license_plate_illumination_rear(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
  if (this->emergency_vehicle_illumination() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->emergency_vehicle_illumination(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
  if (this->service_vehicle_illumination() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->service_vehicle_illumination(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification.LightState)
  return target;
}

size_t MovingObject_VehicleClassification_LightState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification.LightState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.LightState.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->indicator_state());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState front_fog_light = 2;
  if (this->front_fog_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->front_fog_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState rear_fog_light = 3;
  if (this->rear_fog_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rear_fog_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState head_light = 4;
  if (this->head_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->head_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState high_beam = 5;
  if (this->high_beam() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->high_beam());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState reversing_light = 6;
  if (this->reversing_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reversing_light());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.BrakeLightState brake_light_state = 7;
  if (this->brake_light_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->brake_light_state());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState license_plate_illumination_rear = 8;
  if (this->license_plate_illumination_rear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->license_plate_illumination_rear());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState emergency_vehicle_illumination = 9;
  if (this->emergency_vehicle_illumination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->emergency_vehicle_illumination());
  }

  // .osi3.MovingObject.VehicleClassification.LightState.GenericLightState service_vehicle_illumination = 10;
  if (this->service_vehicle_illumination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->service_vehicle_illumination());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingObject_VehicleClassification_LightState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleClassification.LightState)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_VehicleClassification_LightState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingObject_VehicleClassification_LightState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleClassification.LightState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleClassification.LightState)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleClassification_LightState::MergeFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification.LightState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.indicator_state() != 0) {
    set_indicator_state(from.indicator_state());
  }
  if (from.front_fog_light() != 0) {
    set_front_fog_light(from.front_fog_light());
  }
  if (from.rear_fog_light() != 0) {
    set_rear_fog_light(from.rear_fog_light());
  }
  if (from.head_light() != 0) {
    set_head_light(from.head_light());
  }
  if (from.high_beam() != 0) {
    set_high_beam(from.high_beam());
  }
  if (from.reversing_light() != 0) {
    set_reversing_light(from.reversing_light());
  }
  if (from.brake_light_state() != 0) {
    set_brake_light_state(from.brake_light_state());
  }
  if (from.license_plate_illumination_rear() != 0) {
    set_license_plate_illumination_rear(from.license_plate_illumination_rear());
  }
  if (from.emergency_vehicle_illumination() != 0) {
    set_emergency_vehicle_illumination(from.emergency_vehicle_illumination());
  }
  if (from.service_vehicle_illumination() != 0) {
    set_service_vehicle_illumination(from.service_vehicle_illumination());
  }
}

void MovingObject_VehicleClassification_LightState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleClassification_LightState::CopyFrom(const MovingObject_VehicleClassification_LightState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification.LightState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification_LightState::IsInitialized() const {
  return true;
}

void MovingObject_VehicleClassification_LightState::InternalSwap(MovingObject_VehicleClassification_LightState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(indicator_state_, other->indicator_state_);
  swap(front_fog_light_, other->front_fog_light_);
  swap(rear_fog_light_, other->rear_fog_light_);
  swap(head_light_, other->head_light_);
  swap(high_beam_, other->high_beam_);
  swap(reversing_light_, other->reversing_light_);
  swap(brake_light_state_, other->brake_light_state_);
  swap(license_plate_illumination_rear_, other->license_plate_illumination_rear_);
  swap(emergency_vehicle_illumination_, other->emergency_vehicle_illumination_);
  swap(service_vehicle_illumination_, other->service_vehicle_illumination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleClassification_LightState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovingObject_VehicleClassification::InitAsDefaultInstance() {
  ::osi3::_MovingObject_VehicleClassification_default_instance_._instance.get_mutable()->light_state_ = const_cast< ::osi3::MovingObject_VehicleClassification_LightState*>(
      ::osi3::MovingObject_VehicleClassification_LightState::internal_default_instance());
  ::osi3::_MovingObject_VehicleClassification_default_instance_._instance.get_mutable()->trailer_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class MovingObject_VehicleClassification::_Internal {
 public:
  static const ::osi3::MovingObject_VehicleClassification_LightState& light_state(const MovingObject_VehicleClassification* msg);
  static const ::osi3::Identifier& trailer_id(const MovingObject_VehicleClassification* msg);
};

const ::osi3::MovingObject_VehicleClassification_LightState&
MovingObject_VehicleClassification::_Internal::light_state(const MovingObject_VehicleClassification* msg) {
  return *msg->light_state_;
}
const ::osi3::Identifier&
MovingObject_VehicleClassification::_Internal::trailer_id(const MovingObject_VehicleClassification* msg) {
  return *msg->trailer_id_;
}
void MovingObject_VehicleClassification::clear_trailer_id() {
  if (GetArenaNoVirtual() == nullptr && trailer_id_ != nullptr) {
    delete trailer_id_;
  }
  trailer_id_ = nullptr;
}
MovingObject_VehicleClassification::MovingObject_VehicleClassification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject.VehicleClassification)
}
MovingObject_VehicleClassification::MovingObject_VehicleClassification(const MovingObject_VehicleClassification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_light_state()) {
    light_state_ = new ::osi3::MovingObject_VehicleClassification_LightState(*from.light_state_);
  } else {
    light_state_ = nullptr;
  }
  if (from.has_trailer_id()) {
    trailer_id_ = new ::osi3::Identifier(*from.trailer_id_);
  } else {
    trailer_id_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&role_) -
    reinterpret_cast<char*>(&type_)) + sizeof(role_));
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject.VehicleClassification)
}

void MovingObject_VehicleClassification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto.base);
  ::memset(&light_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&light_state_)) + sizeof(role_));
}

MovingObject_VehicleClassification::~MovingObject_VehicleClassification() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject.VehicleClassification)
  SharedDtor();
}

void MovingObject_VehicleClassification::SharedDtor() {
  if (this != internal_default_instance()) delete light_state_;
  if (this != internal_default_instance()) delete trailer_id_;
}

void MovingObject_VehicleClassification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovingObject_VehicleClassification& MovingObject_VehicleClassification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MovingObject_VehicleClassification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject.VehicleClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && light_state_ != nullptr) {
    delete light_state_;
  }
  light_state_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trailer_id_ != nullptr) {
    delete trailer_id_;
  }
  trailer_id_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&type_)) + sizeof(role_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovingObject_VehicleClassification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.MovingObject.VehicleClassification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::MovingObject_VehicleClassification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_light_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool has_trailer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          has_trailer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier trailer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_trailer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification.Role role = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_role(static_cast<::osi3::MovingObject_VehicleClassification_Role>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovingObject_VehicleClassification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject.VehicleClassification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.MovingObject.VehicleClassification.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::MovingObject_VehicleClassification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_light_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_trailer = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_trailer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier trailer_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trailer_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification.Role role = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_role(static_cast< ::osi3::MovingObject_VehicleClassification_Role >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject.VehicleClassification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject.VehicleClassification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovingObject_VehicleClassification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject.VehicleClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (this->has_light_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::light_state(this), output);
  }

  // bool has_trailer = 3;
  if (this->has_trailer() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->has_trailer(), output);
  }

  // .osi3.Identifier trailer_id = 4;
  if (this->has_trailer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::trailer_id(this), output);
  }

  // .osi3.MovingObject.VehicleClassification.Role role = 5;
  if (this->role() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->role(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject.VehicleClassification)
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject_VehicleClassification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject.VehicleClassification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (this->has_light_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::light_state(this), target);
  }

  // bool has_trailer = 3;
  if (this->has_trailer() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->has_trailer(), target);
  }

  // .osi3.Identifier trailer_id = 4;
  if (this->has_trailer_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::trailer_id(this), target);
  }

  // .osi3.MovingObject.VehicleClassification.Role role = 5;
  if (this->role() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->role(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject.VehicleClassification)
  return target;
}

size_t MovingObject_VehicleClassification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject.VehicleClassification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification.LightState light_state = 2;
  if (this->has_light_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *light_state_);
  }

  // .osi3.Identifier trailer_id = 4;
  if (this->has_trailer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trailer_id_);
  }

  // .osi3.MovingObject.VehicleClassification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool has_trailer = 3;
  if (this->has_trailer() != 0) {
    total_size += 1 + 1;
  }

  // .osi3.MovingObject.VehicleClassification.Role role = 5;
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->role());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingObject_VehicleClassification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject.VehicleClassification)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject_VehicleClassification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingObject_VehicleClassification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject.VehicleClassification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject.VehicleClassification)
    MergeFrom(*source);
  }
}

void MovingObject_VehicleClassification::MergeFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject.VehicleClassification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_light_state()) {
    mutable_light_state()->::osi3::MovingObject_VehicleClassification_LightState::MergeFrom(from.light_state());
  }
  if (from.has_trailer_id()) {
    mutable_trailer_id()->::osi3::Identifier::MergeFrom(from.trailer_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.has_trailer() != 0) {
    set_has_trailer(from.has_trailer());
  }
  if (from.role() != 0) {
    set_role(from.role());
  }
}

void MovingObject_VehicleClassification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject.VehicleClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject_VehicleClassification::CopyFrom(const MovingObject_VehicleClassification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject.VehicleClassification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject_VehicleClassification::IsInitialized() const {
  return true;
}

void MovingObject_VehicleClassification::InternalSwap(MovingObject_VehicleClassification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(light_state_, other->light_state_);
  swap(trailer_id_, other->trailer_id_);
  swap(type_, other->type_);
  swap(has_trailer_, other->has_trailer_);
  swap(role_, other->role_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject_VehicleClassification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovingObject::InitAsDefaultInstance() {
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->vehicle_attributes_ = const_cast< ::osi3::MovingObject_VehicleAttributes*>(
      ::osi3::MovingObject_VehicleAttributes::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->vehicle_classification_ = const_cast< ::osi3::MovingObject_VehicleClassification*>(
      ::osi3::MovingObject_VehicleClassification::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->moving_object_classification_ = const_cast< ::osi3::MovingObject_MovingObjectClassification*>(
      ::osi3::MovingObject_MovingObjectClassification::internal_default_instance());
  ::osi3::_MovingObject_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class MovingObject::_Internal {
 public:
  static const ::osi3::Identifier& id(const MovingObject* msg);
  static const ::osi3::BaseMoving& base(const MovingObject* msg);
  static const ::osi3::MovingObject_VehicleAttributes& vehicle_attributes(const MovingObject* msg);
  static const ::osi3::MovingObject_VehicleClassification& vehicle_classification(const MovingObject* msg);
  static const ::osi3::MovingObject_MovingObjectClassification& moving_object_classification(const MovingObject* msg);
  static const ::osi3::ColorDescription& color_description(const MovingObject* msg);
};

const ::osi3::Identifier&
MovingObject::_Internal::id(const MovingObject* msg) {
  return *msg->id_;
}
const ::osi3::BaseMoving&
MovingObject::_Internal::base(const MovingObject* msg) {
  return *msg->base_;
}
const ::osi3::MovingObject_VehicleAttributes&
MovingObject::_Internal::vehicle_attributes(const MovingObject* msg) {
  return *msg->vehicle_attributes_;
}
const ::osi3::MovingObject_VehicleClassification&
MovingObject::_Internal::vehicle_classification(const MovingObject* msg) {
  return *msg->vehicle_classification_;
}
const ::osi3::MovingObject_MovingObjectClassification&
MovingObject::_Internal::moving_object_classification(const MovingObject* msg) {
  return *msg->moving_object_classification_;
}
const ::osi3::ColorDescription&
MovingObject::_Internal::color_description(const MovingObject* msg) {
  return *msg->color_description_;
}
void MovingObject::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void MovingObject::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void MovingObject::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void MovingObject::clear_future_trajectory() {
  future_trajectory_.Clear();
}
void MovingObject::clear_source_reference() {
  source_reference_.Clear();
}
void MovingObject::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
MovingObject::MovingObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.MovingObject)
}
MovingObject::MovingObject(const MovingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assigned_lane_id_(from.assigned_lane_id_),
      future_trajectory_(from.future_trajectory_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_reference().empty()) {
    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseMoving(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_vehicle_attributes()) {
    vehicle_attributes_ = new ::osi3::MovingObject_VehicleAttributes(*from.vehicle_attributes_);
  } else {
    vehicle_attributes_ = nullptr;
  }
  if (from.has_vehicle_classification()) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification(*from.vehicle_classification_);
  } else {
    vehicle_classification_ = nullptr;
  }
  if (from.has_moving_object_classification()) {
    moving_object_classification_ = new ::osi3::MovingObject_MovingObjectClassification(*from.moving_object_classification_);
  } else {
    moving_object_classification_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:osi3.MovingObject)
}

void MovingObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovingObject_osi_5fobject_2eproto.base);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

MovingObject::~MovingObject() {
  // @@protoc_insertion_point(destructor:osi3.MovingObject)
  SharedDtor();
}

void MovingObject::SharedDtor() {
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete vehicle_attributes_;
  if (this != internal_default_instance()) delete vehicle_classification_;
  if (this != internal_default_instance()) delete moving_object_classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void MovingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovingObject& MovingObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovingObject_osi_5fobject_2eproto.base);
  return *internal_default_instance();
}


void MovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.MovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  future_trajectory_.Clear();
  source_reference_.Clear();
  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_attributes_ != nullptr) {
    delete vehicle_attributes_;
  }
  vehicle_attributes_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_classification_ != nullptr) {
    delete vehicle_classification_;
  }
  vehicle_classification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && moving_object_classification_ != nullptr) {
    delete moving_object_classification_;
  }
  moving_object_classification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MovingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseMoving base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::MovingObject_Type>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_vehicle_attributes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_vehicle_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_reference = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_reference(), ptr, ctx, "osi3.MovingObject.model_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.StatePoint future_trajectory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_future_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_moving_object_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MovingObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.MovingObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.Type type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::MovingObject_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_attributes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.MovingObject.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.StatePoint future_trajectory = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_future_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_moving_object_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.MovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.MovingObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MovingObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.MovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.MovingObject.Type type = 3;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->assigned_lane_id(static_cast<int>(i)),
      output);
  }

  // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (this->has_vehicle_attributes()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::vehicle_attributes(this), output);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (this->has_vehicle_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::vehicle_classification(this), output);
  }

  // string model_reference = 7;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.MovingObject.model_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->model_reference(), output);
  }

  // repeated .osi3.StatePoint future_trajectory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->future_trajectory_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->future_trajectory(static_cast<int>(i)),
      output);
  }

  // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
  if (this->has_moving_object_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::moving_object_classification(this), output);
  }

  // repeated .osi3.ExternalReference source_reference = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 11;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.MovingObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.MovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.MovingObject.Type type = 3;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->assigned_lane_id(static_cast<int>(i)), target);
  }

  // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (this->has_vehicle_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::vehicle_attributes(this), target);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (this->has_vehicle_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::vehicle_classification(this), target);
  }

  // string model_reference = 7;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.MovingObject.model_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->model_reference(), target);
  }

  // repeated .osi3.StatePoint future_trajectory = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->future_trajectory_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->future_trajectory(static_cast<int>(i)), target);
  }

  // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
  if (this->has_moving_object_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::moving_object_classification(this), target);
  }

  // repeated .osi3.ExternalReference source_reference = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->source_reference(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 11;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.MovingObject)
  return target;
}

size_t MovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.MovingObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.StatePoint future_trajectory = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->future_trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->future_trajectory(static_cast<int>(i)));
    }
  }

  // repeated .osi3.ExternalReference source_reference = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // string model_reference = 7;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.MovingObject.VehicleAttributes vehicle_attributes = 5;
  if (this->has_vehicle_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_attributes_);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 6;
  if (this->has_vehicle_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_classification_);
  }

  // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 9;
  if (this->has_moving_object_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *moving_object_classification_);
  }

  // .osi3.ColorDescription color_description = 11;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  // .osi3.MovingObject.Type type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.MovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.MovingObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.MovingObject)
    MergeFrom(*source);
  }
}

void MovingObject::MergeFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.MovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  future_trajectory_.MergeFrom(from.future_trajectory_);
  source_reference_.MergeFrom(from.source_reference_);
  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseMoving::MergeFrom(from.base());
  }
  if (from.has_vehicle_attributes()) {
    mutable_vehicle_attributes()->::osi3::MovingObject_VehicleAttributes::MergeFrom(from.vehicle_attributes());
  }
  if (from.has_vehicle_classification()) {
    mutable_vehicle_classification()->::osi3::MovingObject_VehicleClassification::MergeFrom(from.vehicle_classification());
  }
  if (from.has_moving_object_classification()) {
    mutable_moving_object_classification()->::osi3::MovingObject_MovingObjectClassification::MergeFrom(from.moving_object_classification());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void MovingObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject::CopyFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject::IsInitialized() const {
  return true;
}

void MovingObject::InternalSwap(MovingObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&assigned_lane_id_)->InternalSwap(CastToBase(&other->assigned_lane_id_));
  CastToBase(&future_trajectory_)->InternalSwap(CastToBase(&other->future_trajectory_));
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  model_reference_.Swap(&other->model_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(vehicle_attributes_, other->vehicle_attributes_);
  swap(vehicle_classification_, other->vehicle_classification_);
  swap(moving_object_classification_, other->moving_object_classification_);
  swap(color_description_, other->color_description_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::StationaryObject_Classification_EmittingStructureAttribute* Arena::CreateMaybeMessage< ::osi3::StationaryObject_Classification_EmittingStructureAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::StationaryObject_Classification_EmittingStructureAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::StationaryObject_Classification* Arena::CreateMaybeMessage< ::osi3::StationaryObject_Classification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::StationaryObject_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::StationaryObject* Arena::CreateMaybeMessage< ::osi3::StationaryObject >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::StationaryObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleAttributes_WheelData* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleAttributes_WheelData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::MovingObject_VehicleAttributes_WheelData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleAttributes* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleAttributes >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::MovingObject_VehicleAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_MovingObjectClassification* Arena::CreateMaybeMessage< ::osi3::MovingObject_MovingObjectClassification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::MovingObject_MovingObjectClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleClassification_LightState* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleClassification_LightState >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::MovingObject_VehicleClassification_LightState >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject_VehicleClassification* Arena::CreateMaybeMessage< ::osi3::MovingObject_VehicleClassification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::MovingObject_VehicleClassification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::MovingObject* Arena::CreateMaybeMessage< ::osi3::MovingObject >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::MovingObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
