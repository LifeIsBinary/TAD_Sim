// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: moduleService.proto
#pragma warning (disable : 4125)
#include "moduleService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_moduleService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorStatus_moduleService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moduleService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitParams_ParamsEntry_DoNotUse_moduleService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moduleService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimMessage_moduleService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moduleService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimMessage_MessagesEntry_DoNotUse_moduleService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moduleService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopResult_FeedbackEntry_DoNotUse_moduleService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_moduleService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicList_moduleService_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec2_basic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
namespace sim_msg {
class ErrorStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ErrorStatus> _instance;
} _ErrorStatus_default_instance_;
class InitParams_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitParams_ParamsEntry_DoNotUse> _instance;
} _InitParams_ParamsEntry_DoNotUse_default_instance_;
class InitParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitParams> _instance;
} _InitParams_default_instance_;
class TopicListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicList> _instance;
} _TopicList_default_instance_;
class InitResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitResult> _instance;
} _InitResult_default_instance_;
class ResetParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetParams> _instance;
} _ResetParams_default_instance_;
class SimMessage_MessagesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimMessage_MessagesEntry_DoNotUse> _instance;
} _SimMessage_MessagesEntry_DoNotUse_default_instance_;
class SimMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SimMessage> _instance;
} _SimMessage_default_instance_;
class StepResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StepResult> _instance;
} _StepResult_default_instance_;
class StopResult_FeedbackEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopResult_FeedbackEntry_DoNotUse> _instance;
} _StopResult_FeedbackEntry_DoNotUse_default_instance_;
class StopResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopResult> _instance;
} _StopResult_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_ErrorStatus_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ErrorStatus_default_instance_;
    new (ptr) ::sim_msg::ErrorStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ErrorStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ErrorStatus_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ErrorStatus_moduleService_2eproto}, {}};

static void InitDefaultsscc_info_InitParams_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_InitParams_default_instance_;
    new (ptr) ::sim_msg::InitParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::InitParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitParams_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InitParams_moduleService_2eproto}, {
      &scc_info_InitParams_ParamsEntry_DoNotUse_moduleService_2eproto.base,}};

static void InitDefaultsscc_info_InitParams_ParamsEntry_DoNotUse_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_InitParams_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::sim_msg::InitParams_ParamsEntry_DoNotUse();
  }
  ::sim_msg::InitParams_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitParams_ParamsEntry_DoNotUse_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InitParams_ParamsEntry_DoNotUse_moduleService_2eproto}, {}};

static void InitDefaultsscc_info_InitResult_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_InitResult_default_instance_;
    new (ptr) ::sim_msg::InitResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::InitResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitResult_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_InitResult_moduleService_2eproto}, {
      &scc_info_TopicList_moduleService_2eproto.base,
      &scc_info_ErrorStatus_moduleService_2eproto.base,}};

static void InitDefaultsscc_info_ResetParams_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ResetParams_default_instance_;
    new (ptr) ::sim_msg::ResetParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ResetParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ResetParams_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ResetParams_moduleService_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,
      &scc_info_Vec2_basic_2eproto.base,}};

static void InitDefaultsscc_info_SimMessage_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SimMessage_default_instance_;
    new (ptr) ::sim_msg::SimMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::SimMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SimMessage_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SimMessage_moduleService_2eproto}, {
      &scc_info_SimMessage_MessagesEntry_DoNotUse_moduleService_2eproto.base,}};

static void InitDefaultsscc_info_SimMessage_MessagesEntry_DoNotUse_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SimMessage_MessagesEntry_DoNotUse_default_instance_;
    new (ptr) ::sim_msg::SimMessage_MessagesEntry_DoNotUse();
  }
  ::sim_msg::SimMessage_MessagesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SimMessage_MessagesEntry_DoNotUse_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SimMessage_MessagesEntry_DoNotUse_moduleService_2eproto}, {}};

static void InitDefaultsscc_info_StepResult_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_StepResult_default_instance_;
    new (ptr) ::sim_msg::StepResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::StepResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StepResult_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StepResult_moduleService_2eproto}, {
      &scc_info_SimMessage_moduleService_2eproto.base,
      &scc_info_ErrorStatus_moduleService_2eproto.base,}};

static void InitDefaultsscc_info_StopResult_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_StopResult_default_instance_;
    new (ptr) ::sim_msg::StopResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::StopResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StopResult_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_StopResult_moduleService_2eproto}, {
      &scc_info_StopResult_FeedbackEntry_DoNotUse_moduleService_2eproto.base,
      &scc_info_ErrorStatus_moduleService_2eproto.base,}};

static void InitDefaultsscc_info_StopResult_FeedbackEntry_DoNotUse_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_StopResult_FeedbackEntry_DoNotUse_default_instance_;
    new (ptr) ::sim_msg::StopResult_FeedbackEntry_DoNotUse();
  }
  ::sim_msg::StopResult_FeedbackEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopResult_FeedbackEntry_DoNotUse_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_StopResult_FeedbackEntry_DoNotUse_moduleService_2eproto}, {}};

static void InitDefaultsscc_info_TopicList_moduleService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TopicList_default_instance_;
    new (ptr) ::sim_msg::TopicList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TopicList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicList_moduleService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TopicList_moduleService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_moduleService_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_moduleService_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_moduleService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_moduleService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ErrorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ErrorStatus, errorcode_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ErrorStatus, errormessage_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitParams_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitParams_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitParams_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitParams_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitParams, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TopicList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TopicList, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitResult, topics_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitResult, errorstatus_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitResult, str_topics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, scenariopath_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, hadmappath_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, startpos_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, endpos_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, startvel_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, maxvel_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, theta_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, speedlimit_max_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, speedlimit_min_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, accelerationlimit_max_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, accelerationlimit_min_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, rosbagfilepath_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, localorigin_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, timeheadway_min_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, job_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, scene_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, ego_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, geo_fence_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ResetParams, ego_path_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage_MessagesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage_MessagesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage_MessagesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage_MessagesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage, messages_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage, frameid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::SimMessage, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StepResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StepResult, result_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StepResult, errorstatus_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StepResult, timecost_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StopResult_FeedbackEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StopResult_FeedbackEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StopResult_FeedbackEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StopResult_FeedbackEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StopResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StopResult, feedback_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StopResult, errorstatus_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::ErrorStatus)},
  { 7, 14, sizeof(::sim_msg::InitParams_ParamsEntry_DoNotUse)},
  { 16, -1, sizeof(::sim_msg::InitParams)},
  { 22, -1, sizeof(::sim_msg::TopicList)},
  { 28, -1, sizeof(::sim_msg::InitResult)},
  { 36, -1, sizeof(::sim_msg::ResetParams)},
  { 60, 67, sizeof(::sim_msg::SimMessage_MessagesEntry_DoNotUse)},
  { 69, -1, sizeof(::sim_msg::SimMessage)},
  { 77, -1, sizeof(::sim_msg::StepResult)},
  { 85, 92, sizeof(::sim_msg::StopResult_FeedbackEntry_DoNotUse)},
  { 94, -1, sizeof(::sim_msg::StopResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ErrorStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_InitParams_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_InitParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TopicList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_InitResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ResetParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_SimMessage_MessagesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_SimMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_StepResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_StopResult_FeedbackEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_StopResult_default_instance_),
};

const char descriptor_table_protodef_moduleService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023moduleService.proto\022\007sim_msg\032\013basic.pr"
  "oto\"J\n\013ErrorStatus\022%\n\terrorCode\030\001 \001(\0162\022."
  "sim_msg.ErrorCode\022\024\n\014errorMessage\030\002 \001(\t\""
  "l\n\nInitParams\022/\n\006params\030\001 \003(\0132\037.sim_msg."
  "InitParams.ParamsEntry\032-\n\013ParamsEntry\022\013\n"
  "\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"*\n\tTopicLi"
  "st\022\035\n\005topic\030\001 \003(\0162\016.sim_msg.Topic\"o\n\nIni"
  "tResult\022\"\n\006topics\030\001 \001(\0132\022.sim_msg.TopicL"
  "ist\022)\n\013errorStatus\030\002 \001(\0132\024.sim_msg.Error"
  "Status\022\022\n\nstr_topics\030\003 \003(\t\"\340\003\n\013ResetPara"
  "ms\022\024\n\014scenarioPath\030\001 \001(\t\022\022\n\nhadmapPath\030\002"
  " \001(\t\022\037\n\010startPos\030\003 \001(\0132\r.sim_msg.Vec3\022\035\n"
  "\006endPos\030\004 \001(\0132\r.sim_msg.Vec3\022\020\n\010startVel"
  "\030\005 \001(\001\022\016\n\006maxVel\030\006 \001(\001\022\r\n\005theta\030\007 \001(\001\022\026\n"
  "\016speedLimit_Max\030\010 \001(\001\022\026\n\016speedLimit_Min\030"
  "\t \001(\001\022\035\n\025accelerationLimit_Max\030\n \001(\001\022\035\n\025"
  "accelerationLimit_Min\030\013 \001(\001\022\026\n\016rosbagFil"
  "ePath\030\014 \001(\t\022\"\n\013localOrigin\030\r \001(\0132\r.sim_m"
  "sg.Vec3\022\027\n\017timeheadway_Min\030\016 \001(\001\022\016\n\006job_"
  "id\030\017 \001(\005\022\020\n\010scene_id\030\020 \001(\005\022\016\n\006ego_id\030\021 \001"
  "(\005\022 \n\tgeo_fence\030\022 \003(\0132\r.sim_msg.Vec2\022\037\n\010"
  "ego_path\030\023 \003(\0132\r.sim_msg.Vec3\"\226\001\n\nSimMes"
  "sage\0223\n\010messages\030\001 \003(\0132!.sim_msg.SimMess"
  "age.MessagesEntry\022\017\n\007frameId\030\002 \001(\004\022\021\n\tti"
  "meStamp\030\003 \001(\001\032/\n\rMessagesEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"n\n\nStepResult\022#\n\006"
  "result\030\001 \001(\0132\023.sim_msg.SimMessage\022)\n\013err"
  "orStatus\030\002 \001(\0132\024.sim_msg.ErrorStatus\022\020\n\010"
  "timeCost\030\003 \001(\001\"\235\001\n\nStopResult\0223\n\010feedbac"
  "k\030\001 \003(\0132!.sim_msg.StopResult.FeedbackEnt"
  "ry\022)\n\013errorStatus\030\002 \001(\0132\024.sim_msg.ErrorS"
  "tatus\032/\n\rFeedbackEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005v"
  "alue\030\002 \001(\t:\0028\001*\303\002\n\005Topic\022\014\n\010LOCATION\020\000\022\013"
  "\n\007TRAFFIC\020\001\022\016\n\nTRAJECTORY\020\002\022\017\n\013PLAN_OUTP"
  "UT\020\003\022\013\n\007CONTROL\020\004\022\r\n\tIBEO_DATA\020\005\022\016\n\nLANE"
  "_MARKS\020\006\022\022\n\016LOCAL_LOCATION\020\007\022\013\n\007GRADING\020"
  "\010\022\023\n\017PLAN_DEBUG_INFO\020\t\022\020\n\014GROUND_TRUTH\020\n"
  "\022\026\n\022CAMERA_SENSOR_VIEW\020\013\022\022\n\016GT_SENSOR_DA"
  "TA\020\014\022\017\n\013PLAN_STATUS\020\r\022\024\n\020L3_STATE_MACHIN"
  "E\020\016\022\023\n\017L3_SYSTEM_STATE\020\017\022\017\n\013EGO_TRAFFIC\020"
  "\020\022\021\n\rVEHICLE_STATE\020\021*\352\001\n\tErrorCode\022\013\n\007SU"
  "CCESS\020\000\022\017\n\013MODULE_STOP\020\001\022\016\n\nERROR_INIT\020\002"
  "\022\017\n\013ERROR_RESET\020\003\022\016\n\nERROR_STEP\020\004\022\016\n\nERR"
  "OR_STOP\020\005\022\022\n\016ERROR_NOT_INIT\020\006\022\027\n\023ERROR_M"
  "ULTI_CONNECT\020\007\022\021\n\rERROR_CONNECT\020\010\022\025\n\021ERR"
  "OR_INVALID_CAR\020\t\022\024\n\020ERROR_NOT_BELONG\020\n\022\021"
  "\n\rERROR_UNKNOWN\020\013b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_moduleService_2eproto_deps[1] = {
  &::descriptor_table_basic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_moduleService_2eproto_sccs[11] = {
  &scc_info_ErrorStatus_moduleService_2eproto.base,
  &scc_info_InitParams_moduleService_2eproto.base,
  &scc_info_InitParams_ParamsEntry_DoNotUse_moduleService_2eproto.base,
  &scc_info_InitResult_moduleService_2eproto.base,
  &scc_info_ResetParams_moduleService_2eproto.base,
  &scc_info_SimMessage_moduleService_2eproto.base,
  &scc_info_SimMessage_MessagesEntry_DoNotUse_moduleService_2eproto.base,
  &scc_info_StepResult_moduleService_2eproto.base,
  &scc_info_StopResult_moduleService_2eproto.base,
  &scc_info_StopResult_FeedbackEntry_DoNotUse_moduleService_2eproto.base,
  &scc_info_TopicList_moduleService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_moduleService_2eproto_once;
static bool descriptor_table_moduleService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_moduleService_2eproto = {
  &descriptor_table_moduleService_2eproto_initialized, descriptor_table_protodef_moduleService_2eproto, "moduleService.proto", 1865,
  &descriptor_table_moduleService_2eproto_once, descriptor_table_moduleService_2eproto_sccs, descriptor_table_moduleService_2eproto_deps, 11, 1,
  schemas, file_default_instances, TableStruct_moduleService_2eproto::offsets,
  file_level_metadata_moduleService_2eproto, 11, file_level_enum_descriptors_moduleService_2eproto, file_level_service_descriptors_moduleService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_moduleService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_moduleService_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Topic_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_moduleService_2eproto);
  return file_level_enum_descriptors_moduleService_2eproto[0];
}
bool Topic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_moduleService_2eproto);
  return file_level_enum_descriptors_moduleService_2eproto[1];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ErrorStatus::InitAsDefaultInstance() {
}
class ErrorStatus::_Internal {
 public:
};

ErrorStatus::ErrorStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ErrorStatus)
}
ErrorStatus::ErrorStatus(const ErrorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.errormessage().empty()) {
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  errorcode_ = from.errorcode_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.ErrorStatus)
}

void ErrorStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ErrorStatus_moduleService_2eproto.base);
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0;
}

ErrorStatus::~ErrorStatus() {
  // @@protoc_insertion_point(destructor:sim_msg.ErrorStatus)
  SharedDtor();
}

void ErrorStatus::SharedDtor() {
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ErrorStatus& ErrorStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ErrorStatus_moduleService_2eproto.base);
  return *internal_default_instance();
}


void ErrorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ErrorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errorcode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ErrorStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.ErrorCode errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_errorcode(static_cast<::sim_msg::ErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string errorMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_errormessage(), ptr, ctx, "sim_msg.ErrorStatus.errorMessage");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ErrorStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ErrorStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.ErrorCode errorCode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_errorcode(static_cast< ::sim_msg::ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errorMessage = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_errormessage()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->errormessage().data(), static_cast<int>(this->errormessage().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ErrorStatus.errorMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ErrorStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ErrorStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ErrorStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ErrorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.ErrorCode errorCode = 1;
  if (this->errorcode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->errorcode(), output);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ErrorStatus.errorMessage");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errormessage(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ErrorStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* ErrorStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ErrorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.ErrorCode errorCode = 1;
  if (this->errorcode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->errorcode(), target);
  }

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->errormessage().data(), static_cast<int>(this->errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ErrorStatus.errorMessage");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->errormessage(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ErrorStatus)
  return target;
}

size_t ErrorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ErrorStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errorMessage = 2;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->errormessage());
  }

  // .sim_msg.ErrorCode errorCode = 1;
  if (this->errorcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->errorcode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ErrorStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ErrorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ErrorStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ErrorStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ErrorStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ErrorStatus)
    MergeFrom(*source);
  }
}

void ErrorStatus::MergeFrom(const ErrorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ErrorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.errorcode() != 0) {
    set_errorcode(from.errorcode());
  }
}

void ErrorStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorStatus::CopyFrom(const ErrorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ErrorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorStatus::IsInitialized() const {
  return true;
}

void ErrorStatus::InternalSwap(ErrorStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(errorcode_, other->errorcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InitParams_ParamsEntry_DoNotUse::InitParams_ParamsEntry_DoNotUse() {}
InitParams_ParamsEntry_DoNotUse::InitParams_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InitParams_ParamsEntry_DoNotUse::MergeFrom(const InitParams_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InitParams_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InitParams_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InitParams::InitAsDefaultInstance() {
}
class InitParams::_Internal {
 public:
};

InitParams::InitParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.InitParams)
}
InitParams::InitParams(const InitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.InitParams)
}

void InitParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitParams_moduleService_2eproto.base);
}

InitParams::~InitParams() {
  // @@protoc_insertion_point(destructor:sim_msg.InitParams)
  SharedDtor();
}

void InitParams::SharedDtor() {
}

void InitParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitParams& InitParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitParams_moduleService_2eproto.base);
  return *internal_default_instance();
}


void InitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.InitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.InitParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> params = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          InitParams_ParamsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              InitParams_ParamsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&params_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.InitParams.ParamsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.InitParams.ParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.InitParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.InitParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.InitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> params = 1;
  if (!this->params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.InitParams.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.InitParams.ParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        InitParams_ParamsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        InitParams_ParamsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.InitParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.InitParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> params = 1;
  if (!this->params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.InitParams.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.InitParams.ParamsEntry.value");
      }
    };

    if (false &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InitParams_ParamsEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        target = InitParams_ParamsEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.InitParams)
  return target;
}

size_t InitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.InitParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->params().begin();
      it != this->params().end(); ++it) {
    total_size += InitParams_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.InitParams)
  GOOGLE_DCHECK_NE(&from, this);
  const InitParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.InitParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.InitParams)
    MergeFrom(*source);
  }
}

void InitParams::MergeFrom(const InitParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.InitParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
}

void InitParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.InitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitParams::CopyFrom(const InitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.InitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitParams::IsInitialized() const {
  return true;
}

void InitParams::InternalSwap(InitParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.Swap(&other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicList::InitAsDefaultInstance() {
}
class TopicList::_Internal {
 public:
};

TopicList::TopicList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TopicList)
}
TopicList::TopicList(const TopicList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      topic_(from.topic_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.TopicList)
}

void TopicList::SharedCtor() {
}

TopicList::~TopicList() {
  // @@protoc_insertion_point(destructor:sim_msg.TopicList)
  SharedDtor();
}

void TopicList::SharedDtor() {
}

void TopicList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicList& TopicList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicList_moduleService_2eproto.base);
  return *internal_default_instance();
}


void TopicList::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TopicList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TopicList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.Topic topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_topic(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_topic(static_cast<::sim_msg::Topic>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TopicList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TopicList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Topic topic = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_topic(static_cast< ::sim_msg::Topic >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_topic(static_cast< ::sim_msg::Topic >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TopicList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TopicList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TopicList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TopicList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Topic topic = 1;
  if (this->topic_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_topic_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->topic_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->topic(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TopicList)
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TopicList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Topic topic = 1;
  if (this->topic_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _topic_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->topic_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TopicList)
  return target;
}

size_t TopicList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TopicList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Topic topic = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->topic_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->topic(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _topic_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TopicList)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TopicList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TopicList)
    MergeFrom(*source);
  }
}

void TopicList::MergeFrom(const TopicList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TopicList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topic_.MergeFrom(from.topic_);
}

void TopicList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TopicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicList::CopyFrom(const TopicList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TopicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicList::IsInitialized() const {
  return true;
}

void TopicList::InternalSwap(TopicList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.InternalSwap(&other->topic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitResult::InitAsDefaultInstance() {
  ::sim_msg::_InitResult_default_instance_._instance.get_mutable()->topics_ = const_cast< ::sim_msg::TopicList*>(
      ::sim_msg::TopicList::internal_default_instance());
  ::sim_msg::_InitResult_default_instance_._instance.get_mutable()->errorstatus_ = const_cast< ::sim_msg::ErrorStatus*>(
      ::sim_msg::ErrorStatus::internal_default_instance());
}
class InitResult::_Internal {
 public:
  static const ::sim_msg::TopicList& topics(const InitResult* msg);
  static const ::sim_msg::ErrorStatus& errorstatus(const InitResult* msg);
};

const ::sim_msg::TopicList&
InitResult::_Internal::topics(const InitResult* msg) {
  return *msg->topics_;
}
const ::sim_msg::ErrorStatus&
InitResult::_Internal::errorstatus(const InitResult* msg) {
  return *msg->errorstatus_;
}
InitResult::InitResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.InitResult)
}
InitResult::InitResult(const InitResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      str_topics_(from.str_topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_topics()) {
    topics_ = new ::sim_msg::TopicList(*from.topics_);
  } else {
    topics_ = nullptr;
  }
  if (from.has_errorstatus()) {
    errorstatus_ = new ::sim_msg::ErrorStatus(*from.errorstatus_);
  } else {
    errorstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.InitResult)
}

void InitResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitResult_moduleService_2eproto.base);
  ::memset(&topics_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errorstatus_) -
      reinterpret_cast<char*>(&topics_)) + sizeof(errorstatus_));
}

InitResult::~InitResult() {
  // @@protoc_insertion_point(destructor:sim_msg.InitResult)
  SharedDtor();
}

void InitResult::SharedDtor() {
  if (this != internal_default_instance()) delete topics_;
  if (this != internal_default_instance()) delete errorstatus_;
}

void InitResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitResult& InitResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitResult_moduleService_2eproto.base);
  return *internal_default_instance();
}


void InitResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.InitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  str_topics_.Clear();
  if (GetArenaNoVirtual() == nullptr && topics_ != nullptr) {
    delete topics_;
  }
  topics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && errorstatus_ != nullptr) {
    delete errorstatus_;
  }
  errorstatus_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.TopicList topics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_topics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ErrorStatus errorStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_errorstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string str_topics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(add_str_topics(), ptr, ctx, "sim_msg.InitResult.str_topics");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.InitResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.TopicList topics = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_topics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ErrorStatus errorStatus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string str_topics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_str_topics()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->str_topics(this->str_topics_size() - 1).data(),
            static_cast<int>(this->str_topics(this->str_topics_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.InitResult.str_topics"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.InitResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.InitResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.InitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.TopicList topics = 1;
  if (this->has_topics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::topics(this), output);
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::errorstatus(this), output);
  }

  // repeated string str_topics = 3;
  for (int i = 0, n = this->str_topics_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str_topics(i).data(), static_cast<int>(this->str_topics(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.InitResult.str_topics");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->str_topics(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.InitResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.InitResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.TopicList topics = 1;
  if (this->has_topics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::topics(this), target);
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::errorstatus(this), target);
  }

  // repeated string str_topics = 3;
  for (int i = 0, n = this->str_topics_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->str_topics(i).data(), static_cast<int>(this->str_topics(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.InitResult.str_topics");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->str_topics(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.InitResult)
  return target;
}

size_t InitResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.InitResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string str_topics = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->str_topics_size());
  for (int i = 0, n = this->str_topics_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->str_topics(i));
  }

  // .sim_msg.TopicList topics = 1;
  if (this->has_topics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topics_);
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorstatus_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.InitResult)
  GOOGLE_DCHECK_NE(&from, this);
  const InitResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.InitResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.InitResult)
    MergeFrom(*source);
  }
}

void InitResult::MergeFrom(const InitResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.InitResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  str_topics_.MergeFrom(from.str_topics_);
  if (from.has_topics()) {
    mutable_topics()->::sim_msg::TopicList::MergeFrom(from.topics());
  }
  if (from.has_errorstatus()) {
    mutable_errorstatus()->::sim_msg::ErrorStatus::MergeFrom(from.errorstatus());
  }
}

void InitResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.InitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitResult::CopyFrom(const InitResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.InitResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitResult::IsInitialized() const {
  return true;
}

void InitResult::InternalSwap(InitResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  str_topics_.InternalSwap(CastToBase(&other->str_topics_));
  swap(topics_, other->topics_);
  swap(errorstatus_, other->errorstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetParams::InitAsDefaultInstance() {
  ::sim_msg::_ResetParams_default_instance_._instance.get_mutable()->startpos_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_ResetParams_default_instance_._instance.get_mutable()->endpos_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_ResetParams_default_instance_._instance.get_mutable()->localorigin_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}
class ResetParams::_Internal {
 public:
  static const ::sim_msg::Vec3& startpos(const ResetParams* msg);
  static const ::sim_msg::Vec3& endpos(const ResetParams* msg);
  static const ::sim_msg::Vec3& localorigin(const ResetParams* msg);
};

const ::sim_msg::Vec3&
ResetParams::_Internal::startpos(const ResetParams* msg) {
  return *msg->startpos_;
}
const ::sim_msg::Vec3&
ResetParams::_Internal::endpos(const ResetParams* msg) {
  return *msg->endpos_;
}
const ::sim_msg::Vec3&
ResetParams::_Internal::localorigin(const ResetParams* msg) {
  return *msg->localorigin_;
}
void ResetParams::clear_startpos() {
  if (GetArenaNoVirtual() == nullptr && startpos_ != nullptr) {
    delete startpos_;
  }
  startpos_ = nullptr;
}
void ResetParams::clear_endpos() {
  if (GetArenaNoVirtual() == nullptr && endpos_ != nullptr) {
    delete endpos_;
  }
  endpos_ = nullptr;
}
void ResetParams::clear_localorigin() {
  if (GetArenaNoVirtual() == nullptr && localorigin_ != nullptr) {
    delete localorigin_;
  }
  localorigin_ = nullptr;
}
void ResetParams::clear_geo_fence() {
  geo_fence_.Clear();
}
void ResetParams::clear_ego_path() {
  ego_path_.Clear();
}
ResetParams::ResetParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ResetParams)
}
ResetParams::ResetParams(const ResetParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      geo_fence_(from.geo_fence_),
      ego_path_(from.ego_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scenariopath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.scenariopath().empty()) {
    scenariopath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenariopath_);
  }
  hadmappath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.hadmappath().empty()) {
    hadmappath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hadmappath_);
  }
  rosbagfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.rosbagfilepath().empty()) {
    rosbagfilepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rosbagfilepath_);
  }
  if (from.has_startpos()) {
    startpos_ = new ::sim_msg::Vec3(*from.startpos_);
  } else {
    startpos_ = nullptr;
  }
  if (from.has_endpos()) {
    endpos_ = new ::sim_msg::Vec3(*from.endpos_);
  } else {
    endpos_ = nullptr;
  }
  if (from.has_localorigin()) {
    localorigin_ = new ::sim_msg::Vec3(*from.localorigin_);
  } else {
    localorigin_ = nullptr;
  }
  ::memcpy(&startvel_, &from.startvel_,
    static_cast<size_t>(reinterpret_cast<char*>(&ego_id_) -
    reinterpret_cast<char*>(&startvel_)) + sizeof(ego_id_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ResetParams)
}

void ResetParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetParams_moduleService_2eproto.base);
  scenariopath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hadmappath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rosbagfilepath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&startpos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_id_) -
      reinterpret_cast<char*>(&startpos_)) + sizeof(ego_id_));
}

ResetParams::~ResetParams() {
  // @@protoc_insertion_point(destructor:sim_msg.ResetParams)
  SharedDtor();
}

void ResetParams::SharedDtor() {
  scenariopath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hadmappath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rosbagfilepath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete startpos_;
  if (this != internal_default_instance()) delete endpos_;
  if (this != internal_default_instance()) delete localorigin_;
}

void ResetParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetParams& ResetParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetParams_moduleService_2eproto.base);
  return *internal_default_instance();
}


void ResetParams::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ResetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_fence_.Clear();
  ego_path_.Clear();
  scenariopath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hadmappath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rosbagfilepath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && startpos_ != nullptr) {
    delete startpos_;
  }
  startpos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && endpos_ != nullptr) {
    delete endpos_;
  }
  endpos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && localorigin_ != nullptr) {
    delete localorigin_;
  }
  localorigin_ = nullptr;
  ::memset(&startvel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ego_id_) -
      reinterpret_cast<char*>(&startvel_)) + sizeof(ego_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ResetParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scenarioPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_scenariopath(), ptr, ctx, "sim_msg.ResetParams.scenarioPath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hadmapPath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_hadmappath(), ptr, ctx, "sim_msg.ResetParams.hadmapPath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 startPos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_startpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 endPos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_endpos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double startVel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          startvel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maxVel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          maxvel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speedLimit_Max = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          speedlimit_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speedLimit_Min = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          speedlimit_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accelerationLimit_Max = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          accelerationlimit_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accelerationLimit_Min = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          accelerationlimit_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string rosbagFilePath = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_rosbagfilepath(), ptr, ctx, "sim_msg.ResetParams.rosbagFilePath");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 localOrigin = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_localorigin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timeheadway_Min = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          timeheadway_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 job_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          job_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ego_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ego_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Vec2 geo_fence = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_geo_fence(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Vec3 ego_path = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_ego_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ResetParams::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ResetParams)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scenarioPath = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scenariopath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->scenariopath().data(), static_cast<int>(this->scenariopath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ResetParams.scenarioPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string hadmapPath = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_hadmappath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->hadmappath().data(), static_cast<int>(this->hadmappath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ResetParams.hadmapPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 startPos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_startpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 endPos = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_endpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double startVel = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startvel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double maxVel = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxvel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speedLimit_Max = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speedlimit_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speedLimit_Min = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speedlimit_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accelerationLimit_Max = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerationlimit_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accelerationLimit_Min = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accelerationlimit_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string rosbagFilePath = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_rosbagfilepath()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->rosbagfilepath().data(), static_cast<int>(this->rosbagfilepath().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ResetParams.rosbagFilePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 localOrigin = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_localorigin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timeheadway_Min = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeheadway_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 job_id = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 scene_id = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ego_id = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &ego_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Vec2 geo_fence = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_geo_fence()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Vec3 ego_path = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ego_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ResetParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ResetParams)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ResetParams::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ResetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scenarioPath = 1;
  if (this->scenariopath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->scenariopath().data(), static_cast<int>(this->scenariopath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ResetParams.scenarioPath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scenariopath(), output);
  }

  // string hadmapPath = 2;
  if (this->hadmappath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hadmappath().data(), static_cast<int>(this->hadmappath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ResetParams.hadmapPath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->hadmappath(), output);
  }

  // .sim_msg.Vec3 startPos = 3;
  if (this->has_startpos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::startpos(this), output);
  }

  // .sim_msg.Vec3 endPos = 4;
  if (this->has_endpos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::endpos(this), output);
  }

  // double startVel = 5;
  if (!(this->startvel() <= 0 && this->startvel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->startvel(), output);
  }

  // double maxVel = 6;
  if (!(this->maxvel() <= 0 && this->maxvel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->maxvel(), output);
  }

  // double theta = 7;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->theta(), output);
  }

  // double speedLimit_Max = 8;
  if (!(this->speedlimit_max() <= 0 && this->speedlimit_max() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->speedlimit_max(), output);
  }

  // double speedLimit_Min = 9;
  if (!(this->speedlimit_min() <= 0 && this->speedlimit_min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->speedlimit_min(), output);
  }

  // double accelerationLimit_Max = 10;
  if (!(this->accelerationlimit_max() <= 0 && this->accelerationlimit_max() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->accelerationlimit_max(), output);
  }

  // double accelerationLimit_Min = 11;
  if (!(this->accelerationlimit_min() <= 0 && this->accelerationlimit_min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->accelerationlimit_min(), output);
  }

  // string rosbagFilePath = 12;
  if (this->rosbagfilepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rosbagfilepath().data(), static_cast<int>(this->rosbagfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ResetParams.rosbagFilePath");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->rosbagfilepath(), output);
  }

  // .sim_msg.Vec3 localOrigin = 13;
  if (this->has_localorigin()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::localorigin(this), output);
  }

  // double timeheadway_Min = 14;
  if (!(this->timeheadway_min() <= 0 && this->timeheadway_min() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->timeheadway_min(), output);
  }

  // int32 job_id = 15;
  if (this->job_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->job_id(), output);
  }

  // int32 scene_id = 16;
  if (this->scene_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->scene_id(), output);
  }

  // int32 ego_id = 17;
  if (this->ego_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(17, this->ego_id(), output);
  }

  // repeated .sim_msg.Vec2 geo_fence = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_fence_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->geo_fence(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Vec3 ego_path = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_path_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->ego_path(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ResetParams)
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ResetParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scenarioPath = 1;
  if (this->scenariopath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->scenariopath().data(), static_cast<int>(this->scenariopath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ResetParams.scenarioPath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->scenariopath(), target);
  }

  // string hadmapPath = 2;
  if (this->hadmappath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->hadmappath().data(), static_cast<int>(this->hadmappath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ResetParams.hadmapPath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->hadmappath(), target);
  }

  // .sim_msg.Vec3 startPos = 3;
  if (this->has_startpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::startpos(this), target);
  }

  // .sim_msg.Vec3 endPos = 4;
  if (this->has_endpos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::endpos(this), target);
  }

  // double startVel = 5;
  if (!(this->startvel() <= 0 && this->startvel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->startvel(), target);
  }

  // double maxVel = 6;
  if (!(this->maxvel() <= 0 && this->maxvel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->maxvel(), target);
  }

  // double theta = 7;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->theta(), target);
  }

  // double speedLimit_Max = 8;
  if (!(this->speedlimit_max() <= 0 && this->speedlimit_max() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->speedlimit_max(), target);
  }

  // double speedLimit_Min = 9;
  if (!(this->speedlimit_min() <= 0 && this->speedlimit_min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->speedlimit_min(), target);
  }

  // double accelerationLimit_Max = 10;
  if (!(this->accelerationlimit_max() <= 0 && this->accelerationlimit_max() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->accelerationlimit_max(), target);
  }

  // double accelerationLimit_Min = 11;
  if (!(this->accelerationlimit_min() <= 0 && this->accelerationlimit_min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->accelerationlimit_min(), target);
  }

  // string rosbagFilePath = 12;
  if (this->rosbagfilepath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->rosbagfilepath().data(), static_cast<int>(this->rosbagfilepath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ResetParams.rosbagFilePath");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->rosbagfilepath(), target);
  }

  // .sim_msg.Vec3 localOrigin = 13;
  if (this->has_localorigin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::localorigin(this), target);
  }

  // double timeheadway_Min = 14;
  if (!(this->timeheadway_min() <= 0 && this->timeheadway_min() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->timeheadway_min(), target);
  }

  // int32 job_id = 15;
  if (this->job_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->job_id(), target);
  }

  // int32 scene_id = 16;
  if (this->scene_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->scene_id(), target);
  }

  // int32 ego_id = 17;
  if (this->ego_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(17, this->ego_id(), target);
  }

  // repeated .sim_msg.Vec2 geo_fence = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->geo_fence_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->geo_fence(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Vec3 ego_path = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_path_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->ego_path(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ResetParams)
  return target;
}

size_t ResetParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ResetParams)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Vec2 geo_fence = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->geo_fence_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->geo_fence(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Vec3 ego_path = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->ego_path_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ego_path(static_cast<int>(i)));
    }
  }

  // string scenarioPath = 1;
  if (this->scenariopath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scenariopath());
  }

  // string hadmapPath = 2;
  if (this->hadmappath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->hadmappath());
  }

  // string rosbagFilePath = 12;
  if (this->rosbagfilepath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->rosbagfilepath());
  }

  // .sim_msg.Vec3 startPos = 3;
  if (this->has_startpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startpos_);
  }

  // .sim_msg.Vec3 endPos = 4;
  if (this->has_endpos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpos_);
  }

  // .sim_msg.Vec3 localOrigin = 13;
  if (this->has_localorigin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *localorigin_);
  }

  // double startVel = 5;
  if (!(this->startvel() <= 0 && this->startvel() >= 0)) {
    total_size += 1 + 8;
  }

  // double maxVel = 6;
  if (!(this->maxvel() <= 0 && this->maxvel() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 7;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double speedLimit_Max = 8;
  if (!(this->speedlimit_max() <= 0 && this->speedlimit_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double speedLimit_Min = 9;
  if (!(this->speedlimit_min() <= 0 && this->speedlimit_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerationLimit_Max = 10;
  if (!(this->accelerationlimit_max() <= 0 && this->accelerationlimit_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerationLimit_Min = 11;
  if (!(this->accelerationlimit_min() <= 0 && this->accelerationlimit_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double timeheadway_Min = 14;
  if (!(this->timeheadway_min() <= 0 && this->timeheadway_min() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 job_id = 15;
  if (this->job_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->job_id());
  }

  // int32 scene_id = 16;
  if (this->scene_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->scene_id());
  }

  // int32 ego_id = 17;
  if (this->ego_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->ego_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ResetParams)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ResetParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ResetParams)
    MergeFrom(*source);
  }
}

void ResetParams::MergeFrom(const ResetParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ResetParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_fence_.MergeFrom(from.geo_fence_);
  ego_path_.MergeFrom(from.ego_path_);
  if (from.scenariopath().size() > 0) {

    scenariopath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scenariopath_);
  }
  if (from.hadmappath().size() > 0) {

    hadmappath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hadmappath_);
  }
  if (from.rosbagfilepath().size() > 0) {

    rosbagfilepath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rosbagfilepath_);
  }
  if (from.has_startpos()) {
    mutable_startpos()->::sim_msg::Vec3::MergeFrom(from.startpos());
  }
  if (from.has_endpos()) {
    mutable_endpos()->::sim_msg::Vec3::MergeFrom(from.endpos());
  }
  if (from.has_localorigin()) {
    mutable_localorigin()->::sim_msg::Vec3::MergeFrom(from.localorigin());
  }
  if (!(from.startvel() <= 0 && from.startvel() >= 0)) {
    set_startvel(from.startvel());
  }
  if (!(from.maxvel() <= 0 && from.maxvel() >= 0)) {
    set_maxvel(from.maxvel());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    set_theta(from.theta());
  }
  if (!(from.speedlimit_max() <= 0 && from.speedlimit_max() >= 0)) {
    set_speedlimit_max(from.speedlimit_max());
  }
  if (!(from.speedlimit_min() <= 0 && from.speedlimit_min() >= 0)) {
    set_speedlimit_min(from.speedlimit_min());
  }
  if (!(from.accelerationlimit_max() <= 0 && from.accelerationlimit_max() >= 0)) {
    set_accelerationlimit_max(from.accelerationlimit_max());
  }
  if (!(from.accelerationlimit_min() <= 0 && from.accelerationlimit_min() >= 0)) {
    set_accelerationlimit_min(from.accelerationlimit_min());
  }
  if (!(from.timeheadway_min() <= 0 && from.timeheadway_min() >= 0)) {
    set_timeheadway_min(from.timeheadway_min());
  }
  if (from.job_id() != 0) {
    set_job_id(from.job_id());
  }
  if (from.scene_id() != 0) {
    set_scene_id(from.scene_id());
  }
  if (from.ego_id() != 0) {
    set_ego_id(from.ego_id());
  }
}

void ResetParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ResetParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetParams::CopyFrom(const ResetParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ResetParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetParams::IsInitialized() const {
  return true;
}

void ResetParams::InternalSwap(ResetParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&geo_fence_)->InternalSwap(CastToBase(&other->geo_fence_));
  CastToBase(&ego_path_)->InternalSwap(CastToBase(&other->ego_path_));
  scenariopath_.Swap(&other->scenariopath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hadmappath_.Swap(&other->hadmappath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rosbagfilepath_.Swap(&other->rosbagfilepath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(startpos_, other->startpos_);
  swap(endpos_, other->endpos_);
  swap(localorigin_, other->localorigin_);
  swap(startvel_, other->startvel_);
  swap(maxvel_, other->maxvel_);
  swap(theta_, other->theta_);
  swap(speedlimit_max_, other->speedlimit_max_);
  swap(speedlimit_min_, other->speedlimit_min_);
  swap(accelerationlimit_max_, other->accelerationlimit_max_);
  swap(accelerationlimit_min_, other->accelerationlimit_min_);
  swap(timeheadway_min_, other->timeheadway_min_);
  swap(job_id_, other->job_id_);
  swap(scene_id_, other->scene_id_);
  swap(ego_id_, other->ego_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SimMessage_MessagesEntry_DoNotUse::SimMessage_MessagesEntry_DoNotUse() {}
SimMessage_MessagesEntry_DoNotUse::SimMessage_MessagesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SimMessage_MessagesEntry_DoNotUse::MergeFrom(const SimMessage_MessagesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SimMessage_MessagesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SimMessage_MessagesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SimMessage::InitAsDefaultInstance() {
}
class SimMessage::_Internal {
 public:
};

SimMessage::SimMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SimMessage)
}
SimMessage::SimMessage(const SimMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messages_.MergeFrom(from.messages_);
  ::memcpy(&frameid_, &from.frameid_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&frameid_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.SimMessage)
}

void SimMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SimMessage_moduleService_2eproto.base);
  ::memset(&frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&frameid_)) + sizeof(timestamp_));
}

SimMessage::~SimMessage() {
  // @@protoc_insertion_point(destructor:sim_msg.SimMessage)
  SharedDtor();
}

void SimMessage::SharedDtor() {
}

void SimMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimMessage& SimMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SimMessage_moduleService_2eproto.base);
  return *internal_default_instance();
}


void SimMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SimMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  ::memset(&frameid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&frameid_)) + sizeof(timestamp_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, bytes> messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&messages_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // uint64 frameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timeStamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SimMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, bytes> messages = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          SimMessage_MessagesEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              SimMessage_MessagesEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&messages_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.SimMessage.MessagesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frameId = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timeStamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SimMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SimMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SimMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> messages = 1;
  if (!this->messages().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.SimMessage.MessagesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->messages().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->messages().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->messages().begin();
          it != this->messages().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        SimMessage_MessagesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->messages().begin();
          it != this->messages().end(); ++it) {
        SimMessage_MessagesEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint64 frameId = 2;
  if (this->frameid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->frameid(), output);
  }

  // double timeStamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.SimMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* SimMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SimMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> messages = 1;
  if (!this->messages().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.SimMessage.MessagesEntry.key");
      }
    };

    if (false &&
        this->messages().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->messages().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->messages().begin();
          it != this->messages().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SimMessage_MessagesEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->messages().begin();
          it != this->messages().end(); ++it) {
        target = SimMessage_MessagesEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // uint64 frameId = 2;
  if (this->frameid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->frameid(), target);
  }

  // double timeStamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SimMessage)
  return target;
}

size_t SimMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SimMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> messages = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->messages_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->messages().begin();
      it != this->messages().end(); ++it) {
    total_size += SimMessage_MessagesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // uint64 frameId = 2;
  if (this->frameid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->frameid());
  }

  // double timeStamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SimMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SimMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SimMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SimMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SimMessage)
    MergeFrom(*source);
  }
}

void SimMessage::MergeFrom(const SimMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SimMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.frameid() != 0) {
    set_frameid(from.frameid());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    set_timestamp(from.timestamp());
  }
}

void SimMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SimMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimMessage::CopyFrom(const SimMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SimMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimMessage::IsInitialized() const {
  return true;
}

void SimMessage::InternalSwap(SimMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  messages_.Swap(&other->messages_);
  swap(frameid_, other->frameid_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SimMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StepResult::InitAsDefaultInstance() {
  ::sim_msg::_StepResult_default_instance_._instance.get_mutable()->result_ = const_cast< ::sim_msg::SimMessage*>(
      ::sim_msg::SimMessage::internal_default_instance());
  ::sim_msg::_StepResult_default_instance_._instance.get_mutable()->errorstatus_ = const_cast< ::sim_msg::ErrorStatus*>(
      ::sim_msg::ErrorStatus::internal_default_instance());
}
class StepResult::_Internal {
 public:
  static const ::sim_msg::SimMessage& result(const StepResult* msg);
  static const ::sim_msg::ErrorStatus& errorstatus(const StepResult* msg);
};

const ::sim_msg::SimMessage&
StepResult::_Internal::result(const StepResult* msg) {
  return *msg->result_;
}
const ::sim_msg::ErrorStatus&
StepResult::_Internal::errorstatus(const StepResult* msg) {
  return *msg->errorstatus_;
}
StepResult::StepResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.StepResult)
}
StepResult::StepResult(const StepResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_result()) {
    result_ = new ::sim_msg::SimMessage(*from.result_);
  } else {
    result_ = nullptr;
  }
  if (from.has_errorstatus()) {
    errorstatus_ = new ::sim_msg::ErrorStatus(*from.errorstatus_);
  } else {
    errorstatus_ = nullptr;
  }
  timecost_ = from.timecost_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.StepResult)
}

void StepResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StepResult_moduleService_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timecost_) -
      reinterpret_cast<char*>(&result_)) + sizeof(timecost_));
}

StepResult::~StepResult() {
  // @@protoc_insertion_point(destructor:sim_msg.StepResult)
  SharedDtor();
}

void StepResult::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
  if (this != internal_default_instance()) delete errorstatus_;
}

void StepResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StepResult& StepResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StepResult_moduleService_2eproto.base);
  return *internal_default_instance();
}


void StepResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.StepResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && errorstatus_ != nullptr) {
    delete errorstatus_;
  }
  errorstatus_ = nullptr;
  timecost_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StepResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.SimMessage result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ErrorStatus errorStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_errorstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timeCost = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          timecost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StepResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.StepResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.SimMessage result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ErrorStatus errorStatus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timeCost = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timecost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.StepResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.StepResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StepResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.StepResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.SimMessage result = 1;
  if (this->has_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::result(this), output);
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::errorstatus(this), output);
  }

  // double timeCost = 3;
  if (!(this->timecost() <= 0 && this->timecost() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->timecost(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.StepResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* StepResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.StepResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.SimMessage result = 1;
  if (this->has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result(this), target);
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::errorstatus(this), target);
  }

  // double timeCost = 3;
  if (!(this->timecost() <= 0 && this->timecost() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->timecost(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.StepResult)
  return target;
}

size_t StepResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.StepResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.SimMessage result = 1;
  if (this->has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorstatus_);
  }

  // double timeCost = 3;
  if (!(this->timecost() <= 0 && this->timecost() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StepResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.StepResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StepResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StepResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.StepResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.StepResult)
    MergeFrom(*source);
  }
}

void StepResult::MergeFrom(const StepResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.StepResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    mutable_result()->::sim_msg::SimMessage::MergeFrom(from.result());
  }
  if (from.has_errorstatus()) {
    mutable_errorstatus()->::sim_msg::ErrorStatus::MergeFrom(from.errorstatus());
  }
  if (!(from.timecost() <= 0 && from.timecost() >= 0)) {
    set_timecost(from.timecost());
  }
}

void StepResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.StepResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StepResult::CopyFrom(const StepResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.StepResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StepResult::IsInitialized() const {
  return true;
}

void StepResult::InternalSwap(StepResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(errorstatus_, other->errorstatus_);
  swap(timecost_, other->timecost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StepResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StopResult_FeedbackEntry_DoNotUse::StopResult_FeedbackEntry_DoNotUse() {}
StopResult_FeedbackEntry_DoNotUse::StopResult_FeedbackEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StopResult_FeedbackEntry_DoNotUse::MergeFrom(const StopResult_FeedbackEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StopResult_FeedbackEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void StopResult_FeedbackEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void StopResult::InitAsDefaultInstance() {
  ::sim_msg::_StopResult_default_instance_._instance.get_mutable()->errorstatus_ = const_cast< ::sim_msg::ErrorStatus*>(
      ::sim_msg::ErrorStatus::internal_default_instance());
}
class StopResult::_Internal {
 public:
  static const ::sim_msg::ErrorStatus& errorstatus(const StopResult* msg);
};

const ::sim_msg::ErrorStatus&
StopResult::_Internal::errorstatus(const StopResult* msg) {
  return *msg->errorstatus_;
}
StopResult::StopResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.StopResult)
}
StopResult::StopResult(const StopResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feedback_.MergeFrom(from.feedback_);
  if (from.has_errorstatus()) {
    errorstatus_ = new ::sim_msg::ErrorStatus(*from.errorstatus_);
  } else {
    errorstatus_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.StopResult)
}

void StopResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopResult_moduleService_2eproto.base);
  errorstatus_ = nullptr;
}

StopResult::~StopResult() {
  // @@protoc_insertion_point(destructor:sim_msg.StopResult)
  SharedDtor();
}

void StopResult::SharedDtor() {
  if (this != internal_default_instance()) delete errorstatus_;
}

void StopResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopResult& StopResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopResult_moduleService_2eproto.base);
  return *internal_default_instance();
}


void StopResult::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.StopResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feedback_.Clear();
  if (GetArenaNoVirtual() == nullptr && errorstatus_ != nullptr) {
    delete errorstatus_;
  }
  errorstatus_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> feedback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&feedback_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ErrorStatus errorStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_errorstatus(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.StopResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> feedback = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          StopResult_FeedbackEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              StopResult_FeedbackEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&feedback_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.StopResult.FeedbackEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.StopResult.FeedbackEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ErrorStatus errorStatus = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_errorstatus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.StopResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.StopResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StopResult::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.StopResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> feedback = 1;
  if (!this->feedback().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.StopResult.FeedbackEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.StopResult.FeedbackEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->feedback().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feedback().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->feedback().begin();
          it != this->feedback().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        StopResult_FeedbackEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->feedback().begin();
          it != this->feedback().end(); ++it) {
        StopResult_FeedbackEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::errorstatus(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.StopResult)
}

::PROTOBUF_NAMESPACE_ID::uint8* StopResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.StopResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> feedback = 1;
  if (!this->feedback().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.StopResult.FeedbackEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.StopResult.FeedbackEntry.value");
      }
    };

    if (false &&
        this->feedback().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->feedback().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->feedback().begin();
          it != this->feedback().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StopResult_FeedbackEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->feedback().begin();
          it != this->feedback().end(); ++it) {
        target = StopResult_FeedbackEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::errorstatus(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.StopResult)
  return target;
}

size_t StopResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.StopResult)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> feedback = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->feedback_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->feedback().begin();
      it != this->feedback().end(); ++it) {
    total_size += StopResult_FeedbackEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .sim_msg.ErrorStatus errorStatus = 2;
  if (this->has_errorstatus()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *errorstatus_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.StopResult)
  GOOGLE_DCHECK_NE(&from, this);
  const StopResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.StopResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.StopResult)
    MergeFrom(*source);
  }
}

void StopResult::MergeFrom(const StopResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.StopResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feedback_.MergeFrom(from.feedback_);
  if (from.has_errorstatus()) {
    mutable_errorstatus()->::sim_msg::ErrorStatus::MergeFrom(from.errorstatus());
  }
}

void StopResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.StopResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopResult::CopyFrom(const StopResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.StopResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopResult::IsInitialized() const {
  return true;
}

void StopResult::InternalSwap(StopResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  feedback_.Swap(&other->feedback_);
  swap(errorstatus_, other->errorstatus_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::ErrorStatus* Arena::CreateMaybeMessage< ::sim_msg::ErrorStatus >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ErrorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::InitParams_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::sim_msg::InitParams_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::InitParams_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::InitParams* Arena::CreateMaybeMessage< ::sim_msg::InitParams >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::InitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TopicList* Arena::CreateMaybeMessage< ::sim_msg::TopicList >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TopicList >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::InitResult* Arena::CreateMaybeMessage< ::sim_msg::InitResult >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::InitResult >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ResetParams* Arena::CreateMaybeMessage< ::sim_msg::ResetParams >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ResetParams >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::SimMessage_MessagesEntry_DoNotUse* Arena::CreateMaybeMessage< ::sim_msg::SimMessage_MessagesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SimMessage_MessagesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::SimMessage* Arena::CreateMaybeMessage< ::sim_msg::SimMessage >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SimMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::StepResult* Arena::CreateMaybeMessage< ::sim_msg::StepResult >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::StepResult >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::StopResult_FeedbackEntry_DoNotUse* Arena::CreateMaybeMessage< ::sim_msg::StopResult_FeedbackEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::StopResult_FeedbackEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::StopResult* Arena::CreateMaybeMessage< ::sim_msg::StopResult >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::StopResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
