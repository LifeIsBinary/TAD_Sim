// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: settings.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_settings_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_settings_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_settings_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_settings_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_settings_2eproto;
namespace sim_msg {
class Setting;
class SettingDefaultTypeInternal;
extern SettingDefaultTypeInternal _Setting_default_instance_;
class Setting_ModuleCfgEntry_DoNotUse;
class Setting_ModuleCfgEntry_DoNotUseDefaultTypeInternal;
extern Setting_ModuleCfgEntry_DoNotUseDefaultTypeInternal _Setting_ModuleCfgEntry_DoNotUse_default_instance_;
class Setting_ModuleConfig;
class Setting_ModuleConfigDefaultTypeInternal;
extern Setting_ModuleConfigDefaultTypeInternal _Setting_ModuleConfig_default_instance_;
class Setting_ParameterDeclaration;
class Setting_ParameterDeclarationDefaultTypeInternal;
extern Setting_ParameterDeclarationDefaultTypeInternal _Setting_ParameterDeclaration_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Setting* Arena::CreateMaybeMessage<::sim_msg::Setting>(Arena*);
template<> ::sim_msg::Setting_ModuleCfgEntry_DoNotUse* Arena::CreateMaybeMessage<::sim_msg::Setting_ModuleCfgEntry_DoNotUse>(Arena*);
template<> ::sim_msg::Setting_ModuleConfig* Arena::CreateMaybeMessage<::sim_msg::Setting_ModuleConfig>(Arena*);
template<> ::sim_msg::Setting_ParameterDeclaration* Arena::CreateMaybeMessage<::sim_msg::Setting_ParameterDeclaration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

// ===================================================================

class Setting_ModuleConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Setting.ModuleConfig) */ {
 public:
  Setting_ModuleConfig();
  virtual ~Setting_ModuleConfig();

  Setting_ModuleConfig(const Setting_ModuleConfig& from);
  Setting_ModuleConfig(Setting_ModuleConfig&& from) noexcept
    : Setting_ModuleConfig() {
    *this = ::std::move(from);
  }

  inline Setting_ModuleConfig& operator=(const Setting_ModuleConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline Setting_ModuleConfig& operator=(Setting_ModuleConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Setting_ModuleConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Setting_ModuleConfig* internal_default_instance() {
    return reinterpret_cast<const Setting_ModuleConfig*>(
               &_Setting_ModuleConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Setting_ModuleConfig& a, Setting_ModuleConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(Setting_ModuleConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Setting_ModuleConfig* New() const final {
    return CreateMaybeMessage<Setting_ModuleConfig>(nullptr);
  }

  Setting_ModuleConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Setting_ModuleConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Setting_ModuleConfig& from);
  void MergeFrom(const Setting_ModuleConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setting_ModuleConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Setting.ModuleConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_settings_2eproto);
    return ::descriptor_table_settings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // string category = 1;
  void clear_category();
  const std::string& category() const;
  void set_category(const std::string& value);
  void set_category(std::string&& value);
  void set_category(const char* value);
  void set_category(const char* value, size_t size);
  std::string* mutable_category();
  std::string* release_category();
  void set_allocated_category(std::string* category);

  // @@protoc_insertion_point(class_scope:sim_msg.Setting.ModuleConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr category_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class Setting_ParameterDeclaration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Setting.ParameterDeclaration) */ {
 public:
  Setting_ParameterDeclaration();
  virtual ~Setting_ParameterDeclaration();

  Setting_ParameterDeclaration(const Setting_ParameterDeclaration& from);
  Setting_ParameterDeclaration(Setting_ParameterDeclaration&& from) noexcept
    : Setting_ParameterDeclaration() {
    *this = ::std::move(from);
  }

  inline Setting_ParameterDeclaration& operator=(const Setting_ParameterDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Setting_ParameterDeclaration& operator=(Setting_ParameterDeclaration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Setting_ParameterDeclaration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Setting_ParameterDeclaration* internal_default_instance() {
    return reinterpret_cast<const Setting_ParameterDeclaration*>(
               &_Setting_ParameterDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Setting_ParameterDeclaration& a, Setting_ParameterDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(Setting_ParameterDeclaration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Setting_ParameterDeclaration* New() const final {
    return CreateMaybeMessage<Setting_ParameterDeclaration>(nullptr);
  }

  Setting_ParameterDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Setting_ParameterDeclaration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Setting_ParameterDeclaration& from);
  void MergeFrom(const Setting_ParameterDeclaration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setting_ParameterDeclaration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Setting.ParameterDeclaration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_settings_2eproto);
    return ::descriptor_table_settings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kParameterTypeFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string parameter_type = 2;
  void clear_parameter_type();
  const std::string& parameter_type() const;
  void set_parameter_type(const std::string& value);
  void set_parameter_type(std::string&& value);
  void set_parameter_type(const char* value);
  void set_parameter_type(const char* value, size_t size);
  std::string* mutable_parameter_type();
  std::string* release_parameter_type();
  void set_allocated_parameter_type(std::string* parameter_type);

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:sim_msg.Setting.ParameterDeclaration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_settings_2eproto;
};
// -------------------------------------------------------------------

class Setting_ModuleCfgEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Setting_ModuleCfgEntry_DoNotUse, 
    std::string, ::sim_msg::Setting_ModuleConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Setting_ModuleCfgEntry_DoNotUse, 
    std::string, ::sim_msg::Setting_ModuleConfig,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Setting_ModuleCfgEntry_DoNotUse();
  Setting_ModuleCfgEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Setting_ModuleCfgEntry_DoNotUse& other);
  static const Setting_ModuleCfgEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Setting_ModuleCfgEntry_DoNotUse*>(&_Setting_ModuleCfgEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sim_msg.Setting.ModuleCfgEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_settings_2eproto);
    return ::descriptor_table_settings_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class Setting :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Setting) */ {
 public:
  Setting();
  virtual ~Setting();

  Setting(const Setting& from);
  Setting(Setting&& from) noexcept
    : Setting() {
    *this = ::std::move(from);
  }

  inline Setting& operator=(const Setting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Setting& operator=(Setting&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Setting& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Setting* internal_default_instance() {
    return reinterpret_cast<const Setting*>(
               &_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Setting& a, Setting& b) {
    a.Swap(&b);
  }
  inline void Swap(Setting* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Setting* New() const final {
    return CreateMaybeMessage<Setting>(nullptr);
  }

  Setting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Setting>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Setting& from);
  void MergeFrom(const Setting& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Setting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Setting";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_settings_2eproto);
    return ::descriptor_table_settings_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Setting_ModuleConfig ModuleConfig;
  typedef Setting_ParameterDeclaration ParameterDeclaration;

  // accessors -------------------------------------------------------

  enum : int {
    kScenarioLabelsFieldNumber = 8,
    kModuleCfgFieldNumber = 10,
    kParameterDeclarationsFieldNumber = 15,
    kVersionFieldNumber = 1,
    kScenarioPathFieldNumber = 2,
    kHadmapPathFieldNumber = 3,
    kVehicleDynamicCfgPathFieldNumber = 4,
    kSensorCfgPathFieldNumber = 5,
    kEnvironmentCfgPathFieldNumber = 6,
    kDefaultXoscPathFieldNumber = 7,
    kLogDirFieldNumber = 9,
    kVehicleCatalogPathFieldNumber = 11,
    kPedestrianCatalogPathFieldNumber = 12,
    kMiscobjectCatalogPathFieldNumber = 13,
    kHadmapDataFieldNumber = 14,
    kTrafficPathFieldNumber = 16,
    kModel3DPathdirFieldNumber = 17,
  };
  // repeated string scenario_labels = 8;
  int scenario_labels_size() const;
  void clear_scenario_labels();
  const std::string& scenario_labels(int index) const;
  std::string* mutable_scenario_labels(int index);
  void set_scenario_labels(int index, const std::string& value);
  void set_scenario_labels(int index, std::string&& value);
  void set_scenario_labels(int index, const char* value);
  void set_scenario_labels(int index, const char* value, size_t size);
  std::string* add_scenario_labels();
  void add_scenario_labels(const std::string& value);
  void add_scenario_labels(std::string&& value);
  void add_scenario_labels(const char* value);
  void add_scenario_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scenario_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scenario_labels();

  // map<string, .sim_msg.Setting.ModuleConfig> module_cfg = 10;
  int module_cfg_size() const;
  void clear_module_cfg();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Setting_ModuleConfig >&
      module_cfg() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Setting_ModuleConfig >*
      mutable_module_cfg();

  // repeated .sim_msg.Setting.ParameterDeclaration parameter_declarations = 15;
  int parameter_declarations_size() const;
  void clear_parameter_declarations();
  ::sim_msg::Setting_ParameterDeclaration* mutable_parameter_declarations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Setting_ParameterDeclaration >*
      mutable_parameter_declarations();
  const ::sim_msg::Setting_ParameterDeclaration& parameter_declarations(int index) const;
  ::sim_msg::Setting_ParameterDeclaration* add_parameter_declarations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Setting_ParameterDeclaration >&
      parameter_declarations() const;

  // string version = 1;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);

  // string scenario_path = 2;
  void clear_scenario_path();
  const std::string& scenario_path() const;
  void set_scenario_path(const std::string& value);
  void set_scenario_path(std::string&& value);
  void set_scenario_path(const char* value);
  void set_scenario_path(const char* value, size_t size);
  std::string* mutable_scenario_path();
  std::string* release_scenario_path();
  void set_allocated_scenario_path(std::string* scenario_path);

  // string hadmap_path = 3;
  void clear_hadmap_path();
  const std::string& hadmap_path() const;
  void set_hadmap_path(const std::string& value);
  void set_hadmap_path(std::string&& value);
  void set_hadmap_path(const char* value);
  void set_hadmap_path(const char* value, size_t size);
  std::string* mutable_hadmap_path();
  std::string* release_hadmap_path();
  void set_allocated_hadmap_path(std::string* hadmap_path);

  // string vehicle_dynamic_cfg_path = 4;
  void clear_vehicle_dynamic_cfg_path();
  const std::string& vehicle_dynamic_cfg_path() const;
  void set_vehicle_dynamic_cfg_path(const std::string& value);
  void set_vehicle_dynamic_cfg_path(std::string&& value);
  void set_vehicle_dynamic_cfg_path(const char* value);
  void set_vehicle_dynamic_cfg_path(const char* value, size_t size);
  std::string* mutable_vehicle_dynamic_cfg_path();
  std::string* release_vehicle_dynamic_cfg_path();
  void set_allocated_vehicle_dynamic_cfg_path(std::string* vehicle_dynamic_cfg_path);

  // string sensor_cfg_path = 5;
  void clear_sensor_cfg_path();
  const std::string& sensor_cfg_path() const;
  void set_sensor_cfg_path(const std::string& value);
  void set_sensor_cfg_path(std::string&& value);
  void set_sensor_cfg_path(const char* value);
  void set_sensor_cfg_path(const char* value, size_t size);
  std::string* mutable_sensor_cfg_path();
  std::string* release_sensor_cfg_path();
  void set_allocated_sensor_cfg_path(std::string* sensor_cfg_path);

  // string environment_cfg_path = 6;
  void clear_environment_cfg_path();
  const std::string& environment_cfg_path() const;
  void set_environment_cfg_path(const std::string& value);
  void set_environment_cfg_path(std::string&& value);
  void set_environment_cfg_path(const char* value);
  void set_environment_cfg_path(const char* value, size_t size);
  std::string* mutable_environment_cfg_path();
  std::string* release_environment_cfg_path();
  void set_allocated_environment_cfg_path(std::string* environment_cfg_path);

  // string default_xosc_path = 7;
  void clear_default_xosc_path();
  const std::string& default_xosc_path() const;
  void set_default_xosc_path(const std::string& value);
  void set_default_xosc_path(std::string&& value);
  void set_default_xosc_path(const char* value);
  void set_default_xosc_path(const char* value, size_t size);
  std::string* mutable_default_xosc_path();
  std::string* release_default_xosc_path();
  void set_allocated_default_xosc_path(std::string* default_xosc_path);

  // string log_dir = 9;
  void clear_log_dir();
  const std::string& log_dir() const;
  void set_log_dir(const std::string& value);
  void set_log_dir(std::string&& value);
  void set_log_dir(const char* value);
  void set_log_dir(const char* value, size_t size);
  std::string* mutable_log_dir();
  std::string* release_log_dir();
  void set_allocated_log_dir(std::string* log_dir);

  // string vehicle_catalog_path = 11;
  void clear_vehicle_catalog_path();
  const std::string& vehicle_catalog_path() const;
  void set_vehicle_catalog_path(const std::string& value);
  void set_vehicle_catalog_path(std::string&& value);
  void set_vehicle_catalog_path(const char* value);
  void set_vehicle_catalog_path(const char* value, size_t size);
  std::string* mutable_vehicle_catalog_path();
  std::string* release_vehicle_catalog_path();
  void set_allocated_vehicle_catalog_path(std::string* vehicle_catalog_path);

  // string pedestrian_catalog_path = 12;
  void clear_pedestrian_catalog_path();
  const std::string& pedestrian_catalog_path() const;
  void set_pedestrian_catalog_path(const std::string& value);
  void set_pedestrian_catalog_path(std::string&& value);
  void set_pedestrian_catalog_path(const char* value);
  void set_pedestrian_catalog_path(const char* value, size_t size);
  std::string* mutable_pedestrian_catalog_path();
  std::string* release_pedestrian_catalog_path();
  void set_allocated_pedestrian_catalog_path(std::string* pedestrian_catalog_path);

  // string miscobject_catalog_path = 13;
  void clear_miscobject_catalog_path();
  const std::string& miscobject_catalog_path() const;
  void set_miscobject_catalog_path(const std::string& value);
  void set_miscobject_catalog_path(std::string&& value);
  void set_miscobject_catalog_path(const char* value);
  void set_miscobject_catalog_path(const char* value, size_t size);
  std::string* mutable_miscobject_catalog_path();
  std::string* release_miscobject_catalog_path();
  void set_allocated_miscobject_catalog_path(std::string* miscobject_catalog_path);

  // bytes hadmap_data = 14;
  void clear_hadmap_data();
  const std::string& hadmap_data() const;
  void set_hadmap_data(const std::string& value);
  void set_hadmap_data(std::string&& value);
  void set_hadmap_data(const char* value);
  void set_hadmap_data(const void* value, size_t size);
  std::string* mutable_hadmap_data();
  std::string* release_hadmap_data();
  void set_allocated_hadmap_data(std::string* hadmap_data);

  // string traffic_path = 16;
  void clear_traffic_path();
  const std::string& traffic_path() const;
  void set_traffic_path(const std::string& value);
  void set_traffic_path(std::string&& value);
  void set_traffic_path(const char* value);
  void set_traffic_path(const char* value, size_t size);
  std::string* mutable_traffic_path();
  std::string* release_traffic_path();
  void set_allocated_traffic_path(std::string* traffic_path);

  // string model3d_pathdir = 17;
  void clear_model3d_pathdir();
  const std::string& model3d_pathdir() const;
  void set_model3d_pathdir(const std::string& value);
  void set_model3d_pathdir(std::string&& value);
  void set_model3d_pathdir(const char* value);
  void set_model3d_pathdir(const char* value, size_t size);
  std::string* mutable_model3d_pathdir();
  std::string* release_model3d_pathdir();
  void set_allocated_model3d_pathdir(std::string* model3d_pathdir);

  // @@protoc_insertion_point(class_scope:sim_msg.Setting)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scenario_labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Setting_ModuleCfgEntry_DoNotUse,
      std::string, ::sim_msg::Setting_ModuleConfig,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > module_cfg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Setting_ParameterDeclaration > parameter_declarations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenario_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hadmap_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_dynamic_cfg_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sensor_cfg_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_cfg_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_xosc_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vehicle_catalog_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pedestrian_catalog_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr miscobject_catalog_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hadmap_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr traffic_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model3d_pathdir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_settings_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Setting_ModuleConfig

// string category = 1;
inline void Setting_ModuleConfig::clear_category() {
  category_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting_ModuleConfig::category() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.ModuleConfig.category)
  return category_.GetNoArena();
}
inline void Setting_ModuleConfig::set_category(const std::string& value) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.ModuleConfig.category)
}
inline void Setting_ModuleConfig::set_category(std::string&& value) {
  
  category_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.ModuleConfig.category)
}
inline void Setting_ModuleConfig::set_category(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.ModuleConfig.category)
}
inline void Setting_ModuleConfig::set_category(const char* value, size_t size) {
  
  category_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.ModuleConfig.category)
}
inline std::string* Setting_ModuleConfig::mutable_category() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.ModuleConfig.category)
  return category_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting_ModuleConfig::release_category() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.ModuleConfig.category)
  
  return category_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting_ModuleConfig::set_allocated_category(std::string* category) {
  if (category != nullptr) {
    
  } else {
    
  }
  category_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), category);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.ModuleConfig.category)
}

// -------------------------------------------------------------------

// Setting_ParameterDeclaration

// string name = 1;
inline void Setting_ParameterDeclaration::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting_ParameterDeclaration::name() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.ParameterDeclaration.name)
  return name_.GetNoArena();
}
inline void Setting_ParameterDeclaration::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.ParameterDeclaration.name)
}
inline void Setting_ParameterDeclaration::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.ParameterDeclaration.name)
}
inline void Setting_ParameterDeclaration::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.ParameterDeclaration.name)
}
inline void Setting_ParameterDeclaration::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.ParameterDeclaration.name)
}
inline std::string* Setting_ParameterDeclaration::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.ParameterDeclaration.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting_ParameterDeclaration::release_name() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.ParameterDeclaration.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting_ParameterDeclaration::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.ParameterDeclaration.name)
}

// string parameter_type = 2;
inline void Setting_ParameterDeclaration::clear_parameter_type() {
  parameter_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting_ParameterDeclaration::parameter_type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.ParameterDeclaration.parameter_type)
  return parameter_type_.GetNoArena();
}
inline void Setting_ParameterDeclaration::set_parameter_type(const std::string& value) {
  
  parameter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.ParameterDeclaration.parameter_type)
}
inline void Setting_ParameterDeclaration::set_parameter_type(std::string&& value) {
  
  parameter_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.ParameterDeclaration.parameter_type)
}
inline void Setting_ParameterDeclaration::set_parameter_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.ParameterDeclaration.parameter_type)
}
inline void Setting_ParameterDeclaration::set_parameter_type(const char* value, size_t size) {
  
  parameter_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.ParameterDeclaration.parameter_type)
}
inline std::string* Setting_ParameterDeclaration::mutable_parameter_type() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.ParameterDeclaration.parameter_type)
  return parameter_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting_ParameterDeclaration::release_parameter_type() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.ParameterDeclaration.parameter_type)
  
  return parameter_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting_ParameterDeclaration::set_allocated_parameter_type(std::string* parameter_type) {
  if (parameter_type != nullptr) {
    
  } else {
    
  }
  parameter_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter_type);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.ParameterDeclaration.parameter_type)
}

// string value = 3;
inline void Setting_ParameterDeclaration::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting_ParameterDeclaration::value() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.ParameterDeclaration.value)
  return value_.GetNoArena();
}
inline void Setting_ParameterDeclaration::set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.ParameterDeclaration.value)
}
inline void Setting_ParameterDeclaration::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.ParameterDeclaration.value)
}
inline void Setting_ParameterDeclaration::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.ParameterDeclaration.value)
}
inline void Setting_ParameterDeclaration::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.ParameterDeclaration.value)
}
inline std::string* Setting_ParameterDeclaration::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.ParameterDeclaration.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting_ParameterDeclaration::release_value() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.ParameterDeclaration.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting_ParameterDeclaration::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.ParameterDeclaration.value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Setting

// string version = 1;
inline void Setting::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::version() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.version)
  return version_.GetNoArena();
}
inline void Setting::set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.version)
}
inline void Setting::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.version)
}
inline void Setting::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.version)
}
inline void Setting::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.version)
}
inline std::string* Setting::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.version)
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_version() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.version)
}

// string scenario_path = 2;
inline void Setting::clear_scenario_path() {
  scenario_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::scenario_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.scenario_path)
  return scenario_path_.GetNoArena();
}
inline void Setting::set_scenario_path(const std::string& value) {
  
  scenario_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.scenario_path)
}
inline void Setting::set_scenario_path(std::string&& value) {
  
  scenario_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.scenario_path)
}
inline void Setting::set_scenario_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scenario_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.scenario_path)
}
inline void Setting::set_scenario_path(const char* value, size_t size) {
  
  scenario_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.scenario_path)
}
inline std::string* Setting::mutable_scenario_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.scenario_path)
  return scenario_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_scenario_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.scenario_path)
  
  return scenario_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_scenario_path(std::string* scenario_path) {
  if (scenario_path != nullptr) {
    
  } else {
    
  }
  scenario_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenario_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.scenario_path)
}

// string hadmap_path = 3;
inline void Setting::clear_hadmap_path() {
  hadmap_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::hadmap_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.hadmap_path)
  return hadmap_path_.GetNoArena();
}
inline void Setting::set_hadmap_path(const std::string& value) {
  
  hadmap_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.hadmap_path)
}
inline void Setting::set_hadmap_path(std::string&& value) {
  
  hadmap_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.hadmap_path)
}
inline void Setting::set_hadmap_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hadmap_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.hadmap_path)
}
inline void Setting::set_hadmap_path(const char* value, size_t size) {
  
  hadmap_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.hadmap_path)
}
inline std::string* Setting::mutable_hadmap_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.hadmap_path)
  return hadmap_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_hadmap_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.hadmap_path)
  
  return hadmap_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_hadmap_path(std::string* hadmap_path) {
  if (hadmap_path != nullptr) {
    
  } else {
    
  }
  hadmap_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hadmap_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.hadmap_path)
}

// string vehicle_dynamic_cfg_path = 4;
inline void Setting::clear_vehicle_dynamic_cfg_path() {
  vehicle_dynamic_cfg_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::vehicle_dynamic_cfg_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.vehicle_dynamic_cfg_path)
  return vehicle_dynamic_cfg_path_.GetNoArena();
}
inline void Setting::set_vehicle_dynamic_cfg_path(const std::string& value) {
  
  vehicle_dynamic_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.vehicle_dynamic_cfg_path)
}
inline void Setting::set_vehicle_dynamic_cfg_path(std::string&& value) {
  
  vehicle_dynamic_cfg_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.vehicle_dynamic_cfg_path)
}
inline void Setting::set_vehicle_dynamic_cfg_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_dynamic_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.vehicle_dynamic_cfg_path)
}
inline void Setting::set_vehicle_dynamic_cfg_path(const char* value, size_t size) {
  
  vehicle_dynamic_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.vehicle_dynamic_cfg_path)
}
inline std::string* Setting::mutable_vehicle_dynamic_cfg_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.vehicle_dynamic_cfg_path)
  return vehicle_dynamic_cfg_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_vehicle_dynamic_cfg_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.vehicle_dynamic_cfg_path)
  
  return vehicle_dynamic_cfg_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_vehicle_dynamic_cfg_path(std::string* vehicle_dynamic_cfg_path) {
  if (vehicle_dynamic_cfg_path != nullptr) {
    
  } else {
    
  }
  vehicle_dynamic_cfg_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_dynamic_cfg_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.vehicle_dynamic_cfg_path)
}

// string sensor_cfg_path = 5;
inline void Setting::clear_sensor_cfg_path() {
  sensor_cfg_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::sensor_cfg_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.sensor_cfg_path)
  return sensor_cfg_path_.GetNoArena();
}
inline void Setting::set_sensor_cfg_path(const std::string& value) {
  
  sensor_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.sensor_cfg_path)
}
inline void Setting::set_sensor_cfg_path(std::string&& value) {
  
  sensor_cfg_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.sensor_cfg_path)
}
inline void Setting::set_sensor_cfg_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sensor_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.sensor_cfg_path)
}
inline void Setting::set_sensor_cfg_path(const char* value, size_t size) {
  
  sensor_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.sensor_cfg_path)
}
inline std::string* Setting::mutable_sensor_cfg_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.sensor_cfg_path)
  return sensor_cfg_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_sensor_cfg_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.sensor_cfg_path)
  
  return sensor_cfg_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_sensor_cfg_path(std::string* sensor_cfg_path) {
  if (sensor_cfg_path != nullptr) {
    
  } else {
    
  }
  sensor_cfg_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sensor_cfg_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.sensor_cfg_path)
}

// string environment_cfg_path = 6;
inline void Setting::clear_environment_cfg_path() {
  environment_cfg_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::environment_cfg_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.environment_cfg_path)
  return environment_cfg_path_.GetNoArena();
}
inline void Setting::set_environment_cfg_path(const std::string& value) {
  
  environment_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.environment_cfg_path)
}
inline void Setting::set_environment_cfg_path(std::string&& value) {
  
  environment_cfg_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.environment_cfg_path)
}
inline void Setting::set_environment_cfg_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  environment_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.environment_cfg_path)
}
inline void Setting::set_environment_cfg_path(const char* value, size_t size) {
  
  environment_cfg_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.environment_cfg_path)
}
inline std::string* Setting::mutable_environment_cfg_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.environment_cfg_path)
  return environment_cfg_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_environment_cfg_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.environment_cfg_path)
  
  return environment_cfg_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_environment_cfg_path(std::string* environment_cfg_path) {
  if (environment_cfg_path != nullptr) {
    
  } else {
    
  }
  environment_cfg_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_cfg_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.environment_cfg_path)
}

// string default_xosc_path = 7;
inline void Setting::clear_default_xosc_path() {
  default_xosc_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::default_xosc_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.default_xosc_path)
  return default_xosc_path_.GetNoArena();
}
inline void Setting::set_default_xosc_path(const std::string& value) {
  
  default_xosc_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.default_xosc_path)
}
inline void Setting::set_default_xosc_path(std::string&& value) {
  
  default_xosc_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.default_xosc_path)
}
inline void Setting::set_default_xosc_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_xosc_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.default_xosc_path)
}
inline void Setting::set_default_xosc_path(const char* value, size_t size) {
  
  default_xosc_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.default_xosc_path)
}
inline std::string* Setting::mutable_default_xosc_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.default_xosc_path)
  return default_xosc_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_default_xosc_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.default_xosc_path)
  
  return default_xosc_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_default_xosc_path(std::string* default_xosc_path) {
  if (default_xosc_path != nullptr) {
    
  } else {
    
  }
  default_xosc_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_xosc_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.default_xosc_path)
}

// repeated string scenario_labels = 8;
inline int Setting::scenario_labels_size() const {
  return scenario_labels_.size();
}
inline void Setting::clear_scenario_labels() {
  scenario_labels_.Clear();
}
inline const std::string& Setting::scenario_labels(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.scenario_labels)
  return scenario_labels_.Get(index);
}
inline std::string* Setting::mutable_scenario_labels(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.scenario_labels)
  return scenario_labels_.Mutable(index);
}
inline void Setting::set_scenario_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sim_msg.Setting.scenario_labels)
  scenario_labels_.Mutable(index)->assign(value);
}
inline void Setting::set_scenario_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sim_msg.Setting.scenario_labels)
  scenario_labels_.Mutable(index)->assign(std::move(value));
}
inline void Setting::set_scenario_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scenario_labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.scenario_labels)
}
inline void Setting::set_scenario_labels(int index, const char* value, size_t size) {
  scenario_labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.scenario_labels)
}
inline std::string* Setting::add_scenario_labels() {
  // @@protoc_insertion_point(field_add_mutable:sim_msg.Setting.scenario_labels)
  return scenario_labels_.Add();
}
inline void Setting::add_scenario_labels(const std::string& value) {
  scenario_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sim_msg.Setting.scenario_labels)
}
inline void Setting::add_scenario_labels(std::string&& value) {
  scenario_labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sim_msg.Setting.scenario_labels)
}
inline void Setting::add_scenario_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  scenario_labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sim_msg.Setting.scenario_labels)
}
inline void Setting::add_scenario_labels(const char* value, size_t size) {
  scenario_labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sim_msg.Setting.scenario_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Setting::scenario_labels() const {
  // @@protoc_insertion_point(field_list:sim_msg.Setting.scenario_labels)
  return scenario_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Setting::mutable_scenario_labels() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Setting.scenario_labels)
  return &scenario_labels_;
}

// string log_dir = 9;
inline void Setting::clear_log_dir() {
  log_dir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::log_dir() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.log_dir)
  return log_dir_.GetNoArena();
}
inline void Setting::set_log_dir(const std::string& value) {
  
  log_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.log_dir)
}
inline void Setting::set_log_dir(std::string&& value) {
  
  log_dir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.log_dir)
}
inline void Setting::set_log_dir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.log_dir)
}
inline void Setting::set_log_dir(const char* value, size_t size) {
  
  log_dir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.log_dir)
}
inline std::string* Setting::mutable_log_dir() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.log_dir)
  return log_dir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_log_dir() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.log_dir)
  
  return log_dir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_log_dir(std::string* log_dir) {
  if (log_dir != nullptr) {
    
  } else {
    
  }
  log_dir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_dir);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.log_dir)
}

// map<string, .sim_msg.Setting.ModuleConfig> module_cfg = 10;
inline int Setting::module_cfg_size() const {
  return module_cfg_.size();
}
inline void Setting::clear_module_cfg() {
  module_cfg_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Setting_ModuleConfig >&
Setting::module_cfg() const {
  // @@protoc_insertion_point(field_map:sim_msg.Setting.module_cfg)
  return module_cfg_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Setting_ModuleConfig >*
Setting::mutable_module_cfg() {
  // @@protoc_insertion_point(field_mutable_map:sim_msg.Setting.module_cfg)
  return module_cfg_.MutableMap();
}

// string vehicle_catalog_path = 11;
inline void Setting::clear_vehicle_catalog_path() {
  vehicle_catalog_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::vehicle_catalog_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.vehicle_catalog_path)
  return vehicle_catalog_path_.GetNoArena();
}
inline void Setting::set_vehicle_catalog_path(const std::string& value) {
  
  vehicle_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.vehicle_catalog_path)
}
inline void Setting::set_vehicle_catalog_path(std::string&& value) {
  
  vehicle_catalog_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.vehicle_catalog_path)
}
inline void Setting::set_vehicle_catalog_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vehicle_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.vehicle_catalog_path)
}
inline void Setting::set_vehicle_catalog_path(const char* value, size_t size) {
  
  vehicle_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.vehicle_catalog_path)
}
inline std::string* Setting::mutable_vehicle_catalog_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.vehicle_catalog_path)
  return vehicle_catalog_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_vehicle_catalog_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.vehicle_catalog_path)
  
  return vehicle_catalog_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_vehicle_catalog_path(std::string* vehicle_catalog_path) {
  if (vehicle_catalog_path != nullptr) {
    
  } else {
    
  }
  vehicle_catalog_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vehicle_catalog_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.vehicle_catalog_path)
}

// string pedestrian_catalog_path = 12;
inline void Setting::clear_pedestrian_catalog_path() {
  pedestrian_catalog_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::pedestrian_catalog_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.pedestrian_catalog_path)
  return pedestrian_catalog_path_.GetNoArena();
}
inline void Setting::set_pedestrian_catalog_path(const std::string& value) {
  
  pedestrian_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.pedestrian_catalog_path)
}
inline void Setting::set_pedestrian_catalog_path(std::string&& value) {
  
  pedestrian_catalog_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.pedestrian_catalog_path)
}
inline void Setting::set_pedestrian_catalog_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pedestrian_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.pedestrian_catalog_path)
}
inline void Setting::set_pedestrian_catalog_path(const char* value, size_t size) {
  
  pedestrian_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.pedestrian_catalog_path)
}
inline std::string* Setting::mutable_pedestrian_catalog_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.pedestrian_catalog_path)
  return pedestrian_catalog_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_pedestrian_catalog_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.pedestrian_catalog_path)
  
  return pedestrian_catalog_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_pedestrian_catalog_path(std::string* pedestrian_catalog_path) {
  if (pedestrian_catalog_path != nullptr) {
    
  } else {
    
  }
  pedestrian_catalog_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pedestrian_catalog_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.pedestrian_catalog_path)
}

// string miscobject_catalog_path = 13;
inline void Setting::clear_miscobject_catalog_path() {
  miscobject_catalog_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::miscobject_catalog_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.miscobject_catalog_path)
  return miscobject_catalog_path_.GetNoArena();
}
inline void Setting::set_miscobject_catalog_path(const std::string& value) {
  
  miscobject_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.miscobject_catalog_path)
}
inline void Setting::set_miscobject_catalog_path(std::string&& value) {
  
  miscobject_catalog_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.miscobject_catalog_path)
}
inline void Setting::set_miscobject_catalog_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  miscobject_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.miscobject_catalog_path)
}
inline void Setting::set_miscobject_catalog_path(const char* value, size_t size) {
  
  miscobject_catalog_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.miscobject_catalog_path)
}
inline std::string* Setting::mutable_miscobject_catalog_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.miscobject_catalog_path)
  return miscobject_catalog_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_miscobject_catalog_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.miscobject_catalog_path)
  
  return miscobject_catalog_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_miscobject_catalog_path(std::string* miscobject_catalog_path) {
  if (miscobject_catalog_path != nullptr) {
    
  } else {
    
  }
  miscobject_catalog_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), miscobject_catalog_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.miscobject_catalog_path)
}

// bytes hadmap_data = 14;
inline void Setting::clear_hadmap_data() {
  hadmap_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::hadmap_data() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.hadmap_data)
  return hadmap_data_.GetNoArena();
}
inline void Setting::set_hadmap_data(const std::string& value) {
  
  hadmap_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.hadmap_data)
}
inline void Setting::set_hadmap_data(std::string&& value) {
  
  hadmap_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.hadmap_data)
}
inline void Setting::set_hadmap_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hadmap_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.hadmap_data)
}
inline void Setting::set_hadmap_data(const void* value, size_t size) {
  
  hadmap_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.hadmap_data)
}
inline std::string* Setting::mutable_hadmap_data() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.hadmap_data)
  return hadmap_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_hadmap_data() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.hadmap_data)
  
  return hadmap_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_hadmap_data(std::string* hadmap_data) {
  if (hadmap_data != nullptr) {
    
  } else {
    
  }
  hadmap_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hadmap_data);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.hadmap_data)
}

// repeated .sim_msg.Setting.ParameterDeclaration parameter_declarations = 15;
inline int Setting::parameter_declarations_size() const {
  return parameter_declarations_.size();
}
inline void Setting::clear_parameter_declarations() {
  parameter_declarations_.Clear();
}
inline ::sim_msg::Setting_ParameterDeclaration* Setting::mutable_parameter_declarations(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.parameter_declarations)
  return parameter_declarations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Setting_ParameterDeclaration >*
Setting::mutable_parameter_declarations() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Setting.parameter_declarations)
  return &parameter_declarations_;
}
inline const ::sim_msg::Setting_ParameterDeclaration& Setting::parameter_declarations(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.parameter_declarations)
  return parameter_declarations_.Get(index);
}
inline ::sim_msg::Setting_ParameterDeclaration* Setting::add_parameter_declarations() {
  // @@protoc_insertion_point(field_add:sim_msg.Setting.parameter_declarations)
  return parameter_declarations_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Setting_ParameterDeclaration >&
Setting::parameter_declarations() const {
  // @@protoc_insertion_point(field_list:sim_msg.Setting.parameter_declarations)
  return parameter_declarations_;
}

// string traffic_path = 16;
inline void Setting::clear_traffic_path() {
  traffic_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::traffic_path() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.traffic_path)
  return traffic_path_.GetNoArena();
}
inline void Setting::set_traffic_path(const std::string& value) {
  
  traffic_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.traffic_path)
}
inline void Setting::set_traffic_path(std::string&& value) {
  
  traffic_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.traffic_path)
}
inline void Setting::set_traffic_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  traffic_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.traffic_path)
}
inline void Setting::set_traffic_path(const char* value, size_t size) {
  
  traffic_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.traffic_path)
}
inline std::string* Setting::mutable_traffic_path() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.traffic_path)
  return traffic_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_traffic_path() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.traffic_path)
  
  return traffic_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_traffic_path(std::string* traffic_path) {
  if (traffic_path != nullptr) {
    
  } else {
    
  }
  traffic_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), traffic_path);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.traffic_path)
}

// string model3d_pathdir = 17;
inline void Setting::clear_model3d_pathdir() {
  model3d_pathdir_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Setting::model3d_pathdir() const {
  // @@protoc_insertion_point(field_get:sim_msg.Setting.model3d_pathdir)
  return model3d_pathdir_.GetNoArena();
}
inline void Setting::set_model3d_pathdir(const std::string& value) {
  
  model3d_pathdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Setting.model3d_pathdir)
}
inline void Setting::set_model3d_pathdir(std::string&& value) {
  
  model3d_pathdir_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Setting.model3d_pathdir)
}
inline void Setting::set_model3d_pathdir(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model3d_pathdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Setting.model3d_pathdir)
}
inline void Setting::set_model3d_pathdir(const char* value, size_t size) {
  
  model3d_pathdir_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Setting.model3d_pathdir)
}
inline std::string* Setting::mutable_model3d_pathdir() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Setting.model3d_pathdir)
  return model3d_pathdir_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Setting::release_model3d_pathdir() {
  // @@protoc_insertion_point(field_release:sim_msg.Setting.model3d_pathdir)
  
  return model3d_pathdir_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Setting::set_allocated_model3d_pathdir(std::string* model3d_pathdir) {
  if (model3d_pathdir != nullptr) {
    
  } else {
    
  }
  model3d_pathdir_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model3d_pathdir);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Setting.model3d_pathdir)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_settings_2eproto
