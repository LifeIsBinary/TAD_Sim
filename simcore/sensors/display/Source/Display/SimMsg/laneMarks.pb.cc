// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laneMarks.proto
#pragma warning (disable : 4125)
#include "laneMarks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_laneMarks_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMark_laneMarks_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
namespace sim_msg {
class LaneMarkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMark> _instance;
} _LaneMark_default_instance_;
class LaneMarksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneMarks> _instance;
} _LaneMarks_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_LaneMark_laneMarks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_LaneMark_default_instance_;
    new (ptr) ::sim_msg::LaneMark();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::LaneMark::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneMark_laneMarks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaneMark_laneMarks_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,}};

static void InitDefaultsscc_info_LaneMarks_laneMarks_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_LaneMarks_default_instance_;
    new (ptr) ::sim_msg::LaneMarks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::LaneMarks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LaneMarks_laneMarks_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LaneMarks_laneMarks_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_LaneMark_laneMarks_2eproto.base,
      &scc_info_Vec3_basic_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_laneMarks_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_laneMarks_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_laneMarks_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_laneMarks_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMark, color_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMark, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMark, confidence_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMark, points_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMark, backward_points_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMark, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, header_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, left_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, right_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, remain_length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, dis_to_center_line_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, dis_to_left_boundary_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, dis_to_right_boundary_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, lane_no_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, lane_keep_duration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, car_count_in_perception_range_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, lane_arrow_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, left_lanemark_num_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, right_lanemark_num_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, middle_points_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, left_lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, right_lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, begin_lanemark_to_ego_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, end_lanemark_to_ego_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, ego_direction_with_lane_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneMarks, road_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::LaneMark)},
  { 11, -1, sizeof(::sim_msg::LaneMarks)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_LaneMark_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_LaneMarks_default_instance_),
};

const char descriptor_table_protodef_laneMarks_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017laneMarks.proto\022\007sim_msg\032\014header.proto"
  "\032\013basic.proto\"\216\001\n\010LaneMark\022\r\n\005color\030\001 \001("
  "\005\022\014\n\004type\030\002 \001(\005\022\022\n\nconfidence\030\003 \001(\002\022\035\n\006p"
  "oints\030\004 \003(\0132\r.sim_msg.Vec3\022&\n\017backward_p"
  "oints\030\005 \003(\0132\r.sim_msg.Vec3\022\n\n\002id\030\006 \001(\t\"\344"
  "\004\n\tLaneMarks\022\037\n\006header\030\001 \001(\0132\017.sim_msg.H"
  "eader\022\037\n\004left\030\002 \003(\0132\021.sim_msg.LaneMark\022 "
  "\n\005right\030\003 \003(\0132\021.sim_msg.LaneMark\022\025\n\rrema"
  "in_length\030\004 \001(\001\022\032\n\022dis_to_center_line\030\005 "
  "\001(\002\022\034\n\024dis_to_left_boundary\030\006 \001(\002\022\035\n\025dis"
  "_to_right_boundary\030\007 \001(\002\022\017\n\007lane_no\030\010 \001("
  "\r\022\032\n\022lane_keep_duration\030\t \001(\002\022%\n\035car_cou"
  "nt_in_perception_range\030\n \001(\r\022\022\n\nlane_arr"
  "ow\030\013 \001(\005\022\031\n\021left_lanemark_num\030\014 \001(\r\022\032\n\022r"
  "ight_lanemark_num\030\r \001(\r\022$\n\rmiddle_points"
  "\030\016 \003(\0132\r.sim_msg.Vec3\022\024\n\014left_lane_id\030\017 "
  "\001(\005\022\025\n\rright_lane_id\030\020 \001(\005\022\035\n\025begin_lane"
  "mark_to_ego\030\021 \001(\001\022\033\n\023end_lanemark_to_ego"
  "\030\022 \001(\001\022\037\n\027ego_direction_with_lane\030\023 \001(\002\022"
  "\017\n\007lane_id\030\024 \001(\005\022\022\n\nsection_id\030\025 \001(\005\022\017\n\007"
  "road_id\030\026 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_laneMarks_2eproto_deps[2] = {
  &::descriptor_table_basic_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_laneMarks_2eproto_sccs[2] = {
  &scc_info_LaneMark_laneMarks_2eproto.base,
  &scc_info_LaneMarks_laneMarks_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_laneMarks_2eproto_once;
static bool descriptor_table_laneMarks_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_laneMarks_2eproto = {
  &descriptor_table_laneMarks_2eproto_initialized, descriptor_table_protodef_laneMarks_2eproto, "laneMarks.proto", 821,
  &descriptor_table_laneMarks_2eproto_once, descriptor_table_laneMarks_2eproto_sccs, descriptor_table_laneMarks_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_laneMarks_2eproto::offsets,
  file_level_metadata_laneMarks_2eproto, 2, file_level_enum_descriptors_laneMarks_2eproto, file_level_service_descriptors_laneMarks_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_laneMarks_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_laneMarks_2eproto), true);
namespace sim_msg {

// ===================================================================

void LaneMark::InitAsDefaultInstance() {
}
class LaneMark::_Internal {
 public:
};

void LaneMark::clear_points() {
  points_.Clear();
}
void LaneMark::clear_backward_points() {
  backward_points_.Clear();
}
LaneMark::LaneMark()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LaneMark)
}
LaneMark::LaneMark(const LaneMark& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_),
      backward_points_(from.backward_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LaneMark)
}

void LaneMark::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMark_laneMarks_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&color_)) + sizeof(confidence_));
}

LaneMark::~LaneMark() {
  // @@protoc_insertion_point(destructor:sim_msg.LaneMark)
  SharedDtor();
}

void LaneMark::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LaneMark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMark& LaneMark::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMark_laneMarks_2eproto.base);
  return *internal_default_instance();
}


void LaneMark::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LaneMark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  backward_points_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&color_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneMark::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Vec3 points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Vec3 backward_points = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_backward_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_id(), ptr, ctx, "sim_msg.LaneMark.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneMark::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LaneMark)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 color = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Vec3 points = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Vec3 backward_points = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_backward_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.LaneMark.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LaneMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LaneMark)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneMark::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LaneMark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // repeated .sim_msg.Vec3 points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->points(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Vec3 backward_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backward_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->backward_points(static_cast<int>(i)),
      output);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.LaneMark.id");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.LaneMark)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMark::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LaneMark)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 color = 1;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // repeated .sim_msg.Vec3 points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->points(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Vec3 backward_points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->backward_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->backward_points(static_cast<int>(i)), target);
  }

  // string id = 6;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.LaneMark.id");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        6, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LaneMark)
  return target;
}

size_t LaneMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LaneMark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Vec3 points = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->points(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Vec3 backward_points = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->backward_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->backward_points(static_cast<int>(i)));
    }
  }

  // string id = 6;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->id());
  }

  // int32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // float confidence = 3;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMark::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LaneMark)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMark* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LaneMark)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LaneMark)
    MergeFrom(*source);
  }
}

void LaneMark::MergeFrom(const LaneMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LaneMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  backward_points_.MergeFrom(from.backward_points_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
}

void LaneMark::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LaneMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMark::CopyFrom(const LaneMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LaneMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMark::IsInitialized() const {
  return true;
}

void LaneMark::InternalSwap(LaneMark* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&points_)->InternalSwap(CastToBase(&other->points_));
  CastToBase(&backward_points_)->InternalSwap(CastToBase(&other->backward_points_));
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(type_, other->type_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMark::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneMarks::InitAsDefaultInstance() {
  ::sim_msg::_LaneMarks_default_instance_._instance.get_mutable()->header_ = const_cast< ::sim_msg::Header*>(
      ::sim_msg::Header::internal_default_instance());
}
class LaneMarks::_Internal {
 public:
  static const ::sim_msg::Header& header(const LaneMarks* msg);
};

const ::sim_msg::Header&
LaneMarks::_Internal::header(const LaneMarks* msg) {
  return *msg->header_;
}
void LaneMarks::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void LaneMarks::clear_middle_points() {
  middle_points_.Clear();
}
LaneMarks::LaneMarks()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LaneMarks)
}
LaneMarks::LaneMarks(const LaneMarks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      left_(from.left_),
      right_(from.right_),
      middle_points_(from.middle_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::sim_msg::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&remain_length_, &from.remain_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&road_id_) -
    reinterpret_cast<char*>(&remain_length_)) + sizeof(road_id_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LaneMarks)
}

void LaneMarks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneMarks_laneMarks_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(road_id_));
}

LaneMarks::~LaneMarks() {
  // @@protoc_insertion_point(destructor:sim_msg.LaneMarks)
  SharedDtor();
}

void LaneMarks::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LaneMarks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneMarks& LaneMarks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneMarks_laneMarks_2eproto.base);
  return *internal_default_instance();
}


void LaneMarks::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LaneMarks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_.Clear();
  right_.Clear();
  middle_points_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  ::memset(&remain_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_id_) -
      reinterpret_cast<char*>(&remain_length_)) + sizeof(road_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneMarks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.LaneMark left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_left(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.LaneMark right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_right(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // double remain_length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          remain_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float dis_to_center_line = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dis_to_center_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dis_to_left_boundary = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          dis_to_left_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dis_to_right_boundary = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          dis_to_right_boundary_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 lane_no = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          lane_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float lane_keep_duration = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          lane_keep_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 car_count_in_perception_range = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          car_count_in_perception_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 lane_arrow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          lane_arrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 left_lanemark_num = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          left_lanemark_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 right_lanemark_num = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          right_lanemark_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Vec3 middle_points = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_middle_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // int32 left_lane_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          left_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 right_lane_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          right_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double begin_lanemark_to_ego = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          begin_lanemark_to_ego_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_lanemark_to_ego = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          end_lanemark_to_ego_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float ego_direction_with_lane = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          ego_direction_with_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 lane_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 section_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 road_id = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneMarks::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LaneMarks)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.LaneMark left = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.LaneMark right = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double remain_length = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remain_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_center_line = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_center_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_left_boundary = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_left_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dis_to_right_boundary = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (61 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dis_to_right_boundary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lane_no = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lane_no_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float lane_keep_duration = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lane_keep_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 car_count_in_perception_range = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &car_count_in_perception_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_arrow = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_arrow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 left_lanemark_num = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_lanemark_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 right_lanemark_num = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &right_lanemark_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Vec3 middle_points = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_middle_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 left_lane_id = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 right_lane_id = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double begin_lanemark_to_ego = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &begin_lanemark_to_ego_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_lanemark_to_ego = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (145 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_lanemark_to_ego_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ego_direction_with_lane = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (157 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ego_direction_with_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lane_id = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 section_id = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 road_id = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LaneMarks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LaneMarks)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneMarks::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LaneMarks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .sim_msg.LaneMark left = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->left(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.LaneMark right = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->right(static_cast<int>(i)),
      output);
  }

  // double remain_length = 4;
  if (!(this->remain_length() <= 0 && this->remain_length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->remain_length(), output);
  }

  // float dis_to_center_line = 5;
  if (!(this->dis_to_center_line() <= 0 && this->dis_to_center_line() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->dis_to_center_line(), output);
  }

  // float dis_to_left_boundary = 6;
  if (!(this->dis_to_left_boundary() <= 0 && this->dis_to_left_boundary() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->dis_to_left_boundary(), output);
  }

  // float dis_to_right_boundary = 7;
  if (!(this->dis_to_right_boundary() <= 0 && this->dis_to_right_boundary() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(7, this->dis_to_right_boundary(), output);
  }

  // uint32 lane_no = 8;
  if (this->lane_no() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->lane_no(), output);
  }

  // float lane_keep_duration = 9;
  if (!(this->lane_keep_duration() <= 0 && this->lane_keep_duration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->lane_keep_duration(), output);
  }

  // uint32 car_count_in_perception_range = 10;
  if (this->car_count_in_perception_range() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->car_count_in_perception_range(), output);
  }

  // int32 lane_arrow = 11;
  if (this->lane_arrow() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(11, this->lane_arrow(), output);
  }

  // uint32 left_lanemark_num = 12;
  if (this->left_lanemark_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(12, this->left_lanemark_num(), output);
  }

  // uint32 right_lanemark_num = 13;
  if (this->right_lanemark_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->right_lanemark_num(), output);
  }

  // repeated .sim_msg.Vec3 middle_points = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->middle_points_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->middle_points(static_cast<int>(i)),
      output);
  }

  // int32 left_lane_id = 15;
  if (this->left_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->left_lane_id(), output);
  }

  // int32 right_lane_id = 16;
  if (this->right_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(16, this->right_lane_id(), output);
  }

  // double begin_lanemark_to_ego = 17;
  if (!(this->begin_lanemark_to_ego() <= 0 && this->begin_lanemark_to_ego() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->begin_lanemark_to_ego(), output);
  }

  // double end_lanemark_to_ego = 18;
  if (!(this->end_lanemark_to_ego() <= 0 && this->end_lanemark_to_ego() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(18, this->end_lanemark_to_ego(), output);
  }

  // float ego_direction_with_lane = 19;
  if (!(this->ego_direction_with_lane() <= 0 && this->ego_direction_with_lane() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(19, this->ego_direction_with_lane(), output);
  }

  // int32 lane_id = 20;
  if (this->lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(20, this->lane_id(), output);
  }

  // int32 section_id = 21;
  if (this->section_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(21, this->section_id(), output);
  }

  // int32 road_id = 22;
  if (this->road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(22, this->road_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.LaneMarks)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneMarks::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LaneMarks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .sim_msg.LaneMark left = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->left(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.LaneMark right = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->right(static_cast<int>(i)), target);
  }

  // double remain_length = 4;
  if (!(this->remain_length() <= 0 && this->remain_length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->remain_length(), target);
  }

  // float dis_to_center_line = 5;
  if (!(this->dis_to_center_line() <= 0 && this->dis_to_center_line() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->dis_to_center_line(), target);
  }

  // float dis_to_left_boundary = 6;
  if (!(this->dis_to_left_boundary() <= 0 && this->dis_to_left_boundary() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->dis_to_left_boundary(), target);
  }

  // float dis_to_right_boundary = 7;
  if (!(this->dis_to_right_boundary() <= 0 && this->dis_to_right_boundary() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->dis_to_right_boundary(), target);
  }

  // uint32 lane_no = 8;
  if (this->lane_no() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->lane_no(), target);
  }

  // float lane_keep_duration = 9;
  if (!(this->lane_keep_duration() <= 0 && this->lane_keep_duration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->lane_keep_duration(), target);
  }

  // uint32 car_count_in_perception_range = 10;
  if (this->car_count_in_perception_range() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->car_count_in_perception_range(), target);
  }

  // int32 lane_arrow = 11;
  if (this->lane_arrow() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->lane_arrow(), target);
  }

  // uint32 left_lanemark_num = 12;
  if (this->left_lanemark_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->left_lanemark_num(), target);
  }

  // uint32 right_lanemark_num = 13;
  if (this->right_lanemark_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->right_lanemark_num(), target);
  }

  // repeated .sim_msg.Vec3 middle_points = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->middle_points_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->middle_points(static_cast<int>(i)), target);
  }

  // int32 left_lane_id = 15;
  if (this->left_lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->left_lane_id(), target);
  }

  // int32 right_lane_id = 16;
  if (this->right_lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->right_lane_id(), target);
  }

  // double begin_lanemark_to_ego = 17;
  if (!(this->begin_lanemark_to_ego() <= 0 && this->begin_lanemark_to_ego() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->begin_lanemark_to_ego(), target);
  }

  // double end_lanemark_to_ego = 18;
  if (!(this->end_lanemark_to_ego() <= 0 && this->end_lanemark_to_ego() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->end_lanemark_to_ego(), target);
  }

  // float ego_direction_with_lane = 19;
  if (!(this->ego_direction_with_lane() <= 0 && this->ego_direction_with_lane() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->ego_direction_with_lane(), target);
  }

  // int32 lane_id = 20;
  if (this->lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->lane_id(), target);
  }

  // int32 section_id = 21;
  if (this->section_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(21, this->section_id(), target);
  }

  // int32 road_id = 22;
  if (this->road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->road_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LaneMarks)
  return target;
}

size_t LaneMarks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LaneMarks)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.LaneMark left = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->left_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.LaneMark right = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->right_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Vec3 middle_points = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->middle_points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->middle_points(static_cast<int>(i)));
    }
  }

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // double remain_length = 4;
  if (!(this->remain_length() <= 0 && this->remain_length() >= 0)) {
    total_size += 1 + 8;
  }

  // float dis_to_center_line = 5;
  if (!(this->dis_to_center_line() <= 0 && this->dis_to_center_line() >= 0)) {
    total_size += 1 + 4;
  }

  // float dis_to_left_boundary = 6;
  if (!(this->dis_to_left_boundary() <= 0 && this->dis_to_left_boundary() >= 0)) {
    total_size += 1 + 4;
  }

  // float dis_to_right_boundary = 7;
  if (!(this->dis_to_right_boundary() <= 0 && this->dis_to_right_boundary() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 lane_no = 8;
  if (this->lane_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->lane_no());
  }

  // float lane_keep_duration = 9;
  if (!(this->lane_keep_duration() <= 0 && this->lane_keep_duration() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 car_count_in_perception_range = 10;
  if (this->car_count_in_perception_range() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->car_count_in_perception_range());
  }

  // int32 lane_arrow = 11;
  if (this->lane_arrow() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->lane_arrow());
  }

  // uint32 left_lanemark_num = 12;
  if (this->left_lanemark_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->left_lanemark_num());
  }

  // uint32 right_lanemark_num = 13;
  if (this->right_lanemark_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->right_lanemark_num());
  }

  // int32 left_lane_id = 15;
  if (this->left_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->left_lane_id());
  }

  // double begin_lanemark_to_ego = 17;
  if (!(this->begin_lanemark_to_ego() <= 0 && this->begin_lanemark_to_ego() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 right_lane_id = 16;
  if (this->right_lane_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->right_lane_id());
  }

  // float ego_direction_with_lane = 19;
  if (!(this->ego_direction_with_lane() <= 0 && this->ego_direction_with_lane() >= 0)) {
    total_size += 2 + 4;
  }

  // double end_lanemark_to_ego = 18;
  if (!(this->end_lanemark_to_ego() <= 0 && this->end_lanemark_to_ego() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 lane_id = 20;
  if (this->lane_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->lane_id());
  }

  // int32 section_id = 21;
  if (this->section_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->section_id());
  }

  // int32 road_id = 22;
  if (this->road_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->road_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneMarks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LaneMarks)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneMarks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LaneMarks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LaneMarks)
    MergeFrom(*source);
  }
}

void LaneMarks::MergeFrom(const LaneMarks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LaneMarks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_.MergeFrom(from.left_);
  right_.MergeFrom(from.right_);
  middle_points_.MergeFrom(from.middle_points_);
  if (from.has_header()) {
    mutable_header()->::sim_msg::Header::MergeFrom(from.header());
  }
  if (!(from.remain_length() <= 0 && from.remain_length() >= 0)) {
    set_remain_length(from.remain_length());
  }
  if (!(from.dis_to_center_line() <= 0 && from.dis_to_center_line() >= 0)) {
    set_dis_to_center_line(from.dis_to_center_line());
  }
  if (!(from.dis_to_left_boundary() <= 0 && from.dis_to_left_boundary() >= 0)) {
    set_dis_to_left_boundary(from.dis_to_left_boundary());
  }
  if (!(from.dis_to_right_boundary() <= 0 && from.dis_to_right_boundary() >= 0)) {
    set_dis_to_right_boundary(from.dis_to_right_boundary());
  }
  if (from.lane_no() != 0) {
    set_lane_no(from.lane_no());
  }
  if (!(from.lane_keep_duration() <= 0 && from.lane_keep_duration() >= 0)) {
    set_lane_keep_duration(from.lane_keep_duration());
  }
  if (from.car_count_in_perception_range() != 0) {
    set_car_count_in_perception_range(from.car_count_in_perception_range());
  }
  if (from.lane_arrow() != 0) {
    set_lane_arrow(from.lane_arrow());
  }
  if (from.left_lanemark_num() != 0) {
    set_left_lanemark_num(from.left_lanemark_num());
  }
  if (from.right_lanemark_num() != 0) {
    set_right_lanemark_num(from.right_lanemark_num());
  }
  if (from.left_lane_id() != 0) {
    set_left_lane_id(from.left_lane_id());
  }
  if (!(from.begin_lanemark_to_ego() <= 0 && from.begin_lanemark_to_ego() >= 0)) {
    set_begin_lanemark_to_ego(from.begin_lanemark_to_ego());
  }
  if (from.right_lane_id() != 0) {
    set_right_lane_id(from.right_lane_id());
  }
  if (!(from.ego_direction_with_lane() <= 0 && from.ego_direction_with_lane() >= 0)) {
    set_ego_direction_with_lane(from.ego_direction_with_lane());
  }
  if (!(from.end_lanemark_to_ego() <= 0 && from.end_lanemark_to_ego() >= 0)) {
    set_end_lanemark_to_ego(from.end_lanemark_to_ego());
  }
  if (from.lane_id() != 0) {
    set_lane_id(from.lane_id());
  }
  if (from.section_id() != 0) {
    set_section_id(from.section_id());
  }
  if (from.road_id() != 0) {
    set_road_id(from.road_id());
  }
}

void LaneMarks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LaneMarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarks::CopyFrom(const LaneMarks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LaneMarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarks::IsInitialized() const {
  return true;
}

void LaneMarks::InternalSwap(LaneMarks* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&left_)->InternalSwap(CastToBase(&other->left_));
  CastToBase(&right_)->InternalSwap(CastToBase(&other->right_));
  CastToBase(&middle_points_)->InternalSwap(CastToBase(&other->middle_points_));
  swap(header_, other->header_);
  swap(remain_length_, other->remain_length_);
  swap(dis_to_center_line_, other->dis_to_center_line_);
  swap(dis_to_left_boundary_, other->dis_to_left_boundary_);
  swap(dis_to_right_boundary_, other->dis_to_right_boundary_);
  swap(lane_no_, other->lane_no_);
  swap(lane_keep_duration_, other->lane_keep_duration_);
  swap(car_count_in_perception_range_, other->car_count_in_perception_range_);
  swap(lane_arrow_, other->lane_arrow_);
  swap(left_lanemark_num_, other->left_lanemark_num_);
  swap(right_lanemark_num_, other->right_lanemark_num_);
  swap(left_lane_id_, other->left_lane_id_);
  swap(begin_lanemark_to_ego_, other->begin_lanemark_to_ego_);
  swap(right_lane_id_, other->right_lane_id_);
  swap(ego_direction_with_lane_, other->ego_direction_with_lane_);
  swap(end_lanemark_to_ego_, other->end_lanemark_to_ego_);
  swap(lane_id_, other->lane_id_);
  swap(section_id_, other->section_id_);
  swap(road_id_, other->road_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneMarks::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::LaneMark* Arena::CreateMaybeMessage< ::sim_msg::LaneMark >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::LaneMark >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::LaneMarks* Arena::CreateMaybeMessage< ::sim_msg::LaneMarks >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::LaneMarks >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
