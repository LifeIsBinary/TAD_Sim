// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_logicallane.proto

#pragma warning (disable : 4125)
#include "osi_logicallane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalReference_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicallane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicallane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicallane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicallane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
namespace osi3 {
class LogicalLaneBoundary_LogicalBoundaryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalLaneBoundary_LogicalBoundaryPoint> _instance;
} _LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_;
class LogicalLaneBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalLaneBoundary> _instance;
} _LogicalLaneBoundary_default_instance_;
class LogicalLane_PhysicalLaneReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalLane_PhysicalLaneReference> _instance;
} _LogicalLane_PhysicalLaneReference_default_instance_;
class LogicalLane_LaneConnectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalLane_LaneConnection> _instance;
} _LogicalLane_LaneConnection_default_instance_;
class LogicalLane_LaneRelationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalLane_LaneRelation> _instance;
} _LogicalLane_LaneRelation_default_instance_;
class LogicalLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalLane> _instance;
} _LogicalLane_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_LogicalLane_osi_5flogicallane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalLane_default_instance_;
    new (ptr) ::osi3::LogicalLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LogicalLane_osi_5flogicallane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_LogicalLane_osi_5flogicallane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,
      &scc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto.base,
      &scc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto.base,
      &scc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto.base,}};

static void InitDefaultsscc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalLane_LaneConnection_default_instance_;
    new (ptr) ::osi3::LogicalLane_LaneConnection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalLane_LaneConnection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalLane_LaneRelation_default_instance_;
    new (ptr) ::osi3::LogicalLane_LaneRelation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalLane_LaneRelation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalLane_PhysicalLaneReference_default_instance_;
    new (ptr) ::osi3::LogicalLane_PhysicalLaneReference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalLane_PhysicalLaneReference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalLaneBoundary_default_instance_;
    new (ptr) ::osi3::LogicalLaneBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalLaneBoundary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_;
    new (ptr) ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5flogicallane_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5flogicallane_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5flogicallane_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5flogicallane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, s_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint, t_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, boundary_line_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, reference_line_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, physical_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, passing_rule_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLaneBoundary, source_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, physical_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, start_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_PhysicalLaneReference, end_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneConnection, other_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneConnection, at_begin_of_other_lane_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, other_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, start_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, end_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, start_s_other_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane_LaneRelation, end_s_other_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, physical_lane_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, reference_line_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, start_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, end_s_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, move_direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, right_adjacent_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, left_adjacent_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, overlapping_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, right_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, left_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, predecessor_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalLane, successor_lane_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::LogicalLaneBoundary_LogicalBoundaryPoint)},
  { 8, -1, sizeof(::osi3::LogicalLaneBoundary)},
  { 19, -1, sizeof(::osi3::LogicalLane_PhysicalLaneReference)},
  { 27, -1, sizeof(::osi3::LogicalLane_LaneConnection)},
  { 34, -1, sizeof(::osi3::LogicalLane_LaneRelation)},
  { 44, -1, sizeof(::osi3::LogicalLane)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalLaneBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalLane_PhysicalLaneReference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalLane_LaneConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalLane_LaneRelation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalLane_default_instance_),
};

const char descriptor_table_protodef_osi_5flogicallane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_logicallane.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\347\004\n\023LogicalLaneBoundary\022\034\n\002id\030\001 "
  "\001(\0132\020.osi3.Identifier\022E\n\rboundary_line\030\002"
  " \003(\0132..osi3.LogicalLaneBoundary.LogicalB"
  "oundaryPoint\022+\n\021reference_line_id\030\003 \001(\0132"
  "\020.osi3.Identifier\022.\n\024physical_boundary_i"
  "d\030\004 \003(\0132\020.osi3.Identifier\022;\n\014passing_rul"
  "e\030\005 \001(\0162%.osi3.LogicalLaneBoundary.Passi"
  "ngRule\0221\n\020source_reference\030\006 \003(\0132\027.osi3."
  "ExternalReference\032`\n\024LogicalBoundaryPoin"
  "t\022 \n\010position\030\001 \001(\0132\016.osi3.Vector3d\022\022\n\ns"
  "_position\030\002 \001(\001\022\022\n\nt_position\030\003 \001(\001\"\273\001\n\013"
  "PassingRule\022\030\n\024PASSING_RULE_UNKNOWN\020\000\022\026\n"
  "\022PASSING_RULE_OTHER\020\001\022\035\n\031PASSING_RULE_NO"
  "NE_ALLOWED\020\002\022\035\n\031PASSING_RULE_INCREASING_"
  "T\020\003\022\035\n\031PASSING_RULE_DECREASING_T\020\004\022\035\n\031PA"
  "SSING_RULE_BOTH_ALLOWED\020\005\"\232\014\n\013LogicalLan"
  "e\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022$\n\004type\030"
  "\002 \001(\0162\026.osi3.LogicalLane.Type\0221\n\020source_"
  "reference\030\003 \003(\0132\027.osi3.ExternalReference"
  "\022H\n\027physical_lane_reference\030\004 \003(\0132\'.osi3"
  ".LogicalLane.PhysicalLaneReference\022+\n\021re"
  "ference_line_id\030\005 \001(\0132\020.osi3.Identifier\022"
  "\017\n\007start_s\030\006 \001(\001\022\r\n\005end_s\030\007 \001(\001\0227\n\016move_"
  "direction\030\010 \001(\0162\037.osi3.LogicalLane.MoveD"
  "irection\022;\n\023right_adjacent_lane\030\t \003(\0132\036."
  "osi3.LogicalLane.LaneRelation\022:\n\022left_ad"
  "jacent_lane\030\n \003(\0132\036.osi3.LogicalLane.Lan"
  "eRelation\0228\n\020overlapping_lane\030\013 \003(\0132\036.os"
  "i3.LogicalLane.LaneRelation\022+\n\021right_bou"
  "ndary_id\030\014 \003(\0132\020.osi3.Identifier\022*\n\020left"
  "_boundary_id\030\r \003(\0132\020.osi3.Identifier\022:\n\020"
  "predecessor_lane\030\016 \003(\0132 .osi3.LogicalLan"
  "e.LaneConnection\0228\n\016successor_lane\030\017 \003(\013"
  "2 .osi3.LogicalLane.LaneConnection\032c\n\025Ph"
  "ysicalLaneReference\022*\n\020physical_lane_id\030"
  "\001 \001(\0132\020.osi3.Identifier\022\017\n\007start_s\030\002 \001(\001"
  "\022\r\n\005end_s\030\003 \001(\001\032Y\n\016LaneConnection\022\'\n\roth"
  "er_lane_id\030\001 \001(\0132\020.osi3.Identifier\022\036\n\026at"
  "_begin_of_other_lane\030\002 \001(\010\032\203\001\n\014LaneRelat"
  "ion\022\'\n\rother_lane_id\030\001 \001(\0132\020.osi3.Identi"
  "fier\022\017\n\007start_s\030\002 \001(\001\022\r\n\005end_s\030\003 \001(\001\022\025\n\r"
  "start_s_other\030\004 \001(\001\022\023\n\013end_s_other\030\005 \001(\001"
  "\"\320\002\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHE"
  "R\020\001\022\017\n\013TYPE_NORMAL\020\002\022\017\n\013TYPE_BIKING\020\003\022\021\n"
  "\rTYPE_SIDEWALK\020\004\022\020\n\014TYPE_PARKING\020\005\022\r\n\tTY"
  "PE_STOP\020\006\022\023\n\017TYPE_RESTRICTED\020\007\022\017\n\013TYPE_B"
  "ORDER\020\010\022\021\n\rTYPE_SHOULDER\020\t\022\r\n\tTYPE_EXIT\020"
  "\n\022\016\n\nTYPE_ENTRY\020\013\022\017\n\013TYPE_ONRAMP\020\014\022\020\n\014TY"
  "PE_OFFRAMP\020\r\022\027\n\023TYPE_CONNECTINGRAMP\020\016\022\017\n"
  "\013TYPE_MEDIAN\020\017\022\r\n\tTYPE_CURB\020\020\022\r\n\tTYPE_RA"
  "IL\020\021\022\r\n\tTYPE_TRAM\020\022\"\250\001\n\rMoveDirection\022\032\n"
  "\026MOVE_DIRECTION_UNKNOWN\020\000\022\030\n\024MOVE_DIRECT"
  "ION_OTHER\020\001\022\037\n\033MOVE_DIRECTION_INCREASING"
  "_S\020\002\022\037\n\033MOVE_DIRECTION_DECREASING_S\020\003\022\037\n"
  "\033MOVE_DIRECTION_BOTH_ALLOWED\020\004B\002H\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5flogicallane_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5flogicallane_2eproto_sccs[6] = {
  &scc_info_LogicalLane_osi_5flogicallane_2eproto.base,
  &scc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto.base,
  &scc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto.base,
  &scc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto.base,
  &scc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto.base,
  &scc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5flogicallane_2eproto_once;
static bool descriptor_table_osi_5flogicallane_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5flogicallane_2eproto = {
  &descriptor_table_osi_5flogicallane_2eproto_initialized, descriptor_table_protodef_osi_5flogicallane_2eproto, "osi_logicallane.proto", 2242,
  &descriptor_table_osi_5flogicallane_2eproto_once, descriptor_table_osi_5flogicallane_2eproto_sccs, descriptor_table_osi_5flogicallane_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_osi_5flogicallane_2eproto::offsets,
  file_level_metadata_osi_5flogicallane_2eproto, 6, file_level_enum_descriptors_osi_5flogicallane_2eproto, file_level_service_descriptors_osi_5flogicallane_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5flogicallane_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5flogicallane_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLaneBoundary_PassingRule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicallane_2eproto);
  return file_level_enum_descriptors_osi_5flogicallane_2eproto[0];
}
bool LogicalLaneBoundary_PassingRule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_UNKNOWN;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_OTHER;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_NONE_ALLOWED;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_INCREASING_T;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_DECREASING_T;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PASSING_RULE_BOTH_ALLOWED;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PassingRule_MIN;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary::PassingRule_MAX;
constexpr int LogicalLaneBoundary::PassingRule_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLane_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicallane_2eproto);
  return file_level_enum_descriptors_osi_5flogicallane_2eproto[1];
}
bool LogicalLane_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogicalLane_Type LogicalLane::TYPE_UNKNOWN;
constexpr LogicalLane_Type LogicalLane::TYPE_OTHER;
constexpr LogicalLane_Type LogicalLane::TYPE_NORMAL;
constexpr LogicalLane_Type LogicalLane::TYPE_BIKING;
constexpr LogicalLane_Type LogicalLane::TYPE_SIDEWALK;
constexpr LogicalLane_Type LogicalLane::TYPE_PARKING;
constexpr LogicalLane_Type LogicalLane::TYPE_STOP;
constexpr LogicalLane_Type LogicalLane::TYPE_RESTRICTED;
constexpr LogicalLane_Type LogicalLane::TYPE_BORDER;
constexpr LogicalLane_Type LogicalLane::TYPE_SHOULDER;
constexpr LogicalLane_Type LogicalLane::TYPE_EXIT;
constexpr LogicalLane_Type LogicalLane::TYPE_ENTRY;
constexpr LogicalLane_Type LogicalLane::TYPE_ONRAMP;
constexpr LogicalLane_Type LogicalLane::TYPE_OFFRAMP;
constexpr LogicalLane_Type LogicalLane::TYPE_CONNECTINGRAMP;
constexpr LogicalLane_Type LogicalLane::TYPE_MEDIAN;
constexpr LogicalLane_Type LogicalLane::TYPE_CURB;
constexpr LogicalLane_Type LogicalLane::TYPE_RAIL;
constexpr LogicalLane_Type LogicalLane::TYPE_TRAM;
constexpr LogicalLane_Type LogicalLane::Type_MIN;
constexpr LogicalLane_Type LogicalLane::Type_MAX;
constexpr int LogicalLane::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLane_MoveDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicallane_2eproto);
  return file_level_enum_descriptors_osi_5flogicallane_2eproto[2];
}
bool LogicalLane_MoveDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_UNKNOWN;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_OTHER;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_INCREASING_S;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_DECREASING_S;
constexpr LogicalLane_MoveDirection LogicalLane::MOVE_DIRECTION_BOTH_ALLOWED;
constexpr LogicalLane_MoveDirection LogicalLane::MoveDirection_MIN;
constexpr LogicalLane_MoveDirection LogicalLane::MoveDirection_MAX;
constexpr int LogicalLane::MoveDirection_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LogicalLaneBoundary_LogicalBoundaryPoint::InitAsDefaultInstance() {
  ::osi3::_LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
class LogicalLaneBoundary_LogicalBoundaryPoint::_Internal {
 public:
  static const ::osi3::Vector3d& position(const LogicalLaneBoundary_LogicalBoundaryPoint* msg);
};

const ::osi3::Vector3d&
LogicalLaneBoundary_LogicalBoundaryPoint::_Internal::position(const LogicalLaneBoundary_LogicalBoundaryPoint* msg) {
  return *msg->position_;
}
void LogicalLaneBoundary_LogicalBoundaryPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
LogicalLaneBoundary_LogicalBoundaryPoint::LogicalLaneBoundary_LogicalBoundaryPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
}
LogicalLaneBoundary_LogicalBoundaryPoint::LogicalLaneBoundary_LogicalBoundaryPoint(const LogicalLaneBoundary_LogicalBoundaryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&s_position_, &from.s_position_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_position_) -
    reinterpret_cast<char*>(&s_position_)) + sizeof(t_position_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
}

void LogicalLaneBoundary_LogicalBoundaryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_position_) -
      reinterpret_cast<char*>(&position_)) + sizeof(t_position_));
}

LogicalLaneBoundary_LogicalBoundaryPoint::~LogicalLaneBoundary_LogicalBoundaryPoint() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  SharedDtor();
}

void LogicalLaneBoundary_LogicalBoundaryPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void LogicalLaneBoundary_LogicalBoundaryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalLaneBoundary_LogicalBoundaryPoint& LogicalLaneBoundary_LogicalBoundaryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalLaneBoundary_LogicalBoundaryPoint_osi_5flogicallane_2eproto.base);
  return *internal_default_instance();
}


void LogicalLaneBoundary_LogicalBoundaryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&s_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_position_) -
      reinterpret_cast<char*>(&s_position_)) + sizeof(t_position_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalLaneBoundary_LogicalBoundaryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double s_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double t_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          t_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalLaneBoundary_LogicalBoundaryPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Vector3d position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double s_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalLaneBoundary_LogicalBoundaryPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // double s_position = 2;
  if (!(this->s_position() <= 0 && this->s_position() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->s_position(), output);
  }

  // double t_position = 3;
  if (!(this->t_position() <= 0 && this->t_position() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->t_position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalLaneBoundary_LogicalBoundaryPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // double s_position = 2;
  if (!(this->s_position() <= 0 && this->s_position() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->s_position(), target);
  }

  // double t_position = 3;
  if (!(this->t_position() <= 0 && this->t_position() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->t_position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  return target;
}

size_t LogicalLaneBoundary_LogicalBoundaryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double s_position = 2;
  if (!(this->s_position() <= 0 && this->s_position() >= 0)) {
    total_size += 1 + 8;
  }

  // double t_position = 3;
  if (!(this->t_position() <= 0 && this->t_position() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalLaneBoundary_LogicalBoundaryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalLaneBoundary_LogicalBoundaryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalLaneBoundary_LogicalBoundaryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
    MergeFrom(*source);
  }
}

void LogicalLaneBoundary_LogicalBoundaryPoint::MergeFrom(const LogicalLaneBoundary_LogicalBoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (!(from.s_position() <= 0 && from.s_position() >= 0)) {
    set_s_position(from.s_position());
  }
  if (!(from.t_position() <= 0 && from.t_position() >= 0)) {
    set_t_position(from.t_position());
  }
}

void LogicalLaneBoundary_LogicalBoundaryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalLaneBoundary_LogicalBoundaryPoint::CopyFrom(const LogicalLaneBoundary_LogicalBoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLaneBoundary_LogicalBoundaryPoint::IsInitialized() const {
  return true;
}

void LogicalLaneBoundary_LogicalBoundaryPoint::InternalSwap(LogicalLaneBoundary_LogicalBoundaryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(s_position_, other->s_position_);
  swap(t_position_, other->t_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLaneBoundary_LogicalBoundaryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalLaneBoundary::InitAsDefaultInstance() {
  ::osi3::_LogicalLaneBoundary_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LogicalLaneBoundary_default_instance_._instance.get_mutable()->reference_line_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class LogicalLaneBoundary::_Internal {
 public:
  static const ::osi3::Identifier& id(const LogicalLaneBoundary* msg);
  static const ::osi3::Identifier& reference_line_id(const LogicalLaneBoundary* msg);
};

const ::osi3::Identifier&
LogicalLaneBoundary::_Internal::id(const LogicalLaneBoundary* msg) {
  return *msg->id_;
}
const ::osi3::Identifier&
LogicalLaneBoundary::_Internal::reference_line_id(const LogicalLaneBoundary* msg) {
  return *msg->reference_line_id_;
}
void LogicalLaneBoundary::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void LogicalLaneBoundary::clear_reference_line_id() {
  if (GetArenaNoVirtual() == nullptr && reference_line_id_ != nullptr) {
    delete reference_line_id_;
  }
  reference_line_id_ = nullptr;
}
void LogicalLaneBoundary::clear_physical_boundary_id() {
  physical_boundary_id_.Clear();
}
void LogicalLaneBoundary::clear_source_reference() {
  source_reference_.Clear();
}
LogicalLaneBoundary::LogicalLaneBoundary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalLaneBoundary)
}
LogicalLaneBoundary::LogicalLaneBoundary(const LogicalLaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      boundary_line_(from.boundary_line_),
      physical_boundary_id_(from.physical_boundary_id_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_reference_line_id()) {
    reference_line_id_ = new ::osi3::Identifier(*from.reference_line_id_);
  } else {
    reference_line_id_ = nullptr;
  }
  passing_rule_ = from.passing_rule_;
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLaneBoundary)
}

void LogicalLaneBoundary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passing_rule_) -
      reinterpret_cast<char*>(&id_)) + sizeof(passing_rule_));
}

LogicalLaneBoundary::~LogicalLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLaneBoundary)
  SharedDtor();
}

void LogicalLaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete reference_line_id_;
}

void LogicalLaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalLaneBoundary& LogicalLaneBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto.base);
  return *internal_default_instance();
}


void LogicalLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_line_.Clear();
  physical_boundary_id_.Clear();
  source_reference_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reference_line_id_ != nullptr) {
    delete reference_line_id_;
  }
  reference_line_id_ = nullptr;
  passing_rule_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalLaneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_boundary_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier reference_line_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_reference_line_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier physical_boundary_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_physical_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_passing_rule(static_cast<::osi3::LogicalLaneBoundary_PassingRule>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalLaneBoundary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalLaneBoundary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_boundary_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier reference_line_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_line_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier physical_boundary_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_physical_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_passing_rule(static_cast< ::osi3::LogicalLaneBoundary_PassingRule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalLaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalLaneBoundary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalLaneBoundary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->boundary_line(static_cast<int>(i)),
      output);
  }

  // .osi3.Identifier reference_line_id = 3;
  if (this->has_reference_line_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::reference_line_id(this), output);
  }

  // repeated .osi3.Identifier physical_boundary_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physical_boundary_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->physical_boundary_id(static_cast<int>(i)),
      output);
  }

  // .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
  if (this->passing_rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->passing_rule(), output);
  }

  // repeated .osi3.ExternalReference source_reference = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalLaneBoundary)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalLaneBoundary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->boundary_line(static_cast<int>(i)), target);
  }

  // .osi3.Identifier reference_line_id = 3;
  if (this->has_reference_line_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::reference_line_id(this), target);
  }

  // repeated .osi3.Identifier physical_boundary_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physical_boundary_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->physical_boundary_id(static_cast<int>(i)), target);
  }

  // .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
  if (this->passing_rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->passing_rule(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->source_reference(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLaneBoundary)
  return target;
}

size_t LogicalLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->boundary_line(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier physical_boundary_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->physical_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->physical_boundary_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.ExternalReference source_reference = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.Identifier reference_line_id = 3;
  if (this->has_reference_line_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_line_id_);
  }

  // .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
  if (this->passing_rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->passing_rule());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalLaneBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalLaneBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalLaneBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalLaneBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalLaneBoundary)
    MergeFrom(*source);
  }
}

void LogicalLaneBoundary::MergeFrom(const LogicalLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_line_.MergeFrom(from.boundary_line_);
  physical_boundary_id_.MergeFrom(from.physical_boundary_id_);
  source_reference_.MergeFrom(from.source_reference_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_reference_line_id()) {
    mutable_reference_line_id()->::osi3::Identifier::MergeFrom(from.reference_line_id());
  }
  if (from.passing_rule() != 0) {
    set_passing_rule(from.passing_rule());
  }
}

void LogicalLaneBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalLaneBoundary::CopyFrom(const LogicalLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLaneBoundary::IsInitialized() const {
  return true;
}

void LogicalLaneBoundary::InternalSwap(LogicalLaneBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&boundary_line_)->InternalSwap(CastToBase(&other->boundary_line_));
  CastToBase(&physical_boundary_id_)->InternalSwap(CastToBase(&other->physical_boundary_id_));
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  swap(id_, other->id_);
  swap(reference_line_id_, other->reference_line_id_);
  swap(passing_rule_, other->passing_rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLaneBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalLane_PhysicalLaneReference::InitAsDefaultInstance() {
  ::osi3::_LogicalLane_PhysicalLaneReference_default_instance_._instance.get_mutable()->physical_lane_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class LogicalLane_PhysicalLaneReference::_Internal {
 public:
  static const ::osi3::Identifier& physical_lane_id(const LogicalLane_PhysicalLaneReference* msg);
};

const ::osi3::Identifier&
LogicalLane_PhysicalLaneReference::_Internal::physical_lane_id(const LogicalLane_PhysicalLaneReference* msg) {
  return *msg->physical_lane_id_;
}
void LogicalLane_PhysicalLaneReference::clear_physical_lane_id() {
  if (GetArenaNoVirtual() == nullptr && physical_lane_id_ != nullptr) {
    delete physical_lane_id_;
  }
  physical_lane_id_ = nullptr;
}
LogicalLane_PhysicalLaneReference::LogicalLane_PhysicalLaneReference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalLane.PhysicalLaneReference)
}
LogicalLane_PhysicalLaneReference::LogicalLane_PhysicalLaneReference(const LogicalLane_PhysicalLaneReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_physical_lane_id()) {
    physical_lane_id_ = new ::osi3::Identifier(*from.physical_lane_id_);
  } else {
    physical_lane_id_ = nullptr;
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane.PhysicalLaneReference)
}

void LogicalLane_PhysicalLaneReference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto.base);
  ::memset(&physical_lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&physical_lane_id_)) + sizeof(end_s_));
}

LogicalLane_PhysicalLaneReference::~LogicalLane_PhysicalLaneReference() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane.PhysicalLaneReference)
  SharedDtor();
}

void LogicalLane_PhysicalLaneReference::SharedDtor() {
  if (this != internal_default_instance()) delete physical_lane_id_;
}

void LogicalLane_PhysicalLaneReference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalLane_PhysicalLaneReference& LogicalLane_PhysicalLaneReference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalLane_PhysicalLaneReference_osi_5flogicallane_2eproto.base);
  return *internal_default_instance();
}


void LogicalLane_PhysicalLaneReference::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane.PhysicalLaneReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && physical_lane_id_ != nullptr) {
    delete physical_lane_id_;
  }
  physical_lane_id_ = nullptr;
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalLane_PhysicalLaneReference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier physical_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_physical_lane_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalLane_PhysicalLaneReference::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalLane.PhysicalLaneReference)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier physical_lane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_physical_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_s = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_s = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalLane.PhysicalLaneReference)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalLane.PhysicalLaneReference)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalLane_PhysicalLaneReference::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalLane.PhysicalLaneReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier physical_lane_id = 1;
  if (this->has_physical_lane_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::physical_lane_id(this), output);
  }

  // double start_s = 2;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // double end_s = 3;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalLane.PhysicalLaneReference)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalLane_PhysicalLaneReference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane.PhysicalLaneReference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier physical_lane_id = 1;
  if (this->has_physical_lane_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::physical_lane_id(this), target);
  }

  // double start_s = 2;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // double end_s = 3;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane.PhysicalLaneReference)
  return target;
}

size_t LogicalLane_PhysicalLaneReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane.PhysicalLaneReference)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier physical_lane_id = 1;
  if (this->has_physical_lane_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *physical_lane_id_);
  }

  // double start_s = 2;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_s = 3;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalLane_PhysicalLaneReference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalLane.PhysicalLaneReference)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalLane_PhysicalLaneReference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalLane_PhysicalLaneReference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalLane.PhysicalLaneReference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalLane.PhysicalLaneReference)
    MergeFrom(*source);
  }
}

void LogicalLane_PhysicalLaneReference::MergeFrom(const LogicalLane_PhysicalLaneReference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane.PhysicalLaneReference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_physical_lane_id()) {
    mutable_physical_lane_id()->::osi3::Identifier::MergeFrom(from.physical_lane_id());
  }
  if (!(from.start_s() <= 0 && from.start_s() >= 0)) {
    set_start_s(from.start_s());
  }
  if (!(from.end_s() <= 0 && from.end_s() >= 0)) {
    set_end_s(from.end_s());
  }
}

void LogicalLane_PhysicalLaneReference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalLane.PhysicalLaneReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalLane_PhysicalLaneReference::CopyFrom(const LogicalLane_PhysicalLaneReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane.PhysicalLaneReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane_PhysicalLaneReference::IsInitialized() const {
  return true;
}

void LogicalLane_PhysicalLaneReference::InternalSwap(LogicalLane_PhysicalLaneReference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(physical_lane_id_, other->physical_lane_id_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane_PhysicalLaneReference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalLane_LaneConnection::InitAsDefaultInstance() {
  ::osi3::_LogicalLane_LaneConnection_default_instance_._instance.get_mutable()->other_lane_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class LogicalLane_LaneConnection::_Internal {
 public:
  static const ::osi3::Identifier& other_lane_id(const LogicalLane_LaneConnection* msg);
};

const ::osi3::Identifier&
LogicalLane_LaneConnection::_Internal::other_lane_id(const LogicalLane_LaneConnection* msg) {
  return *msg->other_lane_id_;
}
void LogicalLane_LaneConnection::clear_other_lane_id() {
  if (GetArenaNoVirtual() == nullptr && other_lane_id_ != nullptr) {
    delete other_lane_id_;
  }
  other_lane_id_ = nullptr;
}
LogicalLane_LaneConnection::LogicalLane_LaneConnection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalLane.LaneConnection)
}
LogicalLane_LaneConnection::LogicalLane_LaneConnection(const LogicalLane_LaneConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_other_lane_id()) {
    other_lane_id_ = new ::osi3::Identifier(*from.other_lane_id_);
  } else {
    other_lane_id_ = nullptr;
  }
  at_begin_of_other_lane_ = from.at_begin_of_other_lane_;
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane.LaneConnection)
}

void LogicalLane_LaneConnection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto.base);
  ::memset(&other_lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&at_begin_of_other_lane_) -
      reinterpret_cast<char*>(&other_lane_id_)) + sizeof(at_begin_of_other_lane_));
}

LogicalLane_LaneConnection::~LogicalLane_LaneConnection() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane.LaneConnection)
  SharedDtor();
}

void LogicalLane_LaneConnection::SharedDtor() {
  if (this != internal_default_instance()) delete other_lane_id_;
}

void LogicalLane_LaneConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalLane_LaneConnection& LogicalLane_LaneConnection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalLane_LaneConnection_osi_5flogicallane_2eproto.base);
  return *internal_default_instance();
}


void LogicalLane_LaneConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane.LaneConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && other_lane_id_ != nullptr) {
    delete other_lane_id_;
  }
  other_lane_id_ = nullptr;
  at_begin_of_other_lane_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalLane_LaneConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier other_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_other_lane_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool at_begin_of_other_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          at_begin_of_other_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalLane_LaneConnection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalLane.LaneConnection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier other_lane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_other_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool at_begin_of_other_lane = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &at_begin_of_other_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalLane.LaneConnection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalLane.LaneConnection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalLane_LaneConnection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalLane.LaneConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier other_lane_id = 1;
  if (this->has_other_lane_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::other_lane_id(this), output);
  }

  // bool at_begin_of_other_lane = 2;
  if (this->at_begin_of_other_lane() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->at_begin_of_other_lane(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalLane.LaneConnection)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalLane_LaneConnection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane.LaneConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier other_lane_id = 1;
  if (this->has_other_lane_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::other_lane_id(this), target);
  }

  // bool at_begin_of_other_lane = 2;
  if (this->at_begin_of_other_lane() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->at_begin_of_other_lane(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane.LaneConnection)
  return target;
}

size_t LogicalLane_LaneConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane.LaneConnection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier other_lane_id = 1;
  if (this->has_other_lane_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *other_lane_id_);
  }

  // bool at_begin_of_other_lane = 2;
  if (this->at_begin_of_other_lane() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalLane_LaneConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalLane.LaneConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalLane_LaneConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalLane_LaneConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalLane.LaneConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalLane.LaneConnection)
    MergeFrom(*source);
  }
}

void LogicalLane_LaneConnection::MergeFrom(const LogicalLane_LaneConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane.LaneConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_other_lane_id()) {
    mutable_other_lane_id()->::osi3::Identifier::MergeFrom(from.other_lane_id());
  }
  if (from.at_begin_of_other_lane() != 0) {
    set_at_begin_of_other_lane(from.at_begin_of_other_lane());
  }
}

void LogicalLane_LaneConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalLane.LaneConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalLane_LaneConnection::CopyFrom(const LogicalLane_LaneConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane.LaneConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane_LaneConnection::IsInitialized() const {
  return true;
}

void LogicalLane_LaneConnection::InternalSwap(LogicalLane_LaneConnection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(other_lane_id_, other->other_lane_id_);
  swap(at_begin_of_other_lane_, other->at_begin_of_other_lane_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane_LaneConnection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalLane_LaneRelation::InitAsDefaultInstance() {
  ::osi3::_LogicalLane_LaneRelation_default_instance_._instance.get_mutable()->other_lane_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class LogicalLane_LaneRelation::_Internal {
 public:
  static const ::osi3::Identifier& other_lane_id(const LogicalLane_LaneRelation* msg);
};

const ::osi3::Identifier&
LogicalLane_LaneRelation::_Internal::other_lane_id(const LogicalLane_LaneRelation* msg) {
  return *msg->other_lane_id_;
}
void LogicalLane_LaneRelation::clear_other_lane_id() {
  if (GetArenaNoVirtual() == nullptr && other_lane_id_ != nullptr) {
    delete other_lane_id_;
  }
  other_lane_id_ = nullptr;
}
LogicalLane_LaneRelation::LogicalLane_LaneRelation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalLane.LaneRelation)
}
LogicalLane_LaneRelation::LogicalLane_LaneRelation(const LogicalLane_LaneRelation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_other_lane_id()) {
    other_lane_id_ = new ::osi3::Identifier(*from.other_lane_id_);
  } else {
    other_lane_id_ = nullptr;
  }
  ::memcpy(&start_s_, &from.start_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_s_other_) -
    reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_other_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane.LaneRelation)
}

void LogicalLane_LaneRelation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto.base);
  ::memset(&other_lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_other_) -
      reinterpret_cast<char*>(&other_lane_id_)) + sizeof(end_s_other_));
}

LogicalLane_LaneRelation::~LogicalLane_LaneRelation() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane.LaneRelation)
  SharedDtor();
}

void LogicalLane_LaneRelation::SharedDtor() {
  if (this != internal_default_instance()) delete other_lane_id_;
}

void LogicalLane_LaneRelation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalLane_LaneRelation& LogicalLane_LaneRelation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalLane_LaneRelation_osi_5flogicallane_2eproto.base);
  return *internal_default_instance();
}


void LogicalLane_LaneRelation::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane.LaneRelation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && other_lane_id_ != nullptr) {
    delete other_lane_id_;
  }
  other_lane_id_ = nullptr;
  ::memset(&start_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_other_) -
      reinterpret_cast<char*>(&start_s_)) + sizeof(end_s_other_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalLane_LaneRelation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier other_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_other_lane_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_s = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double start_s_other = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          start_s_other_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_s_other = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          end_s_other_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalLane_LaneRelation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalLane.LaneRelation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier other_lane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_other_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_s = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_s = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_s_other = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_s_other = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalLane.LaneRelation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalLane.LaneRelation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalLane_LaneRelation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalLane.LaneRelation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier other_lane_id = 1;
  if (this->has_other_lane_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::other_lane_id(this), output);
  }

  // double start_s = 2;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->start_s(), output);
  }

  // double end_s = 3;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->end_s(), output);
  }

  // double start_s_other = 4;
  if (!(this->start_s_other() <= 0 && this->start_s_other() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->start_s_other(), output);
  }

  // double end_s_other = 5;
  if (!(this->end_s_other() <= 0 && this->end_s_other() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->end_s_other(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalLane.LaneRelation)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalLane_LaneRelation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane.LaneRelation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier other_lane_id = 1;
  if (this->has_other_lane_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::other_lane_id(this), target);
  }

  // double start_s = 2;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->start_s(), target);
  }

  // double end_s = 3;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->end_s(), target);
  }

  // double start_s_other = 4;
  if (!(this->start_s_other() <= 0 && this->start_s_other() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->start_s_other(), target);
  }

  // double end_s_other = 5;
  if (!(this->end_s_other() <= 0 && this->end_s_other() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->end_s_other(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane.LaneRelation)
  return target;
}

size_t LogicalLane_LaneRelation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane.LaneRelation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier other_lane_id = 1;
  if (this->has_other_lane_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *other_lane_id_);
  }

  // double start_s = 2;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_s = 3;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double start_s_other = 4;
  if (!(this->start_s_other() <= 0 && this->start_s_other() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_s_other = 5;
  if (!(this->end_s_other() <= 0 && this->end_s_other() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalLane_LaneRelation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalLane.LaneRelation)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalLane_LaneRelation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalLane_LaneRelation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalLane.LaneRelation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalLane.LaneRelation)
    MergeFrom(*source);
  }
}

void LogicalLane_LaneRelation::MergeFrom(const LogicalLane_LaneRelation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane.LaneRelation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_other_lane_id()) {
    mutable_other_lane_id()->::osi3::Identifier::MergeFrom(from.other_lane_id());
  }
  if (!(from.start_s() <= 0 && from.start_s() >= 0)) {
    set_start_s(from.start_s());
  }
  if (!(from.end_s() <= 0 && from.end_s() >= 0)) {
    set_end_s(from.end_s());
  }
  if (!(from.start_s_other() <= 0 && from.start_s_other() >= 0)) {
    set_start_s_other(from.start_s_other());
  }
  if (!(from.end_s_other() <= 0 && from.end_s_other() >= 0)) {
    set_end_s_other(from.end_s_other());
  }
}

void LogicalLane_LaneRelation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalLane.LaneRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalLane_LaneRelation::CopyFrom(const LogicalLane_LaneRelation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane.LaneRelation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane_LaneRelation::IsInitialized() const {
  return true;
}

void LogicalLane_LaneRelation::InternalSwap(LogicalLane_LaneRelation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(other_lane_id_, other->other_lane_id_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
  swap(start_s_other_, other->start_s_other_);
  swap(end_s_other_, other->end_s_other_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane_LaneRelation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalLane::InitAsDefaultInstance() {
  ::osi3::_LogicalLane_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LogicalLane_default_instance_._instance.get_mutable()->reference_line_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class LogicalLane::_Internal {
 public:
  static const ::osi3::Identifier& id(const LogicalLane* msg);
  static const ::osi3::Identifier& reference_line_id(const LogicalLane* msg);
};

const ::osi3::Identifier&
LogicalLane::_Internal::id(const LogicalLane* msg) {
  return *msg->id_;
}
const ::osi3::Identifier&
LogicalLane::_Internal::reference_line_id(const LogicalLane* msg) {
  return *msg->reference_line_id_;
}
void LogicalLane::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void LogicalLane::clear_source_reference() {
  source_reference_.Clear();
}
void LogicalLane::clear_reference_line_id() {
  if (GetArenaNoVirtual() == nullptr && reference_line_id_ != nullptr) {
    delete reference_line_id_;
  }
  reference_line_id_ = nullptr;
}
void LogicalLane::clear_right_boundary_id() {
  right_boundary_id_.Clear();
}
void LogicalLane::clear_left_boundary_id() {
  left_boundary_id_.Clear();
}
LogicalLane::LogicalLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalLane)
}
LogicalLane::LogicalLane(const LogicalLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      source_reference_(from.source_reference_),
      physical_lane_reference_(from.physical_lane_reference_),
      right_adjacent_lane_(from.right_adjacent_lane_),
      left_adjacent_lane_(from.left_adjacent_lane_),
      overlapping_lane_(from.overlapping_lane_),
      right_boundary_id_(from.right_boundary_id_),
      left_boundary_id_(from.left_boundary_id_),
      predecessor_lane_(from.predecessor_lane_),
      successor_lane_(from.successor_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_reference_line_id()) {
    reference_line_id_ = new ::osi3::Identifier(*from.reference_line_id_);
  } else {
    reference_line_id_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_s_) -
    reinterpret_cast<char*>(&type_)) + sizeof(end_s_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalLane)
}

void LogicalLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalLane_osi_5flogicallane_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&id_)) + sizeof(end_s_));
}

LogicalLane::~LogicalLane() {
  // @@protoc_insertion_point(destructor:osi3.LogicalLane)
  SharedDtor();
}

void LogicalLane::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete reference_line_id_;
}

void LogicalLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalLane& LogicalLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalLane_osi_5flogicallane_2eproto.base);
  return *internal_default_instance();
}


void LogicalLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  physical_lane_reference_.Clear();
  right_adjacent_lane_.Clear();
  left_adjacent_lane_.Clear();
  overlapping_lane_.Clear();
  right_boundary_id_.Clear();
  left_boundary_id_.Clear();
  predecessor_lane_.Clear();
  successor_lane_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reference_line_id_ != nullptr) {
    delete reference_line_id_;
  }
  reference_line_id_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_s_) -
      reinterpret_cast<char*>(&type_)) + sizeof(end_s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.LogicalLane.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::LogicalLane_Type>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_physical_lane_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier reference_line_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_reference_line_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double start_s = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          start_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double end_s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          end_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.LogicalLane.MoveDirection move_direction = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_move_direction(static_cast<::osi3::LogicalLane_MoveDirection>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_right_adjacent_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_left_adjacent_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_overlapping_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier right_boundary_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_right_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier left_boundary_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_left_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_predecessor_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 114);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_successor_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalLane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalLane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LogicalLane.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::LogicalLane_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_physical_lane_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier reference_line_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reference_line_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double start_s = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_s = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LogicalLane.MoveDirection move_direction = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_move_direction(static_cast< ::osi3::LogicalLane_MoveDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right_adjacent_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left_adjacent_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_overlapping_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier right_boundary_id = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier left_boundary_id = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_predecessor_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_successor_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalLane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalLane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // .osi3.LogicalLane.Type type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .osi3.ExternalReference source_reference = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physical_lane_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->physical_lane_reference(static_cast<int>(i)),
      output);
  }

  // .osi3.Identifier reference_line_id = 5;
  if (this->has_reference_line_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::reference_line_id(this), output);
  }

  // double start_s = 6;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->start_s(), output);
  }

  // double end_s = 7;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->end_s(), output);
  }

  // .osi3.LogicalLane.MoveDirection move_direction = 8;
  if (this->move_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->move_direction(), output);
  }

  // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_adjacent_lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->right_adjacent_lane(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_adjacent_lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->left_adjacent_lane(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlapping_lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->overlapping_lane(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Identifier right_boundary_id = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_boundary_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->right_boundary_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Identifier left_boundary_id = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_boundary_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->left_boundary_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->predecessor_lane(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->successor_lane(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalLane)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // .osi3.LogicalLane.Type type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->source_reference(static_cast<int>(i)), target);
  }

  // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physical_lane_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->physical_lane_reference(static_cast<int>(i)), target);
  }

  // .osi3.Identifier reference_line_id = 5;
  if (this->has_reference_line_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::reference_line_id(this), target);
  }

  // double start_s = 6;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->start_s(), target);
  }

  // double end_s = 7;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->end_s(), target);
  }

  // .osi3.LogicalLane.MoveDirection move_direction = 8;
  if (this->move_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->move_direction(), target);
  }

  // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_adjacent_lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->right_adjacent_lane(static_cast<int>(i)), target);
  }

  // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_adjacent_lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->left_adjacent_lane(static_cast<int>(i)), target);
  }

  // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->overlapping_lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->overlapping_lane(static_cast<int>(i)), target);
  }

  // repeated .osi3.Identifier right_boundary_id = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_boundary_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->right_boundary_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.Identifier left_boundary_id = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_boundary_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->left_boundary_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->predecessor_lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->predecessor_lane(static_cast<int>(i)), target);
  }

  // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->successor_lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->successor_lane(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalLane)
  return target;
}

size_t LogicalLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->physical_lane_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->physical_lane_reference(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->right_adjacent_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right_adjacent_lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->left_adjacent_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left_adjacent_lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->overlapping_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->overlapping_lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier right_boundary_id = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->right_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right_boundary_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier left_boundary_id = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->left_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left_boundary_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->predecessor_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->predecessor_lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->successor_lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->successor_lane(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.Identifier reference_line_id = 5;
  if (this->has_reference_line_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reference_line_id_);
  }

  // .osi3.LogicalLane.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.LogicalLane.MoveDirection move_direction = 8;
  if (this->move_direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->move_direction());
  }

  // double start_s = 6;
  if (!(this->start_s() <= 0 && this->start_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_s = 7;
  if (!(this->end_s() <= 0 && this->end_s() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalLane)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalLane)
    MergeFrom(*source);
  }
}

void LogicalLane::MergeFrom(const LogicalLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  physical_lane_reference_.MergeFrom(from.physical_lane_reference_);
  right_adjacent_lane_.MergeFrom(from.right_adjacent_lane_);
  left_adjacent_lane_.MergeFrom(from.left_adjacent_lane_);
  overlapping_lane_.MergeFrom(from.overlapping_lane_);
  right_boundary_id_.MergeFrom(from.right_boundary_id_);
  left_boundary_id_.MergeFrom(from.left_boundary_id_);
  predecessor_lane_.MergeFrom(from.predecessor_lane_);
  successor_lane_.MergeFrom(from.successor_lane_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_reference_line_id()) {
    mutable_reference_line_id()->::osi3::Identifier::MergeFrom(from.reference_line_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.move_direction() != 0) {
    set_move_direction(from.move_direction());
  }
  if (!(from.start_s() <= 0 && from.start_s() >= 0)) {
    set_start_s(from.start_s());
  }
  if (!(from.end_s() <= 0 && from.end_s() >= 0)) {
    set_end_s(from.end_s());
  }
}

void LogicalLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalLane::CopyFrom(const LogicalLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalLane::IsInitialized() const {
  return true;
}

void LogicalLane::InternalSwap(LogicalLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  CastToBase(&physical_lane_reference_)->InternalSwap(CastToBase(&other->physical_lane_reference_));
  CastToBase(&right_adjacent_lane_)->InternalSwap(CastToBase(&other->right_adjacent_lane_));
  CastToBase(&left_adjacent_lane_)->InternalSwap(CastToBase(&other->left_adjacent_lane_));
  CastToBase(&overlapping_lane_)->InternalSwap(CastToBase(&other->overlapping_lane_));
  CastToBase(&right_boundary_id_)->InternalSwap(CastToBase(&other->right_boundary_id_));
  CastToBase(&left_boundary_id_)->InternalSwap(CastToBase(&other->left_boundary_id_));
  CastToBase(&predecessor_lane_)->InternalSwap(CastToBase(&other->predecessor_lane_));
  CastToBase(&successor_lane_)->InternalSwap(CastToBase(&other->successor_lane_));
  swap(id_, other->id_);
  swap(reference_line_id_, other->reference_line_id_);
  swap(type_, other->type_);
  swap(move_direction_, other->move_direction_);
  swap(start_s_, other->start_s_);
  swap(end_s_, other->end_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalLane::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint* Arena::CreateMaybeMessage< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLaneBoundary* Arena::CreateMaybeMessage< ::osi3::LogicalLaneBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalLaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane_PhysicalLaneReference* Arena::CreateMaybeMessage< ::osi3::LogicalLane_PhysicalLaneReference >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalLane_PhysicalLaneReference >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane_LaneConnection* Arena::CreateMaybeMessage< ::osi3::LogicalLane_LaneConnection >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalLane_LaneConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane_LaneRelation* Arena::CreateMaybeMessage< ::osi3::LogicalLane_LaneRelation >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalLane_LaneRelation >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalLane* Arena::CreateMaybeMessage< ::osi3::LogicalLane >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalLane >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
