// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_traffic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_traffic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
#include "trajectory.pb.h"
#include "location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_traffic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_traffic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_2eproto;
namespace sim_msg {
class Car;
class CarDefaultTypeInternal;
extern CarDefaultTypeInternal _Car_default_instance_;
class DynamicObstacle;
class DynamicObstacleDefaultTypeInternal;
extern DynamicObstacleDefaultTypeInternal _DynamicObstacle_default_instance_;
class EgoInfo;
class EgoInfoDefaultTypeInternal;
extern EgoInfoDefaultTypeInternal _EgoInfo_default_instance_;
class Extra_Info;
class Extra_InfoDefaultTypeInternal;
extern Extra_InfoDefaultTypeInternal _Extra_Info_default_instance_;
class ForwardCollisionWarning;
class ForwardCollisionWarningDefaultTypeInternal;
extern ForwardCollisionWarningDefaultTypeInternal _ForwardCollisionWarning_default_instance_;
class LaneUid;
class LaneUidDefaultTypeInternal;
extern LaneUidDefaultTypeInternal _LaneUid_default_instance_;
class ManualVehicleControlInfo;
class ManualVehicleControlInfoDefaultTypeInternal;
extern ManualVehicleControlInfoDefaultTypeInternal _ManualVehicleControlInfo_default_instance_;
class ManualVehicleControlInfoArray;
class ManualVehicleControlInfoArrayDefaultTypeInternal;
extern ManualVehicleControlInfoArrayDefaultTypeInternal _ManualVehicleControlInfoArray_default_instance_;
class NearestObject;
class NearestObjectDefaultTypeInternal;
extern NearestObjectDefaultTypeInternal _NearestObject_default_instance_;
class StaticObstacle;
class StaticObstacleDefaultTypeInternal;
extern StaticObstacleDefaultTypeInternal _StaticObstacle_default_instance_;
class Traffic;
class TrafficDefaultTypeInternal;
extern TrafficDefaultTypeInternal _Traffic_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class TrafficRecords;
class TrafficRecordsDefaultTypeInternal;
extern TrafficRecordsDefaultTypeInternal _TrafficRecords_default_instance_;
class TrafficRecords4Logsim;
class TrafficRecords4LogsimDefaultTypeInternal;
extern TrafficRecords4LogsimDefaultTypeInternal _TrafficRecords4Logsim_default_instance_;
class TrafficRecords4Logsim_DisengageEventInfo;
class TrafficRecords4Logsim_DisengageEventInfoDefaultTypeInternal;
extern TrafficRecords4Logsim_DisengageEventInfoDefaultTypeInternal _TrafficRecords4Logsim_DisengageEventInfo_default_instance_;
class TrajectoryInfo;
class TrajectoryInfoDefaultTypeInternal;
extern TrajectoryInfoDefaultTypeInternal _TrajectoryInfo_default_instance_;
class TwinInfo;
class TwinInfoDefaultTypeInternal;
extern TwinInfoDefaultTypeInternal _TwinInfo_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Car* Arena::CreateMaybeMessage<::sim_msg::Car>(Arena*);
template<> ::sim_msg::DynamicObstacle* Arena::CreateMaybeMessage<::sim_msg::DynamicObstacle>(Arena*);
template<> ::sim_msg::EgoInfo* Arena::CreateMaybeMessage<::sim_msg::EgoInfo>(Arena*);
template<> ::sim_msg::Extra_Info* Arena::CreateMaybeMessage<::sim_msg::Extra_Info>(Arena*);
template<> ::sim_msg::ForwardCollisionWarning* Arena::CreateMaybeMessage<::sim_msg::ForwardCollisionWarning>(Arena*);
template<> ::sim_msg::LaneUid* Arena::CreateMaybeMessage<::sim_msg::LaneUid>(Arena*);
template<> ::sim_msg::ManualVehicleControlInfo* Arena::CreateMaybeMessage<::sim_msg::ManualVehicleControlInfo>(Arena*);
template<> ::sim_msg::ManualVehicleControlInfoArray* Arena::CreateMaybeMessage<::sim_msg::ManualVehicleControlInfoArray>(Arena*);
template<> ::sim_msg::NearestObject* Arena::CreateMaybeMessage<::sim_msg::NearestObject>(Arena*);
template<> ::sim_msg::StaticObstacle* Arena::CreateMaybeMessage<::sim_msg::StaticObstacle>(Arena*);
template<> ::sim_msg::Traffic* Arena::CreateMaybeMessage<::sim_msg::Traffic>(Arena*);
template<> ::sim_msg::TrafficLight* Arena::CreateMaybeMessage<::sim_msg::TrafficLight>(Arena*);
template<> ::sim_msg::TrafficRecords* Arena::CreateMaybeMessage<::sim_msg::TrafficRecords>(Arena*);
template<> ::sim_msg::TrafficRecords4Logsim* Arena::CreateMaybeMessage<::sim_msg::TrafficRecords4Logsim>(Arena*);
template<> ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo* Arena::CreateMaybeMessage<::sim_msg::TrafficRecords4Logsim_DisengageEventInfo>(Arena*);
template<> ::sim_msg::TrajectoryInfo* Arena::CreateMaybeMessage<::sim_msg::TrajectoryInfo>(Arena*);
template<> ::sim_msg::TwinInfo* Arena::CreateMaybeMessage<::sim_msg::TwinInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum ControlState : int {
  Autonomous = 0,
  Manual = 1,
  ControlState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlState_IsValid(int value);
constexpr ControlState ControlState_MIN = Autonomous;
constexpr ControlState ControlState_MAX = Manual;
constexpr int ControlState_ARRAYSIZE = ControlState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlState_descriptor();
template<typename T>
inline const std::string& ControlState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlState_descriptor(), enum_t_value);
}
inline bool ControlState_Parse(
    const std::string& name, ControlState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlState>(
    ControlState_descriptor(), name, value);
}
enum NearestObjectDirection : int {
  FRONT = 0,
  BACK_DIRECTION = 1,
  LEFT = 2,
  LEFT_FRONT = 3,
  LEFT_BACK = 4,
  RIGHT = 5,
  RIGHT_FRONT = 6,
  RIGHT_BACK = 7,
  NearestObjectDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NearestObjectDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NearestObjectDirection_IsValid(int value);
constexpr NearestObjectDirection NearestObjectDirection_MIN = FRONT;
constexpr NearestObjectDirection NearestObjectDirection_MAX = RIGHT_BACK;
constexpr int NearestObjectDirection_ARRAYSIZE = NearestObjectDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NearestObjectDirection_descriptor();
template<typename T>
inline const std::string& NearestObjectDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NearestObjectDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NearestObjectDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NearestObjectDirection_descriptor(), enum_t_value);
}
inline bool NearestObjectDirection_Parse(
    const std::string& name, NearestObjectDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NearestObjectDirection>(
    NearestObjectDirection_descriptor(), name, value);
}
enum VehicleRelativePositionalRelationship : int {
  No_Relationship = 0,
  Ego_In_Front = 1,
  Ego_In_Back = 2,
  Ego_Vehicle_Overlap = 3,
  VehicleRelativePositionalRelationship_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VehicleRelativePositionalRelationship_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VehicleRelativePositionalRelationship_IsValid(int value);
constexpr VehicleRelativePositionalRelationship VehicleRelativePositionalRelationship_MIN = No_Relationship;
constexpr VehicleRelativePositionalRelationship VehicleRelativePositionalRelationship_MAX = Ego_Vehicle_Overlap;
constexpr int VehicleRelativePositionalRelationship_ARRAYSIZE = VehicleRelativePositionalRelationship_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleRelativePositionalRelationship_descriptor();
template<typename T>
inline const std::string& VehicleRelativePositionalRelationship_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleRelativePositionalRelationship>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleRelativePositionalRelationship_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleRelativePositionalRelationship_descriptor(), enum_t_value);
}
inline bool VehicleRelativePositionalRelationship_Parse(
    const std::string& name, VehicleRelativePositionalRelationship* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleRelativePositionalRelationship>(
    VehicleRelativePositionalRelationship_descriptor(), name, value);
}
enum Phase : int {
  U = 0,
  L = 1,
  T = 2,
  R = 3,
  Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Phase_IsValid(int value);
constexpr Phase Phase_MIN = U;
constexpr Phase Phase_MAX = R;
constexpr int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor();
template<typename T>
inline const std::string& Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Phase_descriptor(), enum_t_value);
}
inline bool Phase_Parse(
    const std::string& name, Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
enum DisengageEventType : int {
  Disengage_Manual = 0,
  Disengage_Planning = 1,
  Disengage_Route = 2,
  Disengage_Perception = 3,
  Disengage_OS = 4,
  Disengage_Sim = 5,
  DisengageEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DisengageEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DisengageEventType_IsValid(int value);
constexpr DisengageEventType DisengageEventType_MIN = Disengage_Manual;
constexpr DisengageEventType DisengageEventType_MAX = Disengage_Sim;
constexpr int DisengageEventType_ARRAYSIZE = DisengageEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisengageEventType_descriptor();
template<typename T>
inline const std::string& DisengageEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DisengageEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DisengageEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DisengageEventType_descriptor(), enum_t_value);
}
inline bool DisengageEventType_Parse(
    const std::string& name, DisengageEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DisengageEventType>(
    DisengageEventType_descriptor(), name, value);
}
// ===================================================================

class TwinInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TwinInfo) */ {
 public:
  TwinInfo();
  virtual ~TwinInfo();

  TwinInfo(const TwinInfo& from);
  TwinInfo(TwinInfo&& from) noexcept
    : TwinInfo() {
    *this = ::std::move(from);
  }

  inline TwinInfo& operator=(const TwinInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TwinInfo& operator=(TwinInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TwinInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TwinInfo* internal_default_instance() {
    return reinterpret_cast<const TwinInfo*>(
               &_TwinInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TwinInfo& a, TwinInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TwinInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TwinInfo* New() const final {
    return CreateMaybeMessage<TwinInfo>(nullptr);
  }

  TwinInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TwinInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TwinInfo& from);
  void MergeFrom(const TwinInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TwinInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TwinInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sim_msg.TwinInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class ManualVehicleControlInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.ManualVehicleControlInfo) */ {
 public:
  ManualVehicleControlInfo();
  virtual ~ManualVehicleControlInfo();

  ManualVehicleControlInfo(const ManualVehicleControlInfo& from);
  ManualVehicleControlInfo(ManualVehicleControlInfo&& from) noexcept
    : ManualVehicleControlInfo() {
    *this = ::std::move(from);
  }

  inline ManualVehicleControlInfo& operator=(const ManualVehicleControlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualVehicleControlInfo& operator=(ManualVehicleControlInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualVehicleControlInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualVehicleControlInfo* internal_default_instance() {
    return reinterpret_cast<const ManualVehicleControlInfo*>(
               &_ManualVehicleControlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ManualVehicleControlInfo& a, ManualVehicleControlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualVehicleControlInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualVehicleControlInfo* New() const final {
    return CreateMaybeMessage<ManualVehicleControlInfo>(nullptr);
  }

  ManualVehicleControlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualVehicleControlInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualVehicleControlInfo& from);
  void MergeFrom(const ManualVehicleControlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualVehicleControlInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.ManualVehicleControlInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehControlInfoFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .sim_msg.Location veh_control_info = 2;
  bool has_veh_control_info() const;
  void clear_veh_control_info();
  const ::sim_msg::Location& veh_control_info() const;
  ::sim_msg::Location* release_veh_control_info();
  ::sim_msg::Location* mutable_veh_control_info();
  void set_allocated_veh_control_info(::sim_msg::Location* veh_control_info);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.ManualVehicleControlInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Location* veh_control_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class ManualVehicleControlInfoArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.ManualVehicleControlInfoArray) */ {
 public:
  ManualVehicleControlInfoArray();
  virtual ~ManualVehicleControlInfoArray();

  ManualVehicleControlInfoArray(const ManualVehicleControlInfoArray& from);
  ManualVehicleControlInfoArray(ManualVehicleControlInfoArray&& from) noexcept
    : ManualVehicleControlInfoArray() {
    *this = ::std::move(from);
  }

  inline ManualVehicleControlInfoArray& operator=(const ManualVehicleControlInfoArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualVehicleControlInfoArray& operator=(ManualVehicleControlInfoArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ManualVehicleControlInfoArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ManualVehicleControlInfoArray* internal_default_instance() {
    return reinterpret_cast<const ManualVehicleControlInfoArray*>(
               &_ManualVehicleControlInfoArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ManualVehicleControlInfoArray& a, ManualVehicleControlInfoArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualVehicleControlInfoArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualVehicleControlInfoArray* New() const final {
    return CreateMaybeMessage<ManualVehicleControlInfoArray>(nullptr);
  }

  ManualVehicleControlInfoArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualVehicleControlInfoArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ManualVehicleControlInfoArray& from);
  void MergeFrom(const ManualVehicleControlInfoArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualVehicleControlInfoArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.ManualVehicleControlInfoArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesControlInfoFieldNumber = 1,
  };
  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  int vehicles_control_info_size() const;
  void clear_vehicles_control_info();
  ::sim_msg::ManualVehicleControlInfo* mutable_vehicles_control_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >*
      mutable_vehicles_control_info();
  const ::sim_msg::ManualVehicleControlInfo& vehicles_control_info(int index) const;
  ::sim_msg::ManualVehicleControlInfo* add_vehicles_control_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >&
      vehicles_control_info() const;

  // @@protoc_insertion_point(class_scope:sim_msg.ManualVehicleControlInfoArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo > vehicles_control_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class NearestObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.NearestObject) */ {
 public:
  NearestObject();
  virtual ~NearestObject();

  NearestObject(const NearestObject& from);
  NearestObject(NearestObject&& from) noexcept
    : NearestObject() {
    *this = ::std::move(from);
  }

  inline NearestObject& operator=(const NearestObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearestObject& operator=(NearestObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NearestObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NearestObject* internal_default_instance() {
    return reinterpret_cast<const NearestObject*>(
               &_NearestObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NearestObject& a, NearestObject& b) {
    a.Swap(&b);
  }
  inline void Swap(NearestObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearestObject* New() const final {
    return CreateMaybeMessage<NearestObject>(nullptr);
  }

  NearestObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearestObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NearestObject& from);
  void MergeFrom(const NearestObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearestObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.NearestObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEuclidDistFieldNumber = 2,
    kIdFieldNumber = 1,
    kDirFieldNumber = 3,
  };
  // double euclid_dist = 2;
  void clear_euclid_dist();
  double euclid_dist() const;
  void set_euclid_dist(double value);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .sim_msg.NearestObjectDirection dir = 3;
  void clear_dir();
  ::sim_msg::NearestObjectDirection dir() const;
  void set_dir(::sim_msg::NearestObjectDirection value);

  // @@protoc_insertion_point(class_scope:sim_msg.NearestObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double euclid_dist_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class ForwardCollisionWarning :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.ForwardCollisionWarning) */ {
 public:
  ForwardCollisionWarning();
  virtual ~ForwardCollisionWarning();

  ForwardCollisionWarning(const ForwardCollisionWarning& from);
  ForwardCollisionWarning(ForwardCollisionWarning&& from) noexcept
    : ForwardCollisionWarning() {
    *this = ::std::move(from);
  }

  inline ForwardCollisionWarning& operator=(const ForwardCollisionWarning& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardCollisionWarning& operator=(ForwardCollisionWarning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardCollisionWarning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardCollisionWarning* internal_default_instance() {
    return reinterpret_cast<const ForwardCollisionWarning*>(
               &_ForwardCollisionWarning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ForwardCollisionWarning& a, ForwardCollisionWarning& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardCollisionWarning* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardCollisionWarning* New() const final {
    return CreateMaybeMessage<ForwardCollisionWarning>(nullptr);
  }

  ForwardCollisionWarning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardCollisionWarning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardCollisionWarning& from);
  void MergeFrom(const ForwardCollisionWarning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardCollisionWarning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.ForwardCollisionWarning";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEuclideanDistanceFieldNumber = 2,
    kLaneProjDistanceFieldNumber = 3,
    kEgoVFieldNumber = 4,
    kVehicleVFieldNumber = 5,
    kTtcEuclideanDistanceFieldNumber = 6,
    kTtcLaneProjDistanceFieldNumber = 7,
    kThwEuclideanDistanceFieldNumber = 8,
    kThwLaneProjDistanceFieldNumber = 9,
    kStateFieldNumber = 1,
  };
  // double euclidean_distance = 2;
  void clear_euclidean_distance();
  double euclidean_distance() const;
  void set_euclidean_distance(double value);

  // double lane_proj_distance = 3;
  void clear_lane_proj_distance();
  double lane_proj_distance() const;
  void set_lane_proj_distance(double value);

  // double ego_v = 4;
  void clear_ego_v();
  double ego_v() const;
  void set_ego_v(double value);

  // double vehicle_v = 5;
  void clear_vehicle_v();
  double vehicle_v() const;
  void set_vehicle_v(double value);

  // double ttc_euclidean_distance = 6;
  void clear_ttc_euclidean_distance();
  double ttc_euclidean_distance() const;
  void set_ttc_euclidean_distance(double value);

  // double ttc_lane_proj_distance = 7;
  void clear_ttc_lane_proj_distance();
  double ttc_lane_proj_distance() const;
  void set_ttc_lane_proj_distance(double value);

  // double thw_euclidean_distance = 8;
  void clear_thw_euclidean_distance();
  double thw_euclidean_distance() const;
  void set_thw_euclidean_distance(double value);

  // double thw_lane_proj_distance = 9;
  void clear_thw_lane_proj_distance();
  double thw_lane_proj_distance() const;
  void set_thw_lane_proj_distance(double value);

  // .sim_msg.VehicleRelativePositionalRelationship state = 1;
  void clear_state();
  ::sim_msg::VehicleRelativePositionalRelationship state() const;
  void set_state(::sim_msg::VehicleRelativePositionalRelationship value);

  // @@protoc_insertion_point(class_scope:sim_msg.ForwardCollisionWarning)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double euclidean_distance_;
  double lane_proj_distance_;
  double ego_v_;
  double vehicle_v_;
  double ttc_euclidean_distance_;
  double ttc_lane_proj_distance_;
  double thw_euclidean_distance_;
  double thw_lane_proj_distance_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class Extra_Info :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Extra_Info) */ {
 public:
  Extra_Info();
  virtual ~Extra_Info();

  Extra_Info(const Extra_Info& from);
  Extra_Info(Extra_Info&& from) noexcept
    : Extra_Info() {
    *this = ::std::move(from);
  }

  inline Extra_Info& operator=(const Extra_Info& from) {
    CopyFrom(from);
    return *this;
  }
  inline Extra_Info& operator=(Extra_Info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Extra_Info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Extra_Info* internal_default_instance() {
    return reinterpret_cast<const Extra_Info*>(
               &_Extra_Info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Extra_Info& a, Extra_Info& b) {
    a.Swap(&b);
  }
  inline void Swap(Extra_Info* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Extra_Info* New() const final {
    return CreateMaybeMessage<Extra_Info>(nullptr);
  }

  Extra_Info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Extra_Info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Extra_Info& from);
  void MergeFrom(const Extra_Info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Extra_Info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Extra_Info";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalCartesianPointFieldNumber = 1,
    kFrontVehFieldNumber = 2,
    kRearVehFieldNumber = 3,
    kSpeedMsFieldNumber = 4,
    kDistToEgoMFieldNumber = 5,
  };
  // .sim_msg.Vec3 local_cartesian_point = 1;
  bool has_local_cartesian_point() const;
  void clear_local_cartesian_point();
  const ::sim_msg::Vec3& local_cartesian_point() const;
  ::sim_msg::Vec3* release_local_cartesian_point();
  ::sim_msg::Vec3* mutable_local_cartesian_point();
  void set_allocated_local_cartesian_point(::sim_msg::Vec3* local_cartesian_point);

  // bool front_veh = 2;
  void clear_front_veh();
  bool front_veh() const;
  void set_front_veh(bool value);

  // bool rear_veh = 3;
  void clear_rear_veh();
  bool rear_veh() const;
  void set_rear_veh(bool value);

  // float speed_ms = 4;
  void clear_speed_ms();
  float speed_ms() const;
  void set_speed_ms(float value);

  // float dist_to_ego_m = 5;
  void clear_dist_to_ego_m();
  float dist_to_ego_m() const;
  void set_dist_to_ego_m(float value);

  // @@protoc_insertion_point(class_scope:sim_msg.Extra_Info)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Vec3* local_cartesian_point_;
  bool front_veh_;
  bool rear_veh_;
  float speed_ms_;
  float dist_to_ego_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class Car :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Car) */ {
 public:
  Car();
  virtual ~Car();

  Car(const Car& from);
  Car(Car&& from) noexcept
    : Car() {
    *this = ::std::move(from);
  }

  inline Car& operator=(const Car& from) {
    CopyFrom(from);
    return *this;
  }
  inline Car& operator=(Car&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Car& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Car* internal_default_instance() {
    return reinterpret_cast<const Car*>(
               &_Car_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Car& a, Car& b) {
    a.Swap(&b);
  }
  inline void Swap(Car* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Car* New() const final {
    return CreateMaybeMessage<Car>(nullptr);
  }

  Car* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Car>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Car& from);
  void MergeFrom(const Car& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Car* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Car";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowNearestObjectInfoFieldNumber = 31,
    kStridFieldNumber = 33,
    kSerializationArchiveFieldNumber = 40,
    kPlanningLineFieldNumber = 21,
    kTwinDataFieldNumber = 34,
    kFcwFieldNumber = 35,
    kExtraInfoFieldNumber = 41,
    kIdFieldNumber = 1,
    kTFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kVFieldNumber = 6,
    kVlFieldNumber = 7,
    kThetaFieldNumber = 8,
    kLengthFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kTypeFieldNumber = 12,
    kLaneIdFieldNumber = 13,
    kAccFieldNumber = 14,
    kZFieldNumber = 16,
    kTxRoadIdFieldNumber = 17,
    kTxSectionIdFieldNumber = 18,
    kTxLaneIdFieldNumber = 19,
    kTxLanelinkIdFieldNumber = 20,
    kShowAbsVelocityFieldNumber = 22,
    kAgeFieldNumber = 15,
    kControlStateFieldNumber = 30,
    kShowAbsAccFieldNumber = 23,
    kShowRelativeVelocityFieldNumber = 24,
    kShowRelativeAccFieldNumber = 25,
    kShowRelativeVelocityHorizontalFieldNumber = 26,
    kShowRelativeAccHorizontalFieldNumber = 27,
    kShowRelativeDistVerticalFieldNumber = 28,
    kShowRelativeDistHorizontalFieldNumber = 29,
    kAngleAlongCenterlineDegreeFieldNumber = 32,
    kLOffsetFieldNumber = 36,
    kToTxRoadIdFieldNumber = 37,
    kToTxSectionIdFieldNumber = 38,
    kToTxLaneIdFieldNumber = 39,
    kAccLFieldNumber = 42,
  };
  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  int show_nearestobjectinfo_size() const;
  void clear_show_nearestobjectinfo();
  ::sim_msg::NearestObject* mutable_show_nearestobjectinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >*
      mutable_show_nearestobjectinfo();
  const ::sim_msg::NearestObject& show_nearestobjectinfo(int index) const;
  ::sim_msg::NearestObject* add_show_nearestobjectinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >&
      show_nearestobjectinfo() const;

  // string strid = 33;
  void clear_strid();
  const std::string& strid() const;
  void set_strid(const std::string& value);
  void set_strid(std::string&& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  std::string* mutable_strid();
  std::string* release_strid();
  void set_allocated_strid(std::string* strid);

  // bytes serialization_archive = 40;
  void clear_serialization_archive();
  const std::string& serialization_archive() const;
  void set_serialization_archive(const std::string& value);
  void set_serialization_archive(std::string&& value);
  void set_serialization_archive(const char* value);
  void set_serialization_archive(const void* value, size_t size);
  std::string* mutable_serialization_archive();
  std::string* release_serialization_archive();
  void set_allocated_serialization_archive(std::string* serialization_archive);

  // .sim_msg.Trajectory planning_line = 21;
  bool has_planning_line() const;
  void clear_planning_line();
  const ::sim_msg::Trajectory& planning_line() const;
  ::sim_msg::Trajectory* release_planning_line();
  ::sim_msg::Trajectory* mutable_planning_line();
  void set_allocated_planning_line(::sim_msg::Trajectory* planning_line);

  // .sim_msg.TwinInfo twin_data = 34;
  bool has_twin_data() const;
  void clear_twin_data();
  const ::sim_msg::TwinInfo& twin_data() const;
  ::sim_msg::TwinInfo* release_twin_data();
  ::sim_msg::TwinInfo* mutable_twin_data();
  void set_allocated_twin_data(::sim_msg::TwinInfo* twin_data);

  // .sim_msg.ForwardCollisionWarning fcw = 35;
  bool has_fcw() const;
  void clear_fcw();
  const ::sim_msg::ForwardCollisionWarning& fcw() const;
  ::sim_msg::ForwardCollisionWarning* release_fcw();
  ::sim_msg::ForwardCollisionWarning* mutable_fcw();
  void set_allocated_fcw(::sim_msg::ForwardCollisionWarning* fcw);

  // .sim_msg.Extra_Info extra_info = 41;
  bool has_extra_info() const;
  void clear_extra_info();
  const ::sim_msg::Extra_Info& extra_info() const;
  ::sim_msg::Extra_Info* release_extra_info();
  ::sim_msg::Extra_Info* mutable_extra_info();
  void set_allocated_extra_info(::sim_msg::Extra_Info* extra_info);

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double heading = 5;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // double v = 6;
  void clear_v();
  double v() const;
  void set_v(double value);

  // double vl = 7;
  void clear_vl();
  double vl() const;
  void set_vl(double value);

  // double theta = 8;
  void clear_theta();
  double theta() const;
  void set_theta(double value);

  // double length = 9;
  void clear_length();
  double length() const;
  void set_length(double value);

  // double width = 10;
  void clear_width();
  double width() const;
  void set_width(double value);

  // double height = 11;
  void clear_height();
  double height() const;
  void set_height(double value);

  // int32 type = 12;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 laneId = 13;
  void clear_laneid();
  ::PROTOBUF_NAMESPACE_ID::int32 laneid() const;
  void set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double acc = 14;
  void clear_acc();
  double acc() const;
  void set_acc(double value);

  // double z = 16;
  void clear_z();
  double z() const;
  void set_z(double value);

  // uint64 tx_road_id = 17;
  void clear_tx_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id() const;
  void set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 tx_section_id = 18;
  void clear_tx_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id() const;
  void set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 tx_lane_id = 19;
  void clear_tx_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id() const;
  void set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // uint64 tx_lanelink_id = 20;
  void clear_tx_lanelink_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_lanelink_id() const;
  void set_tx_lanelink_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // double show_abs_velocity = 22;
  void clear_show_abs_velocity();
  double show_abs_velocity() const;
  void set_show_abs_velocity(double value);

  // int32 age = 15;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .sim_msg.ControlState control_state = 30;
  void clear_control_state();
  ::sim_msg::ControlState control_state() const;
  void set_control_state(::sim_msg::ControlState value);

  // double show_abs_acc = 23;
  void clear_show_abs_acc();
  double show_abs_acc() const;
  void set_show_abs_acc(double value);

  // double show_relative_velocity = 24;
  void clear_show_relative_velocity();
  double show_relative_velocity() const;
  void set_show_relative_velocity(double value);

  // double show_relative_acc = 25;
  void clear_show_relative_acc();
  double show_relative_acc() const;
  void set_show_relative_acc(double value);

  // double show_relative_velocity_horizontal = 26;
  void clear_show_relative_velocity_horizontal();
  double show_relative_velocity_horizontal() const;
  void set_show_relative_velocity_horizontal(double value);

  // double show_relative_acc_horizontal = 27;
  void clear_show_relative_acc_horizontal();
  double show_relative_acc_horizontal() const;
  void set_show_relative_acc_horizontal(double value);

  // double show_relative_dist_vertical = 28;
  void clear_show_relative_dist_vertical();
  double show_relative_dist_vertical() const;
  void set_show_relative_dist_vertical(double value);

  // double show_relative_dist_horizontal = 29;
  void clear_show_relative_dist_horizontal();
  double show_relative_dist_horizontal() const;
  void set_show_relative_dist_horizontal(double value);

  // double angle_along_centerline_degree = 32;
  void clear_angle_along_centerline_degree();
  double angle_along_centerline_degree() const;
  void set_angle_along_centerline_degree(double value);

  // double lOffset = 36;
  void clear_loffset();
  double loffset() const;
  void set_loffset(double value);

  // uint64 to_tx_road_id = 37;
  void clear_to_tx_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_tx_road_id() const;
  void set_to_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 to_tx_section_id = 38;
  void clear_to_tx_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_tx_section_id() const;
  void set_to_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 to_tx_lane_id = 39;
  void clear_to_tx_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 to_tx_lane_id() const;
  void set_to_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // float acc_l = 42;
  void clear_acc_l();
  float acc_l() const;
  void set_acc_l(float value);

  // @@protoc_insertion_point(class_scope:sim_msg.Car)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject > show_nearestobjectinfo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialization_archive_;
  ::sim_msg::Trajectory* planning_line_;
  ::sim_msg::TwinInfo* twin_data_;
  ::sim_msg::ForwardCollisionWarning* fcw_;
  ::sim_msg::Extra_Info* extra_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  double t_;
  double x_;
  double y_;
  double heading_;
  double v_;
  double vl_;
  double theta_;
  double length_;
  double width_;
  double height_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 laneid_;
  double acc_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_lanelink_id_;
  double show_abs_velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  int control_state_;
  double show_abs_acc_;
  double show_relative_velocity_;
  double show_relative_acc_;
  double show_relative_velocity_horizontal_;
  double show_relative_acc_horizontal_;
  double show_relative_dist_vertical_;
  double show_relative_dist_horizontal_;
  double angle_along_centerline_degree_;
  double loffset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_tx_road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_tx_section_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_tx_lane_id_;
  float acc_l_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class StaticObstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.StaticObstacle) */ {
 public:
  StaticObstacle();
  virtual ~StaticObstacle();

  StaticObstacle(const StaticObstacle& from);
  StaticObstacle(StaticObstacle&& from) noexcept
    : StaticObstacle() {
    *this = ::std::move(from);
  }

  inline StaticObstacle& operator=(const StaticObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticObstacle& operator=(StaticObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StaticObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticObstacle* internal_default_instance() {
    return reinterpret_cast<const StaticObstacle*>(
               &_StaticObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StaticObstacle& a, StaticObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticObstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StaticObstacle* New() const final {
    return CreateMaybeMessage<StaticObstacle>(nullptr);
  }

  StaticObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StaticObstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StaticObstacle& from);
  void MergeFrom(const StaticObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.StaticObstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStridFieldNumber = 12,
    kTwinDataFieldNumber = 13,
    kTFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 9,
    kLengthFieldNumber = 6,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kZFieldNumber = 11,
    kAgeFieldNumber = 10,
  };
  // string strid = 12;
  void clear_strid();
  const std::string& strid() const;
  void set_strid(const std::string& value);
  void set_strid(std::string&& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  std::string* mutable_strid();
  std::string* release_strid();
  void set_allocated_strid(std::string* strid);

  // .sim_msg.TwinInfo twin_data = 13;
  bool has_twin_data() const;
  void clear_twin_data();
  const ::sim_msg::TwinInfo& twin_data() const;
  ::sim_msg::TwinInfo* release_twin_data();
  ::sim_msg::TwinInfo* mutable_twin_data();
  void set_allocated_twin_data(::sim_msg::TwinInfo* twin_data);

  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double heading = 5;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 9;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double length = 6;
  void clear_length();
  double length() const;
  void set_length(double value);

  // double width = 7;
  void clear_width();
  double width() const;
  void set_width(double value);

  // double height = 8;
  void clear_height();
  double height() const;
  void set_height(double value);

  // double z = 11;
  void clear_z();
  double z() const;
  void set_z(double value);

  // int32 age = 10;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.StaticObstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strid_;
  ::sim_msg::TwinInfo* twin_data_;
  double t_;
  double x_;
  double y_;
  double heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double length_;
  double width_;
  double height_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class DynamicObstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.DynamicObstacle) */ {
 public:
  DynamicObstacle();
  virtual ~DynamicObstacle();

  DynamicObstacle(const DynamicObstacle& from);
  DynamicObstacle(DynamicObstacle&& from) noexcept
    : DynamicObstacle() {
    *this = ::std::move(from);
  }

  inline DynamicObstacle& operator=(const DynamicObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicObstacle& operator=(DynamicObstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicObstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicObstacle* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacle*>(
               &_DynamicObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DynamicObstacle& a, DynamicObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicObstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicObstacle* New() const final {
    return CreateMaybeMessage<DynamicObstacle>(nullptr);
  }

  DynamicObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicObstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicObstacle& from);
  void MergeFrom(const DynamicObstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.DynamicObstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStridFieldNumber = 23,
    kTwinDataFieldNumber = 24,
    kTFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 9,
    kLengthFieldNumber = 6,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kVFieldNumber = 10,
    kVlFieldNumber = 11,
    kAccFieldNumber = 12,
    kZFieldNumber = 14,
    kShowAbsVelocityFieldNumber = 15,
    kShowAbsAccFieldNumber = 16,
    kShowRelativeVelocityFieldNumber = 17,
    kShowRelativeAccFieldNumber = 18,
    kShowRelativeVelocityHorizontalFieldNumber = 19,
    kShowRelativeAccHorizontalFieldNumber = 20,
    kShowRelativeDistVerticalFieldNumber = 21,
    kShowRelativeDistHorizontalFieldNumber = 22,
    kAgeFieldNumber = 13,
  };
  // string strid = 23;
  void clear_strid();
  const std::string& strid() const;
  void set_strid(const std::string& value);
  void set_strid(std::string&& value);
  void set_strid(const char* value);
  void set_strid(const char* value, size_t size);
  std::string* mutable_strid();
  std::string* release_strid();
  void set_allocated_strid(std::string* strid);

  // .sim_msg.TwinInfo twin_data = 24;
  bool has_twin_data() const;
  void clear_twin_data();
  const ::sim_msg::TwinInfo& twin_data() const;
  ::sim_msg::TwinInfo* release_twin_data();
  ::sim_msg::TwinInfo* mutable_twin_data();
  void set_allocated_twin_data(::sim_msg::TwinInfo* twin_data);

  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double heading = 5;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 type = 9;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double length = 6;
  void clear_length();
  double length() const;
  void set_length(double value);

  // double width = 7;
  void clear_width();
  double width() const;
  void set_width(double value);

  // double height = 8;
  void clear_height();
  double height() const;
  void set_height(double value);

  // double v = 10;
  void clear_v();
  double v() const;
  void set_v(double value);

  // double vl = 11;
  void clear_vl();
  double vl() const;
  void set_vl(double value);

  // double acc = 12;
  void clear_acc();
  double acc() const;
  void set_acc(double value);

  // double z = 14;
  void clear_z();
  double z() const;
  void set_z(double value);

  // double show_abs_velocity = 15;
  void clear_show_abs_velocity();
  double show_abs_velocity() const;
  void set_show_abs_velocity(double value);

  // double show_abs_acc = 16;
  void clear_show_abs_acc();
  double show_abs_acc() const;
  void set_show_abs_acc(double value);

  // double show_relative_velocity = 17;
  void clear_show_relative_velocity();
  double show_relative_velocity() const;
  void set_show_relative_velocity(double value);

  // double show_relative_acc = 18;
  void clear_show_relative_acc();
  double show_relative_acc() const;
  void set_show_relative_acc(double value);

  // double show_relative_velocity_horizontal = 19;
  void clear_show_relative_velocity_horizontal();
  double show_relative_velocity_horizontal() const;
  void set_show_relative_velocity_horizontal(double value);

  // double show_relative_acc_horizontal = 20;
  void clear_show_relative_acc_horizontal();
  double show_relative_acc_horizontal() const;
  void set_show_relative_acc_horizontal(double value);

  // double show_relative_dist_vertical = 21;
  void clear_show_relative_dist_vertical();
  double show_relative_dist_vertical() const;
  void set_show_relative_dist_vertical(double value);

  // double show_relative_dist_horizontal = 22;
  void clear_show_relative_dist_horizontal();
  double show_relative_dist_horizontal() const;
  void set_show_relative_dist_horizontal(double value);

  // int32 age = 13;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.DynamicObstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strid_;
  ::sim_msg::TwinInfo* twin_data_;
  double t_;
  double x_;
  double y_;
  double heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double length_;
  double width_;
  double height_;
  double v_;
  double vl_;
  double acc_;
  double z_;
  double show_abs_velocity_;
  double show_abs_acc_;
  double show_relative_velocity_;
  double show_relative_acc_;
  double show_relative_velocity_horizontal_;
  double show_relative_acc_horizontal_;
  double show_relative_dist_vertical_;
  double show_relative_dist_horizontal_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class LaneUid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.LaneUid) */ {
 public:
  LaneUid();
  virtual ~LaneUid();

  LaneUid(const LaneUid& from);
  LaneUid(LaneUid&& from) noexcept
    : LaneUid() {
    *this = ::std::move(from);
  }

  inline LaneUid& operator=(const LaneUid& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneUid& operator=(LaneUid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LaneUid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LaneUid* internal_default_instance() {
    return reinterpret_cast<const LaneUid*>(
               &_LaneUid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LaneUid& a, LaneUid& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneUid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneUid* New() const final {
    return CreateMaybeMessage<LaneUid>(nullptr);
  }

  LaneUid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneUid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LaneUid& from);
  void MergeFrom(const LaneUid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneUid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.LaneUid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxRoadIdFieldNumber = 1,
    kTxSectionIdFieldNumber = 2,
    kTxLaneIdFieldNumber = 3,
  };
  // uint64 tx_road_id = 1;
  void clear_tx_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id() const;
  void set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 tx_section_id = 2;
  void clear_tx_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id() const;
  void set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 tx_lane_id = 3;
  void clear_tx_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id() const;
  void set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:sim_msg.LaneUid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return CreateMaybeMessage<TrafficLight>(nullptr);
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLanesFieldNumber = 11,
    kControlPhasesFieldNumber = 12,
    kPlanFieldNumber = 15,
    kJunctionFieldNumber = 16,
    kPhaseNumberFieldNumber = 17,
    kSignalHeadFieldNumber = 18,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kIdFieldNumber = 1,
    kColorFieldNumber = 5,
    kHeadingFieldNumber = 4,
    kZFieldNumber = 7,
    kTxRoadIdFieldNumber = 8,
    kTxSectionIdFieldNumber = 9,
    kAgeFieldNumber = 6,
    kNextColorFieldNumber = 13,
    kTxLaneIdFieldNumber = 10,
    kNextAgeFieldNumber = 14,
  };
  // repeated .sim_msg.LaneUid control_lanes = 11;
  int control_lanes_size() const;
  void clear_control_lanes();
  ::sim_msg::LaneUid* mutable_control_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >*
      mutable_control_lanes();
  const ::sim_msg::LaneUid& control_lanes(int index) const;
  ::sim_msg::LaneUid* add_control_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >&
      control_lanes() const;

  // repeated .sim_msg.Phase control_phases = 12;
  int control_phases_size() const;
  void clear_control_phases();
  ::sim_msg::Phase control_phases(int index) const;
  void set_control_phases(int index, ::sim_msg::Phase value);
  void add_control_phases(::sim_msg::Phase value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& control_phases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_control_phases();

  // string plan = 15;
  void clear_plan();
  const std::string& plan() const;
  void set_plan(const std::string& value);
  void set_plan(std::string&& value);
  void set_plan(const char* value);
  void set_plan(const char* value, size_t size);
  std::string* mutable_plan();
  std::string* release_plan();
  void set_allocated_plan(std::string* plan);

  // string junction = 16;
  void clear_junction();
  const std::string& junction() const;
  void set_junction(const std::string& value);
  void set_junction(std::string&& value);
  void set_junction(const char* value);
  void set_junction(const char* value, size_t size);
  std::string* mutable_junction();
  std::string* release_junction();
  void set_allocated_junction(std::string* junction);

  // string phaseNumber = 17;
  void clear_phasenumber();
  const std::string& phasenumber() const;
  void set_phasenumber(const std::string& value);
  void set_phasenumber(std::string&& value);
  void set_phasenumber(const char* value);
  void set_phasenumber(const char* value, size_t size);
  std::string* mutable_phasenumber();
  std::string* release_phasenumber();
  void set_allocated_phasenumber(std::string* phasenumber);

  // string signalHead = 18;
  void clear_signalhead();
  const std::string& signalhead() const;
  void set_signalhead(const std::string& value);
  void set_signalhead(std::string&& value);
  void set_signalhead(const char* value);
  void set_signalhead(const char* value, size_t size);
  std::string* mutable_signalhead();
  std::string* release_signalhead();
  void set_allocated_signalhead(std::string* signalhead);

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 color = 5;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double heading = 4;
  void clear_heading();
  double heading() const;
  void set_heading(double value);

  // double z = 7;
  void clear_z();
  double z() const;
  void set_z(double value);

  // uint64 tx_road_id = 8;
  void clear_tx_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id() const;
  void set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 tx_section_id = 9;
  void clear_tx_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id() const;
  void set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 age = 6;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 next_color = 13;
  void clear_next_color();
  ::PROTOBUF_NAMESPACE_ID::int32 next_color() const;
  void set_next_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int64 tx_lane_id = 10;
  void clear_tx_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id() const;
  void set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // int32 next_age = 14;
  void clear_next_age();
  ::PROTOBUF_NAMESPACE_ID::int32 next_age() const;
  void set_next_age(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.TrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid > control_lanes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> control_phases_;
  mutable std::atomic<int> _control_phases_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plan_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr junction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phasenumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalhead_;
  double x_;
  double y_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  double heading_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_color_;
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 next_age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class EgoInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EgoInfo) */ {
 public:
  EgoInfo();
  virtual ~EgoInfo();

  EgoInfo(const EgoInfo& from);
  EgoInfo(EgoInfo&& from) noexcept
    : EgoInfo() {
    *this = ::std::move(from);
  }

  inline EgoInfo& operator=(const EgoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EgoInfo& operator=(EgoInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EgoInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EgoInfo* internal_default_instance() {
    return reinterpret_cast<const EgoInfo*>(
               &_EgoInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EgoInfo& a, EgoInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EgoInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EgoInfo* New() const final {
    return CreateMaybeMessage<EgoInfo>(nullptr);
  }

  EgoInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EgoInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EgoInfo& from);
  void MergeFrom(const EgoInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EgoInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EgoInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAngleAlongCenterlineDegreeFieldNumber = 2,
    kSlopeFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float angle_along_centerline_degree = 2;
  void clear_angle_along_centerline_degree();
  float angle_along_centerline_degree() const;
  void set_angle_along_centerline_degree(float value);

  // float slope = 3;
  void clear_slope();
  float slope() const;
  void set_slope(float value);

  // @@protoc_insertion_point(class_scope:sim_msg.EgoInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float angle_along_centerline_degree_;
  float slope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class Traffic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Traffic) */ {
 public:
  Traffic();
  virtual ~Traffic();

  Traffic(const Traffic& from);
  Traffic(Traffic&& from) noexcept
    : Traffic() {
    *this = ::std::move(from);
  }

  inline Traffic& operator=(const Traffic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Traffic& operator=(Traffic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Traffic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Traffic* internal_default_instance() {
    return reinterpret_cast<const Traffic*>(
               &_Traffic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Traffic& a, Traffic& b) {
    a.Swap(&b);
  }
  inline void Swap(Traffic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Traffic* New() const final {
    return CreateMaybeMessage<Traffic>(nullptr);
  }

  Traffic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Traffic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Traffic& from);
  void MergeFrom(const Traffic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Traffic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Traffic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarsFieldNumber = 1,
    kStaticObstaclesFieldNumber = 2,
    kDynamicObstaclesFieldNumber = 3,
    kTrafficLightsFieldNumber = 4,
    kEgosFieldNumber = 8,
    kRoadNetworkAverVelocityFieldNumber = 5,
    kTimeFieldNumber = 7,
    kRoadNetworkTotalVehicleCountFieldNumber = 6,
  };
  // repeated .sim_msg.Car cars = 1;
  int cars_size() const;
  void clear_cars();
  ::sim_msg::Car* mutable_cars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >*
      mutable_cars();
  const ::sim_msg::Car& cars(int index) const;
  ::sim_msg::Car* add_cars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >&
      cars() const;

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  int staticobstacles_size() const;
  void clear_staticobstacles();
  ::sim_msg::StaticObstacle* mutable_staticobstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >*
      mutable_staticobstacles();
  const ::sim_msg::StaticObstacle& staticobstacles(int index) const;
  ::sim_msg::StaticObstacle* add_staticobstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >&
      staticobstacles() const;

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  int dynamicobstacles_size() const;
  void clear_dynamicobstacles();
  ::sim_msg::DynamicObstacle* mutable_dynamicobstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >*
      mutable_dynamicobstacles();
  const ::sim_msg::DynamicObstacle& dynamicobstacles(int index) const;
  ::sim_msg::DynamicObstacle* add_dynamicobstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >&
      dynamicobstacles() const;

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  int trafficlights_size() const;
  void clear_trafficlights();
  ::sim_msg::TrafficLight* mutable_trafficlights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >*
      mutable_trafficlights();
  const ::sim_msg::TrafficLight& trafficlights(int index) const;
  ::sim_msg::TrafficLight* add_trafficlights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >&
      trafficlights() const;

  // repeated .sim_msg.EgoInfo egos = 8;
  int egos_size() const;
  void clear_egos();
  ::sim_msg::EgoInfo* mutable_egos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::EgoInfo >*
      mutable_egos();
  const ::sim_msg::EgoInfo& egos(int index) const;
  ::sim_msg::EgoInfo* add_egos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::EgoInfo >&
      egos() const;

  // double road_network_aver_velocity = 5;
  void clear_road_network_aver_velocity();
  double road_network_aver_velocity() const;
  void set_road_network_aver_velocity(double value);

  // uint64 time = 7;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int32 road_network_total_vehicle_count = 6;
  void clear_road_network_total_vehicle_count();
  ::PROTOBUF_NAMESPACE_ID::int32 road_network_total_vehicle_count() const;
  void set_road_network_total_vehicle_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.Traffic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car > cars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle > staticobstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle > dynamicobstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight > trafficlights_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::EgoInfo > egos_;
  double road_network_aver_velocity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::int32 road_network_total_vehicle_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class TrafficRecords :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrafficRecords) */ {
 public:
  TrafficRecords();
  virtual ~TrafficRecords();

  TrafficRecords(const TrafficRecords& from);
  TrafficRecords(TrafficRecords&& from) noexcept
    : TrafficRecords() {
    *this = ::std::move(from);
  }

  inline TrafficRecords& operator=(const TrafficRecords& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficRecords& operator=(TrafficRecords&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficRecords& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficRecords* internal_default_instance() {
    return reinterpret_cast<const TrafficRecords*>(
               &_TrafficRecords_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TrafficRecords& a, TrafficRecords& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficRecords* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficRecords* New() const final {
    return CreateMaybeMessage<TrafficRecords>(nullptr);
  }

  TrafficRecords* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficRecords>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficRecords& from);
  void MergeFrom(const TrafficRecords& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficRecords* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrafficRecords";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrafficRecordFieldNumber = 1,
  };
  // repeated .sim_msg.Traffic traffic_record = 1;
  int traffic_record_size() const;
  void clear_traffic_record();
  ::sim_msg::Traffic* mutable_traffic_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >*
      mutable_traffic_record();
  const ::sim_msg::Traffic& traffic_record(int index) const;
  ::sim_msg::Traffic* add_traffic_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >&
      traffic_record() const;

  // @@protoc_insertion_point(class_scope:sim_msg.TrafficRecords)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic > traffic_record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrajectoryInfo) */ {
 public:
  TrajectoryInfo();
  virtual ~TrajectoryInfo();

  TrajectoryInfo(const TrajectoryInfo& from);
  TrajectoryInfo(TrajectoryInfo&& from) noexcept
    : TrajectoryInfo() {
    *this = ::std::move(from);
  }

  inline TrajectoryInfo& operator=(const TrajectoryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryInfo& operator=(TrajectoryInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryInfo* internal_default_instance() {
    return reinterpret_cast<const TrajectoryInfo*>(
               &_TrajectoryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TrajectoryInfo& a, TrajectoryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryInfo* New() const final {
    return CreateMaybeMessage<TrajectoryInfo>(nullptr);
  }

  TrajectoryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryInfo& from);
  void MergeFrom(const TrajectoryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrajectoryInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryLineFieldNumber = 2,
    kTimeStampFieldNumber = 1,
  };
  // .sim_msg.Trajectory trajectory_line = 2;
  bool has_trajectory_line() const;
  void clear_trajectory_line();
  const ::sim_msg::Trajectory& trajectory_line() const;
  ::sim_msg::Trajectory* release_trajectory_line();
  ::sim_msg::Trajectory* mutable_trajectory_line();
  void set_allocated_trajectory_line(::sim_msg::Trajectory* trajectory_line);

  // double time_stamp = 1;
  void clear_time_stamp();
  double time_stamp() const;
  void set_time_stamp(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.TrajectoryInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Trajectory* trajectory_line_;
  double time_stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class TrafficRecords4Logsim_DisengageEventInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrafficRecords4Logsim.DisengageEventInfo) */ {
 public:
  TrafficRecords4Logsim_DisengageEventInfo();
  virtual ~TrafficRecords4Logsim_DisengageEventInfo();

  TrafficRecords4Logsim_DisengageEventInfo(const TrafficRecords4Logsim_DisengageEventInfo& from);
  TrafficRecords4Logsim_DisengageEventInfo(TrafficRecords4Logsim_DisengageEventInfo&& from) noexcept
    : TrafficRecords4Logsim_DisengageEventInfo() {
    *this = ::std::move(from);
  }

  inline TrafficRecords4Logsim_DisengageEventInfo& operator=(const TrafficRecords4Logsim_DisengageEventInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficRecords4Logsim_DisengageEventInfo& operator=(TrafficRecords4Logsim_DisengageEventInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficRecords4Logsim_DisengageEventInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficRecords4Logsim_DisengageEventInfo* internal_default_instance() {
    return reinterpret_cast<const TrafficRecords4Logsim_DisengageEventInfo*>(
               &_TrafficRecords4Logsim_DisengageEventInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TrafficRecords4Logsim_DisengageEventInfo& a, TrafficRecords4Logsim_DisengageEventInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficRecords4Logsim_DisengageEventInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficRecords4Logsim_DisengageEventInfo* New() const final {
    return CreateMaybeMessage<TrafficRecords4Logsim_DisengageEventInfo>(nullptr);
  }

  TrafficRecords4Logsim_DisengageEventInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficRecords4Logsim_DisengageEventInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficRecords4Logsim_DisengageEventInfo& from);
  void MergeFrom(const TrafficRecords4Logsim_DisengageEventInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficRecords4Logsim_DisengageEventInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrafficRecords4Logsim.DisengageEventInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int64 timestamp_ms = 1;
  void clear_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms() const;
  void set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value);

  // .sim_msg.DisengageEventType type = 2;
  void clear_type();
  ::sim_msg::DisengageEventType type() const;
  void set_type(::sim_msg::DisengageEventType value);

  // @@protoc_insertion_point(class_scope:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_ms_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class TrafficRecords4Logsim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrafficRecords4Logsim) */ {
 public:
  TrafficRecords4Logsim();
  virtual ~TrafficRecords4Logsim();

  TrafficRecords4Logsim(const TrafficRecords4Logsim& from);
  TrafficRecords4Logsim(TrafficRecords4Logsim&& from) noexcept
    : TrafficRecords4Logsim() {
    *this = ::std::move(from);
  }

  inline TrafficRecords4Logsim& operator=(const TrafficRecords4Logsim& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficRecords4Logsim& operator=(TrafficRecords4Logsim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficRecords4Logsim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficRecords4Logsim* internal_default_instance() {
    return reinterpret_cast<const TrafficRecords4Logsim*>(
               &_TrafficRecords4Logsim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TrafficRecords4Logsim& a, TrafficRecords4Logsim& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficRecords4Logsim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficRecords4Logsim* New() const final {
    return CreateMaybeMessage<TrafficRecords4Logsim>(nullptr);
  }

  TrafficRecords4Logsim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficRecords4Logsim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficRecords4Logsim& from);
  void MergeFrom(const TrafficRecords4Logsim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficRecords4Logsim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrafficRecords4Logsim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_traffic_2eproto);
    return ::descriptor_table_traffic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficRecords4Logsim_DisengageEventInfo DisengageEventInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kEgoLocationFieldNumber = 1,
    kTrafficRecordFieldNumber = 2,
    kDisengageEventsFieldNumber = 3,
    kEgoTrajectoryFieldNumber = 5,
    kDurationMsFieldNumber = 4,
  };
  // repeated .sim_msg.Location ego_location = 1;
  int ego_location_size() const;
  void clear_ego_location();
  ::sim_msg::Location* mutable_ego_location(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Location >*
      mutable_ego_location();
  const ::sim_msg::Location& ego_location(int index) const;
  ::sim_msg::Location* add_ego_location();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Location >&
      ego_location() const;

  // repeated .sim_msg.Traffic traffic_record = 2;
  int traffic_record_size() const;
  void clear_traffic_record();
  ::sim_msg::Traffic* mutable_traffic_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >*
      mutable_traffic_record();
  const ::sim_msg::Traffic& traffic_record(int index) const;
  ::sim_msg::Traffic* add_traffic_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >&
      traffic_record() const;

  // repeated .sim_msg.TrafficRecords4Logsim.DisengageEventInfo disengage_events = 3;
  int disengage_events_size() const;
  void clear_disengage_events();
  ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo* mutable_disengage_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo >*
      mutable_disengage_events();
  const ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo& disengage_events(int index) const;
  ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo* add_disengage_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo >&
      disengage_events() const;

  // repeated .sim_msg.TrajectoryInfo ego_trajectory = 5;
  int ego_trajectory_size() const;
  void clear_ego_trajectory();
  ::sim_msg::TrajectoryInfo* mutable_ego_trajectory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryInfo >*
      mutable_ego_trajectory();
  const ::sim_msg::TrajectoryInfo& ego_trajectory(int index) const;
  ::sim_msg::TrajectoryInfo* add_ego_trajectory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryInfo >&
      ego_trajectory() const;

  // uint64 duration_ms = 4;
  void clear_duration_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms() const;
  void set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:sim_msg.TrafficRecords4Logsim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Location > ego_location_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic > traffic_record_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo > disengage_events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryInfo > ego_trajectory_;
  ::PROTOBUF_NAMESPACE_ID::uint64 duration_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TwinInfo

// -------------------------------------------------------------------

// ManualVehicleControlInfo

// int32 id = 1;
inline void ManualVehicleControlInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManualVehicleControlInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.id)
  return id_;
}
inline void ManualVehicleControlInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ManualVehicleControlInfo.id)
}

// .sim_msg.Location veh_control_info = 2;
inline bool ManualVehicleControlInfo::has_veh_control_info() const {
  return this != internal_default_instance() && veh_control_info_ != nullptr;
}
inline const ::sim_msg::Location& ManualVehicleControlInfo::veh_control_info() const {
  const ::sim_msg::Location* p = veh_control_info_;
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Location*>(
      &::sim_msg::_Location_default_instance_);
}
inline ::sim_msg::Location* ManualVehicleControlInfo::release_veh_control_info() {
  // @@protoc_insertion_point(field_release:sim_msg.ManualVehicleControlInfo.veh_control_info)
  
  ::sim_msg::Location* temp = veh_control_info_;
  veh_control_info_ = nullptr;
  return temp;
}
inline ::sim_msg::Location* ManualVehicleControlInfo::mutable_veh_control_info() {
  
  if (veh_control_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Location>(GetArenaNoVirtual());
    veh_control_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return veh_control_info_;
}
inline void ManualVehicleControlInfo::set_allocated_veh_control_info(::sim_msg::Location* veh_control_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(veh_control_info_);
  }
  if (veh_control_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      veh_control_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_control_info, submessage_arena);
    }
    
  } else {
    
  }
  veh_control_info_ = veh_control_info;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.ManualVehicleControlInfo.veh_control_info)
}

// -------------------------------------------------------------------

// ManualVehicleControlInfoArray

// repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
inline int ManualVehicleControlInfoArray::vehicles_control_info_size() const {
  return vehicles_control_info_.size();
}
inline void ManualVehicleControlInfoArray::clear_vehicles_control_info() {
  vehicles_control_info_.Clear();
}
inline ::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::mutable_vehicles_control_info(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >*
ManualVehicleControlInfoArray::mutable_vehicles_control_info() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return &vehicles_control_info_;
}
inline const ::sim_msg::ManualVehicleControlInfo& ManualVehicleControlInfoArray::vehicles_control_info(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Get(index);
}
inline ::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::add_vehicles_control_info() {
  // @@protoc_insertion_point(field_add:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >&
ManualVehicleControlInfoArray::vehicles_control_info() const {
  // @@protoc_insertion_point(field_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_;
}

// -------------------------------------------------------------------

// NearestObject

// int32 id = 1;
inline void NearestObject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NearestObject::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.id)
  return id_;
}
inline void NearestObject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.id)
}

// double euclid_dist = 2;
inline void NearestObject::clear_euclid_dist() {
  euclid_dist_ = 0;
}
inline double NearestObject::euclid_dist() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.euclid_dist)
  return euclid_dist_;
}
inline void NearestObject::set_euclid_dist(double value) {
  
  euclid_dist_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.euclid_dist)
}

// .sim_msg.NearestObjectDirection dir = 3;
inline void NearestObject::clear_dir() {
  dir_ = 0;
}
inline ::sim_msg::NearestObjectDirection NearestObject::dir() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.dir)
  return static_cast< ::sim_msg::NearestObjectDirection >(dir_);
}
inline void NearestObject::set_dir(::sim_msg::NearestObjectDirection value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.dir)
}

// -------------------------------------------------------------------

// ForwardCollisionWarning

// .sim_msg.VehicleRelativePositionalRelationship state = 1;
inline void ForwardCollisionWarning::clear_state() {
  state_ = 0;
}
inline ::sim_msg::VehicleRelativePositionalRelationship ForwardCollisionWarning::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.state)
  return static_cast< ::sim_msg::VehicleRelativePositionalRelationship >(state_);
}
inline void ForwardCollisionWarning::set_state(::sim_msg::VehicleRelativePositionalRelationship value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.state)
}

// double euclidean_distance = 2;
inline void ForwardCollisionWarning::clear_euclidean_distance() {
  euclidean_distance_ = 0;
}
inline double ForwardCollisionWarning::euclidean_distance() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.euclidean_distance)
  return euclidean_distance_;
}
inline void ForwardCollisionWarning::set_euclidean_distance(double value) {
  
  euclidean_distance_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.euclidean_distance)
}

// double lane_proj_distance = 3;
inline void ForwardCollisionWarning::clear_lane_proj_distance() {
  lane_proj_distance_ = 0;
}
inline double ForwardCollisionWarning::lane_proj_distance() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.lane_proj_distance)
  return lane_proj_distance_;
}
inline void ForwardCollisionWarning::set_lane_proj_distance(double value) {
  
  lane_proj_distance_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.lane_proj_distance)
}

// double ego_v = 4;
inline void ForwardCollisionWarning::clear_ego_v() {
  ego_v_ = 0;
}
inline double ForwardCollisionWarning::ego_v() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.ego_v)
  return ego_v_;
}
inline void ForwardCollisionWarning::set_ego_v(double value) {
  
  ego_v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.ego_v)
}

// double vehicle_v = 5;
inline void ForwardCollisionWarning::clear_vehicle_v() {
  vehicle_v_ = 0;
}
inline double ForwardCollisionWarning::vehicle_v() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.vehicle_v)
  return vehicle_v_;
}
inline void ForwardCollisionWarning::set_vehicle_v(double value) {
  
  vehicle_v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.vehicle_v)
}

// double ttc_euclidean_distance = 6;
inline void ForwardCollisionWarning::clear_ttc_euclidean_distance() {
  ttc_euclidean_distance_ = 0;
}
inline double ForwardCollisionWarning::ttc_euclidean_distance() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.ttc_euclidean_distance)
  return ttc_euclidean_distance_;
}
inline void ForwardCollisionWarning::set_ttc_euclidean_distance(double value) {
  
  ttc_euclidean_distance_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.ttc_euclidean_distance)
}

// double ttc_lane_proj_distance = 7;
inline void ForwardCollisionWarning::clear_ttc_lane_proj_distance() {
  ttc_lane_proj_distance_ = 0;
}
inline double ForwardCollisionWarning::ttc_lane_proj_distance() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.ttc_lane_proj_distance)
  return ttc_lane_proj_distance_;
}
inline void ForwardCollisionWarning::set_ttc_lane_proj_distance(double value) {
  
  ttc_lane_proj_distance_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.ttc_lane_proj_distance)
}

// double thw_euclidean_distance = 8;
inline void ForwardCollisionWarning::clear_thw_euclidean_distance() {
  thw_euclidean_distance_ = 0;
}
inline double ForwardCollisionWarning::thw_euclidean_distance() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.thw_euclidean_distance)
  return thw_euclidean_distance_;
}
inline void ForwardCollisionWarning::set_thw_euclidean_distance(double value) {
  
  thw_euclidean_distance_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.thw_euclidean_distance)
}

// double thw_lane_proj_distance = 9;
inline void ForwardCollisionWarning::clear_thw_lane_proj_distance() {
  thw_lane_proj_distance_ = 0;
}
inline double ForwardCollisionWarning::thw_lane_proj_distance() const {
  // @@protoc_insertion_point(field_get:sim_msg.ForwardCollisionWarning.thw_lane_proj_distance)
  return thw_lane_proj_distance_;
}
inline void ForwardCollisionWarning::set_thw_lane_proj_distance(double value) {
  
  thw_lane_proj_distance_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ForwardCollisionWarning.thw_lane_proj_distance)
}

// -------------------------------------------------------------------

// Extra_Info

// .sim_msg.Vec3 local_cartesian_point = 1;
inline bool Extra_Info::has_local_cartesian_point() const {
  return this != internal_default_instance() && local_cartesian_point_ != nullptr;
}
inline const ::sim_msg::Vec3& Extra_Info::local_cartesian_point() const {
  const ::sim_msg::Vec3* p = local_cartesian_point_;
  // @@protoc_insertion_point(field_get:sim_msg.Extra_Info.local_cartesian_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* Extra_Info::release_local_cartesian_point() {
  // @@protoc_insertion_point(field_release:sim_msg.Extra_Info.local_cartesian_point)
  
  ::sim_msg::Vec3* temp = local_cartesian_point_;
  local_cartesian_point_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Extra_Info::mutable_local_cartesian_point() {
  
  if (local_cartesian_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    local_cartesian_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Extra_Info.local_cartesian_point)
  return local_cartesian_point_;
}
inline void Extra_Info::set_allocated_local_cartesian_point(::sim_msg::Vec3* local_cartesian_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_cartesian_point_);
  }
  if (local_cartesian_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_cartesian_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_cartesian_point, submessage_arena);
    }
    
  } else {
    
  }
  local_cartesian_point_ = local_cartesian_point;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Extra_Info.local_cartesian_point)
}

// bool front_veh = 2;
inline void Extra_Info::clear_front_veh() {
  front_veh_ = false;
}
inline bool Extra_Info::front_veh() const {
  // @@protoc_insertion_point(field_get:sim_msg.Extra_Info.front_veh)
  return front_veh_;
}
inline void Extra_Info::set_front_veh(bool value) {
  
  front_veh_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Extra_Info.front_veh)
}

// bool rear_veh = 3;
inline void Extra_Info::clear_rear_veh() {
  rear_veh_ = false;
}
inline bool Extra_Info::rear_veh() const {
  // @@protoc_insertion_point(field_get:sim_msg.Extra_Info.rear_veh)
  return rear_veh_;
}
inline void Extra_Info::set_rear_veh(bool value) {
  
  rear_veh_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Extra_Info.rear_veh)
}

// float speed_ms = 4;
inline void Extra_Info::clear_speed_ms() {
  speed_ms_ = 0;
}
inline float Extra_Info::speed_ms() const {
  // @@protoc_insertion_point(field_get:sim_msg.Extra_Info.speed_ms)
  return speed_ms_;
}
inline void Extra_Info::set_speed_ms(float value) {
  
  speed_ms_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Extra_Info.speed_ms)
}

// float dist_to_ego_m = 5;
inline void Extra_Info::clear_dist_to_ego_m() {
  dist_to_ego_m_ = 0;
}
inline float Extra_Info::dist_to_ego_m() const {
  // @@protoc_insertion_point(field_get:sim_msg.Extra_Info.dist_to_ego_m)
  return dist_to_ego_m_;
}
inline void Extra_Info::set_dist_to_ego_m(float value) {
  
  dist_to_ego_m_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Extra_Info.dist_to_ego_m)
}

// -------------------------------------------------------------------

// Car

// int64 id = 1;
inline void Car::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Car::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.id)
  return id_;
}
inline void Car::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.id)
}

// double t = 2;
inline void Car::clear_t() {
  t_ = 0;
}
inline double Car::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.t)
  return t_;
}
inline void Car::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.t)
}

// double x = 3;
inline void Car::clear_x() {
  x_ = 0;
}
inline double Car::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.x)
  return x_;
}
inline void Car::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.x)
}

// double y = 4;
inline void Car::clear_y() {
  y_ = 0;
}
inline double Car::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.y)
  return y_;
}
inline void Car::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.y)
}

// double heading = 5;
inline void Car::clear_heading() {
  heading_ = 0;
}
inline double Car::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.heading)
  return heading_;
}
inline void Car::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.heading)
}

// double v = 6;
inline void Car::clear_v() {
  v_ = 0;
}
inline double Car::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.v)
  return v_;
}
inline void Car::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.v)
}

// double vl = 7;
inline void Car::clear_vl() {
  vl_ = 0;
}
inline double Car::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.vl)
  return vl_;
}
inline void Car::set_vl(double value) {
  
  vl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.vl)
}

// double theta = 8;
inline void Car::clear_theta() {
  theta_ = 0;
}
inline double Car::theta() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.theta)
  return theta_;
}
inline void Car::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.theta)
}

// double length = 9;
inline void Car::clear_length() {
  length_ = 0;
}
inline double Car::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.length)
  return length_;
}
inline void Car::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.length)
}

// double width = 10;
inline void Car::clear_width() {
  width_ = 0;
}
inline double Car::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.width)
  return width_;
}
inline void Car::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.width)
}

// double height = 11;
inline void Car::clear_height() {
  height_ = 0;
}
inline double Car::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.height)
  return height_;
}
inline void Car::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.height)
}

// int32 type = 12;
inline void Car::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.type)
  return type_;
}
inline void Car::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.type)
}

// int32 laneId = 13;
inline void Car::clear_laneid() {
  laneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::laneid() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.laneId)
  return laneid_;
}
inline void Car::set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  laneid_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.laneId)
}

// double acc = 14;
inline void Car::clear_acc() {
  acc_ = 0;
}
inline double Car::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.acc)
  return acc_;
}
inline void Car::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.acc)
}

// int32 age = 15;
inline void Car::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.age)
  return age_;
}
inline void Car::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.age)
}

// double z = 16;
inline void Car::clear_z() {
  z_ = 0;
}
inline double Car::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.z)
  return z_;
}
inline void Car::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.z)
}

// uint64 tx_road_id = 17;
inline void Car::clear_tx_road_id() {
  tx_road_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_road_id)
  return tx_road_id_;
}
inline void Car::set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_road_id)
}

// uint64 tx_section_id = 18;
inline void Car::clear_tx_section_id() {
  tx_section_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_section_id)
  return tx_section_id_;
}
inline void Car::set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_section_id)
}

// int64 tx_lane_id = 19;
inline void Car::clear_tx_lane_id() {
  tx_lane_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Car::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lane_id)
  return tx_lane_id_;
}
inline void Car::set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lane_id)
}

// uint64 tx_lanelink_id = 20;
inline void Car::clear_tx_lanelink_id() {
  tx_lanelink_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::tx_lanelink_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lanelink_id)
  return tx_lanelink_id_;
}
inline void Car::set_tx_lanelink_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_lanelink_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lanelink_id)
}

// .sim_msg.Trajectory planning_line = 21;
inline bool Car::has_planning_line() const {
  return this != internal_default_instance() && planning_line_ != nullptr;
}
inline const ::sim_msg::Trajectory& Car::planning_line() const {
  const ::sim_msg::Trajectory* p = planning_line_;
  // @@protoc_insertion_point(field_get:sim_msg.Car.planning_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Trajectory*>(
      &::sim_msg::_Trajectory_default_instance_);
}
inline ::sim_msg::Trajectory* Car::release_planning_line() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.planning_line)
  
  ::sim_msg::Trajectory* temp = planning_line_;
  planning_line_ = nullptr;
  return temp;
}
inline ::sim_msg::Trajectory* Car::mutable_planning_line() {
  
  if (planning_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Trajectory>(GetArenaNoVirtual());
    planning_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.planning_line)
  return planning_line_;
}
inline void Car::set_allocated_planning_line(::sim_msg::Trajectory* planning_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(planning_line_);
  }
  if (planning_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      planning_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planning_line, submessage_arena);
    }
    
  } else {
    
  }
  planning_line_ = planning_line;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.planning_line)
}

// double show_abs_velocity = 22;
inline void Car::clear_show_abs_velocity() {
  show_abs_velocity_ = 0;
}
inline double Car::show_abs_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_velocity)
  return show_abs_velocity_;
}
inline void Car::set_show_abs_velocity(double value) {
  
  show_abs_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_velocity)
}

// double show_abs_acc = 23;
inline void Car::clear_show_abs_acc() {
  show_abs_acc_ = 0;
}
inline double Car::show_abs_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_acc)
  return show_abs_acc_;
}
inline void Car::set_show_abs_acc(double value) {
  
  show_abs_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_acc)
}

// double show_relative_velocity = 24;
inline void Car::clear_show_relative_velocity() {
  show_relative_velocity_ = 0;
}
inline double Car::show_relative_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity)
  return show_relative_velocity_;
}
inline void Car::set_show_relative_velocity(double value) {
  
  show_relative_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity)
}

// double show_relative_acc = 25;
inline void Car::clear_show_relative_acc() {
  show_relative_acc_ = 0;
}
inline double Car::show_relative_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc)
  return show_relative_acc_;
}
inline void Car::set_show_relative_acc(double value) {
  
  show_relative_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc)
}

// double show_relative_velocity_horizontal = 26;
inline void Car::clear_show_relative_velocity_horizontal() {
  show_relative_velocity_horizontal_ = 0;
}
inline double Car::show_relative_velocity_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity_horizontal)
  return show_relative_velocity_horizontal_;
}
inline void Car::set_show_relative_velocity_horizontal(double value) {
  
  show_relative_velocity_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity_horizontal)
}

// double show_relative_acc_horizontal = 27;
inline void Car::clear_show_relative_acc_horizontal() {
  show_relative_acc_horizontal_ = 0;
}
inline double Car::show_relative_acc_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc_horizontal)
  return show_relative_acc_horizontal_;
}
inline void Car::set_show_relative_acc_horizontal(double value) {
  
  show_relative_acc_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc_horizontal)
}

// double show_relative_dist_vertical = 28;
inline void Car::clear_show_relative_dist_vertical() {
  show_relative_dist_vertical_ = 0;
}
inline double Car::show_relative_dist_vertical() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_vertical)
  return show_relative_dist_vertical_;
}
inline void Car::set_show_relative_dist_vertical(double value) {
  
  show_relative_dist_vertical_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_vertical)
}

// double show_relative_dist_horizontal = 29;
inline void Car::clear_show_relative_dist_horizontal() {
  show_relative_dist_horizontal_ = 0;
}
inline double Car::show_relative_dist_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_horizontal)
  return show_relative_dist_horizontal_;
}
inline void Car::set_show_relative_dist_horizontal(double value) {
  
  show_relative_dist_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_horizontal)
}

// .sim_msg.ControlState control_state = 30;
inline void Car::clear_control_state() {
  control_state_ = 0;
}
inline ::sim_msg::ControlState Car::control_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.control_state)
  return static_cast< ::sim_msg::ControlState >(control_state_);
}
inline void Car::set_control_state(::sim_msg::ControlState value) {
  
  control_state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.control_state)
}

// repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
inline int Car::show_nearestobjectinfo_size() const {
  return show_nearestobjectinfo_.size();
}
inline void Car::clear_show_nearestobjectinfo() {
  show_nearestobjectinfo_.Clear();
}
inline ::sim_msg::NearestObject* Car::mutable_show_nearestobjectinfo(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >*
Car::mutable_show_nearestobjectinfo() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Car.show_NearestObjectInfo)
  return &show_nearestobjectinfo_;
}
inline const ::sim_msg::NearestObject& Car::show_nearestobjectinfo(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Get(index);
}
inline ::sim_msg::NearestObject* Car::add_show_nearestobjectinfo() {
  // @@protoc_insertion_point(field_add:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >&
Car::show_nearestobjectinfo() const {
  // @@protoc_insertion_point(field_list:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_;
}

// double angle_along_centerline_degree = 32;
inline void Car::clear_angle_along_centerline_degree() {
  angle_along_centerline_degree_ = 0;
}
inline double Car::angle_along_centerline_degree() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.angle_along_centerline_degree)
  return angle_along_centerline_degree_;
}
inline void Car::set_angle_along_centerline_degree(double value) {
  
  angle_along_centerline_degree_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.angle_along_centerline_degree)
}

// string strid = 33;
inline void Car::clear_strid() {
  strid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Car::strid() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.strid)
  return strid_.GetNoArena();
}
inline void Car::set_strid(const std::string& value) {
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.strid)
}
inline void Car::set_strid(std::string&& value) {
  
  strid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Car.strid)
}
inline void Car::set_strid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Car.strid)
}
inline void Car::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Car.strid)
}
inline std::string* Car::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.strid)
  return strid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Car::release_strid() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.strid)
  
  return strid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Car::set_allocated_strid(std::string* strid) {
  if (strid != nullptr) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.strid)
}

// .sim_msg.TwinInfo twin_data = 34;
inline bool Car::has_twin_data() const {
  return this != internal_default_instance() && twin_data_ != nullptr;
}
inline void Car::clear_twin_data() {
  if (GetArenaNoVirtual() == nullptr && twin_data_ != nullptr) {
    delete twin_data_;
  }
  twin_data_ = nullptr;
}
inline const ::sim_msg::TwinInfo& Car::twin_data() const {
  const ::sim_msg::TwinInfo* p = twin_data_;
  // @@protoc_insertion_point(field_get:sim_msg.Car.twin_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::TwinInfo*>(
      &::sim_msg::_TwinInfo_default_instance_);
}
inline ::sim_msg::TwinInfo* Car::release_twin_data() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.twin_data)
  
  ::sim_msg::TwinInfo* temp = twin_data_;
  twin_data_ = nullptr;
  return temp;
}
inline ::sim_msg::TwinInfo* Car::mutable_twin_data() {
  
  if (twin_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::TwinInfo>(GetArenaNoVirtual());
    twin_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.twin_data)
  return twin_data_;
}
inline void Car::set_allocated_twin_data(::sim_msg::TwinInfo* twin_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete twin_data_;
  }
  if (twin_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      twin_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twin_data, submessage_arena);
    }
    
  } else {
    
  }
  twin_data_ = twin_data;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.twin_data)
}

// .sim_msg.ForwardCollisionWarning fcw = 35;
inline bool Car::has_fcw() const {
  return this != internal_default_instance() && fcw_ != nullptr;
}
inline void Car::clear_fcw() {
  if (GetArenaNoVirtual() == nullptr && fcw_ != nullptr) {
    delete fcw_;
  }
  fcw_ = nullptr;
}
inline const ::sim_msg::ForwardCollisionWarning& Car::fcw() const {
  const ::sim_msg::ForwardCollisionWarning* p = fcw_;
  // @@protoc_insertion_point(field_get:sim_msg.Car.fcw)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::ForwardCollisionWarning*>(
      &::sim_msg::_ForwardCollisionWarning_default_instance_);
}
inline ::sim_msg::ForwardCollisionWarning* Car::release_fcw() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.fcw)
  
  ::sim_msg::ForwardCollisionWarning* temp = fcw_;
  fcw_ = nullptr;
  return temp;
}
inline ::sim_msg::ForwardCollisionWarning* Car::mutable_fcw() {
  
  if (fcw_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::ForwardCollisionWarning>(GetArenaNoVirtual());
    fcw_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.fcw)
  return fcw_;
}
inline void Car::set_allocated_fcw(::sim_msg::ForwardCollisionWarning* fcw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fcw_;
  }
  if (fcw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fcw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fcw, submessage_arena);
    }
    
  } else {
    
  }
  fcw_ = fcw;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.fcw)
}

// double lOffset = 36;
inline void Car::clear_loffset() {
  loffset_ = 0;
}
inline double Car::loffset() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.lOffset)
  return loffset_;
}
inline void Car::set_loffset(double value) {
  
  loffset_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.lOffset)
}

// uint64 to_tx_road_id = 37;
inline void Car::clear_to_tx_road_id() {
  to_tx_road_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::to_tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.to_tx_road_id)
  return to_tx_road_id_;
}
inline void Car::set_to_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.to_tx_road_id)
}

// uint64 to_tx_section_id = 38;
inline void Car::clear_to_tx_section_id() {
  to_tx_section_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::to_tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.to_tx_section_id)
  return to_tx_section_id_;
}
inline void Car::set_to_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  to_tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.to_tx_section_id)
}

// int64 to_tx_lane_id = 39;
inline void Car::clear_to_tx_lane_id() {
  to_tx_lane_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Car::to_tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.to_tx_lane_id)
  return to_tx_lane_id_;
}
inline void Car::set_to_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.to_tx_lane_id)
}

// bytes serialization_archive = 40;
inline void Car::clear_serialization_archive() {
  serialization_archive_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Car::serialization_archive() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.serialization_archive)
  return serialization_archive_.GetNoArena();
}
inline void Car::set_serialization_archive(const std::string& value) {
  
  serialization_archive_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.serialization_archive)
}
inline void Car::set_serialization_archive(std::string&& value) {
  
  serialization_archive_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Car.serialization_archive)
}
inline void Car::set_serialization_archive(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  serialization_archive_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Car.serialization_archive)
}
inline void Car::set_serialization_archive(const void* value, size_t size) {
  
  serialization_archive_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Car.serialization_archive)
}
inline std::string* Car::mutable_serialization_archive() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.serialization_archive)
  return serialization_archive_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Car::release_serialization_archive() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.serialization_archive)
  
  return serialization_archive_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Car::set_allocated_serialization_archive(std::string* serialization_archive) {
  if (serialization_archive != nullptr) {
    
  } else {
    
  }
  serialization_archive_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serialization_archive);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.serialization_archive)
}

// .sim_msg.Extra_Info extra_info = 41;
inline bool Car::has_extra_info() const {
  return this != internal_default_instance() && extra_info_ != nullptr;
}
inline void Car::clear_extra_info() {
  if (GetArenaNoVirtual() == nullptr && extra_info_ != nullptr) {
    delete extra_info_;
  }
  extra_info_ = nullptr;
}
inline const ::sim_msg::Extra_Info& Car::extra_info() const {
  const ::sim_msg::Extra_Info* p = extra_info_;
  // @@protoc_insertion_point(field_get:sim_msg.Car.extra_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Extra_Info*>(
      &::sim_msg::_Extra_Info_default_instance_);
}
inline ::sim_msg::Extra_Info* Car::release_extra_info() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.extra_info)
  
  ::sim_msg::Extra_Info* temp = extra_info_;
  extra_info_ = nullptr;
  return temp;
}
inline ::sim_msg::Extra_Info* Car::mutable_extra_info() {
  
  if (extra_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Extra_Info>(GetArenaNoVirtual());
    extra_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.extra_info)
  return extra_info_;
}
inline void Car::set_allocated_extra_info(::sim_msg::Extra_Info* extra_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extra_info_;
  }
  if (extra_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extra_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra_info, submessage_arena);
    }
    
  } else {
    
  }
  extra_info_ = extra_info;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.extra_info)
}

// float acc_l = 42;
inline void Car::clear_acc_l() {
  acc_l_ = 0;
}
inline float Car::acc_l() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.acc_l)
  return acc_l_;
}
inline void Car::set_acc_l(float value) {
  
  acc_l_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.acc_l)
}

// -------------------------------------------------------------------

// StaticObstacle

// int32 id = 1;
inline void StaticObstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.id)
  return id_;
}
inline void StaticObstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.id)
}

// double t = 2;
inline void StaticObstacle::clear_t() {
  t_ = 0;
}
inline double StaticObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.t)
  return t_;
}
inline void StaticObstacle::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.t)
}

// double x = 3;
inline void StaticObstacle::clear_x() {
  x_ = 0;
}
inline double StaticObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.x)
  return x_;
}
inline void StaticObstacle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.x)
}

// double y = 4;
inline void StaticObstacle::clear_y() {
  y_ = 0;
}
inline double StaticObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.y)
  return y_;
}
inline void StaticObstacle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.y)
}

// double heading = 5;
inline void StaticObstacle::clear_heading() {
  heading_ = 0;
}
inline double StaticObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.heading)
  return heading_;
}
inline void StaticObstacle::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.heading)
}

// double length = 6;
inline void StaticObstacle::clear_length() {
  length_ = 0;
}
inline double StaticObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.length)
  return length_;
}
inline void StaticObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.length)
}

// double width = 7;
inline void StaticObstacle::clear_width() {
  width_ = 0;
}
inline double StaticObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.width)
  return width_;
}
inline void StaticObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.width)
}

// double height = 8;
inline void StaticObstacle::clear_height() {
  height_ = 0;
}
inline double StaticObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.height)
  return height_;
}
inline void StaticObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.height)
}

// int32 type = 9;
inline void StaticObstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.type)
  return type_;
}
inline void StaticObstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.type)
}

// int32 age = 10;
inline void StaticObstacle::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.age)
  return age_;
}
inline void StaticObstacle::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.age)
}

// double z = 11;
inline void StaticObstacle::clear_z() {
  z_ = 0;
}
inline double StaticObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.z)
  return z_;
}
inline void StaticObstacle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.z)
}

// string strid = 12;
inline void StaticObstacle::clear_strid() {
  strid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& StaticObstacle::strid() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.strid)
  return strid_.GetNoArena();
}
inline void StaticObstacle::set_strid(const std::string& value) {
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.strid)
}
inline void StaticObstacle::set_strid(std::string&& value) {
  
  strid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.StaticObstacle.strid)
}
inline void StaticObstacle::set_strid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.StaticObstacle.strid)
}
inline void StaticObstacle::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.StaticObstacle.strid)
}
inline std::string* StaticObstacle::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.StaticObstacle.strid)
  return strid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* StaticObstacle::release_strid() {
  // @@protoc_insertion_point(field_release:sim_msg.StaticObstacle.strid)
  
  return strid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void StaticObstacle::set_allocated_strid(std::string* strid) {
  if (strid != nullptr) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.StaticObstacle.strid)
}

// .sim_msg.TwinInfo twin_data = 13;
inline bool StaticObstacle::has_twin_data() const {
  return this != internal_default_instance() && twin_data_ != nullptr;
}
inline void StaticObstacle::clear_twin_data() {
  if (GetArenaNoVirtual() == nullptr && twin_data_ != nullptr) {
    delete twin_data_;
  }
  twin_data_ = nullptr;
}
inline const ::sim_msg::TwinInfo& StaticObstacle::twin_data() const {
  const ::sim_msg::TwinInfo* p = twin_data_;
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.twin_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::TwinInfo*>(
      &::sim_msg::_TwinInfo_default_instance_);
}
inline ::sim_msg::TwinInfo* StaticObstacle::release_twin_data() {
  // @@protoc_insertion_point(field_release:sim_msg.StaticObstacle.twin_data)
  
  ::sim_msg::TwinInfo* temp = twin_data_;
  twin_data_ = nullptr;
  return temp;
}
inline ::sim_msg::TwinInfo* StaticObstacle::mutable_twin_data() {
  
  if (twin_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::TwinInfo>(GetArenaNoVirtual());
    twin_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.StaticObstacle.twin_data)
  return twin_data_;
}
inline void StaticObstacle::set_allocated_twin_data(::sim_msg::TwinInfo* twin_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete twin_data_;
  }
  if (twin_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      twin_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twin_data, submessage_arena);
    }
    
  } else {
    
  }
  twin_data_ = twin_data;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.StaticObstacle.twin_data)
}

// -------------------------------------------------------------------

// DynamicObstacle

// int32 id = 1;
inline void DynamicObstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.id)
  return id_;
}
inline void DynamicObstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.id)
}

// double t = 2;
inline void DynamicObstacle::clear_t() {
  t_ = 0;
}
inline double DynamicObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.t)
  return t_;
}
inline void DynamicObstacle::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.t)
}

// double x = 3;
inline void DynamicObstacle::clear_x() {
  x_ = 0;
}
inline double DynamicObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.x)
  return x_;
}
inline void DynamicObstacle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.x)
}

// double y = 4;
inline void DynamicObstacle::clear_y() {
  y_ = 0;
}
inline double DynamicObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.y)
  return y_;
}
inline void DynamicObstacle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.y)
}

// double heading = 5;
inline void DynamicObstacle::clear_heading() {
  heading_ = 0;
}
inline double DynamicObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.heading)
  return heading_;
}
inline void DynamicObstacle::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.heading)
}

// double length = 6;
inline void DynamicObstacle::clear_length() {
  length_ = 0;
}
inline double DynamicObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.length)
  return length_;
}
inline void DynamicObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.length)
}

// double width = 7;
inline void DynamicObstacle::clear_width() {
  width_ = 0;
}
inline double DynamicObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.width)
  return width_;
}
inline void DynamicObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.width)
}

// double height = 8;
inline void DynamicObstacle::clear_height() {
  height_ = 0;
}
inline double DynamicObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.height)
  return height_;
}
inline void DynamicObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.height)
}

// int32 type = 9;
inline void DynamicObstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.type)
  return type_;
}
inline void DynamicObstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.type)
}

// double v = 10;
inline void DynamicObstacle::clear_v() {
  v_ = 0;
}
inline double DynamicObstacle::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.v)
  return v_;
}
inline void DynamicObstacle::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.v)
}

// double vl = 11;
inline void DynamicObstacle::clear_vl() {
  vl_ = 0;
}
inline double DynamicObstacle::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.vl)
  return vl_;
}
inline void DynamicObstacle::set_vl(double value) {
  
  vl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.vl)
}

// double acc = 12;
inline void DynamicObstacle::clear_acc() {
  acc_ = 0;
}
inline double DynamicObstacle::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.acc)
  return acc_;
}
inline void DynamicObstacle::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.acc)
}

// int32 age = 13;
inline void DynamicObstacle::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.age)
  return age_;
}
inline void DynamicObstacle::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.age)
}

// double z = 14;
inline void DynamicObstacle::clear_z() {
  z_ = 0;
}
inline double DynamicObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.z)
  return z_;
}
inline void DynamicObstacle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.z)
}

// double show_abs_velocity = 15;
inline void DynamicObstacle::clear_show_abs_velocity() {
  show_abs_velocity_ = 0;
}
inline double DynamicObstacle::show_abs_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_abs_velocity)
  return show_abs_velocity_;
}
inline void DynamicObstacle::set_show_abs_velocity(double value) {
  
  show_abs_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_abs_velocity)
}

// double show_abs_acc = 16;
inline void DynamicObstacle::clear_show_abs_acc() {
  show_abs_acc_ = 0;
}
inline double DynamicObstacle::show_abs_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_abs_acc)
  return show_abs_acc_;
}
inline void DynamicObstacle::set_show_abs_acc(double value) {
  
  show_abs_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_abs_acc)
}

// double show_relative_velocity = 17;
inline void DynamicObstacle::clear_show_relative_velocity() {
  show_relative_velocity_ = 0;
}
inline double DynamicObstacle::show_relative_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_relative_velocity)
  return show_relative_velocity_;
}
inline void DynamicObstacle::set_show_relative_velocity(double value) {
  
  show_relative_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_relative_velocity)
}

// double show_relative_acc = 18;
inline void DynamicObstacle::clear_show_relative_acc() {
  show_relative_acc_ = 0;
}
inline double DynamicObstacle::show_relative_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_relative_acc)
  return show_relative_acc_;
}
inline void DynamicObstacle::set_show_relative_acc(double value) {
  
  show_relative_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_relative_acc)
}

// double show_relative_velocity_horizontal = 19;
inline void DynamicObstacle::clear_show_relative_velocity_horizontal() {
  show_relative_velocity_horizontal_ = 0;
}
inline double DynamicObstacle::show_relative_velocity_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_relative_velocity_horizontal)
  return show_relative_velocity_horizontal_;
}
inline void DynamicObstacle::set_show_relative_velocity_horizontal(double value) {
  
  show_relative_velocity_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_relative_velocity_horizontal)
}

// double show_relative_acc_horizontal = 20;
inline void DynamicObstacle::clear_show_relative_acc_horizontal() {
  show_relative_acc_horizontal_ = 0;
}
inline double DynamicObstacle::show_relative_acc_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_relative_acc_horizontal)
  return show_relative_acc_horizontal_;
}
inline void DynamicObstacle::set_show_relative_acc_horizontal(double value) {
  
  show_relative_acc_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_relative_acc_horizontal)
}

// double show_relative_dist_vertical = 21;
inline void DynamicObstacle::clear_show_relative_dist_vertical() {
  show_relative_dist_vertical_ = 0;
}
inline double DynamicObstacle::show_relative_dist_vertical() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_relative_dist_vertical)
  return show_relative_dist_vertical_;
}
inline void DynamicObstacle::set_show_relative_dist_vertical(double value) {
  
  show_relative_dist_vertical_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_relative_dist_vertical)
}

// double show_relative_dist_horizontal = 22;
inline void DynamicObstacle::clear_show_relative_dist_horizontal() {
  show_relative_dist_horizontal_ = 0;
}
inline double DynamicObstacle::show_relative_dist_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.show_relative_dist_horizontal)
  return show_relative_dist_horizontal_;
}
inline void DynamicObstacle::set_show_relative_dist_horizontal(double value) {
  
  show_relative_dist_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.show_relative_dist_horizontal)
}

// string strid = 23;
inline void DynamicObstacle::clear_strid() {
  strid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DynamicObstacle::strid() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.strid)
  return strid_.GetNoArena();
}
inline void DynamicObstacle::set_strid(const std::string& value) {
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.strid)
}
inline void DynamicObstacle::set_strid(std::string&& value) {
  
  strid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.DynamicObstacle.strid)
}
inline void DynamicObstacle::set_strid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.DynamicObstacle.strid)
}
inline void DynamicObstacle::set_strid(const char* value, size_t size) {
  
  strid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.DynamicObstacle.strid)
}
inline std::string* DynamicObstacle::mutable_strid() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.DynamicObstacle.strid)
  return strid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DynamicObstacle::release_strid() {
  // @@protoc_insertion_point(field_release:sim_msg.DynamicObstacle.strid)
  
  return strid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DynamicObstacle::set_allocated_strid(std::string* strid) {
  if (strid != nullptr) {
    
  } else {
    
  }
  strid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), strid);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.DynamicObstacle.strid)
}

// .sim_msg.TwinInfo twin_data = 24;
inline bool DynamicObstacle::has_twin_data() const {
  return this != internal_default_instance() && twin_data_ != nullptr;
}
inline void DynamicObstacle::clear_twin_data() {
  if (GetArenaNoVirtual() == nullptr && twin_data_ != nullptr) {
    delete twin_data_;
  }
  twin_data_ = nullptr;
}
inline const ::sim_msg::TwinInfo& DynamicObstacle::twin_data() const {
  const ::sim_msg::TwinInfo* p = twin_data_;
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.twin_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::TwinInfo*>(
      &::sim_msg::_TwinInfo_default_instance_);
}
inline ::sim_msg::TwinInfo* DynamicObstacle::release_twin_data() {
  // @@protoc_insertion_point(field_release:sim_msg.DynamicObstacle.twin_data)
  
  ::sim_msg::TwinInfo* temp = twin_data_;
  twin_data_ = nullptr;
  return temp;
}
inline ::sim_msg::TwinInfo* DynamicObstacle::mutable_twin_data() {
  
  if (twin_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::TwinInfo>(GetArenaNoVirtual());
    twin_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.DynamicObstacle.twin_data)
  return twin_data_;
}
inline void DynamicObstacle::set_allocated_twin_data(::sim_msg::TwinInfo* twin_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete twin_data_;
  }
  if (twin_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      twin_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twin_data, submessage_arena);
    }
    
  } else {
    
  }
  twin_data_ = twin_data;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.DynamicObstacle.twin_data)
}

// -------------------------------------------------------------------

// LaneUid

// uint64 tx_road_id = 1;
inline void LaneUid::clear_tx_road_id() {
  tx_road_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneUid::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_road_id)
  return tx_road_id_;
}
inline void LaneUid::set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_road_id)
}

// uint64 tx_section_id = 2;
inline void LaneUid::clear_tx_section_id() {
  tx_section_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneUid::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_section_id)
  return tx_section_id_;
}
inline void LaneUid::set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_section_id)
}

// int64 tx_lane_id = 3;
inline void LaneUid::clear_tx_lane_id() {
  tx_lane_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneUid::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_lane_id)
  return tx_lane_id_;
}
inline void LaneUid::set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_lane_id)
}

// -------------------------------------------------------------------

// TrafficLight

// int32 id = 1;
inline void TrafficLight::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.id)
  return id_;
}
inline void TrafficLight::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.id)
}

// double x = 2;
inline void TrafficLight::clear_x() {
  x_ = 0;
}
inline double TrafficLight::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.x)
  return x_;
}
inline void TrafficLight::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.x)
}

// double y = 3;
inline void TrafficLight::clear_y() {
  y_ = 0;
}
inline double TrafficLight::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.y)
  return y_;
}
inline void TrafficLight::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.y)
}

// double heading = 4;
inline void TrafficLight::clear_heading() {
  heading_ = 0;
}
inline double TrafficLight::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.heading)
  return heading_;
}
inline void TrafficLight::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.heading)
}

// int32 color = 5;
inline void TrafficLight::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.color)
  return color_;
}
inline void TrafficLight::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.color)
}

// int32 age = 6;
inline void TrafficLight::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.age)
  return age_;
}
inline void TrafficLight::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.age)
}

// double z = 7;
inline void TrafficLight::clear_z() {
  z_ = 0;
}
inline double TrafficLight::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.z)
  return z_;
}
inline void TrafficLight::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.z)
}

// uint64 tx_road_id = 8;
inline void TrafficLight::clear_tx_road_id() {
  tx_road_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficLight::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_road_id)
  return tx_road_id_;
}
inline void TrafficLight::set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_road_id)
}

// uint64 tx_section_id = 9;
inline void TrafficLight::clear_tx_section_id() {
  tx_section_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficLight::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_section_id)
  return tx_section_id_;
}
inline void TrafficLight::set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_section_id)
}

// int64 tx_lane_id = 10;
inline void TrafficLight::clear_tx_lane_id() {
  tx_lane_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_lane_id)
  return tx_lane_id_;
}
inline void TrafficLight::set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_lane_id)
}

// repeated .sim_msg.LaneUid control_lanes = 11;
inline int TrafficLight::control_lanes_size() const {
  return control_lanes_.size();
}
inline void TrafficLight::clear_control_lanes() {
  control_lanes_.Clear();
}
inline ::sim_msg::LaneUid* TrafficLight::mutable_control_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >*
TrafficLight::mutable_control_lanes() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_lanes)
  return &control_lanes_;
}
inline const ::sim_msg::LaneUid& TrafficLight::control_lanes(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Get(index);
}
inline ::sim_msg::LaneUid* TrafficLight::add_control_lanes() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >&
TrafficLight::control_lanes() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_lanes)
  return control_lanes_;
}

// repeated .sim_msg.Phase control_phases = 12;
inline int TrafficLight::control_phases_size() const {
  return control_phases_.size();
}
inline void TrafficLight::clear_control_phases() {
  control_phases_.Clear();
}
inline ::sim_msg::Phase TrafficLight::control_phases(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_phases)
  return static_cast< ::sim_msg::Phase >(control_phases_.Get(index));
}
inline void TrafficLight::set_control_phases(int index, ::sim_msg::Phase value) {
  control_phases_.Set(index, value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.control_phases)
}
inline void TrafficLight::add_control_phases(::sim_msg::Phase value) {
  control_phases_.Add(value);
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_phases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrafficLight::control_phases() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_phases)
  return control_phases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrafficLight::mutable_control_phases() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_phases)
  return &control_phases_;
}

// int32 next_color = 13;
inline void TrafficLight::clear_next_color() {
  next_color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::next_color() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.next_color)
  return next_color_;
}
inline void TrafficLight::set_next_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_color_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.next_color)
}

// int32 next_age = 14;
inline void TrafficLight::clear_next_age() {
  next_age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::next_age() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.next_age)
  return next_age_;
}
inline void TrafficLight::set_next_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  next_age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.next_age)
}

// string plan = 15;
inline void TrafficLight::clear_plan() {
  plan_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::plan() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.plan)
  return plan_.GetNoArena();
}
inline void TrafficLight::set_plan(const std::string& value) {
  
  plan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.plan)
}
inline void TrafficLight::set_plan(std::string&& value) {
  
  plan_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.TrafficLight.plan)
}
inline void TrafficLight::set_plan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  plan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.TrafficLight.plan)
}
inline void TrafficLight::set_plan(const char* value, size_t size) {
  
  plan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.TrafficLight.plan)
}
inline std::string* TrafficLight::mutable_plan() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.plan)
  return plan_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_plan() {
  // @@protoc_insertion_point(field_release:sim_msg.TrafficLight.plan)
  
  return plan_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_plan(std::string* plan) {
  if (plan != nullptr) {
    
  } else {
    
  }
  plan_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plan);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.TrafficLight.plan)
}

// string junction = 16;
inline void TrafficLight::clear_junction() {
  junction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::junction() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.junction)
  return junction_.GetNoArena();
}
inline void TrafficLight::set_junction(const std::string& value) {
  
  junction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.junction)
}
inline void TrafficLight::set_junction(std::string&& value) {
  
  junction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.TrafficLight.junction)
}
inline void TrafficLight::set_junction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  junction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.TrafficLight.junction)
}
inline void TrafficLight::set_junction(const char* value, size_t size) {
  
  junction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.TrafficLight.junction)
}
inline std::string* TrafficLight::mutable_junction() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.junction)
  return junction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_junction() {
  // @@protoc_insertion_point(field_release:sim_msg.TrafficLight.junction)
  
  return junction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_junction(std::string* junction) {
  if (junction != nullptr) {
    
  } else {
    
  }
  junction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), junction);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.TrafficLight.junction)
}

// string phaseNumber = 17;
inline void TrafficLight::clear_phasenumber() {
  phasenumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::phasenumber() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.phaseNumber)
  return phasenumber_.GetNoArena();
}
inline void TrafficLight::set_phasenumber(const std::string& value) {
  
  phasenumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.phaseNumber)
}
inline void TrafficLight::set_phasenumber(std::string&& value) {
  
  phasenumber_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.TrafficLight.phaseNumber)
}
inline void TrafficLight::set_phasenumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phasenumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.TrafficLight.phaseNumber)
}
inline void TrafficLight::set_phasenumber(const char* value, size_t size) {
  
  phasenumber_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.TrafficLight.phaseNumber)
}
inline std::string* TrafficLight::mutable_phasenumber() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.phaseNumber)
  return phasenumber_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_phasenumber() {
  // @@protoc_insertion_point(field_release:sim_msg.TrafficLight.phaseNumber)
  
  return phasenumber_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_phasenumber(std::string* phasenumber) {
  if (phasenumber != nullptr) {
    
  } else {
    
  }
  phasenumber_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phasenumber);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.TrafficLight.phaseNumber)
}

// string signalHead = 18;
inline void TrafficLight::clear_signalhead() {
  signalhead_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrafficLight::signalhead() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.signalHead)
  return signalhead_.GetNoArena();
}
inline void TrafficLight::set_signalhead(const std::string& value) {
  
  signalhead_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.signalHead)
}
inline void TrafficLight::set_signalhead(std::string&& value) {
  
  signalhead_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.TrafficLight.signalHead)
}
inline void TrafficLight::set_signalhead(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signalhead_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.TrafficLight.signalHead)
}
inline void TrafficLight::set_signalhead(const char* value, size_t size) {
  
  signalhead_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.TrafficLight.signalHead)
}
inline std::string* TrafficLight::mutable_signalhead() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.signalHead)
  return signalhead_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficLight::release_signalhead() {
  // @@protoc_insertion_point(field_release:sim_msg.TrafficLight.signalHead)
  
  return signalhead_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficLight::set_allocated_signalhead(std::string* signalhead) {
  if (signalhead != nullptr) {
    
  } else {
    
  }
  signalhead_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalhead);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.TrafficLight.signalHead)
}

// -------------------------------------------------------------------

// EgoInfo

// int32 id = 1;
inline void EgoInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EgoInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.EgoInfo.id)
  return id_;
}
inline void EgoInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EgoInfo.id)
}

// float angle_along_centerline_degree = 2;
inline void EgoInfo::clear_angle_along_centerline_degree() {
  angle_along_centerline_degree_ = 0;
}
inline float EgoInfo::angle_along_centerline_degree() const {
  // @@protoc_insertion_point(field_get:sim_msg.EgoInfo.angle_along_centerline_degree)
  return angle_along_centerline_degree_;
}
inline void EgoInfo::set_angle_along_centerline_degree(float value) {
  
  angle_along_centerline_degree_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EgoInfo.angle_along_centerline_degree)
}

// float slope = 3;
inline void EgoInfo::clear_slope() {
  slope_ = 0;
}
inline float EgoInfo::slope() const {
  // @@protoc_insertion_point(field_get:sim_msg.EgoInfo.slope)
  return slope_;
}
inline void EgoInfo::set_slope(float value) {
  
  slope_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EgoInfo.slope)
}

// -------------------------------------------------------------------

// Traffic

// repeated .sim_msg.Car cars = 1;
inline int Traffic::cars_size() const {
  return cars_.size();
}
inline void Traffic::clear_cars() {
  cars_.Clear();
}
inline ::sim_msg::Car* Traffic::mutable_cars(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.cars)
  return cars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >*
Traffic::mutable_cars() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.cars)
  return &cars_;
}
inline const ::sim_msg::Car& Traffic::cars(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.cars)
  return cars_.Get(index);
}
inline ::sim_msg::Car* Traffic::add_cars() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.cars)
  return cars_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >&
Traffic::cars() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.cars)
  return cars_;
}

// repeated .sim_msg.StaticObstacle staticObstacles = 2;
inline int Traffic::staticobstacles_size() const {
  return staticobstacles_.size();
}
inline void Traffic::clear_staticobstacles() {
  staticobstacles_.Clear();
}
inline ::sim_msg::StaticObstacle* Traffic::mutable_staticobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >*
Traffic::mutable_staticobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.staticObstacles)
  return &staticobstacles_;
}
inline const ::sim_msg::StaticObstacle& Traffic::staticobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Get(index);
}
inline ::sim_msg::StaticObstacle* Traffic::add_staticobstacles() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >&
Traffic::staticobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.staticObstacles)
  return staticobstacles_;
}

// repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
inline int Traffic::dynamicobstacles_size() const {
  return dynamicobstacles_.size();
}
inline void Traffic::clear_dynamicobstacles() {
  dynamicobstacles_.Clear();
}
inline ::sim_msg::DynamicObstacle* Traffic::mutable_dynamicobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >*
Traffic::mutable_dynamicobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.dynamicObstacles)
  return &dynamicobstacles_;
}
inline const ::sim_msg::DynamicObstacle& Traffic::dynamicobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Get(index);
}
inline ::sim_msg::DynamicObstacle* Traffic::add_dynamicobstacles() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >&
Traffic::dynamicobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_;
}

// repeated .sim_msg.TrafficLight trafficLights = 4;
inline int Traffic::trafficlights_size() const {
  return trafficlights_.size();
}
inline void Traffic::clear_trafficlights() {
  trafficlights_.Clear();
}
inline ::sim_msg::TrafficLight* Traffic::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.trafficLights)
  return trafficlights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >*
Traffic::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.trafficLights)
  return &trafficlights_;
}
inline const ::sim_msg::TrafficLight& Traffic::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.trafficLights)
  return trafficlights_.Get(index);
}
inline ::sim_msg::TrafficLight* Traffic::add_trafficlights() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.trafficLights)
  return trafficlights_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >&
Traffic::trafficlights() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.trafficLights)
  return trafficlights_;
}

// double road_network_aver_velocity = 5;
inline void Traffic::clear_road_network_aver_velocity() {
  road_network_aver_velocity_ = 0;
}
inline double Traffic::road_network_aver_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.road_network_aver_velocity)
  return road_network_aver_velocity_;
}
inline void Traffic::set_road_network_aver_velocity(double value) {
  
  road_network_aver_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traffic.road_network_aver_velocity)
}

// int32 road_network_total_vehicle_count = 6;
inline void Traffic::clear_road_network_total_vehicle_count() {
  road_network_total_vehicle_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Traffic::road_network_total_vehicle_count() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.road_network_total_vehicle_count)
  return road_network_total_vehicle_count_;
}
inline void Traffic::set_road_network_total_vehicle_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  road_network_total_vehicle_count_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traffic.road_network_total_vehicle_count)
}

// uint64 time = 7;
inline void Traffic::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Traffic::time() const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.time)
  return time_;
}
inline void Traffic::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Traffic.time)
}

// repeated .sim_msg.EgoInfo egos = 8;
inline int Traffic::egos_size() const {
  return egos_.size();
}
inline void Traffic::clear_egos() {
  egos_.Clear();
}
inline ::sim_msg::EgoInfo* Traffic::mutable_egos(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.egos)
  return egos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::EgoInfo >*
Traffic::mutable_egos() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.egos)
  return &egos_;
}
inline const ::sim_msg::EgoInfo& Traffic::egos(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.egos)
  return egos_.Get(index);
}
inline ::sim_msg::EgoInfo* Traffic::add_egos() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.egos)
  return egos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::EgoInfo >&
Traffic::egos() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.egos)
  return egos_;
}

// -------------------------------------------------------------------

// TrafficRecords

// repeated .sim_msg.Traffic traffic_record = 1;
inline int TrafficRecords::traffic_record_size() const {
  return traffic_record_.size();
}
inline void TrafficRecords::clear_traffic_record() {
  traffic_record_.Clear();
}
inline ::sim_msg::Traffic* TrafficRecords::mutable_traffic_record(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficRecords.traffic_record)
  return traffic_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >*
TrafficRecords::mutable_traffic_record() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficRecords.traffic_record)
  return &traffic_record_;
}
inline const ::sim_msg::Traffic& TrafficRecords::traffic_record(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords.traffic_record)
  return traffic_record_.Get(index);
}
inline ::sim_msg::Traffic* TrafficRecords::add_traffic_record() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficRecords.traffic_record)
  return traffic_record_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >&
TrafficRecords::traffic_record() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficRecords.traffic_record)
  return traffic_record_;
}

// -------------------------------------------------------------------

// TrajectoryInfo

// double time_stamp = 1;
inline void TrajectoryInfo::clear_time_stamp() {
  time_stamp_ = 0;
}
inline double TrajectoryInfo::time_stamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryInfo.time_stamp)
  return time_stamp_;
}
inline void TrajectoryInfo::set_time_stamp(double value) {
  
  time_stamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryInfo.time_stamp)
}

// .sim_msg.Trajectory trajectory_line = 2;
inline bool TrajectoryInfo::has_trajectory_line() const {
  return this != internal_default_instance() && trajectory_line_ != nullptr;
}
inline const ::sim_msg::Trajectory& TrajectoryInfo::trajectory_line() const {
  const ::sim_msg::Trajectory* p = trajectory_line_;
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryInfo.trajectory_line)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Trajectory*>(
      &::sim_msg::_Trajectory_default_instance_);
}
inline ::sim_msg::Trajectory* TrajectoryInfo::release_trajectory_line() {
  // @@protoc_insertion_point(field_release:sim_msg.TrajectoryInfo.trajectory_line)
  
  ::sim_msg::Trajectory* temp = trajectory_line_;
  trajectory_line_ = nullptr;
  return temp;
}
inline ::sim_msg::Trajectory* TrajectoryInfo::mutable_trajectory_line() {
  
  if (trajectory_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Trajectory>(GetArenaNoVirtual());
    trajectory_line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.TrajectoryInfo.trajectory_line)
  return trajectory_line_;
}
inline void TrajectoryInfo::set_allocated_trajectory_line(::sim_msg::Trajectory* trajectory_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trajectory_line_);
  }
  if (trajectory_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory_line, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_line_ = trajectory_line;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.TrajectoryInfo.trajectory_line)
}

// -------------------------------------------------------------------

// TrafficRecords4Logsim_DisengageEventInfo

// int64 timestamp_ms = 1;
inline void TrafficRecords4Logsim_DisengageEventInfo::clear_timestamp_ms() {
  timestamp_ms_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficRecords4Logsim_DisengageEventInfo::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords4Logsim.DisengageEventInfo.timestamp_ms)
  return timestamp_ms_;
}
inline void TrafficRecords4Logsim_DisengageEventInfo::set_timestamp_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ms_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficRecords4Logsim.DisengageEventInfo.timestamp_ms)
}

// .sim_msg.DisengageEventType type = 2;
inline void TrafficRecords4Logsim_DisengageEventInfo::clear_type() {
  type_ = 0;
}
inline ::sim_msg::DisengageEventType TrafficRecords4Logsim_DisengageEventInfo::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords4Logsim.DisengageEventInfo.type)
  return static_cast< ::sim_msg::DisengageEventType >(type_);
}
inline void TrafficRecords4Logsim_DisengageEventInfo::set_type(::sim_msg::DisengageEventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficRecords4Logsim.DisengageEventInfo.type)
}

// -------------------------------------------------------------------

// TrafficRecords4Logsim

// repeated .sim_msg.Location ego_location = 1;
inline int TrafficRecords4Logsim::ego_location_size() const {
  return ego_location_.size();
}
inline ::sim_msg::Location* TrafficRecords4Logsim::mutable_ego_location(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficRecords4Logsim.ego_location)
  return ego_location_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Location >*
TrafficRecords4Logsim::mutable_ego_location() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficRecords4Logsim.ego_location)
  return &ego_location_;
}
inline const ::sim_msg::Location& TrafficRecords4Logsim::ego_location(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords4Logsim.ego_location)
  return ego_location_.Get(index);
}
inline ::sim_msg::Location* TrafficRecords4Logsim::add_ego_location() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficRecords4Logsim.ego_location)
  return ego_location_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Location >&
TrafficRecords4Logsim::ego_location() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficRecords4Logsim.ego_location)
  return ego_location_;
}

// repeated .sim_msg.Traffic traffic_record = 2;
inline int TrafficRecords4Logsim::traffic_record_size() const {
  return traffic_record_.size();
}
inline void TrafficRecords4Logsim::clear_traffic_record() {
  traffic_record_.Clear();
}
inline ::sim_msg::Traffic* TrafficRecords4Logsim::mutable_traffic_record(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficRecords4Logsim.traffic_record)
  return traffic_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >*
TrafficRecords4Logsim::mutable_traffic_record() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficRecords4Logsim.traffic_record)
  return &traffic_record_;
}
inline const ::sim_msg::Traffic& TrafficRecords4Logsim::traffic_record(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords4Logsim.traffic_record)
  return traffic_record_.Get(index);
}
inline ::sim_msg::Traffic* TrafficRecords4Logsim::add_traffic_record() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficRecords4Logsim.traffic_record)
  return traffic_record_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Traffic >&
TrafficRecords4Logsim::traffic_record() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficRecords4Logsim.traffic_record)
  return traffic_record_;
}

// repeated .sim_msg.TrafficRecords4Logsim.DisengageEventInfo disengage_events = 3;
inline int TrafficRecords4Logsim::disengage_events_size() const {
  return disengage_events_.size();
}
inline void TrafficRecords4Logsim::clear_disengage_events() {
  disengage_events_.Clear();
}
inline ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo* TrafficRecords4Logsim::mutable_disengage_events(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficRecords4Logsim.disengage_events)
  return disengage_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo >*
TrafficRecords4Logsim::mutable_disengage_events() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficRecords4Logsim.disengage_events)
  return &disengage_events_;
}
inline const ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo& TrafficRecords4Logsim::disengage_events(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords4Logsim.disengage_events)
  return disengage_events_.Get(index);
}
inline ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo* TrafficRecords4Logsim::add_disengage_events() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficRecords4Logsim.disengage_events)
  return disengage_events_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo >&
TrafficRecords4Logsim::disengage_events() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficRecords4Logsim.disengage_events)
  return disengage_events_;
}

// uint64 duration_ms = 4;
inline void TrafficRecords4Logsim::clear_duration_ms() {
  duration_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficRecords4Logsim::duration_ms() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords4Logsim.duration_ms)
  return duration_ms_;
}
inline void TrafficRecords4Logsim::set_duration_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  duration_ms_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficRecords4Logsim.duration_ms)
}

// repeated .sim_msg.TrajectoryInfo ego_trajectory = 5;
inline int TrafficRecords4Logsim::ego_trajectory_size() const {
  return ego_trajectory_.size();
}
inline void TrafficRecords4Logsim::clear_ego_trajectory() {
  ego_trajectory_.Clear();
}
inline ::sim_msg::TrajectoryInfo* TrafficRecords4Logsim::mutable_ego_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficRecords4Logsim.ego_trajectory)
  return ego_trajectory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryInfo >*
TrafficRecords4Logsim::mutable_ego_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficRecords4Logsim.ego_trajectory)
  return &ego_trajectory_;
}
inline const ::sim_msg::TrajectoryInfo& TrafficRecords4Logsim::ego_trajectory(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficRecords4Logsim.ego_trajectory)
  return ego_trajectory_.Get(index);
}
inline ::sim_msg::TrajectoryInfo* TrafficRecords4Logsim::add_ego_trajectory() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficRecords4Logsim.ego_trajectory)
  return ego_trajectory_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryInfo >&
TrafficRecords4Logsim::ego_trajectory() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficRecords4Logsim.ego_trajectory)
  return ego_trajectory_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::ControlState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::ControlState>() {
  return ::sim_msg::ControlState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::NearestObjectDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::NearestObjectDirection>() {
  return ::sim_msg::NearestObjectDirection_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::VehicleRelativePositionalRelationship> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::VehicleRelativePositionalRelationship>() {
  return ::sim_msg::VehicleRelativePositionalRelationship_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::Phase>() {
  return ::sim_msg::Phase_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::DisengageEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::DisengageEventType>() {
  return ::sim_msg::DisengageEventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_traffic_2eproto
