// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_obstacles_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_obstacles_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_obstacles_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_obstacles_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_2eproto;
namespace sim_msg {
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Obstacles;
class ObstaclesDefaultTypeInternal;
extern ObstaclesDefaultTypeInternal _Obstacles_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Obstacle* Arena::CreateMaybeMessage<::sim_msg::Obstacle>(Arena*);
template<> ::sim_msg::Obstacles* Arena::CreateMaybeMessage<::sim_msg::Obstacles>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum ObstacleType : int {
  TYPE_UNCLASSIFIED = 0,
  TYPE_UNKNOWN_SMALL = 1,
  TYPE_UNKNOWN_BIG = 2,
  TYPE_PEDESTRIAN = 3,
  TYPE_BIKE = 4,
  TYPE_CAR = 5,
  TYPE_TRUCK = 6,
  TYPE_STATIC = 7,
  TYPE_RESERVED = 8,
  ObstacleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ObstacleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObstacleType_IsValid(int value);
constexpr ObstacleType ObstacleType_MIN = TYPE_UNCLASSIFIED;
constexpr ObstacleType ObstacleType_MAX = TYPE_RESERVED;
constexpr int ObstacleType_ARRAYSIZE = ObstacleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleType_descriptor();
template<typename T>
inline const std::string& ObstacleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObstacleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObstacleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObstacleType_descriptor(), enum_t_value);
}
inline bool ObstacleType_Parse(
    const std::string& name, ObstacleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObstacleType>(
    ObstacleType_descriptor(), name, value);
}
// ===================================================================

class Obstacle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Obstacle) */ {
 public:
  Obstacle();
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Obstacle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoxCenterFieldNumber = 4,
    kBoxSizeFieldNumber = 5,
    kVelocityFieldNumber = 7,
    kIdFieldNumber = 1,
    kClassificationFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kYawFieldNumber = 6,
    kAbsoluteLongitudeVFieldNumber = 8,
    kAbsoluteLateralVFieldNumber = 9,
    kAbsoluteLongitudeAFieldNumber = 10,
    kDlFieldNumber = 11,
    kConfidenceFieldNumber = 12,
  };
  // .sim_msg.Vec3 box_center = 4;
  bool has_box_center() const;
  void clear_box_center();
  const ::sim_msg::Vec3& box_center() const;
  ::sim_msg::Vec3* release_box_center();
  ::sim_msg::Vec3* mutable_box_center();
  void set_allocated_box_center(::sim_msg::Vec3* box_center);

  // .sim_msg.Vec3 box_size = 5;
  bool has_box_size() const;
  void clear_box_size();
  const ::sim_msg::Vec3& box_size() const;
  ::sim_msg::Vec3* release_box_size();
  ::sim_msg::Vec3* mutable_box_size();
  void set_allocated_box_size(::sim_msg::Vec3* box_size);

  // .sim_msg.Vec3 velocity = 7;
  bool has_velocity() const;
  void clear_velocity();
  const ::sim_msg::Vec3& velocity() const;
  ::sim_msg::Vec3* release_velocity();
  ::sim_msg::Vec3* mutable_velocity();
  void set_allocated_velocity(::sim_msg::Vec3* velocity);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .sim_msg.ObstacleType classification = 2;
  void clear_classification();
  ::sim_msg::ObstacleType classification() const;
  void set_classification(::sim_msg::ObstacleType value);

  // double timestamp = 3;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);

  // float yaw = 6;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);

  // float absolute_longitude_v = 8;
  void clear_absolute_longitude_v();
  float absolute_longitude_v() const;
  void set_absolute_longitude_v(float value);

  // float absolute_lateral_v = 9;
  void clear_absolute_lateral_v();
  float absolute_lateral_v() const;
  void set_absolute_lateral_v(float value);

  // float absolute_longitude_a = 10;
  void clear_absolute_longitude_a();
  float absolute_longitude_a() const;
  void set_absolute_longitude_a(float value);

  // float dl = 11;
  void clear_dl();
  float dl() const;
  void set_dl(float value);

  // float confidence = 12;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:sim_msg.Obstacle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Vec3* box_center_;
  ::sim_msg::Vec3* box_size_;
  ::sim_msg::Vec3* velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int classification_;
  double timestamp_;
  float yaw_;
  float absolute_longitude_v_;
  float absolute_lateral_v_;
  float absolute_longitude_a_;
  float dl_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// -------------------------------------------------------------------

class Obstacles :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Obstacles) */ {
 public:
  Obstacles();
  virtual ~Obstacles();

  Obstacles(const Obstacles& from);
  Obstacles(Obstacles&& from) noexcept
    : Obstacles() {
    *this = ::std::move(from);
  }

  inline Obstacles& operator=(const Obstacles& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacles& operator=(Obstacles&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacles& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacles* internal_default_instance() {
    return reinterpret_cast<const Obstacles*>(
               &_Obstacles_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Obstacles& a, Obstacles& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacles* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacles* New() const final {
    return CreateMaybeMessage<Obstacles>(nullptr);
  }

  Obstacles* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacles>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacles& from);
  void MergeFrom(const Obstacles& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacles* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Obstacles";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_obstacles_2eproto);
    return ::descriptor_table_obstacles_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .sim_msg.Obstacle obstacles = 2;
  int obstacles_size() const;
  void clear_obstacles();
  ::sim_msg::Obstacle* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Obstacle >*
      mutable_obstacles();
  const ::sim_msg::Obstacle& obstacles(int index) const;
  ::sim_msg::Obstacle* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Obstacle >&
      obstacles() const;

  // .sim_msg.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::sim_msg::Header& header() const;
  ::sim_msg::Header* release_header();
  ::sim_msg::Header* mutable_header();
  void set_allocated_header(::sim_msg::Header* header);

  // @@protoc_insertion_point(class_scope:sim_msg.Obstacles)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Obstacle > obstacles_;
  ::sim_msg::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_obstacles_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Obstacle

// int32 id = 1;
inline void Obstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.id)
  return id_;
}
inline void Obstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.id)
}

// .sim_msg.ObstacleType classification = 2;
inline void Obstacle::clear_classification() {
  classification_ = 0;
}
inline ::sim_msg::ObstacleType Obstacle::classification() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.classification)
  return static_cast< ::sim_msg::ObstacleType >(classification_);
}
inline void Obstacle::set_classification(::sim_msg::ObstacleType value) {
  
  classification_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.classification)
}

// double timestamp = 3;
inline void Obstacle::clear_timestamp() {
  timestamp_ = 0;
}
inline double Obstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.timestamp)
  return timestamp_;
}
inline void Obstacle::set_timestamp(double value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.timestamp)
}

// .sim_msg.Vec3 box_center = 4;
inline bool Obstacle::has_box_center() const {
  return this != internal_default_instance() && box_center_ != nullptr;
}
inline const ::sim_msg::Vec3& Obstacle::box_center() const {
  const ::sim_msg::Vec3* p = box_center_;
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.box_center)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* Obstacle::release_box_center() {
  // @@protoc_insertion_point(field_release:sim_msg.Obstacle.box_center)
  
  ::sim_msg::Vec3* temp = box_center_;
  box_center_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Obstacle::mutable_box_center() {
  
  if (box_center_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    box_center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Obstacle.box_center)
  return box_center_;
}
inline void Obstacle::set_allocated_box_center(::sim_msg::Vec3* box_center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_center_);
  }
  if (box_center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box_center, submessage_arena);
    }
    
  } else {
    
  }
  box_center_ = box_center;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Obstacle.box_center)
}

// .sim_msg.Vec3 box_size = 5;
inline bool Obstacle::has_box_size() const {
  return this != internal_default_instance() && box_size_ != nullptr;
}
inline const ::sim_msg::Vec3& Obstacle::box_size() const {
  const ::sim_msg::Vec3* p = box_size_;
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.box_size)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* Obstacle::release_box_size() {
  // @@protoc_insertion_point(field_release:sim_msg.Obstacle.box_size)
  
  ::sim_msg::Vec3* temp = box_size_;
  box_size_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Obstacle::mutable_box_size() {
  
  if (box_size_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    box_size_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Obstacle.box_size)
  return box_size_;
}
inline void Obstacle::set_allocated_box_size(::sim_msg::Vec3* box_size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(box_size_);
  }
  if (box_size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      box_size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box_size, submessage_arena);
    }
    
  } else {
    
  }
  box_size_ = box_size;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Obstacle.box_size)
}

// float yaw = 6;
inline void Obstacle::clear_yaw() {
  yaw_ = 0;
}
inline float Obstacle::yaw() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.yaw)
  return yaw_;
}
inline void Obstacle::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.yaw)
}

// .sim_msg.Vec3 velocity = 7;
inline bool Obstacle::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::sim_msg::Vec3& Obstacle::velocity() const {
  const ::sim_msg::Vec3* p = velocity_;
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* Obstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:sim_msg.Obstacle.velocity)
  
  ::sim_msg::Vec3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Obstacle::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Obstacle.velocity)
  return velocity_;
}
inline void Obstacle::set_allocated_velocity(::sim_msg::Vec3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Obstacle.velocity)
}

// float absolute_longitude_v = 8;
inline void Obstacle::clear_absolute_longitude_v() {
  absolute_longitude_v_ = 0;
}
inline float Obstacle::absolute_longitude_v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.absolute_longitude_v)
  return absolute_longitude_v_;
}
inline void Obstacle::set_absolute_longitude_v(float value) {
  
  absolute_longitude_v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.absolute_longitude_v)
}

// float absolute_lateral_v = 9;
inline void Obstacle::clear_absolute_lateral_v() {
  absolute_lateral_v_ = 0;
}
inline float Obstacle::absolute_lateral_v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.absolute_lateral_v)
  return absolute_lateral_v_;
}
inline void Obstacle::set_absolute_lateral_v(float value) {
  
  absolute_lateral_v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.absolute_lateral_v)
}

// float absolute_longitude_a = 10;
inline void Obstacle::clear_absolute_longitude_a() {
  absolute_longitude_a_ = 0;
}
inline float Obstacle::absolute_longitude_a() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.absolute_longitude_a)
  return absolute_longitude_a_;
}
inline void Obstacle::set_absolute_longitude_a(float value) {
  
  absolute_longitude_a_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.absolute_longitude_a)
}

// float dl = 11;
inline void Obstacle::clear_dl() {
  dl_ = 0;
}
inline float Obstacle::dl() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.dl)
  return dl_;
}
inline void Obstacle::set_dl(float value) {
  
  dl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.dl)
}

// float confidence = 12;
inline void Obstacle::clear_confidence() {
  confidence_ = 0;
}
inline float Obstacle::confidence() const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacle.confidence)
  return confidence_;
}
inline void Obstacle::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Obstacle.confidence)
}

// -------------------------------------------------------------------

// Obstacles

// .sim_msg.Header header = 1;
inline bool Obstacles::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::sim_msg::Header& Obstacles::header() const {
  const ::sim_msg::Header* p = header_;
  // @@protoc_insertion_point(field_get:sim_msg.Obstacles.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Header*>(
      &::sim_msg::_Header_default_instance_);
}
inline ::sim_msg::Header* Obstacles::release_header() {
  // @@protoc_insertion_point(field_release:sim_msg.Obstacles.header)
  
  ::sim_msg::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::sim_msg::Header* Obstacles::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Obstacles.header)
  return header_;
}
inline void Obstacles::set_allocated_header(::sim_msg::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Obstacles.header)
}

// repeated .sim_msg.Obstacle obstacles = 2;
inline int Obstacles::obstacles_size() const {
  return obstacles_.size();
}
inline void Obstacles::clear_obstacles() {
  obstacles_.Clear();
}
inline ::sim_msg::Obstacle* Obstacles::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Obstacles.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Obstacle >*
Obstacles::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Obstacles.obstacles)
  return &obstacles_;
}
inline const ::sim_msg::Obstacle& Obstacles::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Obstacles.obstacles)
  return obstacles_.Get(index);
}
inline ::sim_msg::Obstacle* Obstacles::add_obstacles() {
  // @@protoc_insertion_point(field_add:sim_msg.Obstacles.obstacles)
  return obstacles_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Obstacle >&
Obstacles::obstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Obstacles.obstacles)
  return obstacles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::ObstacleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::ObstacleType>() {
  return ::sim_msg::ObstacleType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_obstacles_2eproto
