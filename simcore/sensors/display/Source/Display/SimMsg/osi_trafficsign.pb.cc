// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficsign.proto
#pragma warning (disable : 4125)

#include "osi_trafficsign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseStationary_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalReference_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto;
namespace osi3 {
class TrafficSignValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSignValue> _instance;
} _TrafficSignValue_default_instance_;
class TrafficSign_MainSign_ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSign_MainSign_Classification> _instance;
} _TrafficSign_MainSign_Classification_default_instance_;
class TrafficSign_MainSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSign_MainSign> _instance;
} _TrafficSign_MainSign_default_instance_;
class TrafficSign_SupplementarySign_Classification_ArrowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSign_SupplementarySign_Classification_Arrow> _instance;
} _TrafficSign_SupplementarySign_Classification_Arrow_default_instance_;
class TrafficSign_SupplementarySign_ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSign_SupplementarySign_Classification> _instance;
} _TrafficSign_SupplementarySign_Classification_default_instance_;
class TrafficSign_SupplementarySignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSign_SupplementarySign> _instance;
} _TrafficSign_SupplementarySign_default_instance_;
class TrafficSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficSign> _instance;
} _TrafficSign_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_TrafficSign_osi_5ftrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficSign_default_instance_;
    new (ptr) ::osi3::TrafficSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrafficSign_osi_5ftrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_TrafficSign_osi_5ftrafficsign_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto.base,
      &scc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficSign_MainSign_default_instance_;
    new (ptr) ::osi3::TrafficSign_MainSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_MainSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto}, {
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,
      &scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficSign_MainSign_Classification_default_instance_;
    new (ptr) ::osi3::TrafficSign_MainSign_Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_MainSign_Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto}, {
      &scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficSign_SupplementarySign_default_instance_;
    new (ptr) ::osi3::TrafficSign_SupplementarySign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_SupplementarySign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto}, {
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,
      &scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficSign_SupplementarySign_Classification_default_instance_;
    new (ptr) ::osi3::TrafficSign_SupplementarySign_Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_SupplementarySign_Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto}, {
      &scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto.base,
      &scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficSign_SupplementarySign_Classification_Arrow_default_instance_;
    new (ptr) ::osi3::TrafficSign_SupplementarySign_Classification_Arrow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSign_SupplementarySign_Classification_Arrow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TrafficSignValue_osi_5ftrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficSignValue_default_instance_;
    new (ptr) ::osi3::TrafficSignValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficSignValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrafficSignValue_osi_5ftrafficsign_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5ftrafficsign_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5ftrafficsign_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5ftrafficsign_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5ftrafficsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, value_unit_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSignValue, text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, variability_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, direction_scope_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, vertically_mirrored_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, country_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, sub_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign_Classification, logical_lane_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_MainSign, model_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification_Arrow, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, variability_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, value_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, actor_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, arrow_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, country_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, sub_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign_Classification, logical_lane_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign_SupplementarySign, model_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, main_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, supplementary_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficSign, source_reference_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::TrafficSignValue)},
  { 8, -1, sizeof(::osi3::TrafficSign_MainSign_Classification)},
  { 25, -1, sizeof(::osi3::TrafficSign_MainSign)},
  { 33, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification_Arrow)},
  { 40, -1, sizeof(::osi3::TrafficSign_SupplementarySign_Classification)},
  { 57, -1, sizeof(::osi3::TrafficSign_SupplementarySign)},
  { 65, -1, sizeof(::osi3::TrafficSign)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSignValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_MainSign_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_MainSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_SupplementarySign_Classification_Arrow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_SupplementarySign_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_SupplementarySign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficSign_default_instance_),
};

const char descriptor_table_protodef_osi_5ftrafficsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_trafficsign.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\205\003\n\020TrafficSignValue\022\r\n\005value\030\001 "
  "\001(\001\022/\n\nvalue_unit\030\002 \001(\0162\033.osi3.TrafficSi"
  "gnValue.Unit\022\014\n\004text\030\003 \001(\t\"\242\002\n\004Unit\022\020\n\014U"
  "NIT_UNKNOWN\020\000\022\016\n\nUNIT_OTHER\020\001\022\020\n\014UNIT_NO"
  "_UNIT\020\002\022\033\n\027UNIT_KILOMETER_PER_HOUR\020\003\022\026\n\022"
  "UNIT_MILE_PER_HOUR\020\004\022\016\n\nUNIT_METER\020\005\022\022\n\016"
  "UNIT_KILOMETER\020\006\022\r\n\tUNIT_FEET\020\007\022\r\n\tUNIT_"
  "MILE\020\010\022\023\n\017UNIT_METRIC_TON\020\t\022\021\n\rUNIT_LONG"
  "_TON\020\n\022\022\n\016UNIT_SHORT_TON\020\013\022\020\n\014UNIT_MINUT"
  "ES\020\014\022\014\n\010UNIT_DAY\020\r\022\023\n\017UNIT_PERCENTAGE\020\016\""
  "\340g\n\013TrafficSign\022\034\n\002id\030\001 \001(\0132\020.osi3.Ident"
  "ifier\022-\n\tmain_sign\030\002 \001(\0132\032.osi3.TrafficS"
  "ign.MainSign\022\?\n\022supplementary_sign\030\003 \003(\013"
  "2#.osi3.TrafficSign.SupplementarySign\0221\n"
  "\020source_reference\030\004 \003(\0132\027.osi3.ExternalR"
  "eference\032\233A\n\010MainSign\022\"\n\004base\030\001 \001(\0132\024.os"
  "i3.BaseStationary\022A\n\016classification\030\002 \001("
  "\0132).osi3.TrafficSign.MainSign.Classifica"
  "tion\022\027\n\017model_reference\030\003 \001(\t\032\216@\n\016Classi"
  "fication\0222\n\013variability\030\001 \001(\0162\035.osi3.Tra"
  "fficSign.Variability\022<\n\004type\030\002 \001(\0162..osi"
  "3.TrafficSign.MainSign.Classification.Ty"
  "pe\022%\n\005value\030\003 \001(\0132\026.osi3.TrafficSignValu"
  "e\022Q\n\017direction_scope\030\004 \001(\01628.osi3.Traffi"
  "cSign.MainSign.Classification.DirectionS"
  "cope\022*\n\020assigned_lane_id\030\005 \003(\0132\020.osi3.Id"
  "entifier\022\033\n\023vertically_mirrored\030\006 \001(\010\022\031\n"
  "\021is_out_of_service\030\007 \001(\010\022\017\n\007country\030\010 \001("
  "\t\022\030\n\020country_revision\030\t \001(\t\022\014\n\004code\030\n \001("
  "\t\022\020\n\010sub_code\030\013 \001(\t\022<\n\027logical_lane_assi"
  "gnment\030\014 \003(\0132\033.osi3.LogicalLaneAssignmen"
  "t\"\340:\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTH"
  "ER\020\001\022\024\n\020TYPE_DANGER_SPOT\020\002\022\027\n\023TYPE_ZEBRA"
  "_CROSSING\020W\022\017\n\013TYPE_FLIGHT\020n\022\020\n\013TYPE_CAT"
  "TLE\020\310\001\022\026\n\021TYPE_HORSE_RIDERS\020\305\001\022\024\n\017TYPE_A"
  "MPHIBIANS\020\274\001\022\026\n\022TYPE_FALLING_ROCKS\020`\022\024\n\020"
  "TYPE_SNOW_OR_ICE\020^\022\025\n\021TYPE_LOOSE_GRAVEL\020"
  "a\022\022\n\016TYPE_WATERSIDE\020f\022\023\n\016TYPE_CLEARANCE\020"
  "\322\001\022\027\n\023TYPE_MOVABLE_BRIDGE\020e\022,\n(TYPE_RIGH"
  "T_BEFORE_LEFT_NEXT_INTERSECTION\020\003\022\022\n\016TYP"
  "E_TURN_LEFT\020\004\022\023\n\017TYPE_TURN_RIGHT\020\005\022\031\n\025TY"
  "PE_DOUBLE_TURN_LEFT\020\006\022\032\n\026TYPE_DOUBLE_TUR"
  "N_RIGHT\020\007\022\027\n\023TYPE_HILL_DOWNWARDS\020\010\022\025\n\021TY"
  "PE_HILL_UPWARDS\020\t\022\024\n\020TYPE_UNEVEN_ROAD\020]\022"
  "#\n\037TYPE_ROAD_SLIPPERY_WET_OR_DIRTY\020_\022\023\n\017"
  "TYPE_SIDE_WINDS\020b\022\027\n\023TYPE_ROAD_NARROWING"
  "\020\n\022\035\n\031TYPE_ROAD_NARROWING_RIGHT\020\014\022\034\n\030TYP"
  "E_ROAD_NARROWING_LEFT\020\013\022\023\n\017TYPE_ROAD_WOR"
  "KS\020\r\022\027\n\023TYPE_TRAFFIC_QUEUES\020d\022\030\n\024TYPE_TW"
  "O_WAY_TRAFFIC\020\016\022 \n\034TYPE_ATTENTION_TRAFFI"
  "C_LIGHT\020\017\022\024\n\020TYPE_PEDESTRIANS\020g\022\032\n\026TYPE_"
  "CHILDREN_CROSSING\020j\022\024\n\020TYPE_CYCLE_ROUTE\020"
  "k\022\026\n\022TYPE_DEER_CROSSING\020m\022 \n\033TYPE_UNGATE"
  "D_LEVEL_CROSSING\020\220\001\022\036\n\032TYPE_LEVEL_CROSSI"
  "NG_MARKER\020p\022\"\n\035TYPE_RAILWAY_TRAFFIC_PRIO"
  "RITY\020\207\001\022\021\n\rTYPE_GIVE_WAY\020\020\022\r\n\tTYPE_STOP\020"
  "\021\022\'\n#TYPE_PRIORITY_TO_OPPOSITE_DIRECTION"
  "\020\022\0223\n/TYPE_PRIORITY_TO_OPPOSITE_DIRECTIO"
  "N_UPSIDE_DOWN\020\023\022\035\n\031TYPE_PRESCRIBED_LEFT_"
  "TURN\020\024\022\036\n\032TYPE_PRESCRIBED_RIGHT_TURN\020\025\022\034"
  "\n\030TYPE_PRESCRIBED_STRAIGHT\020\026\022\035\n\031TYPE_PRE"
  "SCRIBED_RIGHT_WAY\020\030\022\034\n\030TYPE_PRESCRIBED_L"
  "EFT_WAY\020\027\022+\n\'TYPE_PRESCRIBED_RIGHT_TURN_"
  "AND_STRAIGHT\020\032\022*\n&TYPE_PRESCRIBED_LEFT_T"
  "URN_AND_STRAIGHT\020\031\022,\n(TYPE_PRESCRIBED_LE"
  "FT_TURN_AND_RIGHT_TURN\020\033\0225\n1TYPE_PRESCRI"
  "BED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT\020\034\022"
  "\023\n\017TYPE_ROUNDABOUT\020\035\022\024\n\020TYPE_ONEWAY_LEFT"
  "\020\036\022\025\n\021TYPE_ONEWAY_RIGHT\020\037\022\022\n\016TYPE_PASS_L"
  "EFT\020 \022\023\n\017TYPE_PASS_RIGHT\020!\022$\n\037TYPE_SIDE_"
  "LANE_OPEN_FOR_TRAFFIC\020\200\001\022&\n!TYPE_SIDE_LA"
  "NE_CLOSED_FOR_TRAFFIC\020\201\001\022\'\n\"TYPE_SIDE_LA"
  "NE_CLOSING_FOR_TRAFFIC\020\202\001\022\022\n\rTYPE_BUS_ST"
  "OP\020\211\001\022\024\n\017TYPE_TAXI_STAND\020\212\001\022\027\n\022TYPE_BICY"
  "CLES_ONLY\020\221\001\022\033\n\026TYPE_HORSE_RIDERS_ONLY\020\222"
  "\001\022\032\n\025TYPE_PEDESTRIANS_ONLY\020\223\001\022*\n%TYPE_BI"
  "CYCLES_PEDESTRIANS_SHARED_ONLY\020\224\001\0222\n-TYP"
  "E_BICYCLES_PEDESTRIANS_SEPARATED_LEFT_ON"
  "LY\020\225\001\0223\n.TYPE_BICYCLES_PEDESTRIANS_SEPAR"
  "ATED_RIGHT_ONLY\020\226\001\022\037\n\032TYPE_PEDESTRIAN_ZO"
  "NE_BEGIN\020\227\001\022\035\n\030TYPE_PEDESTRIAN_ZONE_END\020"
  "\230\001\022\034\n\027TYPE_BICYCLE_ROAD_BEGIN\020\231\001\022\032\n\025TYPE"
  "_BICYCLE_ROAD_END\020\232\001\022\021\n\rTYPE_BUS_LANE\020\"\022"
  "\027\n\023TYPE_BUS_LANE_BEGIN\020#\022\025\n\021TYPE_BUS_LAN"
  "E_END\020$\022\027\n\023TYPE_ALL_PROHIBITED\020%\022(\n$TYPE"
  "_MOTORIZED_MULTITRACK_PROHIBITED\020&\022\032\n\026TY"
  "PE_TRUCKS_PROHIBITED\020\'\022\034\n\030TYPE_BICYCLES_"
  "PROHIBITED\020(\022\037\n\033TYPE_MOTORCYCLES_PROHIBI"
  "TED\020)\022\033\n\026TYPE_MOPEDS_PROHIBITED\020\233\001\022!\n\034TY"
  "PE_HORSE_RIDERS_PROHIBITED\020\234\001\022$\n\037TYPE_HO"
  "RSE_CARRIAGES_PROHIBITED\020\235\001\022\033\n\026TYPE_CATT"
  "LE_PROHIBITED\020\236\001\022\032\n\025TYPE_BUSES_PROHIBITE"
  "D\020\237\001\022\031\n\024TYPE_CARS_PROHIBITED\020\240\001\022\"\n\035TYPE_"
  "CARS_TRAILERS_PROHIBITED\020\241\001\022$\n\037TYPE_TRUC"
  "KS_TRAILERS_PROHIBITED\020\242\001\022\035\n\030TYPE_TRACTO"
  "RS_PROHIBITED\020\243\001\022\037\n\033TYPE_PEDESTRIANS_PRO"
  "HIBITED\020*\022\"\n\036TYPE_MOTOR_VEHICLES_PROHIBI"
  "TED\020+\022-\n(TYPE_HAZARDOUS_GOODS_VEHICLES_P"
  "ROHIBITED\020\244\001\022)\n$TYPE_OVER_WEIGHT_VEHICLE"
  "S_PROHIBITED\020\245\001\022.\n)TYPE_VEHICLES_AXLE_OV"
  "ER_WEIGHT_PROHIBITED\020\246\001\022*\n%TYPE_VEHICLES"
  "_EXCESS_WIDTH_PROHIBITED\020\247\001\022+\n&TYPE_VEHI"
  "CLES_EXCESS_HEIGHT_PROHIBITED\020\250\001\022+\n&TYPE"
  "_VEHICLES_EXCESS_LENGTH_PROHIBITED\020\251\001\022\025\n"
  "\021TYPE_DO_NOT_ENTER\020,\022\036\n\031TYPE_SNOW_CHAINS"
  "_REQUIRED\020\252\001\022-\n(TYPE_WATER_POLLUTANT_VEH"
  "ICLES_PROHIBITED\020\253\001\022!\n\035TYPE_ENVIRONMENTA"
  "L_ZONE_BEGIN\020-\022\037\n\033TYPE_ENVIRONMENTAL_ZON"
  "E_END\020.\022\027\n\023TYPE_NO_U_TURN_LEFT\020/\022\030\n\024TYPE"
  "_NO_U_TURN_RIGHT\0200\022\037\n\033TYPE_PRESCRIBED_U_"
  "TURN_LEFT\0201\022 \n\034TYPE_PRESCRIBED_U_TURN_RI"
  "GHT\0202\022$\n TYPE_MINIMUM_DISTANCE_FOR_TRUCK"
  "S\0203\022\032\n\026TYPE_SPEED_LIMIT_BEGIN\0204\022\037\n\033TYPE_"
  "SPEED_LIMIT_ZONE_BEGIN\0205\022\035\n\031TYPE_SPEED_L"
  "IMIT_ZONE_END\0206\022\034\n\030TYPE_MINIMUM_SPEED_BE"
  "GIN\0207\022\035\n\031TYPE_OVERTAKING_BAN_BEGIN\0208\022(\n$"
  "TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN\0209\022\030"
  "\n\024TYPE_SPEED_LIMIT_END\020:\022\032\n\026TYPE_MINIMUM"
  "_SPEED_END\020;\022\033\n\027TYPE_OVERTAKING_BAN_END\020"
  "<\022&\n\"TYPE_OVERTAKING_BAN_FOR_TRUCKS_END\020"
  "=\022\035\n\031TYPE_ALL_RESTRICTIONS_END\020>\022\024\n\020TYPE"
  "_NO_STOPPING\020\?\022\023\n\017TYPE_NO_PARKING\020@\022\036\n\032T"
  "YPE_NO_PARKING_ZONE_BEGIN\020A\022\034\n\030TYPE_NO_P"
  "ARKING_ZONE_END\020B\022\'\n#TYPE_RIGHT_OF_WAY_N"
  "EXT_INTERSECTION\020C\022\033\n\027TYPE_RIGHT_OF_WAY_"
  "BEGIN\020D\022\031\n\025TYPE_RIGHT_OF_WAY_END\020E\022)\n%TY"
  "PE_PRIORITY_OVER_OPPOSITE_DIRECTION\020F\0225\n"
  "1TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_U"
  "PSIDE_DOWN\020G\022\023\n\017TYPE_TOWN_BEGIN\020H\022\021\n\rTYP"
  "E_TOWN_END\020I\022\024\n\020TYPE_CAR_PARKING\020J\022\037\n\033TY"
  "PE_CAR_PARKING_ZONE_BEGIN\020K\022\035\n\031TYPE_CAR_"
  "PARKING_ZONE_END\020L\022$\n\037TYPE_SIDEWALK_HALF"
  "_PARKING_LEFT\020\254\001\022%\n TYPE_SIDEWALK_HALF_P"
  "ARKING_RIGHT\020\255\001\022\037\n\032TYPE_SIDEWALK_PARKING"
  "_LEFT\020\256\001\022 \n\033TYPE_SIDEWALK_PARKING_RIGHT\020"
  "\257\001\0222\n-TYPE_SIDEWALK_PERPENDICULAR_HALF_P"
  "ARKING_LEFT\020\260\001\0223\n.TYPE_SIDEWALK_PERPENDI"
  "CULAR_HALF_PARKING_RIGHT\020\261\001\022-\n(TYPE_SIDE"
  "WALK_PERPENDICULAR_PARKING_LEFT\020\262\001\022.\n)TY"
  "PE_SIDEWALK_PERPENDICULAR_PARKING_RIGHT\020"
  "\263\001\022\034\n\030TYPE_LIVING_STREET_BEGIN\020M\022\032\n\026TYPE"
  "_LIVING_STREET_END\020N\022\017\n\013TYPE_TUNNEL\020O\022 \n"
  "\034TYPE_EMERGENCY_STOPPING_LEFT\020P\022!\n\035TYPE_"
  "EMERGENCY_STOPPING_RIGHT\020Q\022\026\n\022TYPE_HIGHW"
  "AY_BEGIN\020R\022\024\n\020TYPE_HIGHWAY_END\020S\022\031\n\025TYPE"
  "_EXPRESSWAY_BEGIN\020T\022\027\n\023TYPE_EXPRESSWAY_E"
  "ND\020U\022\034\n\027TYPE_NAMED_HIGHWAY_EXIT\020\267\001\022\037\n\032TY"
  "PE_NAMED_EXPRESSWAY_EXIT\020\270\001\022\031\n\024TYPE_NAME"
  "D_ROAD_EXIT\020\271\001\022\025\n\021TYPE_HIGHWAY_EXIT\020V\022\031\n"
  "\024TYPE_EXPRESSWAY_EXIT\020\272\001\022\027\n\022TYPE_ONEWAY_"
  "STREET\020\273\001\022\031\n\024TYPE_CROSSING_GUARDS\020\275\001\022\021\n\014"
  "TYPE_DEADEND\020\276\001\022-\n(TYPE_DEADEND_EXCLUDIN"
  "G_DESIGNATED_ACTORS\020\277\001\022\033\n\026TYPE_FIRST_AID"
  "_STATION\020\302\001\022\030\n\023TYPE_POLICE_STATION\020\303\001\022\023\n"
  "\016TYPE_TELEPHONE\020\304\001\022\031\n\024TYPE_FILLING_STATI"
  "ON\020\306\001\022\017\n\nTYPE_HOTEL\020\311\001\022\r\n\010TYPE_INN\020\312\001\022\017\n"
  "\nTYPE_KIOSK\020\313\001\022\020\n\013TYPE_TOILET\020\314\001\022\020\n\013TYPE"
  "_CHAPEL\020\315\001\022\026\n\021TYPE_TOURIST_INFO\020\316\001\022\030\n\023TY"
  "PE_REPAIR_SERVICE\020\317\001\022\036\n\031TYPE_PEDESTRIAN_"
  "UNDERPASS\020\320\001\022\033\n\026TYPE_PEDESTRIAN_BRIDGE\020\321"
  "\001\022\026\n\021TYPE_CAMPER_PLACE\020\325\001\022$\n\037TYPE_ADVISO"
  "RY_SPEED_LIMIT_BEGIN\020\326\001\022\"\n\035TYPE_ADVISORY"
  "_SPEED_LIMIT_END\020\327\001\022\024\n\017TYPE_PLACE_NAME\020\330"
  "\001\022\034\n\027TYPE_TOURIST_ATTRACTION\020\331\001\022\027\n\022TYPE_"
  "TOURIST_ROUTE\020\332\001\022\026\n\021TYPE_TOURIST_AREA\020\333\001"
  "\022.\n)TYPE_SHOULDER_NOT_PASSABLE_MOTOR_VEH"
  "ICLES\020\334\001\022)\n$TYPE_SHOULDER_UNSAFE_TRUCKS_"
  "TRACTORS\020\335\001\022\024\n\017TYPE_TOLL_BEGIN\020\336\001\022\022\n\rTYP"
  "E_TOLL_END\020\337\001\022\023\n\016TYPE_TOLL_ROAD\020\340\001\022\021\n\014TY"
  "PE_CUSTOMS\020\341\001\022#\n\036TYPE_INTERNATIONAL_BORD"
  "ER_INFO\020\342\001\022\036\n\031TYPE_STREETLIGHT_RED_BAND\020"
  "\343\001\022&\n!TYPE_FEDERAL_HIGHWAY_ROUTE_NUMBER\020"
  "\344\001\022\036\n\031TYPE_HIGHWAY_ROUTE_NUMBER\020\345\001\022$\n\037TY"
  "PE_HIGHWAY_INTERCHANGE_NUMBER\020\346\001\022\037\n\032TYPE"
  "_EUROPEAN_ROUTE_NUMBER\020\347\001\022(\n#TYPE_FEDERA"
  "L_HIGHWAY_DIRECTION_LEFT\020\350\001\022)\n$TYPE_FEDE"
  "RAL_HIGHWAY_DIRECTION_RIGHT\020\351\001\022%\n TYPE_P"
  "RIMARY_ROAD_DIRECTION_LEFT\020\352\001\022&\n!TYPE_PR"
  "IMARY_ROAD_DIRECTION_RIGHT\020\353\001\022\'\n\"TYPE_SE"
  "CONDARY_ROAD_DIRECTION_LEFT\020\354\001\022(\n#TYPE_S"
  "ECONDARY_ROAD_DIRECTION_RIGHT\020\355\001\022*\n%TYPE"
  "_DIRECTION_DESIGNATED_ACTORS_LEFT\020\356\001\022+\n&"
  "TYPE_DIRECTION_DESIGNATED_ACTORS_RIGHT\020\357"
  "\001\022#\n\036TYPE_ROUTING_DESIGNATED_ACTORS\020\360\001\022#"
  "\n\036TYPE_DIRECTION_TO_HIGHWAY_LEFT\020\217\001\022#\n\037T"
  "YPE_DIRECTION_TO_HIGHWAY_RIGHT\020l\022,\n(TYPE"
  "_DIRECTION_TO_LOCAL_DESTINATION_LEFT\020\177\022."
  "\n)TYPE_DIRECTION_TO_LOCAL_DESTINATION_RI"
  "GHT\020\210\001\022 \n\034TYPE_CONSOLIDATED_DIRECTIONS\020v"
  "\022\024\n\020TYPE_STREET_NAME\020w\022\"\n\036TYPE_DIRECTION"
  "_PREANNOUNCEMENT\020x\022.\n*TYPE_DIRECTION_PRE"
  "ANNOUNCEMENT_LANE_CONFIG\020y\0222\n.TYPE_DIREC"
  "TION_PREANNOUNCEMENT_HIGHWAY_ENTRIES\020z\022\035"
  "\n\031TYPE_HIGHWAY_ANNOUNCEMENT\020{\022 \n\034TYPE_OT"
  "HER_ROAD_ANNOUNCEMENT\020|\022(\n$TYPE_HIGHWAY_"
  "ANNOUNCEMENT_TRUCK_STOP\020}\022+\n\'TYPE_HIGHWA"
  "Y_PREANNOUNCEMENT_DIRECTIONS\020~\022\022\n\016TYPE_P"
  "OLE_EXIT\020X\022 \n\033TYPE_HIGHWAY_DISTANCE_BOAR"
  "D\020\264\001\022\025\n\020TYPE_DETOUR_LEFT\020\265\001\022\026\n\021TYPE_DETO"
  "UR_RIGHT\020\266\001\022\031\n\024TYPE_NUMBERED_DETOUR\020\203\001\022\026"
  "\n\021TYPE_DETOUR_BEGIN\020\204\001\022\024\n\017TYPE_DETOUR_EN"
  "D\020\205\001\022\036\n\031TYPE_DETOUR_ROUTING_BOARD\020\206\001\022\030\n\024"
  "TYPE_OPTIONAL_DETOUR\020o\022!\n\034TYPE_OPTIONAL_"
  "DETOUR_ROUTING\020\307\001\022\036\n\031TYPE_ROUTE_RECOMMEN"
  "DATION\020\323\001\022\"\n\035TYPE_ROUTE_RECOMMENDATION_E"
  "ND\020\324\001\022\'\n\"TYPE_ANNOUNCE_LANE_TRANSITION_L"
  "EFT\020\300\001\022(\n#TYPE_ANNOUNCE_LANE_TRANSITION_"
  "RIGHT\020\301\001\022 \n\034TYPE_ANNOUNCE_RIGHT_LANE_END"
  "\020Z\022\037\n\033TYPE_ANNOUNCE_LEFT_LANE_END\020Y\022\"\n\036T"
  "YPE_ANNOUNCE_RIGHT_LANE_BEGIN\020s\022!\n\035TYPE_"
  "ANNOUNCE_LEFT_LANE_BEGIN\020t\022$\n TYPE_ANNOU"
  "NCE_LANE_CONSOLIDATION\020u\022\033\n\026TYPE_DETOUR_"
  "CITY_BLOCK\020\216\001\022\016\n\tTYPE_GATE\020\215\001\022\025\n\021TYPE_PO"
  "LE_WARNING\020[\022\026\n\021TYPE_TRAFFIC_CONE\020\214\001\022\035\n\030"
  "TYPE_MOBILE_LANE_CLOSURE\020\213\001\022\027\n\023TYPE_REFL"
  "ECTOR_POST\020r\022\"\n\036TYPE_DIRECTIONAL_BOARD_W"
  "ARNING\020q\022\026\n\022TYPE_GUIDING_PLATE\020h\022\035\n\031TYPE"
  "_GUIDING_PLATE_WEDGES\020i\022\027\n\023TYPE_PARKING_"
  "HAZARD\020c\022\"\n\036TYPE_TRAFFIC_LIGHT_GREEN_ARR"
  "OW\020\\\"\277\001\n\016DirectionScope\022\033\n\027DIRECTION_SCO"
  "PE_UNKNOWN\020\000\022\031\n\025DIRECTION_SCOPE_OTHER\020\001\022"
  " \n\034DIRECTION_SCOPE_NO_DIRECTION\020\002\022\030\n\024DIR"
  "ECTION_SCOPE_LEFT\020\003\022\031\n\025DIRECTION_SCOPE_R"
  "IGHT\020\004\022\036\n\032DIRECTION_SCOPE_LEFT_RIGHT\020\005\032\201"
  "$\n\021SupplementarySign\022\"\n\004base\030\001 \001(\0132\024.osi"
  "3.BaseStationary\022J\n\016classification\030\002 \001(\013"
  "22.osi3.TrafficSign.SupplementarySign.Cl"
  "assification\022\027\n\017model_reference\030\003 \001(\t\032\342\""
  "\n\016Classification\0222\n\013variability\030\001 \001(\0162\035."
  "osi3.TrafficSign.Variability\022E\n\004type\030\002 \001"
  "(\01627.osi3.TrafficSign.SupplementarySign."
  "Classification.Type\022%\n\005value\030\003 \003(\0132\026.osi"
  "3.TrafficSignValue\022*\n\020assigned_lane_id\030\004"
  " \003(\0132\020.osi3.Identifier\022G\n\005actor\030\005 \003(\01628."
  "osi3.TrafficSign.SupplementarySign.Class"
  "ification.Actor\022G\n\005arrow\030\006 \003(\01328.osi3.Tr"
  "afficSign.SupplementarySign.Classificati"
  "on.Arrow\022\031\n\021is_out_of_service\030\007 \001(\010\022\017\n\007c"
  "ountry\030\010 \001(\t\022\030\n\020country_revision\030\t \001(\t\022\014"
  "\n\004code\030\n \001(\t\022\020\n\010sub_code\030\013 \001(\t\022<\n\027logica"
  "l_lane_assignment\030\014 \003(\0132\033.osi3.LogicalLa"
  "neAssignment\032\222\n\n\005Arrow\022!\n\007lane_id\030\001 \003(\0132"
  "\020.osi3.Identifier\022U\n\tdirection\030\002 \003(\0162B.o"
  "si3.TrafficSign.SupplementarySign.Classi"
  "fication.Arrow.Direction\"\216\t\n\tDirection\022\025"
  "\n\021DIRECTION_UNKNOWN\020\000\022\023\n\017DIRECTION_OTHER"
  "\020\001\022\032\n\026DIRECTION_NO_DIRECTION\020\002\022\032\n\026DIRECT"
  "ION_DIRECT_0_DEG\020\003\022!\n\035DIRECTION_DIRECT_4"
  "5_DEG_RIGHT\020\004\022 \n\034DIRECTION_DIRECT_45_DEG"
  "_LEFT\020\005\022!\n\035DIRECTION_DIRECT_90_DEG_RIGHT"
  "\020\006\022 \n\034DIRECTION_DIRECT_90_DEG_LEFT\020\007\022\"\n\036"
  "DIRECTION_DIRECT_135_DEG_RIGHT\020\010\022!\n\035DIRE"
  "CTION_DIRECT_135_DEG_LEFT\020\t\022\034\n\030DIRECTION"
  "_DIRECT_180_DEG\020\n\022\037\n\033DIRECTION_TURN_45_D"
  "EG_RIGHT\020\013\022\036\n\032DIRECTION_TURN_45_DEG_LEFT"
  "\020\014\022\037\n\033DIRECTION_TURN_90_DEG_RIGHT\020\r\022\036\n\032D"
  "IRECTION_TURN_90_DEG_LEFT\020\016\022 \n\034DIRECTION"
  "_TURN_135_DEG_RIGHT\020\017\022\037\n\033DIRECTION_TURN_"
  "135_DEG_LEFT\020\020\022 \n\034DIRECTION_TURN_180_DEG"
  "_RIGHT\020\021\022\037\n\033DIRECTION_TURN_180_DEG_LEFT\020"
  "\022\022\032\n\026DIRECTION_CIRCLE_0_DEG\020\023\022!\n\035DIRECTI"
  "ON_CIRCLE_45_DEG_RIGHT\020\024\022 \n\034DIRECTION_CI"
  "RCLE_45_DEG_LEFT\020\025\022!\n\035DIRECTION_CIRCLE_9"
  "0_DEG_RIGHT\020\026\022 \n\034DIRECTION_CIRCLE_90_DEG"
  "_LEFT\020\027\022\"\n\036DIRECTION_CIRCLE_135_DEG_RIGH"
  "T\020\030\022!\n\035DIRECTION_CIRCLE_135_DEG_LEFT\020\031\022\034"
  "\n\030DIRECTION_CIRCLE_180_DEG\020\032\022%\n!DIRECTIO"
  "N_KEEP_LEFT_TO_TURN_0_DEG\020\033\022&\n\"DIRECTION"
  "_KEEP_RIGHT_TO_TURN_0_DEG\020\034\022,\n(DIRECTION"
  "_KEEP_LEFT_TO_TURN_90_DEG_RIGHT\020\035\022,\n(DIR"
  "ECTION_KEEP_RIGHT_TO_TURN_90_DEG_LEFT\020\036\022"
  "7\n3DIRECTION_KEEP_LEFT_DRIVE_BACK_TO_TUR"
  "N_90_DEG_RIGHT\020\037\0227\n3DIRECTION_KEEP_RIGHT"
  "_DRIVE_BACK_TO_TURN_90_DEG_LEFT\020 \"\265\n\n\004Ty"
  "pe\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014"
  "TYPE_NO_SIGN\020\002\022\r\n\tTYPE_TEXT\020)\022\016\n\nTYPE_SP"
  "ACE\020\'\022\r\n\tTYPE_TIME\020\032\022\016\n\nTYPE_ARROW\020\036\022\027\n\023"
  "TYPE_CONSTRAINED_TO\020.\022\017\n\013TYPE_EXCEPT\020-\022\033"
  "\n\027TYPE_VALID_FOR_DISTANCE\020\003\022+\n\'TYPE_PRIO"
  "RITY_ROAD_BOTTOM_LEFT_FOUR_WAY\020\033\022(\n$TYPE"
  "_PRIORITY_ROAD_TOP_LEFT_FOUR_WAY\020\034\0225\n1TY"
  "PE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_S"
  "TRAIGHT\020 \0225\n1TYPE_PRIORITY_ROAD_BOTTOM_L"
  "EFT_THREE_WAY_SIDEWAYS\020!\0222\n.TYPE_PRIORIT"
  "Y_ROAD_TOP_LEFT_THREE_WAY_STRAIGHT\020\"\022,\n("
  "TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_FOUR_WAY"
  "\020\035\022)\n%TYPE_PRIORITY_ROAD_TOP_RIGHT_FOUR_"
  "WAY\020\037\0226\n2TYPE_PRIORITY_ROAD_BOTTOM_RIGHT"
  "_THREE_WAY_STRAIGHT\020#\0225\n1TYPE_PRIORITY_R"
  "OAD_BOTTOM_RIGHT_THREE_WAY_SIDEWAY\020$\0223\n/"
  "TYPE_PRIORITY_ROAD_TOP_RIGHT_THREE_WAY_S"
  "TRAIGHT\020%\022\032\n\026TYPE_VALID_IN_DISTANCE\020\004\022\020\n"
  "\014TYPE_STOP_IN\020\031\022\023\n\017TYPE_LEFT_ARROW\020\013\022\030\n\024"
  "TYPE_LEFT_BEND_ARROW\020\r\022\024\n\020TYPE_RIGHT_ARR"
  "OW\020\014\022\031\n\025TYPE_RIGHT_BEND_ARROW\020\016\022\021\n\rTYPE_"
  "ACCIDENT\020(\022\r\n\tTYPE_SNOW\020\t\022\014\n\010TYPE_FOG\020\010\022"
  "$\n TYPE_ROLLING_HIGHWAY_INFORMATION\0200\022\021\n"
  "\rTYPE_SERVICES\020/\022\023\n\017TYPE_TIME_RANGE\020\005\022&\n"
  "\"TYPE_PARKING_DISC_TIME_RESTRICTION\020+\022\017\n"
  "\013TYPE_WEIGHT\020\006\022\014\n\010TYPE_WET\020,\022\033\n\027TYPE_PAR"
  "KING_CONSTRAINT\020*\022 \n\034TYPE_NO_WAITING_SID"
  "E_STRIPES\020&\022\r\n\tTYPE_RAIN\020\007\022\022\n\016TYPE_SNOW_"
  "RAIN\020\n\022\016\n\nTYPE_NIGHT\020\023\022\023\n\017TYPE_STOP_4_WA"
  "Y\020\025\022\016\n\nTYPE_TRUCK\020\017\022\037\n\033TYPE_TRACTORS_MAY"
  "_BE_PASSED\020\020\022\022\n\016TYPE_HAZARDOUS\020\021\022\020\n\014TYPE"
  "_TRAILER\020\022\022\r\n\tTYPE_ZONE\020\024\022\023\n\017TYPE_MOTORC"
  "YCLE\020\026\022\033\n\027TYPE_MOTORCYCLE_ALLOWED\020\027\022\014\n\010T"
  "YPE_CAR\020\030\"\376\t\n\005Actor\022\021\n\rACTOR_UNKNOWN\020\000\022\017"
  "\n\013ACTOR_OTHER\020\001\022\022\n\016ACTOR_NO_ACTOR\020\002\022\037\n\033A"
  "CTOR_AGRICULTURAL_VEHICLES\020\003\022\022\n\016ACTOR_BI"
  "CYCLES\020\004\022\017\n\013ACTOR_BUSES\020\005\022\021\n\rACTOR_CAMPE"
  "RS\020\006\022\022\n\016ACTOR_CARAVANS\020\007\022\016\n\nACTOR_CARS\020\010"
  "\022\034\n\030ACTOR_CARS_WITH_CARAVANS\020\t\022\034\n\030ACTOR_"
  "CARS_WITH_TRAILERS\020\n\022\020\n\014ACTOR_CATTLE\020\013\022\022"
  "\n\016ACTOR_CHILDREN\020\014\022\037\n\033ACTOR_CONSTRUCTION"
  "_VEHICLES\020\r\022\033\n\027ACTOR_DELIVERY_VEHICLES\020\016"
  "\022\032\n\026ACTOR_DISABLED_PERSONS\020\017\022\020\n\014ACTOR_EB"
  "IKES\020\020\022\033\n\027ACTOR_ELECTRIC_VEHICLES\020\021\022\034\n\030A"
  "CTOR_EMERGENCY_VEHICLES\020\022\022\025\n\021ACTOR_FERRY"
  "_USERS\020\023\022\033\n\027ACTOR_FORESTRY_VEHICLES\020\024\022\"\n"
  "\036ACTOR_HAZARDOUS_GOODS_VEHICLES\020\025\022\031\n\025ACT"
  "OR_HORSE_CARRIAGES\020\026\022\026\n\022ACTOR_HORSE_RIDE"
  "RS\020\027\022\030\n\024ACTOR_INLINE_SKATERS\020\030\022\032\n\026ACTOR_"
  "MEDICAL_VEHICLES\020\031\022\033\n\027ACTOR_MILITARY_VEH"
  "ICLES\020\032\022\020\n\014ACTOR_MOPEDS\020\033\022\025\n\021ACTOR_MOTOR"
  "CYCLES\020\034\022\'\n#ACTOR_MOTORIZED_MULTITRACK_V"
  "EHICLES\020\035\022*\n&ACTOR_OPERATIONAL_AND_UTILI"
  "TY_VEHICLES\020\036\022\025\n\021ACTOR_PEDESTRIANS\020\037\022#\n\037"
  "ACTOR_PUBLIC_TRANSPORT_VEHICLES\020 \022\032\n\026ACT"
  "OR_RAILROAD_TRAFFIC\020!\022\023\n\017ACTOR_RESIDENTS"
  "\020\"\022\032\n\026ACTOR_SLURRY_TRANSPORT\020#\022\017\n\013ACTOR_"
  "TAXIS\020$\022\022\n\016ACTOR_TRACTORS\020%\022\022\n\016ACTOR_TRA"
  "ILERS\020&\022\017\n\013ACTOR_TRAMS\020\'\022\020\n\014ACTOR_TRUCKS"
  "\020(\022\"\n\036ACTOR_TRUCKS_WITH_SEMITRAILERS\020)\022\036"
  "\n\032ACTOR_TRUCKS_WITH_TRAILERS\020*\022$\n ACTOR_"
  "VEHICLES_WITH_GREEN_BADGES\020+\022\"\n\036ACTOR_VE"
  "HICLES_WITH_RED_BADGES\020,\022%\n!ACTOR_VEHICL"
  "ES_WITH_YELLOW_BADGES\020-\022\"\n\036ACTOR_WATER_P"
  "OLLUTANT_VEHICLES\020.\022\035\n\031ACTOR_WINTER_SPOR"
  "TSPEOPLE\020/\"n\n\013Variability\022\027\n\023VARIABILITY"
  "_UNKNOWN\020\000\022\025\n\021VARIABILITY_OTHER\020\001\022\025\n\021VAR"
  "IABILITY_FIXED\020\002\022\030\n\024VARIABILITY_VARIABLE"
  "\020\003B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5ftrafficsign_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5ftrafficsign_2eproto_sccs[7] = {
  &scc_info_TrafficSign_osi_5ftrafficsign_2eproto.base,
  &scc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto.base,
  &scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto.base,
  &scc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto.base,
  &scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto.base,
  &scc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto.base,
  &scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5ftrafficsign_2eproto_once;
static bool descriptor_table_osi_5ftrafficsign_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5ftrafficsign_2eproto = {
  &descriptor_table_osi_5ftrafficsign_2eproto_initialized, descriptor_table_protodef_osi_5ftrafficsign_2eproto, "osi_trafficsign.proto", 13734,
  &descriptor_table_osi_5ftrafficsign_2eproto_once, descriptor_table_osi_5ftrafficsign_2eproto_sccs, descriptor_table_osi_5ftrafficsign_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_osi_5ftrafficsign_2eproto::offsets,
  file_level_metadata_osi_5ftrafficsign_2eproto, 7, file_level_enum_descriptors_osi_5ftrafficsign_2eproto, file_level_service_descriptors_osi_5ftrafficsign_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5ftrafficsign_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSignValue_Unit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[0];
}
bool TrafficSignValue_Unit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_UNKNOWN;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_OTHER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_NO_UNIT;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER_PER_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MILE_PER_HOUR;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_METER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_KILOMETER;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_FEET;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MILE;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_METRIC_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_LONG_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_SHORT_TON;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_MINUTES;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_DAY;
constexpr TrafficSignValue_Unit TrafficSignValue::UNIT_PERCENTAGE;
constexpr TrafficSignValue_Unit TrafficSignValue::Unit_MIN;
constexpr TrafficSignValue_Unit TrafficSignValue::Unit_MAX;
constexpr int TrafficSignValue::Unit_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_MainSign_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[1];
}
bool TrafficSign_MainSign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNKNOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DANGER_SPOT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ZEBRA_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FLIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_AMPHIBIANS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FALLING_ROCKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_OR_ICE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LOOSE_GRAVEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATERSIDE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CLEARANCE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOVABLE_BRIDGE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_BEFORE_LEFT_NEXT_INTERSECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DOUBLE_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_DOWNWARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HILL_UPWARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNEVEN_ROAD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_SLIPPERY_WET_OR_DIRTY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_WINDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_NARROWING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROAD_WORKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_QUEUES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TWO_WAY_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ATTENTION_TRAFFIC_LIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHILDREN_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CYCLE_ROUTE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEER_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_UNGATED_LEVEL_CROSSING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LEVEL_CROSSING_MARKER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RAILWAY_TRAFFIC_PRIORITY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GIVE_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_TO_OPPOSITE_DIRECTION_UPSIDE_DOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_WAY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_RIGHT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_AND_RIGHT_TURN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_LEFT_TURN_RIGHT_TURN_AND_STRAIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUNDABOUT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PASS_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_OPEN_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSED_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDE_LANE_CLOSING_FOR_TRAFFIC;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TAXI_STAND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SHARED_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_LEFT_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PEDESTRIANS_SEPARATED_RIGHT_ONLY;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLE_ROAD_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUS_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORIZED_MULTITRACK_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BICYCLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTORCYCLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOPEDS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_RIDERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HORSE_CARRIAGES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CATTLE_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_BUSES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CARS_TRAILERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRUCKS_TRAILERS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRACTORS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIANS_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOTOR_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HAZARDOUS_GOODS_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVER_WEIGHT_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_AXLE_OVER_WEIGHT_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_WIDTH_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_HEIGHT_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_VEHICLES_EXCESS_LENGTH_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DO_NOT_ENTER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SNOW_CHAINS_REQUIRED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_WATER_POLLUTANT_VEHICLES_PROHIBITED;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ENVIRONMENTAL_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_U_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRESCRIBED_U_TURN_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_DISTANCE_FOR_TRUCKS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SPEED_LIMIT_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MINIMUM_SPEED_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OVERTAKING_BAN_FOR_TRUCKS_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ALL_RESTRICTIONS_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_STOPPING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NO_PARKING_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_NEXT_INTERSECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_RIGHT_OF_WAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIORITY_OVER_OPPOSITE_DIRECTION_UPSIDE_DOWN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOWN_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAR_PARKING_ZONE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_HALF_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_HALF_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SIDEWALK_PERPENDICULAR_PARKING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_LIVING_STREET_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TUNNEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EMERGENCY_STOPPING_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_HIGHWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_EXPRESSWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NAMED_ROAD_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EXPRESSWAY_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ONEWAY_STREET;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CROSSING_GUARDS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DEADEND_EXCLUDING_DESIGNATED_ACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FIRST_AID_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLICE_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TELEPHONE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FILLING_STATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HOTEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_KIOSK;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOILET;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CHAPEL;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_INFO;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REPAIR_SERVICE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_UNDERPASS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PEDESTRIAN_BRIDGE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CAMPER_PLACE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ADVISORY_SPEED_LIMIT_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PLACE_NAME;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ATTRACTION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_ROUTE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOURIST_AREA;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_NOT_PASSABLE_MOTOR_VEHICLES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SHOULDER_UNSAFE_TRUCKS_TRACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TOLL_ROAD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CUSTOMS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_INTERNATIONAL_BORDER_INFO;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREETLIGHT_RED_BAND;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_INTERCHANGE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_EUROPEAN_ROUTE_NUMBER;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_FEDERAL_HIGHWAY_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PRIMARY_ROAD_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_SECONDARY_ROAD_DIRECTION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_DESIGNATED_ACTORS_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTING_DESIGNATED_ACTORS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_HIGHWAY_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_TO_LOCAL_DESTINATION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_CONSOLIDATED_DIRECTIONS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_STREET_NAME;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_LANE_CONFIG;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTION_PREANNOUNCEMENT_HIGHWAY_ENTRIES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OTHER_ROAD_ANNOUNCEMENT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_ANNOUNCEMENT_TRUCK_STOP;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_PREANNOUNCEMENT_DIRECTIONS;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_EXIT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_HIGHWAY_DISTANCE_BOARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_NUMBERED_DETOUR;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_ROUTING_BOARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_OPTIONAL_DETOUR_ROUTING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ROUTE_RECOMMENDATION_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_LEFT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_TRANSITION_RIGHT;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_END;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_RIGHT_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LEFT_LANE_BEGIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_ANNOUNCE_LANE_CONSOLIDATION;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DETOUR_CITY_BLOCK;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GATE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_POLE_WARNING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_CONE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_MOBILE_LANE_CLOSURE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_REFLECTOR_POST;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_DIRECTIONAL_BOARD_WARNING;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_GUIDING_PLATE_WEDGES;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_PARKING_HAZARD;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::TYPE_TRAFFIC_LIGHT_GREEN_ARROW;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MIN;
constexpr TrafficSign_MainSign_Classification_Type TrafficSign_MainSign_Classification::Type_MAX;
constexpr int TrafficSign_MainSign_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_MainSign_Classification_DirectionScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[2];
}
bool TrafficSign_MainSign_Classification_DirectionScope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_UNKNOWN;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_OTHER;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_NO_DIRECTION;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_RIGHT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DIRECTION_SCOPE_LEFT_RIGHT;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MIN;
constexpr TrafficSign_MainSign_Classification_DirectionScope TrafficSign_MainSign_Classification::DirectionScope_MAX;
constexpr int TrafficSign_MainSign_Classification::DirectionScope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Arrow_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[3];
}
bool TrafficSign_SupplementarySign_Classification_Arrow_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_NO_DIRECTION;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_DIRECT_180_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_TURN_180_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_45_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_135_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_CIRCLE_180_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_0_DEG;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_TO_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_TO_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_LEFT_DRIVE_BACK_TO_TURN_90_DEG_RIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::DIRECTION_KEEP_RIGHT_DRIVE_BACK_TO_TURN_90_DEG_LEFT;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Arrow_Direction TrafficSign_SupplementarySign_Classification_Arrow::Direction_MAX;
constexpr int TrafficSign_SupplementarySign_Classification_Arrow::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[4];
}
bool TrafficSign_SupplementarySign_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_SIGN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TEXT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SPACE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CONSTRAINED_TO;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_EXCEPT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_FOR_DISTANCE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_LEFT_THREE_WAY_SIDEWAYS;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_LEFT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_FOUR_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_BOTTOM_RIGHT_THREE_WAY_SIDEWAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PRIORITY_ROAD_TOP_RIGHT_THREE_WAY_STRAIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_VALID_IN_DISTANCE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_IN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_LEFT_BEND_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RIGHT_BEND_ARROW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ACCIDENT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_FOG;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ROLLING_HIGHWAY_INFORMATION;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SERVICES;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TIME_RANGE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_DISC_TIME_RESTRICTION;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WEIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_WET;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_PARKING_CONSTRAINT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NO_WAITING_SIDE_STRIPES;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_RAIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_SNOW_RAIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_NIGHT;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_STOP_4_WAY;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRUCK;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRACTORS_MAY_BE_PASSED;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_HAZARDOUS;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_TRAILER;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_ZONE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_MOTORCYCLE_ALLOWED;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::TYPE_CAR;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Type TrafficSign_SupplementarySign_Classification::Type_MAX;
constexpr int TrafficSign_SupplementarySign_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_SupplementarySign_Classification_Actor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[5];
}
bool TrafficSign_SupplementarySign_Classification_Actor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_UNKNOWN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OTHER;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_NO_ACTOR;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_AGRICULTURAL_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BICYCLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_BUSES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CAMPERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARAVANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_CARAVANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CARS_WITH_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CATTLE;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CHILDREN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_CONSTRUCTION_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DELIVERY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_DISABLED_PERSONS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EBIKES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_ELECTRIC_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_EMERGENCY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FERRY_USERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_FORESTRY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HAZARDOUS_GOODS_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_CARRIAGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_HORSE_RIDERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_INLINE_SKATERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MEDICAL_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MILITARY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOPEDS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORCYCLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_MOTORIZED_MULTITRACK_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_OPERATIONAL_AND_UTILITY_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PEDESTRIANS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_PUBLIC_TRANSPORT_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RAILROAD_TRAFFIC;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_RESIDENTS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_SLURRY_TRANSPORT;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TAXIS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRACTORS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRAMS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_SEMITRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_TRUCKS_WITH_TRAILERS;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_GREEN_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_RED_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_VEHICLES_WITH_YELLOW_BADGES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WATER_POLLUTANT_VEHICLES;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::ACTOR_WINTER_SPORTSPEOPLE;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MIN;
constexpr TrafficSign_SupplementarySign_Classification_Actor TrafficSign_SupplementarySign_Classification::Actor_MAX;
constexpr int TrafficSign_SupplementarySign_Classification::Actor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficSign_Variability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficsign_2eproto[6];
}
bool TrafficSign_Variability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_UNKNOWN;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_OTHER;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_FIXED;
constexpr TrafficSign_Variability TrafficSign::VARIABILITY_VARIABLE;
constexpr TrafficSign_Variability TrafficSign::Variability_MIN;
constexpr TrafficSign_Variability TrafficSign::Variability_MAX;
constexpr int TrafficSign::Variability_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrafficSignValue::InitAsDefaultInstance() {
}
class TrafficSignValue::_Internal {
 public:
};

TrafficSignValue::TrafficSignValue()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSignValue)
}
TrafficSignValue::TrafficSignValue(const TrafficSignValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.text().empty()) {
    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_unit_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSignValue)
}

void TrafficSignValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto.base);
  text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
}

TrafficSignValue::~TrafficSignValue() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSignValue)
  SharedDtor();
}

void TrafficSignValue::SharedDtor() {
  text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSignValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSignValue& TrafficSignValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto.base);
  return *internal_default_instance();
}


void TrafficSignValue::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSignValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_unit_) -
      reinterpret_cast<char*>(&value_)) + sizeof(value_unit_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSignValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSignValue.Unit value_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_value_unit(static_cast<::osi3::TrafficSignValue_Unit>(val));
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_text(), ptr, ctx, "osi3.TrafficSignValue.text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSignValue::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSignValue)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSignValue.Unit value_unit = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value_unit(static_cast< ::osi3::TrafficSignValue_Unit >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string text = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->text().data(), static_cast<int>(this->text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSignValue.text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSignValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSignValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSignValue::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSignValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // .osi3.TrafficSignValue.Unit value_unit = 2;
  if (this->value_unit() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->value_unit(), output);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSignValue.text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSignValue)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSignValue::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSignValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // .osi3.TrafficSignValue.Unit value_unit = 2;
  if (this->value_unit() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->value_unit(), target);
  }

  // string text = 3;
  if (this->text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->text().data(), static_cast<int>(this->text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSignValue.text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSignValue)
  return target;
}

size_t TrafficSignValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSignValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 3;
  if (this->text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->text());
  }

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.TrafficSignValue.Unit value_unit = 2;
  if (this->value_unit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->value_unit());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSignValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSignValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSignValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSignValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSignValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSignValue)
    MergeFrom(*source);
  }
}

void TrafficSignValue::MergeFrom(const TrafficSignValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSignValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.text().size() > 0) {

    text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.value_unit() != 0) {
    set_value_unit(from.value_unit());
  }
}

void TrafficSignValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSignValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSignValue::CopyFrom(const TrafficSignValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSignValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSignValue::IsInitialized() const {
  return true;
}

void TrafficSignValue::InternalSwap(TrafficSignValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  text_.Swap(&other->text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(value_unit_, other->value_unit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSignValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSign_MainSign_Classification::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_MainSign_Classification_default_instance_._instance.get_mutable()->value_ = const_cast< ::osi3::TrafficSignValue*>(
      ::osi3::TrafficSignValue::internal_default_instance());
}
class TrafficSign_MainSign_Classification::_Internal {
 public:
  static const ::osi3::TrafficSignValue& value(const TrafficSign_MainSign_Classification* msg);
};

const ::osi3::TrafficSignValue&
TrafficSign_MainSign_Classification::_Internal::value(const TrafficSign_MainSign_Classification* msg) {
  return *msg->value_;
}
void TrafficSign_MainSign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void TrafficSign_MainSign_Classification::clear_logical_lane_assignment() {
  logical_lane_assignment_.Clear();
}
TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.MainSign.Classification)
}
TrafficSign_MainSign_Classification::TrafficSign_MainSign_Classification(const TrafficSign_MainSign_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assigned_lane_id_(from.assigned_lane_id_),
      logical_lane_assignment_(from.logical_lane_assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.country_revision().empty()) {
    country_revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_revision_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sub_code().empty()) {
    sub_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_code_);
  }
  if (from.has_value()) {
    value_ = new ::osi3::TrafficSignValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&variability_, &from.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign.Classification)
}

void TrafficSign_MainSign_Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto.base);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&value_)) + sizeof(is_out_of_service_));
}

TrafficSign_MainSign_Classification::~TrafficSign_MainSign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign.Classification)
  SharedDtor();
}

void TrafficSign_MainSign_Classification::SharedDtor() {
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void TrafficSign_MainSign_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSign_MainSign_Classification& TrafficSign_MainSign_Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto.base);
  return *internal_default_instance();
}


void TrafficSign_MainSign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  logical_lane_assignment_.Clear();
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&variability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSign_MainSign_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.TrafficSign.Variability variability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_variability(static_cast<::osi3::TrafficSign_Variability>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::TrafficSign_MainSign_Classification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSignValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_direction_scope(static_cast<::osi3::TrafficSign_MainSign_Classification_DirectionScope>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // bool vertically_mirrored = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          vertically_mirrored_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_country(), ptr, ctx, "osi3.TrafficSign.MainSign.Classification.country");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_country_revision(), ptr, ctx, "osi3.TrafficSign.MainSign.Classification.country_revision");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code(), ptr, ctx, "osi3.TrafficSign.MainSign.Classification.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sub_code(), ptr, ctx, "osi3.TrafficSign.MainSign.Classification.sub_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSign_MainSign_Classification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.MainSign.Classification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.TrafficSign.Variability variability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_variability(static_cast< ::osi3::TrafficSign_Variability >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSignValue value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction_scope(static_cast< ::osi3::TrafficSign_MainSign_Classification_DirectionScope >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vertically_mirrored = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vertically_mirrored_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), static_cast<int>(this->country().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.MainSign.Classification.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country_revision = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country_revision()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->country_revision().data(), static_cast<int>(this->country_revision().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.MainSign.Classification.country_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.MainSign.Classification.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_code = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sub_code().data(), static_cast<int>(this->sub_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.MainSign.Classification.sub_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.MainSign.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.MainSign.Classification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSign_MainSign_Classification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.MainSign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->variability(), output);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .osi3.TrafficSignValue value = 3;
  if (this->has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::value(this), output);
  }

  // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (this->direction_scope() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->direction_scope(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->assigned_lane_id(static_cast<int>(i)),
      output);
  }

  // bool vertically_mirrored = 6;
  if (this->vertically_mirrored() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->vertically_mirrored(), output);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_out_of_service(), output);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country_revision().data(), static_cast<int>(this->country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country_revision");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->country_revision(), output);
  }

  // string code = 10;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->code(), output);
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_code().data(), static_cast<int>(this->sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.sub_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sub_code(), output);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->logical_lane_assignment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.MainSign.Classification)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_MainSign_Classification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->variability(), target);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .osi3.TrafficSignValue value = 3;
  if (this->has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::value(this), target);
  }

  // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (this->direction_scope() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->direction_scope(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->assigned_lane_id(static_cast<int>(i)), target);
  }

  // bool vertically_mirrored = 6;
  if (this->vertically_mirrored() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->vertically_mirrored(), target);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_out_of_service(), target);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country_revision().data(), static_cast<int>(this->country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.country_revision");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->country_revision(), target);
  }

  // string code = 10;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->code(), target);
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_code().data(), static_cast<int>(this->sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.Classification.sub_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->sub_code(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->logical_lane_assignment(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign.Classification)
  return target;
}

size_t TrafficSign_MainSign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign.Classification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_assignment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane_assignment(static_cast<int>(i)));
    }
  }

  // string country = 8;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->country_revision());
  }

  // string code = 10;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sub_code());
  }

  // .osi3.TrafficSignValue value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->variability());
  }

  // .osi3.TrafficSign.MainSign.Classification.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.TrafficSign.MainSign.Classification.DirectionScope direction_scope = 4;
  if (this->direction_scope() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->direction_scope());
  }

  // bool vertically_mirrored = 6;
  if (this->vertically_mirrored() != 0) {
    total_size += 1 + 1;
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_MainSign_Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.MainSign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_MainSign_Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSign_MainSign_Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.MainSign.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.MainSign.Classification)
    MergeFrom(*source);
  }
}

void TrafficSign_MainSign_Classification::MergeFrom(const TrafficSign_MainSign_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  logical_lane_assignment_.MergeFrom(from.logical_lane_assignment_);
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.country_revision().size() > 0) {

    country_revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_revision_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.sub_code().size() > 0) {

    sub_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_code_);
  }
  if (from.has_value()) {
    mutable_value()->::osi3::TrafficSignValue::MergeFrom(from.value());
  }
  if (from.variability() != 0) {
    set_variability(from.variability());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.direction_scope() != 0) {
    set_direction_scope(from.direction_scope());
  }
  if (from.vertically_mirrored() != 0) {
    set_vertically_mirrored(from.vertically_mirrored());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void TrafficSign_MainSign_Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.MainSign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_MainSign_Classification::CopyFrom(const TrafficSign_MainSign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign_Classification::InternalSwap(TrafficSign_MainSign_Classification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&assigned_lane_id_)->InternalSwap(CastToBase(&other->assigned_lane_id_));
  CastToBase(&logical_lane_assignment_)->InternalSwap(CastToBase(&other->logical_lane_assignment_));
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_revision_.Swap(&other->country_revision_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_code_.Swap(&other->sub_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(variability_, other->variability_);
  swap(type_, other->type_);
  swap(direction_scope_, other->direction_scope_);
  swap(vertically_mirrored_, other->vertically_mirrored_);
  swap(is_out_of_service_, other->is_out_of_service_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_MainSign_Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSign_MainSign::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_MainSign_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_TrafficSign_MainSign_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficSign_MainSign_Classification*>(
      ::osi3::TrafficSign_MainSign_Classification::internal_default_instance());
}
class TrafficSign_MainSign::_Internal {
 public:
  static const ::osi3::BaseStationary& base(const TrafficSign_MainSign* msg);
  static const ::osi3::TrafficSign_MainSign_Classification& classification(const TrafficSign_MainSign* msg);
};

const ::osi3::BaseStationary&
TrafficSign_MainSign::_Internal::base(const TrafficSign_MainSign* msg) {
  return *msg->base_;
}
const ::osi3::TrafficSign_MainSign_Classification&
TrafficSign_MainSign::_Internal::classification(const TrafficSign_MainSign* msg) {
  return *msg->classification_;
}
void TrafficSign_MainSign::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
TrafficSign_MainSign::TrafficSign_MainSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.MainSign)
}
TrafficSign_MainSign::TrafficSign_MainSign(const TrafficSign_MainSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_reference().empty()) {
    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficSign_MainSign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.MainSign)
}

void TrafficSign_MainSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto.base);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&base_)) + sizeof(classification_));
}

TrafficSign_MainSign::~TrafficSign_MainSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.MainSign)
  SharedDtor();
}

void TrafficSign_MainSign::SharedDtor() {
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void TrafficSign_MainSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSign_MainSign& TrafficSign_MainSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSign_MainSign_osi_5ftrafficsign_2eproto.base);
  return *internal_default_instance();
}


void TrafficSign_MainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.MainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSign_MainSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.BaseStationary base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_reference(), ptr, ctx, "osi3.TrafficSign.MainSign.model_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSign_MainSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.MainSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.BaseStationary base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.MainSign.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.MainSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.MainSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSign_MainSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.MainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  // string model_reference = 3;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.model_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.MainSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_MainSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.MainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  // string model_reference = 3;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.MainSign.model_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->model_reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.MainSign)
  return target;
}

size_t TrafficSign_MainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.MainSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_reference = 3;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_MainSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.MainSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_MainSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSign_MainSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.MainSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.MainSign)
    MergeFrom(*source);
  }
}

void TrafficSign_MainSign::MergeFrom(const TrafficSign_MainSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.MainSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficSign_MainSign_Classification::MergeFrom(from.classification());
  }
}

void TrafficSign_MainSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.MainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_MainSign::CopyFrom(const TrafficSign_MainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.MainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_MainSign::IsInitialized() const {
  return true;
}

void TrafficSign_MainSign::InternalSwap(TrafficSign_MainSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_reference_.Swap(&other->model_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
  swap(classification_, other->classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_MainSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSign_SupplementarySign_Classification_Arrow::InitAsDefaultInstance() {
}
class TrafficSign_SupplementarySign_Classification_Arrow::_Internal {
 public:
};

void TrafficSign_SupplementarySign_Classification_Arrow::clear_lane_id() {
  lane_id_.Clear();
}
TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}
TrafficSign_SupplementarySign_Classification_Arrow::TrafficSign_SupplementarySign_Classification_Arrow(const TrafficSign_SupplementarySign_Classification_Arrow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      lane_id_(from.lane_id_),
      direction_(from.direction_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}

void TrafficSign_SupplementarySign_Classification_Arrow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto.base);
}

TrafficSign_SupplementarySign_Classification_Arrow::~TrafficSign_SupplementarySign_Classification_Arrow() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  SharedDtor();
}

void TrafficSign_SupplementarySign_Classification_Arrow::SharedDtor() {
}

void TrafficSign_SupplementarySign_Classification_Arrow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSign_SupplementarySign_Classification_Arrow& TrafficSign_SupplementarySign_Classification_Arrow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSign_SupplementarySign_Classification_Arrow_osi_5ftrafficsign_2eproto.base);
  return *internal_default_instance();
}


void TrafficSign_SupplementarySign_Classification_Arrow::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lane_id_.Clear();
  direction_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSign_SupplementarySign_Classification_Arrow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.Identifier lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_direction(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_direction(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSign_SupplementarySign_Classification_Arrow::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.Identifier lane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_direction(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_direction(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow_Direction >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSign_SupplementarySign_Classification_Arrow::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lane_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  if (this->direction_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_direction_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->direction_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->direction(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_SupplementarySign_Classification_Arrow::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lane_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  if (this->direction_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _direction_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->direction_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification_Arrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier lane_id = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow.Direction direction = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->direction_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->direction(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _direction_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_SupplementarySign_Classification_Arrow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySign_Classification_Arrow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSign_SupplementarySign_Classification_Arrow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySign_Classification_Arrow::MergeFrom(const TrafficSign_SupplementarySign_Classification_Arrow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lane_id_.MergeFrom(from.lane_id_);
  direction_.MergeFrom(from.direction_);
}

void TrafficSign_SupplementarySign_Classification_Arrow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySign_Classification_Arrow::CopyFrom(const TrafficSign_SupplementarySign_Classification_Arrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification.Arrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification_Arrow::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification_Arrow::InternalSwap(TrafficSign_SupplementarySign_Classification_Arrow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&lane_id_)->InternalSwap(CastToBase(&other->lane_id_));
  direction_.InternalSwap(&other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign_Classification_Arrow::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSign_SupplementarySign_Classification::InitAsDefaultInstance() {
}
class TrafficSign_SupplementarySign_Classification::_Internal {
 public:
};

void TrafficSign_SupplementarySign_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void TrafficSign_SupplementarySign_Classification::clear_logical_lane_assignment() {
  logical_lane_assignment_.Clear();
}
TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.SupplementarySign.Classification)
}
TrafficSign_SupplementarySign_Classification::TrafficSign_SupplementarySign_Classification(const TrafficSign_SupplementarySign_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_(from.value_),
      assigned_lane_id_(from.assigned_lane_id_),
      actor_(from.actor_),
      arrow_(from.arrow_),
      logical_lane_assignment_(from.logical_lane_assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.country_revision().empty()) {
    country_revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_revision_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sub_code().empty()) {
    sub_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_code_);
  }
  ::memcpy(&variability_, &from.variability_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign.Classification)
}

void TrafficSign_SupplementarySign_Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto.base);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&variability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
}

TrafficSign_SupplementarySign_Classification::~TrafficSign_SupplementarySign_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign.Classification)
  SharedDtor();
}

void TrafficSign_SupplementarySign_Classification::SharedDtor() {
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficSign_SupplementarySign_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSign_SupplementarySign_Classification& TrafficSign_SupplementarySign_Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto.base);
  return *internal_default_instance();
}


void TrafficSign_SupplementarySign_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  assigned_lane_id_.Clear();
  actor_.Clear();
  arrow_.Clear();
  logical_lane_assignment_.Clear();
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&variability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&variability_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSign_SupplementarySign_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.TrafficSign.Variability variability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_variability(static_cast<::osi3::TrafficSign_Variability>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Type>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSignValue value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_actor(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_actor(static_cast<::osi3::TrafficSign_SupplementarySign_Classification_Actor>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_arrow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_country(), ptr, ctx, "osi3.TrafficSign.SupplementarySign.Classification.country");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_country_revision(), ptr, ctx, "osi3.TrafficSign.SupplementarySign.Classification.country_revision");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code(), ptr, ctx, "osi3.TrafficSign.SupplementarySign.Classification.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sub_code(), ptr, ctx, "osi3.TrafficSign.SupplementarySign.Classification.sub_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSign_SupplementarySign_Classification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.SupplementarySign.Classification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.TrafficSign.Variability variability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_variability(static_cast< ::osi3::TrafficSign_Variability >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSignValue value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_actor(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Actor >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_actor(static_cast< ::osi3::TrafficSign_SupplementarySign_Classification_Actor >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_arrow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), static_cast<int>(this->country().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.SupplementarySign.Classification.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country_revision = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country_revision()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->country_revision().data(), static_cast<int>(this->country_revision().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.SupplementarySign.Classification.country_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.SupplementarySign.Classification.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_code = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sub_code().data(), static_cast<int>(this->sub_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.SupplementarySign.Classification.sub_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.SupplementarySign.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.SupplementarySign.Classification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSign_SupplementarySign_Classification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->variability(), output);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // repeated .osi3.TrafficSignValue value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->value(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->assigned_lane_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  if (this->actor_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_actor_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->actor_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->actor(i), output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arrow_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->arrow(static_cast<int>(i)),
      output);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_out_of_service(), output);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country_revision().data(), static_cast<int>(this->country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country_revision");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->country_revision(), output);
  }

  // string code = 10;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->code(), output);
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_code().data(), static_cast<int>(this->sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.sub_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sub_code(), output);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->logical_lane_assignment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.SupplementarySign.Classification)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_SupplementarySign_Classification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->variability(), target);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // repeated .osi3.TrafficSignValue value = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->value_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->value(static_cast<int>(i)), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->assigned_lane_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  if (this->actor_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _actor_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->actor_, target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->arrow_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->arrow(static_cast<int>(i)), target);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_out_of_service(), target);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country_revision().data(), static_cast<int>(this->country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.country_revision");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->country_revision(), target);
  }

  // string code = 10;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->code(), target);
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_code().data(), static_cast<int>(this->sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.Classification.sub_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->sub_code(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->logical_lane_assignment(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign.Classification)
  return target;
}

size_t TrafficSign_SupplementarySign_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign.Classification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.TrafficSignValue value = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->value_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->value(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier assigned_lane_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Actor actor = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->actor_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->actor(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _actor_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .osi3.TrafficSign.SupplementarySign.Classification.Arrow arrow = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->arrow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->arrow(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_assignment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane_assignment(static_cast<int>(i)));
    }
  }

  // string country = 8;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->country_revision());
  }

  // string code = 10;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sub_code());
  }

  // .osi3.TrafficSign.Variability variability = 1;
  if (this->variability() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->variability());
  }

  // .osi3.TrafficSign.SupplementarySign.Classification.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_SupplementarySign_Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySign_Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSign_SupplementarySign_Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.SupplementarySign.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.SupplementarySign.Classification)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySign_Classification::MergeFrom(const TrafficSign_SupplementarySign_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  actor_.MergeFrom(from.actor_);
  arrow_.MergeFrom(from.arrow_);
  logical_lane_assignment_.MergeFrom(from.logical_lane_assignment_);
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.country_revision().size() > 0) {

    country_revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_revision_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.sub_code().size() > 0) {

    sub_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_code_);
  }
  if (from.variability() != 0) {
    set_variability(from.variability());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void TrafficSign_SupplementarySign_Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySign_Classification::CopyFrom(const TrafficSign_SupplementarySign_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign_Classification::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign_Classification::InternalSwap(TrafficSign_SupplementarySign_Classification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&value_)->InternalSwap(CastToBase(&other->value_));
  CastToBase(&assigned_lane_id_)->InternalSwap(CastToBase(&other->assigned_lane_id_));
  actor_.InternalSwap(&other->actor_);
  CastToBase(&arrow_)->InternalSwap(CastToBase(&other->arrow_));
  CastToBase(&logical_lane_assignment_)->InternalSwap(CastToBase(&other->logical_lane_assignment_));
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_revision_.Swap(&other->country_revision_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_code_.Swap(&other->sub_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(variability_, other->variability_);
  swap(type_, other->type_);
  swap(is_out_of_service_, other->is_out_of_service_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign_Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSign_SupplementarySign::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_SupplementarySign_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_TrafficSign_SupplementarySign_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficSign_SupplementarySign_Classification*>(
      ::osi3::TrafficSign_SupplementarySign_Classification::internal_default_instance());
}
class TrafficSign_SupplementarySign::_Internal {
 public:
  static const ::osi3::BaseStationary& base(const TrafficSign_SupplementarySign* msg);
  static const ::osi3::TrafficSign_SupplementarySign_Classification& classification(const TrafficSign_SupplementarySign* msg);
};

const ::osi3::BaseStationary&
TrafficSign_SupplementarySign::_Internal::base(const TrafficSign_SupplementarySign* msg) {
  return *msg->base_;
}
const ::osi3::TrafficSign_SupplementarySign_Classification&
TrafficSign_SupplementarySign::_Internal::classification(const TrafficSign_SupplementarySign* msg) {
  return *msg->classification_;
}
void TrafficSign_SupplementarySign::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
TrafficSign_SupplementarySign::TrafficSign_SupplementarySign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign.SupplementarySign)
}
TrafficSign_SupplementarySign::TrafficSign_SupplementarySign(const TrafficSign_SupplementarySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_reference().empty()) {
    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficSign_SupplementarySign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign.SupplementarySign)
}

void TrafficSign_SupplementarySign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto.base);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&base_)) + sizeof(classification_));
}

TrafficSign_SupplementarySign::~TrafficSign_SupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign.SupplementarySign)
  SharedDtor();
}

void TrafficSign_SupplementarySign::SharedDtor() {
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
}

void TrafficSign_SupplementarySign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSign_SupplementarySign& TrafficSign_SupplementarySign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSign_SupplementarySign_osi_5ftrafficsign_2eproto.base);
  return *internal_default_instance();
}


void TrafficSign_SupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign.SupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSign_SupplementarySign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.BaseStationary base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_reference(), ptr, ctx, "osi3.TrafficSign.SupplementarySign.model_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSign_SupplementarySign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign.SupplementarySign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.BaseStationary base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficSign.SupplementarySign.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign.SupplementarySign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign.SupplementarySign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSign_SupplementarySign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign.SupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  // string model_reference = 3;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.model_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model_reference(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign.SupplementarySign)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign_SupplementarySign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign.SupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  // string model_reference = 3;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficSign.SupplementarySign.model_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->model_reference(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign.SupplementarySign)
  return target;
}

size_t TrafficSign_SupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign.SupplementarySign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_reference = 3;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.BaseStationary base = 1;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign_SupplementarySign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign.SupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign_SupplementarySign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSign_SupplementarySign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign.SupplementarySign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign.SupplementarySign)
    MergeFrom(*source);
  }
}

void TrafficSign_SupplementarySign::MergeFrom(const TrafficSign_SupplementarySign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign.SupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficSign_SupplementarySign_Classification::MergeFrom(from.classification());
  }
}

void TrafficSign_SupplementarySign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign.SupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign_SupplementarySign::CopyFrom(const TrafficSign_SupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign.SupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign_SupplementarySign::IsInitialized() const {
  return true;
}

void TrafficSign_SupplementarySign::InternalSwap(TrafficSign_SupplementarySign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_reference_.Swap(&other->model_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_, other->base_);
  swap(classification_, other->classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign_SupplementarySign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficSign::InitAsDefaultInstance() {
  ::osi3::_TrafficSign_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_TrafficSign_default_instance_._instance.get_mutable()->main_sign_ = const_cast< ::osi3::TrafficSign_MainSign*>(
      ::osi3::TrafficSign_MainSign::internal_default_instance());
}
class TrafficSign::_Internal {
 public:
  static const ::osi3::Identifier& id(const TrafficSign* msg);
  static const ::osi3::TrafficSign_MainSign& main_sign(const TrafficSign* msg);
};

const ::osi3::Identifier&
TrafficSign::_Internal::id(const TrafficSign* msg) {
  return *msg->id_;
}
const ::osi3::TrafficSign_MainSign&
TrafficSign::_Internal::main_sign(const TrafficSign* msg) {
  return *msg->main_sign_;
}
void TrafficSign::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void TrafficSign::clear_source_reference() {
  source_reference_.Clear();
}
TrafficSign::TrafficSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficSign)
}
TrafficSign::TrafficSign(const TrafficSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      supplementary_sign_(from.supplementary_sign_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_main_sign()) {
    main_sign_ = new ::osi3::TrafficSign_MainSign(*from.main_sign_);
  } else {
    main_sign_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficSign)
}

void TrafficSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficSign_osi_5ftrafficsign_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_sign_) -
      reinterpret_cast<char*>(&id_)) + sizeof(main_sign_));
}

TrafficSign::~TrafficSign() {
  // @@protoc_insertion_point(destructor:osi3.TrafficSign)
  SharedDtor();
}

void TrafficSign::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete main_sign_;
}

void TrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficSign& TrafficSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficSign_osi_5ftrafficsign_2eproto.base);
  return *internal_default_instance();
}


void TrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplementary_sign_.Clear();
  source_reference_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && main_sign_ != nullptr) {
    delete main_sign_;
  }
  main_sign_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.MainSign main_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_main_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_supplementary_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign main_sign = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_main_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_supplementary_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // .osi3.TrafficSign.MainSign main_sign = 2;
  if (this->has_main_sign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::main_sign(this), output);
  }

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->supplementary_sign(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // .osi3.TrafficSign.MainSign main_sign = 2;
  if (this->has_main_sign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::main_sign(this), target);
  }

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->supplementary_sign(static_cast<int>(i)), target);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->source_reference(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficSign)
  return target;
}

size_t TrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.TrafficSign.SupplementarySign supplementary_sign = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->supplementary_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->supplementary_sign(static_cast<int>(i)));
    }
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.TrafficSign.MainSign main_sign = 2;
  if (this->has_main_sign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *main_sign_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficSign)
    MergeFrom(*source);
  }
}

void TrafficSign::MergeFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplementary_sign_.MergeFrom(from.supplementary_sign_);
  source_reference_.MergeFrom(from.source_reference_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_main_sign()) {
    mutable_main_sign()->::osi3::TrafficSign_MainSign::MergeFrom(from.main_sign());
  }
}

void TrafficSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficSign::CopyFrom(const TrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficSign::IsInitialized() const {
  return true;
}

void TrafficSign::InternalSwap(TrafficSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&supplementary_sign_)->InternalSwap(CastToBase(&other->supplementary_sign_));
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  swap(id_, other->id_);
  swap(main_sign_, other->main_sign_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficSign::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::TrafficSignValue* Arena::CreateMaybeMessage< ::osi3::TrafficSignValue >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficSignValue >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_MainSign_Classification* Arena::CreateMaybeMessage< ::osi3::TrafficSign_MainSign_Classification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficSign_MainSign_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_MainSign* Arena::CreateMaybeMessage< ::osi3::TrafficSign_MainSign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficSign_MainSign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign_Classification_Arrow* Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficSign_SupplementarySign_Classification_Arrow >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign_Classification* Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign_Classification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficSign_SupplementarySign_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign_SupplementarySign* Arena::CreateMaybeMessage< ::osi3::TrafficSign_SupplementarySign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficSign_SupplementarySign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficSign* Arena::CreateMaybeMessage< ::osi3::TrafficSign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficSign >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
