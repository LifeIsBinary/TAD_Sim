// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensordata.proto
#pragma warning (disable : 4125)

#include "osi_sensordata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseMoving_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensordata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedEntityHeader_osi_5fsensordata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedlane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectedLane_osi_5fdetectedlane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedlane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedoccupant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectedOccupant_osi_5fdetectedoccupant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedroadmarking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DetectedRoadMarking_osi_5fdetectedroadmarking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficlight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FeatureData_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicaldetectiondata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MountingPosition_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorview_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_SensorView_osi_5fsensorview_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
namespace osi3 {
class DetectedEntityHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedEntityHeader> _instance;
} _DetectedEntityHeader_default_instance_;
class SensorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorData> _instance;
} _SensorData_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_DetectedEntityHeader_osi_5fsensordata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedEntityHeader_default_instance_;
    new (ptr) ::osi3::DetectedEntityHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedEntityHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedEntityHeader_osi_5fsensordata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedEntityHeader_osi_5fsensordata_2eproto}, {
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_SensorData_osi_5fsensordata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_SensorData_default_instance_;
    new (ptr) ::osi3::SensorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::SensorData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_SensorData_osi_5fsensordata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 17, InitDefaultsscc_info_SensorData_osi_5fsensordata_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_BaseMoving_osi_5fcommon_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,
      &scc_info_SensorView_osi_5fsensorview_2eproto.base,
      &scc_info_DetectedEntityHeader_osi_5fsensordata_2eproto.base,
      &scc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto.base,
      &scc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto.base,
      &scc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto.base,
      &scc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto.base,
      &scc_info_DetectedRoadMarking_osi_5fdetectedroadmarking_2eproto.base,
      &scc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto.base,
      &scc_info_DetectedLane_osi_5fdetectedlane_2eproto.base,
      &scc_info_DetectedOccupant_osi_5fdetectedoccupant_2eproto.base,
      &scc_info_FeatureData_osi_5ffeaturedata_2eproto.base,
      &scc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fsensordata_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fsensordata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fsensordata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fsensordata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, cycle_counter_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedEntityHeader, data_qualifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, host_vehicle_location_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, host_vehicle_location_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, sensor_view_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, last_measurement_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, stationary_object_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, stationary_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, moving_object_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, moving_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_sign_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_light_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, road_marking_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, road_marking_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_boundary_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_boundary_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, occupant_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, occupant_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, feature_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorData, logical_detection_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::DetectedEntityHeader)},
  { 8, -1, sizeof(::osi3::SensorData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedEntityHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SensorData_default_instance_),
};

const char descriptor_table_protodef_osi_5fsensordata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024osi_sensordata.proto\022\004osi3\032\021osi_versio"
  "n.proto\032\020osi_common.proto\032\035osi_detectedt"
  "rafficsign.proto\032\036osi_detectedtrafficlig"
  "ht.proto\032\035osi_detectedroadmarking.proto\032"
  "\026osi_detectedlane.proto\032\030osi_detectedobj"
  "ect.proto\032\032osi_detectedoccupant.proto\032\024o"
  "si_sensorview.proto\032\025osi_featuredata.pro"
  "to\032\036osi_logicaldetectiondata.proto\"\216\003\n\024D"
  "etectedEntityHeader\022)\n\020measurement_time\030"
  "\001 \001(\0132\017.osi3.Timestamp\022\025\n\rcycle_counter\030"
  "\002 \001(\004\022@\n\016data_qualifier\030\003 \001(\0162(.osi3.Det"
  "ectedEntityHeader.DataQualifier\"\361\001\n\rData"
  "Qualifier\022\032\n\026DATA_QUALIFIER_UNKNOWN\020\000\022\030\n"
  "\024DATA_QUALIFIER_OTHER\020\001\022\034\n\030DATA_QUALIFIE"
  "R_AVAILABLE\020\002\022$\n DATA_QUALIFIER_AVAILABL"
  "E_REDUCED\020\003\022 \n\034DATA_QUALIFIER_NOT_AVAILA"
  "BLE\020\004\022\034\n\030DATA_QUALIFIER_BLINDNESS\020\005\022&\n\"D"
  "ATA_QUALIFIER_TEMPORARY_AVAILABLE\020\006\"\322\n\n\n"
  "SensorData\022\'\n\007version\030\001 \001(\0132\026.osi3.Inter"
  "faceVersion\022\"\n\ttimestamp\030\002 \001(\0132\017.osi3.Ti"
  "mestamp\022/\n\025host_vehicle_location\030\003 \001(\0132\020"
  ".osi3.BaseMoving\0224\n\032host_vehicle_locatio"
  "n_rmse\030\004 \001(\0132\020.osi3.BaseMoving\022#\n\tsensor"
  "_id\030\005 \001(\0132\020.osi3.Identifier\0221\n\021mounting_"
  "position\030\006 \001(\0132\026.osi3.MountingPosition\0226"
  "\n\026mounting_position_rmse\030\007 \001(\0132\026.osi3.Mo"
  "untingPosition\022%\n\013sensor_view\030\010 \003(\0132\020.os"
  "i3.SensorView\022.\n\025last_measurement_time\030\t"
  " \001(\0132\017.osi3.Timestamp\022<\n\030stationary_obje"
  "ct_header\030\n \001(\0132\032.osi3.DetectedEntityHea"
  "der\0229\n\021stationary_object\030\013 \003(\0132\036.osi3.De"
  "tectedStationaryObject\0228\n\024moving_object_"
  "header\030\014 \001(\0132\032.osi3.DetectedEntityHeader"
  "\0221\n\rmoving_object\030\r \003(\0132\032.osi3.DetectedM"
  "ovingObject\0227\n\023traffic_sign_header\030\016 \001(\013"
  "2\032.osi3.DetectedEntityHeader\022/\n\014traffic_"
  "sign\030\017 \003(\0132\031.osi3.DetectedTrafficSign\0228\n"
  "\024traffic_light_header\030\020 \001(\0132\032.osi3.Detec"
  "tedEntityHeader\0221\n\rtraffic_light\030\021 \003(\0132\032"
  ".osi3.DetectedTrafficLight\0227\n\023road_marki"
  "ng_header\030\022 \001(\0132\032.osi3.DetectedEntityHea"
  "der\022/\n\014road_marking\030\023 \003(\0132\031.osi3.Detecte"
  "dRoadMarking\0228\n\024lane_boundary_header\030\024 \001"
  "(\0132\032.osi3.DetectedEntityHeader\0221\n\rlane_b"
  "oundary\030\025 \003(\0132\032.osi3.DetectedLaneBoundar"
  "y\022/\n\013lane_header\030\026 \001(\0132\032.osi3.DetectedEn"
  "tityHeader\022 \n\004lane\030\027 \003(\0132\022.osi3.Detected"
  "Lane\0223\n\017occupant_header\030\030 \001(\0132\032.osi3.Det"
  "ectedEntityHeader\022(\n\010occupant\030\031 \003(\0132\026.os"
  "i3.DetectedOccupant\022\'\n\014feature_data\030\032 \001("
  "\0132\021.osi3.FeatureData\022:\n\026logical_detectio"
  "n_data\030\033 \001(\0132\032.osi3.LogicalDetectionData"
  "B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fsensordata_2eproto_deps[11] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedlane_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5fdetectedoccupant_2eproto,
  &::descriptor_table_osi_5fdetectedroadmarking_2eproto,
  &::descriptor_table_osi_5fdetectedtrafficlight_2eproto,
  &::descriptor_table_osi_5fdetectedtrafficsign_2eproto,
  &::descriptor_table_osi_5ffeaturedata_2eproto,
  &::descriptor_table_osi_5flogicaldetectiondata_2eproto,
  &::descriptor_table_osi_5fsensorview_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fsensordata_2eproto_sccs[2] = {
  &scc_info_DetectedEntityHeader_osi_5fsensordata_2eproto.base,
  &scc_info_SensorData_osi_5fsensordata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fsensordata_2eproto_once;
static bool descriptor_table_osi_5fsensordata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fsensordata_2eproto = {
  &descriptor_table_osi_5fsensordata_2eproto_initialized, descriptor_table_protodef_osi_5fsensordata_2eproto, "osi_sensordata.proto", 2092,
  &descriptor_table_osi_5fsensordata_2eproto_once, descriptor_table_osi_5fsensordata_2eproto_sccs, descriptor_table_osi_5fsensordata_2eproto_deps, 2, 11,
  schemas, file_default_instances, TableStruct_osi_5fsensordata_2eproto::offsets,
  file_level_metadata_osi_5fsensordata_2eproto, 2, file_level_enum_descriptors_osi_5fsensordata_2eproto, file_level_service_descriptors_osi_5fsensordata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fsensordata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fsensordata_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedEntityHeader_DataQualifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fsensordata_2eproto);
  return file_level_enum_descriptors_osi_5fsensordata_2eproto[0];
}
bool DetectedEntityHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_UNKNOWN;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_OTHER;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_NOT_AVAILABLE;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_BLINDNESS;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MIN;
constexpr DetectedEntityHeader_DataQualifier DetectedEntityHeader::DataQualifier_MAX;
constexpr int DetectedEntityHeader::DataQualifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DetectedEntityHeader::InitAsDefaultInstance() {
  ::osi3::_DetectedEntityHeader_default_instance_._instance.get_mutable()->measurement_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
}
class DetectedEntityHeader::_Internal {
 public:
  static const ::osi3::Timestamp& measurement_time(const DetectedEntityHeader* msg);
};

const ::osi3::Timestamp&
DetectedEntityHeader::_Internal::measurement_time(const DetectedEntityHeader* msg) {
  return *msg->measurement_time_;
}
void DetectedEntityHeader::clear_measurement_time() {
  if (GetArenaNoVirtual() == nullptr && measurement_time_ != nullptr) {
    delete measurement_time_;
  }
  measurement_time_ = nullptr;
}
DetectedEntityHeader::DetectedEntityHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedEntityHeader)
}
DetectedEntityHeader::DetectedEntityHeader(const DetectedEntityHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_measurement_time()) {
    measurement_time_ = new ::osi3::Timestamp(*from.measurement_time_);
  } else {
    measurement_time_ = nullptr;
  }
  ::memcpy(&cycle_counter_, &from.cycle_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_qualifier_) -
    reinterpret_cast<char*>(&cycle_counter_)) + sizeof(data_qualifier_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedEntityHeader)
}

void DetectedEntityHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedEntityHeader_osi_5fsensordata_2eproto.base);
  ::memset(&measurement_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_qualifier_) -
      reinterpret_cast<char*>(&measurement_time_)) + sizeof(data_qualifier_));
}

DetectedEntityHeader::~DetectedEntityHeader() {
  // @@protoc_insertion_point(destructor:osi3.DetectedEntityHeader)
  SharedDtor();
}

void DetectedEntityHeader::SharedDtor() {
  if (this != internal_default_instance()) delete measurement_time_;
}

void DetectedEntityHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedEntityHeader& DetectedEntityHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedEntityHeader_osi_5fsensordata_2eproto.base);
  return *internal_default_instance();
}


void DetectedEntityHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedEntityHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && measurement_time_ != nullptr) {
    delete measurement_time_;
  }
  measurement_time_ = nullptr;
  ::memset(&cycle_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_qualifier_) -
      reinterpret_cast<char*>(&cycle_counter_)) + sizeof(data_qualifier_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedEntityHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Timestamp measurement_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_measurement_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cycle_counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cycle_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_qualifier(static_cast<::osi3::DetectedEntityHeader_DataQualifier>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedEntityHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedEntityHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Timestamp measurement_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_measurement_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cycle_counter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cycle_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_qualifier(static_cast< ::osi3::DetectedEntityHeader_DataQualifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedEntityHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedEntityHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedEntityHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedEntityHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::measurement_time(this), output);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->cycle_counter(), output);
  }

  // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (this->data_qualifier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->data_qualifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedEntityHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedEntityHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedEntityHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::measurement_time(this), target);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->cycle_counter(), target);
  }

  // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (this->data_qualifier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->data_qualifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedEntityHeader)
  return target;
}

size_t DetectedEntityHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedEntityHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measurement_time_);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cycle_counter());
  }

  // .osi3.DetectedEntityHeader.DataQualifier data_qualifier = 3;
  if (this->data_qualifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_qualifier());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedEntityHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedEntityHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedEntityHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedEntityHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedEntityHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedEntityHeader)
    MergeFrom(*source);
  }
}

void DetectedEntityHeader::MergeFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedEntityHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_measurement_time()) {
    mutable_measurement_time()->::osi3::Timestamp::MergeFrom(from.measurement_time());
  }
  if (from.cycle_counter() != 0) {
    set_cycle_counter(from.cycle_counter());
  }
  if (from.data_qualifier() != 0) {
    set_data_qualifier(from.data_qualifier());
  }
}

void DetectedEntityHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedEntityHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedEntityHeader::CopyFrom(const DetectedEntityHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedEntityHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedEntityHeader::IsInitialized() const {
  return true;
}

void DetectedEntityHeader::InternalSwap(DetectedEntityHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(measurement_time_, other->measurement_time_);
  swap(cycle_counter_, other->cycle_counter_);
  swap(data_qualifier_, other->data_qualifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedEntityHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorData::InitAsDefaultInstance() {
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->host_vehicle_location_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->host_vehicle_location_rmse_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->last_measurement_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->stationary_object_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->moving_object_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->traffic_sign_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->traffic_light_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->road_marking_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->lane_boundary_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->lane_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->occupant_header_ = const_cast< ::osi3::DetectedEntityHeader*>(
      ::osi3::DetectedEntityHeader::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->feature_data_ = const_cast< ::osi3::FeatureData*>(
      ::osi3::FeatureData::internal_default_instance());
  ::osi3::_SensorData_default_instance_._instance.get_mutable()->logical_detection_data_ = const_cast< ::osi3::LogicalDetectionData*>(
      ::osi3::LogicalDetectionData::internal_default_instance());
}
class SensorData::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const SensorData* msg);
  static const ::osi3::Timestamp& timestamp(const SensorData* msg);
  static const ::osi3::BaseMoving& host_vehicle_location(const SensorData* msg);
  static const ::osi3::BaseMoving& host_vehicle_location_rmse(const SensorData* msg);
  static const ::osi3::Identifier& sensor_id(const SensorData* msg);
  static const ::osi3::MountingPosition& mounting_position(const SensorData* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const SensorData* msg);
  static const ::osi3::Timestamp& last_measurement_time(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& stationary_object_header(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& moving_object_header(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& traffic_sign_header(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& traffic_light_header(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& road_marking_header(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& lane_boundary_header(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& lane_header(const SensorData* msg);
  static const ::osi3::DetectedEntityHeader& occupant_header(const SensorData* msg);
  static const ::osi3::FeatureData& feature_data(const SensorData* msg);
  static const ::osi3::LogicalDetectionData& logical_detection_data(const SensorData* msg);
};

const ::osi3::InterfaceVersion&
SensorData::_Internal::version(const SensorData* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
SensorData::_Internal::timestamp(const SensorData* msg) {
  return *msg->timestamp_;
}
const ::osi3::BaseMoving&
SensorData::_Internal::host_vehicle_location(const SensorData* msg) {
  return *msg->host_vehicle_location_;
}
const ::osi3::BaseMoving&
SensorData::_Internal::host_vehicle_location_rmse(const SensorData* msg) {
  return *msg->host_vehicle_location_rmse_;
}
const ::osi3::Identifier&
SensorData::_Internal::sensor_id(const SensorData* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
SensorData::_Internal::mounting_position(const SensorData* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
SensorData::_Internal::mounting_position_rmse(const SensorData* msg) {
  return *msg->mounting_position_rmse_;
}
const ::osi3::Timestamp&
SensorData::_Internal::last_measurement_time(const SensorData* msg) {
  return *msg->last_measurement_time_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::stationary_object_header(const SensorData* msg) {
  return *msg->stationary_object_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::moving_object_header(const SensorData* msg) {
  return *msg->moving_object_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::traffic_sign_header(const SensorData* msg) {
  return *msg->traffic_sign_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::traffic_light_header(const SensorData* msg) {
  return *msg->traffic_light_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::road_marking_header(const SensorData* msg) {
  return *msg->road_marking_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::lane_boundary_header(const SensorData* msg) {
  return *msg->lane_boundary_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::lane_header(const SensorData* msg) {
  return *msg->lane_header_;
}
const ::osi3::DetectedEntityHeader&
SensorData::_Internal::occupant_header(const SensorData* msg) {
  return *msg->occupant_header_;
}
const ::osi3::FeatureData&
SensorData::_Internal::feature_data(const SensorData* msg) {
  return *msg->feature_data_;
}
const ::osi3::LogicalDetectionData&
SensorData::_Internal::logical_detection_data(const SensorData* msg) {
  return *msg->logical_detection_data_;
}
void SensorData::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void SensorData::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void SensorData::clear_host_vehicle_location() {
  if (GetArenaNoVirtual() == nullptr && host_vehicle_location_ != nullptr) {
    delete host_vehicle_location_;
  }
  host_vehicle_location_ = nullptr;
}
void SensorData::clear_host_vehicle_location_rmse() {
  if (GetArenaNoVirtual() == nullptr && host_vehicle_location_rmse_ != nullptr) {
    delete host_vehicle_location_rmse_;
  }
  host_vehicle_location_rmse_ = nullptr;
}
void SensorData::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
void SensorData::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void SensorData::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
void SensorData::clear_sensor_view() {
  sensor_view_.Clear();
}
void SensorData::clear_last_measurement_time() {
  if (GetArenaNoVirtual() == nullptr && last_measurement_time_ != nullptr) {
    delete last_measurement_time_;
  }
  last_measurement_time_ = nullptr;
}
void SensorData::clear_stationary_object() {
  stationary_object_.Clear();
}
void SensorData::clear_moving_object() {
  moving_object_.Clear();
}
void SensorData::clear_traffic_sign() {
  traffic_sign_.Clear();
}
void SensorData::clear_traffic_light() {
  traffic_light_.Clear();
}
void SensorData::clear_road_marking() {
  road_marking_.Clear();
}
void SensorData::clear_lane_boundary() {
  lane_boundary_.Clear();
}
void SensorData::clear_lane() {
  lane_.Clear();
}
void SensorData::clear_occupant() {
  occupant_.Clear();
}
void SensorData::clear_feature_data() {
  if (GetArenaNoVirtual() == nullptr && feature_data_ != nullptr) {
    delete feature_data_;
  }
  feature_data_ = nullptr;
}
void SensorData::clear_logical_detection_data() {
  if (GetArenaNoVirtual() == nullptr && logical_detection_data_ != nullptr) {
    delete logical_detection_data_;
  }
  logical_detection_data_ = nullptr;
}
SensorData::SensorData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorData)
}
SensorData::SensorData(const SensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_view_(from.sensor_view_),
      stationary_object_(from.stationary_object_),
      moving_object_(from.moving_object_),
      traffic_sign_(from.traffic_sign_),
      traffic_light_(from.traffic_light_),
      road_marking_(from.road_marking_),
      lane_boundary_(from.lane_boundary_),
      lane_(from.lane_),
      occupant_(from.occupant_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_host_vehicle_location()) {
    host_vehicle_location_ = new ::osi3::BaseMoving(*from.host_vehicle_location_);
  } else {
    host_vehicle_location_ = nullptr;
  }
  if (from.has_host_vehicle_location_rmse()) {
    host_vehicle_location_rmse_ = new ::osi3::BaseMoving(*from.host_vehicle_location_rmse_);
  } else {
    host_vehicle_location_rmse_ = nullptr;
  }
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  if (from.has_last_measurement_time()) {
    last_measurement_time_ = new ::osi3::Timestamp(*from.last_measurement_time_);
  } else {
    last_measurement_time_ = nullptr;
  }
  if (from.has_stationary_object_header()) {
    stationary_object_header_ = new ::osi3::DetectedEntityHeader(*from.stationary_object_header_);
  } else {
    stationary_object_header_ = nullptr;
  }
  if (from.has_moving_object_header()) {
    moving_object_header_ = new ::osi3::DetectedEntityHeader(*from.moving_object_header_);
  } else {
    moving_object_header_ = nullptr;
  }
  if (from.has_traffic_sign_header()) {
    traffic_sign_header_ = new ::osi3::DetectedEntityHeader(*from.traffic_sign_header_);
  } else {
    traffic_sign_header_ = nullptr;
  }
  if (from.has_traffic_light_header()) {
    traffic_light_header_ = new ::osi3::DetectedEntityHeader(*from.traffic_light_header_);
  } else {
    traffic_light_header_ = nullptr;
  }
  if (from.has_road_marking_header()) {
    road_marking_header_ = new ::osi3::DetectedEntityHeader(*from.road_marking_header_);
  } else {
    road_marking_header_ = nullptr;
  }
  if (from.has_lane_boundary_header()) {
    lane_boundary_header_ = new ::osi3::DetectedEntityHeader(*from.lane_boundary_header_);
  } else {
    lane_boundary_header_ = nullptr;
  }
  if (from.has_lane_header()) {
    lane_header_ = new ::osi3::DetectedEntityHeader(*from.lane_header_);
  } else {
    lane_header_ = nullptr;
  }
  if (from.has_occupant_header()) {
    occupant_header_ = new ::osi3::DetectedEntityHeader(*from.occupant_header_);
  } else {
    occupant_header_ = nullptr;
  }
  if (from.has_feature_data()) {
    feature_data_ = new ::osi3::FeatureData(*from.feature_data_);
  } else {
    feature_data_ = nullptr;
  }
  if (from.has_logical_detection_data()) {
    logical_detection_data_ = new ::osi3::LogicalDetectionData(*from.logical_detection_data_);
  } else {
    logical_detection_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.SensorData)
}

void SensorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorData_osi_5fsensordata_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logical_detection_data_) -
      reinterpret_cast<char*>(&version_)) + sizeof(logical_detection_data_));
}

SensorData::~SensorData() {
  // @@protoc_insertion_point(destructor:osi3.SensorData)
  SharedDtor();
}

void SensorData::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_location_;
  if (this != internal_default_instance()) delete host_vehicle_location_rmse_;
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
  if (this != internal_default_instance()) delete last_measurement_time_;
  if (this != internal_default_instance()) delete stationary_object_header_;
  if (this != internal_default_instance()) delete moving_object_header_;
  if (this != internal_default_instance()) delete traffic_sign_header_;
  if (this != internal_default_instance()) delete traffic_light_header_;
  if (this != internal_default_instance()) delete road_marking_header_;
  if (this != internal_default_instance()) delete lane_boundary_header_;
  if (this != internal_default_instance()) delete lane_header_;
  if (this != internal_default_instance()) delete occupant_header_;
  if (this != internal_default_instance()) delete feature_data_;
  if (this != internal_default_instance()) delete logical_detection_data_;
}

void SensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorData& SensorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorData_osi_5fsensordata_2eproto.base);
  return *internal_default_instance();
}


void SensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_view_.Clear();
  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_vehicle_location_ != nullptr) {
    delete host_vehicle_location_;
  }
  host_vehicle_location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_vehicle_location_rmse_ != nullptr) {
    delete host_vehicle_location_rmse_;
  }
  host_vehicle_location_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && last_measurement_time_ != nullptr) {
    delete last_measurement_time_;
  }
  last_measurement_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && stationary_object_header_ != nullptr) {
    delete stationary_object_header_;
  }
  stationary_object_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && moving_object_header_ != nullptr) {
    delete moving_object_header_;
  }
  moving_object_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && traffic_sign_header_ != nullptr) {
    delete traffic_sign_header_;
  }
  traffic_sign_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && traffic_light_header_ != nullptr) {
    delete traffic_light_header_;
  }
  traffic_light_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && road_marking_header_ != nullptr) {
    delete road_marking_header_;
  }
  road_marking_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lane_boundary_header_ != nullptr) {
    delete lane_boundary_header_;
  }
  lane_boundary_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lane_header_ != nullptr) {
    delete lane_header_;
  }
  lane_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && occupant_header_ != nullptr) {
    delete occupant_header_;
  }
  occupant_header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && feature_data_ != nullptr) {
    delete feature_data_;
  }
  feature_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && logical_detection_data_ != nullptr) {
    delete logical_detection_data_;
  }
  logical_detection_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseMoving host_vehicle_location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_host_vehicle_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseMoving host_vehicle_location_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_host_vehicle_location_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier sensor_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.SensorView sensor_view = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp last_measurement_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_last_measurement_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader stationary_object_header = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_stationary_object_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedStationaryObject stationary_object = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stationary_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader moving_object_header = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_moving_object_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedMovingObject moving_object = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_moving_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 106);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader traffic_sign_header = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_traffic_sign_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_traffic_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 122);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader traffic_light_header = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_traffic_light_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficLight traffic_light = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader road_marking_header = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_road_marking_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedRoadMarking road_marking = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_road_marking(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader lane_boundary_header = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_lane_boundary_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_lane_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 426);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader lane_header = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_lane_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLane lane = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 442);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedEntityHeader occupant_header = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_occupant_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedOccupant occupant = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_occupant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 458);
        } else goto handle_unusual;
        continue;
      // .osi3.FeatureData feature_data = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_feature_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.LogicalDetectionData logical_detection_data = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_logical_detection_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving host_vehicle_location = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host_vehicle_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving host_vehicle_location_rmse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host_vehicle_location_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier sensor_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.SensorView sensor_view = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_view()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp last_measurement_time = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_last_measurement_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader stationary_object_header = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_stationary_object_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedStationaryObject stationary_object = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stationary_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader moving_object_header = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_moving_object_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedMovingObject moving_object = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_moving_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader traffic_sign_header = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_sign_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader traffic_light_header = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_light_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedTrafficLight traffic_light = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader road_marking_header = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_road_marking_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedRoadMarking road_marking = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_road_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader lane_boundary_header = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_boundary_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader lane_header = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedLane lane = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedEntityHeader occupant_header = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_occupant_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedOccupant occupant = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_occupant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.FeatureData feature_data = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_feature_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LogicalDetectionData logical_detection_data = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logical_detection_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::timestamp(this), output);
  }

  // .osi3.BaseMoving host_vehicle_location = 3;
  if (this->has_host_vehicle_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::host_vehicle_location(this), output);
  }

  // .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (this->has_host_vehicle_location_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::host_vehicle_location_rmse(this), output);
  }

  // .osi3.Identifier sensor_id = 5;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::sensor_id(this), output);
  }

  // .osi3.MountingPosition mounting_position = 6;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 7;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::mounting_position_rmse(this), output);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_view_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->sensor_view(static_cast<int>(i)),
      output);
  }

  // .osi3.Timestamp last_measurement_time = 9;
  if (this->has_last_measurement_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::last_measurement_time(this), output);
  }

  // .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (this->has_stationary_object_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::stationary_object_header(this), output);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->stationary_object(static_cast<int>(i)),
      output);
  }

  // .osi3.DetectedEntityHeader moving_object_header = 12;
  if (this->has_moving_object_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::moving_object_header(this), output);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->moving_object(static_cast<int>(i)),
      output);
  }

  // .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (this->has_traffic_sign_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::traffic_sign_header(this), output);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->traffic_sign(static_cast<int>(i)),
      output);
  }

  // .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (this->has_traffic_light_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::traffic_light_header(this), output);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->traffic_light(static_cast<int>(i)),
      output);
  }

  // .osi3.DetectedEntityHeader road_marking_header = 18;
  if (this->has_road_marking_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, _Internal::road_marking_header(this), output);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->road_marking(static_cast<int>(i)),
      output);
  }

  // .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (this->has_lane_boundary_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::lane_boundary_header(this), output);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->lane_boundary(static_cast<int>(i)),
      output);
  }

  // .osi3.DetectedEntityHeader lane_header = 22;
  if (this->has_lane_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, _Internal::lane_header(this), output);
  }

  // repeated .osi3.DetectedLane lane = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23,
      this->lane(static_cast<int>(i)),
      output);
  }

  // .osi3.DetectedEntityHeader occupant_header = 24;
  if (this->has_occupant_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, _Internal::occupant_header(this), output);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->occupant(static_cast<int>(i)),
      output);
  }

  // .osi3.FeatureData feature_data = 26;
  if (this->has_feature_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, _Internal::feature_data(this), output);
  }

  // .osi3.LogicalDetectionData logical_detection_data = 27;
  if (this->has_logical_detection_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, _Internal::logical_detection_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorData)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::timestamp(this), target);
  }

  // .osi3.BaseMoving host_vehicle_location = 3;
  if (this->has_host_vehicle_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::host_vehicle_location(this), target);
  }

  // .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (this->has_host_vehicle_location_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::host_vehicle_location_rmse(this), target);
  }

  // .osi3.Identifier sensor_id = 5;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::sensor_id(this), target);
  }

  // .osi3.MountingPosition mounting_position = 6;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 7;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::mounting_position_rmse(this), target);
  }

  // repeated .osi3.SensorView sensor_view = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_view_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->sensor_view(static_cast<int>(i)), target);
  }

  // .osi3.Timestamp last_measurement_time = 9;
  if (this->has_last_measurement_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::last_measurement_time(this), target);
  }

  // .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (this->has_stationary_object_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::stationary_object_header(this), target);
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->stationary_object(static_cast<int>(i)), target);
  }

  // .osi3.DetectedEntityHeader moving_object_header = 12;
  if (this->has_moving_object_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::moving_object_header(this), target);
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->moving_object(static_cast<int>(i)), target);
  }

  // .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (this->has_traffic_sign_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::traffic_sign_header(this), target);
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->traffic_sign(static_cast<int>(i)), target);
  }

  // .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (this->has_traffic_light_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::traffic_light_header(this), target);
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->traffic_light(static_cast<int>(i)), target);
  }

  // .osi3.DetectedEntityHeader road_marking_header = 18;
  if (this->has_road_marking_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::road_marking_header(this), target);
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->road_marking(static_cast<int>(i)), target);
  }

  // .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (this->has_lane_boundary_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::lane_boundary_header(this), target);
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->lane_boundary(static_cast<int>(i)), target);
  }

  // .osi3.DetectedEntityHeader lane_header = 22;
  if (this->has_lane_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::lane_header(this), target);
  }

  // repeated .osi3.DetectedLane lane = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, this->lane(static_cast<int>(i)), target);
  }

  // .osi3.DetectedEntityHeader occupant_header = 24;
  if (this->has_occupant_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::occupant_header(this), target);
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->occupant(static_cast<int>(i)), target);
  }

  // .osi3.FeatureData feature_data = 26;
  if (this->has_feature_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::feature_data(this), target);
  }

  // .osi3.LogicalDetectionData logical_detection_data = 27;
  if (this->has_logical_detection_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, _Internal::logical_detection_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorData)
  return target;
}

size_t SensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.SensorView sensor_view = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_view_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_view(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedStationaryObject stationary_object = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->stationary_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stationary_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedMovingObject moving_object = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->moving_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->moving_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedTrafficSign traffic_sign = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->traffic_sign(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedTrafficLight traffic_light = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->traffic_light(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedRoadMarking road_marking = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->road_marking_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->road_marking(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedLaneBoundary lane_boundary = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_boundary_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_boundary(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedLane lane = 23;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.DetectedOccupant occupant = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->occupant_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->occupant(static_cast<int>(i)));
    }
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .osi3.BaseMoving host_vehicle_location = 3;
  if (this->has_host_vehicle_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_vehicle_location_);
  }

  // .osi3.BaseMoving host_vehicle_location_rmse = 4;
  if (this->has_host_vehicle_location_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_vehicle_location_rmse_);
  }

  // .osi3.Identifier sensor_id = 5;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 6;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 7;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // .osi3.Timestamp last_measurement_time = 9;
  if (this->has_last_measurement_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_measurement_time_);
  }

  // .osi3.DetectedEntityHeader stationary_object_header = 10;
  if (this->has_stationary_object_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stationary_object_header_);
  }

  // .osi3.DetectedEntityHeader moving_object_header = 12;
  if (this->has_moving_object_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *moving_object_header_);
  }

  // .osi3.DetectedEntityHeader traffic_sign_header = 14;
  if (this->has_traffic_sign_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_sign_header_);
  }

  // .osi3.DetectedEntityHeader traffic_light_header = 16;
  if (this->has_traffic_light_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_light_header_);
  }

  // .osi3.DetectedEntityHeader road_marking_header = 18;
  if (this->has_road_marking_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *road_marking_header_);
  }

  // .osi3.DetectedEntityHeader lane_boundary_header = 20;
  if (this->has_lane_boundary_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_boundary_header_);
  }

  // .osi3.DetectedEntityHeader lane_header = 22;
  if (this->has_lane_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_header_);
  }

  // .osi3.DetectedEntityHeader occupant_header = 24;
  if (this->has_occupant_header()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *occupant_header_);
  }

  // .osi3.FeatureData feature_data = 26;
  if (this->has_feature_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_data_);
  }

  // .osi3.LogicalDetectionData logical_detection_data = 27;
  if (this->has_logical_detection_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logical_detection_data_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorData)
    MergeFrom(*source);
  }
}

void SensorData::MergeFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_view_.MergeFrom(from.sensor_view_);
  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_host_vehicle_location()) {
    mutable_host_vehicle_location()->::osi3::BaseMoving::MergeFrom(from.host_vehicle_location());
  }
  if (from.has_host_vehicle_location_rmse()) {
    mutable_host_vehicle_location_rmse()->::osi3::BaseMoving::MergeFrom(from.host_vehicle_location_rmse());
  }
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (from.has_last_measurement_time()) {
    mutable_last_measurement_time()->::osi3::Timestamp::MergeFrom(from.last_measurement_time());
  }
  if (from.has_stationary_object_header()) {
    mutable_stationary_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from.stationary_object_header());
  }
  if (from.has_moving_object_header()) {
    mutable_moving_object_header()->::osi3::DetectedEntityHeader::MergeFrom(from.moving_object_header());
  }
  if (from.has_traffic_sign_header()) {
    mutable_traffic_sign_header()->::osi3::DetectedEntityHeader::MergeFrom(from.traffic_sign_header());
  }
  if (from.has_traffic_light_header()) {
    mutable_traffic_light_header()->::osi3::DetectedEntityHeader::MergeFrom(from.traffic_light_header());
  }
  if (from.has_road_marking_header()) {
    mutable_road_marking_header()->::osi3::DetectedEntityHeader::MergeFrom(from.road_marking_header());
  }
  if (from.has_lane_boundary_header()) {
    mutable_lane_boundary_header()->::osi3::DetectedEntityHeader::MergeFrom(from.lane_boundary_header());
  }
  if (from.has_lane_header()) {
    mutable_lane_header()->::osi3::DetectedEntityHeader::MergeFrom(from.lane_header());
  }
  if (from.has_occupant_header()) {
    mutable_occupant_header()->::osi3::DetectedEntityHeader::MergeFrom(from.occupant_header());
  }
  if (from.has_feature_data()) {
    mutable_feature_data()->::osi3::FeatureData::MergeFrom(from.feature_data());
  }
  if (from.has_logical_detection_data()) {
    mutable_logical_detection_data()->::osi3::LogicalDetectionData::MergeFrom(from.logical_detection_data());
  }
}

void SensorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorData::CopyFrom(const SensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorData::IsInitialized() const {
  return true;
}

void SensorData::InternalSwap(SensorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensor_view_)->InternalSwap(CastToBase(&other->sensor_view_));
  CastToBase(&stationary_object_)->InternalSwap(CastToBase(&other->stationary_object_));
  CastToBase(&moving_object_)->InternalSwap(CastToBase(&other->moving_object_));
  CastToBase(&traffic_sign_)->InternalSwap(CastToBase(&other->traffic_sign_));
  CastToBase(&traffic_light_)->InternalSwap(CastToBase(&other->traffic_light_));
  CastToBase(&road_marking_)->InternalSwap(CastToBase(&other->road_marking_));
  CastToBase(&lane_boundary_)->InternalSwap(CastToBase(&other->lane_boundary_));
  CastToBase(&lane_)->InternalSwap(CastToBase(&other->lane_));
  CastToBase(&occupant_)->InternalSwap(CastToBase(&other->occupant_));
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(host_vehicle_location_, other->host_vehicle_location_);
  swap(host_vehicle_location_rmse_, other->host_vehicle_location_rmse_);
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(last_measurement_time_, other->last_measurement_time_);
  swap(stationary_object_header_, other->stationary_object_header_);
  swap(moving_object_header_, other->moving_object_header_);
  swap(traffic_sign_header_, other->traffic_sign_header_);
  swap(traffic_light_header_, other->traffic_light_header_);
  swap(road_marking_header_, other->road_marking_header_);
  swap(lane_boundary_header_, other->lane_boundary_header_);
  swap(lane_header_, other->lane_header_);
  swap(occupant_header_, other->occupant_header_);
  swap(feature_data_, other->feature_data_);
  swap(logical_detection_data_, other->logical_detection_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedEntityHeader* Arena::CreateMaybeMessage< ::osi3::DetectedEntityHeader >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedEntityHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::SensorData* Arena::CreateMaybeMessage< ::osi3::SensorData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::SensorData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
