// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto
#pragma warning (disable : 4125)
#include "location.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_location_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_EgoLane_location_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
namespace sim_msg {
class Location_EgoLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location_EgoLane> _instance;
} _Location_EgoLane_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Location_location_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Location_default_instance_;
    new (ptr) ::sim_msg::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Location_location_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Location_location_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,
      &scc_info_Location_EgoLane_location_2eproto.base,}};

static void InitDefaultsscc_info_Location_EgoLane_location_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Location_EgoLane_default_instance_;
    new (ptr) ::sim_msg::Location_EgoLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Location_EgoLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_EgoLane_location_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Location_EgoLane_location_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_location_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_location_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_location_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_location_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location_EgoLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location_EgoLane, lanepkid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location_EgoLane, sectionpkid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location_EgoLane, roadpkid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location_EgoLane, dist_2_ref_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, position_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, angular_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, rpy_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, acceleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, ego_lane_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Location_EgoLane)},
  { 9, -1, sizeof(::sim_msg::Location)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Location_EgoLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Location_default_instance_),
};

const char descriptor_table_protodef_location_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016location.proto\022\007sim_msg\032\013basic.proto\"\302"
  "\002\n\010Location\022\t\n\001t\030\001 \001(\001\022\037\n\010position\030\002 \001(\013"
  "2\r.sim_msg.Vec3\022\037\n\010velocity\030\003 \001(\0132\r.sim_"
  "msg.Vec3\022\036\n\007angular\030\004 \001(\0132\r.sim_msg.Vec3"
  "\022\032\n\003rpy\030\005 \001(\0132\r.sim_msg.Vec3\022#\n\014accelera"
  "tion\030\006 \001(\0132\r.sim_msg.Vec3\022+\n\010ego_lane\030\007 "
  "\001(\0132\031.sim_msg.Location.EgoLane\032[\n\007EgoLan"
  "e\022\020\n\010lanepkid\030\001 \001(\003\022\023\n\013sectionpkid\030\002 \001(\004"
  "\022\020\n\010roadpkid\030\003 \001(\004\022\027\n\017dist_2_ref_line\030\004 "
  "\001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_location_2eproto_deps[1] = {
  &::descriptor_table_basic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_location_2eproto_sccs[2] = {
  &scc_info_Location_location_2eproto.base,
  &scc_info_Location_EgoLane_location_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_location_2eproto_once;
static bool descriptor_table_location_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_location_2eproto = {
  &descriptor_table_location_2eproto_initialized, descriptor_table_protodef_location_2eproto, "location.proto", 371,
  &descriptor_table_location_2eproto_once, descriptor_table_location_2eproto_sccs, descriptor_table_location_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_location_2eproto::offsets,
  file_level_metadata_location_2eproto, 2, file_level_enum_descriptors_location_2eproto, file_level_service_descriptors_location_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_location_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_location_2eproto), true);
namespace sim_msg {

// ===================================================================

void Location_EgoLane::InitAsDefaultInstance() {
}
class Location_EgoLane::_Internal {
 public:
};

Location_EgoLane::Location_EgoLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Location.EgoLane)
}
Location_EgoLane::Location_EgoLane(const Location_EgoLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lanepkid_, &from.lanepkid_,
    static_cast<size_t>(reinterpret_cast<char*>(&dist_2_ref_line_) -
    reinterpret_cast<char*>(&lanepkid_)) + sizeof(dist_2_ref_line_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Location.EgoLane)
}

void Location_EgoLane::SharedCtor() {
  ::memset(&lanepkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_2_ref_line_) -
      reinterpret_cast<char*>(&lanepkid_)) + sizeof(dist_2_ref_line_));
}

Location_EgoLane::~Location_EgoLane() {
  // @@protoc_insertion_point(destructor:sim_msg.Location.EgoLane)
  SharedDtor();
}

void Location_EgoLane::SharedDtor() {
}

void Location_EgoLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location_EgoLane& Location_EgoLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_EgoLane_location_2eproto.base);
  return *internal_default_instance();
}


void Location_EgoLane::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Location.EgoLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lanepkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_2_ref_line_) -
      reinterpret_cast<char*>(&lanepkid_)) + sizeof(dist_2_ref_line_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Location_EgoLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 lanepkid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          lanepkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sectionpkid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sectionpkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 roadpkid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          roadpkid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dist_2_ref_line = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dist_2_ref_line_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Location_EgoLane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Location.EgoLane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 lanepkid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lanepkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sectionpkid = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sectionpkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 roadpkid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roadpkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_2_ref_line = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_2_ref_line_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Location.EgoLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Location.EgoLane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Location_EgoLane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Location.EgoLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 lanepkid = 1;
  if (this->lanepkid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->lanepkid(), output);
  }

  // uint64 sectionpkid = 2;
  if (this->sectionpkid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->sectionpkid(), output);
  }

  // uint64 roadpkid = 3;
  if (this->roadpkid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->roadpkid(), output);
  }

  // double dist_2_ref_line = 4;
  if (!(this->dist_2_ref_line() <= 0 && this->dist_2_ref_line() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->dist_2_ref_line(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Location.EgoLane)
}

::PROTOBUF_NAMESPACE_ID::uint8* Location_EgoLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Location.EgoLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 lanepkid = 1;
  if (this->lanepkid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->lanepkid(), target);
  }

  // uint64 sectionpkid = 2;
  if (this->sectionpkid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->sectionpkid(), target);
  }

  // uint64 roadpkid = 3;
  if (this->roadpkid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->roadpkid(), target);
  }

  // double dist_2_ref_line = 4;
  if (!(this->dist_2_ref_line() <= 0 && this->dist_2_ref_line() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->dist_2_ref_line(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Location.EgoLane)
  return target;
}

size_t Location_EgoLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Location.EgoLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 lanepkid = 1;
  if (this->lanepkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lanepkid());
  }

  // uint64 sectionpkid = 2;
  if (this->sectionpkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sectionpkid());
  }

  // uint64 roadpkid = 3;
  if (this->roadpkid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->roadpkid());
  }

  // double dist_2_ref_line = 4;
  if (!(this->dist_2_ref_line() <= 0 && this->dist_2_ref_line() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location_EgoLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Location.EgoLane)
  GOOGLE_DCHECK_NE(&from, this);
  const Location_EgoLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location_EgoLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Location.EgoLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Location.EgoLane)
    MergeFrom(*source);
  }
}

void Location_EgoLane::MergeFrom(const Location_EgoLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Location.EgoLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lanepkid() != 0) {
    set_lanepkid(from.lanepkid());
  }
  if (from.sectionpkid() != 0) {
    set_sectionpkid(from.sectionpkid());
  }
  if (from.roadpkid() != 0) {
    set_roadpkid(from.roadpkid());
  }
  if (!(from.dist_2_ref_line() <= 0 && from.dist_2_ref_line() >= 0)) {
    set_dist_2_ref_line(from.dist_2_ref_line());
  }
}

void Location_EgoLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Location.EgoLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location_EgoLane::CopyFrom(const Location_EgoLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Location.EgoLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location_EgoLane::IsInitialized() const {
  return true;
}

void Location_EgoLane::InternalSwap(Location_EgoLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(lanepkid_, other->lanepkid_);
  swap(sectionpkid_, other->sectionpkid_);
  swap(roadpkid_, other->roadpkid_);
  swap(dist_2_ref_line_, other->dist_2_ref_line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Location_EgoLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Location::InitAsDefaultInstance() {
  ::sim_msg::_Location_default_instance_._instance.get_mutable()->position_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Location_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Location_default_instance_._instance.get_mutable()->angular_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Location_default_instance_._instance.get_mutable()->rpy_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Location_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Location_default_instance_._instance.get_mutable()->ego_lane_ = const_cast< ::sim_msg::Location_EgoLane*>(
      ::sim_msg::Location_EgoLane::internal_default_instance());
}
class Location::_Internal {
 public:
  static const ::sim_msg::Vec3& position(const Location* msg);
  static const ::sim_msg::Vec3& velocity(const Location* msg);
  static const ::sim_msg::Vec3& angular(const Location* msg);
  static const ::sim_msg::Vec3& rpy(const Location* msg);
  static const ::sim_msg::Vec3& acceleration(const Location* msg);
  static const ::sim_msg::Location_EgoLane& ego_lane(const Location* msg);
};

const ::sim_msg::Vec3&
Location::_Internal::position(const Location* msg) {
  return *msg->position_;
}
const ::sim_msg::Vec3&
Location::_Internal::velocity(const Location* msg) {
  return *msg->velocity_;
}
const ::sim_msg::Vec3&
Location::_Internal::angular(const Location* msg) {
  return *msg->angular_;
}
const ::sim_msg::Vec3&
Location::_Internal::rpy(const Location* msg) {
  return *msg->rpy_;
}
const ::sim_msg::Vec3&
Location::_Internal::acceleration(const Location* msg) {
  return *msg->acceleration_;
}
const ::sim_msg::Location_EgoLane&
Location::_Internal::ego_lane(const Location* msg) {
  return *msg->ego_lane_;
}
void Location::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Location::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void Location::clear_angular() {
  if (GetArenaNoVirtual() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
void Location::clear_rpy() {
  if (GetArenaNoVirtual() == nullptr && rpy_ != nullptr) {
    delete rpy_;
  }
  rpy_ = nullptr;
}
void Location::clear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
Location::Location()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::sim_msg::Vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::sim_msg::Vec3(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from.has_angular()) {
    angular_ = new ::sim_msg::Vec3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  if (from.has_rpy()) {
    rpy_ = new ::sim_msg::Vec3(*from.rpy_);
  } else {
    rpy_ = nullptr;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::sim_msg::Vec3(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from.has_ego_lane()) {
    ego_lane_ = new ::sim_msg::Location_EgoLane(*from.ego_lane_);
  } else {
    ego_lane_ = nullptr;
  }
  t_ = from.t_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Location)
}

void Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Location_location_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&position_)) + sizeof(t_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:sim_msg.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete angular_;
  if (this != internal_default_instance()) delete rpy_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete ego_lane_;
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_location_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rpy_ != nullptr) {
    delete rpy_;
  }
  rpy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ego_lane_ != nullptr) {
    delete ego_lane_;
  }
  ego_lane_ = nullptr;
  t_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 angular = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 rpy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_rpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 acceleration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Location.EgoLane ego_lane = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ego_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Location::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Location)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double t = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 velocity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 angular = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 rpy = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 acceleration = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Location.EgoLane ego_lane = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ego_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Location)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Location::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->t(), output);
  }

  // .sim_msg.Vec3 position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::position(this), output);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->has_velocity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::velocity(this), output);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->has_angular()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::angular(this), output);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->has_rpy()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::rpy(this), output);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->has_acceleration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::acceleration(this), output);
  }

  // .sim_msg.Location.EgoLane ego_lane = 7;
  if (this->has_ego_lane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::ego_lane(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Location)
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->t(), target);
  }

  // .sim_msg.Vec3 position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::position(this), target);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::velocity(this), target);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->has_angular()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::angular(this), target);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->has_rpy()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::rpy(this), target);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->has_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::acceleration(this), target);
  }

  // .sim_msg.Location.EgoLane ego_lane = 7;
  if (this->has_ego_lane()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::ego_lane(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Location)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->has_rpy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rpy_);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .sim_msg.Location.EgoLane ego_lane = 7;
  if (this->has_ego_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ego_lane_);
  }

  // double t = 1;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::sim_msg::Vec3::MergeFrom(from.position());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::sim_msg::Vec3::MergeFrom(from.velocity());
  }
  if (from.has_angular()) {
    mutable_angular()->::sim_msg::Vec3::MergeFrom(from.angular());
  }
  if (from.has_rpy()) {
    mutable_rpy()->::sim_msg::Vec3::MergeFrom(from.rpy());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::sim_msg::Vec3::MergeFrom(from.acceleration());
  }
  if (from.has_ego_lane()) {
    mutable_ego_lane()->::sim_msg::Location_EgoLane::MergeFrom(from.ego_lane());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    set_t(from.t());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(velocity_, other->velocity_);
  swap(angular_, other->angular_);
  swap(rpy_, other->rpy_);
  swap(acceleration_, other->acceleration_);
  swap(ego_lane_, other->ego_lane_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Location_EgoLane* Arena::CreateMaybeMessage< ::sim_msg::Location_EgoLane >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Location_EgoLane >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Location* Arena::CreateMaybeMessage< ::sim_msg::Location >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Location >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
