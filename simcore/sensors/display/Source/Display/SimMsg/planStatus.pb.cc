// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planStatus.proto
#pragma warning (disable : 4125)

#include "planStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_planStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationExpectation_planStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedExpectation_planStatus_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_planStatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SteeringExpectation_planStatus_2eproto;
namespace sim_msg {
class SteeringExpectationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SteeringExpectation> _instance;
} _SteeringExpectation_default_instance_;
class AccelerationExpectationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AccelerationExpectation> _instance;
} _AccelerationExpectation_default_instance_;
class SpeedExpectationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpeedExpectation> _instance;
} _SpeedExpectation_default_instance_;
class PlanStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlanStatus> _instance;
} _PlanStatus_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_AccelerationExpectation_planStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_AccelerationExpectation_default_instance_;
    new (ptr) ::sim_msg::AccelerationExpectation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::AccelerationExpectation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AccelerationExpectation_planStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_AccelerationExpectation_planStatus_2eproto}, {}};

static void InitDefaultsscc_info_PlanStatus_planStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PlanStatus_default_instance_;
    new (ptr) ::sim_msg::PlanStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PlanStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlanStatus_planStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PlanStatus_planStatus_2eproto}, {
      &scc_info_SteeringExpectation_planStatus_2eproto.base,
      &scc_info_AccelerationExpectation_planStatus_2eproto.base,
      &scc_info_SpeedExpectation_planStatus_2eproto.base,}};

static void InitDefaultsscc_info_SpeedExpectation_planStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SpeedExpectation_default_instance_;
    new (ptr) ::sim_msg::SpeedExpectation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::SpeedExpectation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SpeedExpectation_planStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SpeedExpectation_planStatus_2eproto}, {}};

static void InitDefaultsscc_info_SteeringExpectation_planStatus_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SteeringExpectation_default_instance_;
    new (ptr) ::sim_msg::SteeringExpectation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::SteeringExpectation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SteeringExpectation_planStatus_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SteeringExpectation_planStatus_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_planStatus_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_planStatus_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_planStatus_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_planStatus_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SteeringExpectation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SteeringExpectation, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::AccelerationExpectation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::AccelerationExpectation, acc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SpeedExpectation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SpeedExpectation, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PlanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PlanStatus, indicator_state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PlanStatus, mode_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PlanStatus, class__),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PlanStatus, expect_steering_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PlanStatus, expect_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PlanStatus, expect_speed_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::SteeringExpectation)},
  { 6, -1, sizeof(::sim_msg::AccelerationExpectation)},
  { 12, -1, sizeof(::sim_msg::SpeedExpectation)},
  { 18, -1, sizeof(::sim_msg::PlanStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_SteeringExpectation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_AccelerationExpectation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_SpeedExpectation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PlanStatus_default_instance_),
};

const char descriptor_table_protodef_planStatus_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020planStatus.proto\022\007sim_msg\"$\n\023SteeringE"
  "xpectation\022\r\n\005angle\030\001 \001(\001\"&\n\027Acceleratio"
  "nExpectation\022\013\n\003acc\030\001 \001(\001\"!\n\020SpeedExpect"
  "ation\022\r\n\005speed\030\001 \001(\001\"\251\002\n\nPlanStatus\0220\n\017i"
  "ndicator_state\030\001 \001(\0162\027.sim_msg.Indicator"
  "State\022\037\n\004mode\030\002 \001(\0162\021.sim_msg.PlanMode\022*"
  "\n\005class\030\003 \001(\0162\033.sim_msg.PlanClassificati"
  "on\0225\n\017expect_steering\030\004 \001(\0132\034.sim_msg.St"
  "eeringExpectation\0224\n\nexpect_acc\030\005 \001(\0132 ."
  "sim_msg.AccelerationExpectation\022/\n\014expec"
  "t_speed\030\006 \001(\0132\031.sim_msg.SpeedExpectation"
  "*\230\001\n\016IndicatorState\022\033\n\027INDICATOR_STATE_U"
  "NKNOWN\020\000\022\027\n\023INDICATOR_STATE_OFF\020\001\022\030\n\024IND"
  "ICATOR_STATE_LEFT\020\002\022\031\n\025INDICATOR_STATE_R"
  "IGHT\020\003\022\033\n\027INDICATOR_STATE_WARNING\020\004*V\n\010P"
  "lanMode\022\031\n\025PLAN_MODE_FOLLOW_LANE\020\000\022\031\n\025PL"
  "AN_MODE_CHANGE_LANE\020\001\022\024\n\020PLAN_MODE_MANUA"
  "L\020\002*\231\003\n\022PlanClassification\022\024\n\020PLAN_GO_ST"
  "RAIGHT\020\000\022\022\n\016PLAN_TURN_LEFT\020\001\022\023\n\017PLAN_TUR"
  "N_RIGHT\020\002\022\031\n\025PLAN_CHANGE_LANE_LEFT\020\003\022\032\n\026"
  "PLAN_CHANGE_LANE_RIGHT\020\004\022\022\n\016PLAN_PULL_OV"
  "ER\020\005\022\024\n\020PLAN_TURN_AROUND\020\006\022\026\n\022PLAN_BREAK"
  "_THROUGH\020\007\022!\n\035PLAN_CHANGE_LANE_LEFT_PREP"
  "ARE\020\010\022\"\n\036PLAN_CHANGE_LANE_RIGHT_PREPARE\020"
  "\t\022\036\n\032PLAN_CHANGE_LANE_LEFT_HOLD\020\n\022\037\n\033PLA"
  "N_CHANGE_LANE_RIGHT_HOLD\020\013\022 \n\034PLAN_CHANG"
  "E_LANE_LEFT_CANCEL\020\014\022!\n\035PLAN_CHANGE_LANE"
  "_RIGHT_CANCEL\020\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_planStatus_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_planStatus_2eproto_sccs[4] = {
  &scc_info_AccelerationExpectation_planStatus_2eproto.base,
  &scc_info_PlanStatus_planStatus_2eproto.base,
  &scc_info_SpeedExpectation_planStatus_2eproto.base,
  &scc_info_SteeringExpectation_planStatus_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_planStatus_2eproto_once;
static bool descriptor_table_planStatus_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planStatus_2eproto = {
  &descriptor_table_planStatus_2eproto_initialized, descriptor_table_protodef_planStatus_2eproto, "planStatus.proto", 1103,
  &descriptor_table_planStatus_2eproto_once, descriptor_table_planStatus_2eproto_sccs, descriptor_table_planStatus_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_planStatus_2eproto::offsets,
  file_level_metadata_planStatus_2eproto, 4, file_level_enum_descriptors_planStatus_2eproto, file_level_service_descriptors_planStatus_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_planStatus_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_planStatus_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndicatorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planStatus_2eproto);
  return file_level_enum_descriptors_planStatus_2eproto[0];
}
bool IndicatorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planStatus_2eproto);
  return file_level_enum_descriptors_planStatus_2eproto[1];
}
bool PlanMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanClassification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_planStatus_2eproto);
  return file_level_enum_descriptors_planStatus_2eproto[2];
}
bool PlanClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SteeringExpectation::InitAsDefaultInstance() {
}
class SteeringExpectation::_Internal {
 public:
};

SteeringExpectation::SteeringExpectation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SteeringExpectation)
}
SteeringExpectation::SteeringExpectation(const SteeringExpectation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.SteeringExpectation)
}

void SteeringExpectation::SharedCtor() {
  angle_ = 0;
}

SteeringExpectation::~SteeringExpectation() {
  // @@protoc_insertion_point(destructor:sim_msg.SteeringExpectation)
  SharedDtor();
}

void SteeringExpectation::SharedDtor() {
}

void SteeringExpectation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SteeringExpectation& SteeringExpectation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SteeringExpectation_planStatus_2eproto.base);
  return *internal_default_instance();
}


void SteeringExpectation::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SteeringExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SteeringExpectation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SteeringExpectation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SteeringExpectation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double angle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SteeringExpectation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SteeringExpectation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SteeringExpectation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SteeringExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.SteeringExpectation)
}

::PROTOBUF_NAMESPACE_ID::uint8* SteeringExpectation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SteeringExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SteeringExpectation)
  return target;
}

size_t SteeringExpectation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SteeringExpectation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double angle = 1;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SteeringExpectation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SteeringExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  const SteeringExpectation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SteeringExpectation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SteeringExpectation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SteeringExpectation)
    MergeFrom(*source);
  }
}

void SteeringExpectation::MergeFrom(const SteeringExpectation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SteeringExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
}

void SteeringExpectation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SteeringExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteeringExpectation::CopyFrom(const SteeringExpectation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SteeringExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteeringExpectation::IsInitialized() const {
  return true;
}

void SteeringExpectation::InternalSwap(SteeringExpectation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SteeringExpectation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AccelerationExpectation::InitAsDefaultInstance() {
}
class AccelerationExpectation::_Internal {
 public:
};

AccelerationExpectation::AccelerationExpectation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.AccelerationExpectation)
}
AccelerationExpectation::AccelerationExpectation(const AccelerationExpectation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_ = from.acc_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.AccelerationExpectation)
}

void AccelerationExpectation::SharedCtor() {
  acc_ = 0;
}

AccelerationExpectation::~AccelerationExpectation() {
  // @@protoc_insertion_point(destructor:sim_msg.AccelerationExpectation)
  SharedDtor();
}

void AccelerationExpectation::SharedDtor() {
}

void AccelerationExpectation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AccelerationExpectation& AccelerationExpectation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AccelerationExpectation_planStatus_2eproto.base);
  return *internal_default_instance();
}


void AccelerationExpectation::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.AccelerationExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acc_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* AccelerationExpectation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double acc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool AccelerationExpectation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.AccelerationExpectation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.AccelerationExpectation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.AccelerationExpectation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void AccelerationExpectation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.AccelerationExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc = 1;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->acc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.AccelerationExpectation)
}

::PROTOBUF_NAMESPACE_ID::uint8* AccelerationExpectation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.AccelerationExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc = 1;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->acc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.AccelerationExpectation)
  return target;
}

size_t AccelerationExpectation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.AccelerationExpectation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double acc = 1;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AccelerationExpectation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.AccelerationExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerationExpectation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AccelerationExpectation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.AccelerationExpectation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.AccelerationExpectation)
    MergeFrom(*source);
  }
}

void AccelerationExpectation::MergeFrom(const AccelerationExpectation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.AccelerationExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.acc() <= 0 && from.acc() >= 0)) {
    set_acc(from.acc());
  }
}

void AccelerationExpectation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.AccelerationExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerationExpectation::CopyFrom(const AccelerationExpectation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.AccelerationExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationExpectation::IsInitialized() const {
  return true;
}

void AccelerationExpectation::InternalSwap(AccelerationExpectation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acc_, other->acc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AccelerationExpectation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpeedExpectation::InitAsDefaultInstance() {
}
class SpeedExpectation::_Internal {
 public:
};

SpeedExpectation::SpeedExpectation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SpeedExpectation)
}
SpeedExpectation::SpeedExpectation(const SpeedExpectation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.SpeedExpectation)
}

void SpeedExpectation::SharedCtor() {
  speed_ = 0;
}

SpeedExpectation::~SpeedExpectation() {
  // @@protoc_insertion_point(destructor:sim_msg.SpeedExpectation)
  SharedDtor();
}

void SpeedExpectation::SharedDtor() {
}

void SpeedExpectation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpeedExpectation& SpeedExpectation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpeedExpectation_planStatus_2eproto.base);
  return *internal_default_instance();
}


void SpeedExpectation::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SpeedExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SpeedExpectation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SpeedExpectation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SpeedExpectation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double speed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SpeedExpectation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SpeedExpectation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SpeedExpectation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SpeedExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.SpeedExpectation)
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedExpectation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SpeedExpectation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SpeedExpectation)
  return target;
}

size_t SpeedExpectation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SpeedExpectation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeedExpectation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SpeedExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  const SpeedExpectation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpeedExpectation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SpeedExpectation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SpeedExpectation)
    MergeFrom(*source);
  }
}

void SpeedExpectation::MergeFrom(const SpeedExpectation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SpeedExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
}

void SpeedExpectation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SpeedExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeedExpectation::CopyFrom(const SpeedExpectation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SpeedExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedExpectation::IsInitialized() const {
  return true;
}

void SpeedExpectation::InternalSwap(SpeedExpectation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedExpectation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlanStatus::InitAsDefaultInstance() {
  ::sim_msg::_PlanStatus_default_instance_._instance.get_mutable()->expect_steering_ = const_cast< ::sim_msg::SteeringExpectation*>(
      ::sim_msg::SteeringExpectation::internal_default_instance());
  ::sim_msg::_PlanStatus_default_instance_._instance.get_mutable()->expect_acc_ = const_cast< ::sim_msg::AccelerationExpectation*>(
      ::sim_msg::AccelerationExpectation::internal_default_instance());
  ::sim_msg::_PlanStatus_default_instance_._instance.get_mutable()->expect_speed_ = const_cast< ::sim_msg::SpeedExpectation*>(
      ::sim_msg::SpeedExpectation::internal_default_instance());
}
class PlanStatus::_Internal {
 public:
  static const ::sim_msg::SteeringExpectation& expect_steering(const PlanStatus* msg);
  static const ::sim_msg::AccelerationExpectation& expect_acc(const PlanStatus* msg);
  static const ::sim_msg::SpeedExpectation& expect_speed(const PlanStatus* msg);
};

const ::sim_msg::SteeringExpectation&
PlanStatus::_Internal::expect_steering(const PlanStatus* msg) {
  return *msg->expect_steering_;
}
const ::sim_msg::AccelerationExpectation&
PlanStatus::_Internal::expect_acc(const PlanStatus* msg) {
  return *msg->expect_acc_;
}
const ::sim_msg::SpeedExpectation&
PlanStatus::_Internal::expect_speed(const PlanStatus* msg) {
  return *msg->expect_speed_;
}
PlanStatus::PlanStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PlanStatus)
}
PlanStatus::PlanStatus(const PlanStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expect_steering()) {
    expect_steering_ = new ::sim_msg::SteeringExpectation(*from.expect_steering_);
  } else {
    expect_steering_ = nullptr;
  }
  if (from.has_expect_acc()) {
    expect_acc_ = new ::sim_msg::AccelerationExpectation(*from.expect_acc_);
  } else {
    expect_acc_ = nullptr;
  }
  if (from.has_expect_speed()) {
    expect_speed_ = new ::sim_msg::SpeedExpectation(*from.expect_speed_);
  } else {
    expect_speed_ = nullptr;
  }
  ::memcpy(&indicator_state_, &from.indicator_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&class__) -
    reinterpret_cast<char*>(&indicator_state_)) + sizeof(class__));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PlanStatus)
}

void PlanStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlanStatus_planStatus_2eproto.base);
  ::memset(&expect_steering_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class__) -
      reinterpret_cast<char*>(&expect_steering_)) + sizeof(class__));
}

PlanStatus::~PlanStatus() {
  // @@protoc_insertion_point(destructor:sim_msg.PlanStatus)
  SharedDtor();
}

void PlanStatus::SharedDtor() {
  if (this != internal_default_instance()) delete expect_steering_;
  if (this != internal_default_instance()) delete expect_acc_;
  if (this != internal_default_instance()) delete expect_speed_;
}

void PlanStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlanStatus& PlanStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlanStatus_planStatus_2eproto.base);
  return *internal_default_instance();
}


void PlanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PlanStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expect_steering_ != nullptr) {
    delete expect_steering_;
  }
  expect_steering_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expect_acc_ != nullptr) {
    delete expect_acc_;
  }
  expect_acc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expect_speed_ != nullptr) {
    delete expect_speed_;
  }
  expect_speed_ = nullptr;
  ::memset(&indicator_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&class__) -
      reinterpret_cast<char*>(&indicator_state_)) + sizeof(class__));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PlanStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.IndicatorState indicator_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_indicator_state(static_cast<::sim_msg::IndicatorState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.PlanMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::sim_msg::PlanMode>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.PlanClassification class = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_class_(static_cast<::sim_msg::PlanClassification>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.SteeringExpectation expect_steering = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_expect_steering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.AccelerationExpectation expect_acc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_expect_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.SpeedExpectation expect_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_expect_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PlanStatus::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PlanStatus)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.IndicatorState indicator_state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_indicator_state(static_cast< ::sim_msg::IndicatorState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PlanMode mode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::sim_msg::PlanMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PlanClassification class = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_class_(static_cast< ::sim_msg::PlanClassification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SteeringExpectation expect_steering = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expect_steering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.AccelerationExpectation expect_acc = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expect_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SpeedExpectation expect_speed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expect_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PlanStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PlanStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PlanStatus::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PlanStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->indicator_state(), output);
  }

  // .sim_msg.PlanMode mode = 2;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // .sim_msg.PlanClassification class = 3;
  if (this->class_() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->class_(), output);
  }

  // .sim_msg.SteeringExpectation expect_steering = 4;
  if (this->has_expect_steering()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::expect_steering(this), output);
  }

  // .sim_msg.AccelerationExpectation expect_acc = 5;
  if (this->has_expect_acc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::expect_acc(this), output);
  }

  // .sim_msg.SpeedExpectation expect_speed = 6;
  if (this->has_expect_speed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::expect_speed(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PlanStatus)
}

::PROTOBUF_NAMESPACE_ID::uint8* PlanStatus::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PlanStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->indicator_state(), target);
  }

  // .sim_msg.PlanMode mode = 2;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // .sim_msg.PlanClassification class = 3;
  if (this->class_() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->class_(), target);
  }

  // .sim_msg.SteeringExpectation expect_steering = 4;
  if (this->has_expect_steering()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::expect_steering(this), target);
  }

  // .sim_msg.AccelerationExpectation expect_acc = 5;
  if (this->has_expect_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::expect_acc(this), target);
  }

  // .sim_msg.SpeedExpectation expect_speed = 6;
  if (this->has_expect_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::expect_speed(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PlanStatus)
  return target;
}

size_t PlanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PlanStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.SteeringExpectation expect_steering = 4;
  if (this->has_expect_steering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expect_steering_);
  }

  // .sim_msg.AccelerationExpectation expect_acc = 5;
  if (this->has_expect_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expect_acc_);
  }

  // .sim_msg.SpeedExpectation expect_speed = 6;
  if (this->has_expect_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expect_speed_);
  }

  // .sim_msg.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->indicator_state());
  }

  // .sim_msg.PlanMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  // .sim_msg.PlanClassification class = 3;
  if (this->class_() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->class_());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlanStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PlanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlanStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PlanStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PlanStatus)
    MergeFrom(*source);
  }
}

void PlanStatus::MergeFrom(const PlanStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PlanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expect_steering()) {
    mutable_expect_steering()->::sim_msg::SteeringExpectation::MergeFrom(from.expect_steering());
  }
  if (from.has_expect_acc()) {
    mutable_expect_acc()->::sim_msg::AccelerationExpectation::MergeFrom(from.expect_acc());
  }
  if (from.has_expect_speed()) {
    mutable_expect_speed()->::sim_msg::SpeedExpectation::MergeFrom(from.expect_speed());
  }
  if (from.indicator_state() != 0) {
    set_indicator_state(from.indicator_state());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
}

void PlanStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PlanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanStatus::CopyFrom(const PlanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PlanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanStatus::IsInitialized() const {
  return true;
}

void PlanStatus::InternalSwap(PlanStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expect_steering_, other->expect_steering_);
  swap(expect_acc_, other->expect_acc_);
  swap(expect_speed_, other->expect_speed_);
  swap(indicator_state_, other->indicator_state_);
  swap(mode_, other->mode_);
  swap(class__, other->class__);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlanStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::SteeringExpectation* Arena::CreateMaybeMessage< ::sim_msg::SteeringExpectation >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SteeringExpectation >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::AccelerationExpectation* Arena::CreateMaybeMessage< ::sim_msg::AccelerationExpectation >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::AccelerationExpectation >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::SpeedExpectation* Arena::CreateMaybeMessage< ::sim_msg::SpeedExpectation >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SpeedExpectation >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PlanStatus* Arena::CreateMaybeMessage< ::sim_msg::PlanStatus >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PlanStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
