// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacles.proto
#pragma warning (disable : 4125)
#include "obstacles.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_obstacles_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacle_obstacles_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
namespace sim_msg {
class ObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle> _instance;
} _Obstacle_default_instance_;
class ObstaclesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacles> _instance;
} _Obstacles_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Obstacle_obstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Obstacle_default_instance_;
    new (ptr) ::sim_msg::Obstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Obstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Obstacle_obstacles_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Obstacle_obstacles_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,}};

static void InitDefaultsscc_info_Obstacles_obstacles_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Obstacles_default_instance_;
    new (ptr) ::sim_msg::Obstacles();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Obstacles::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Obstacles_obstacles_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Obstacles_obstacles_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_Obstacle_obstacles_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_obstacles_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_obstacles_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_obstacles_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_obstacles_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, classification_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, box_center_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, box_size_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, yaw_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, absolute_longitude_v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, absolute_lateral_v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, absolute_longitude_a_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, dl_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacle, confidence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacles, header_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Obstacles, obstacles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Obstacle)},
  { 17, -1, sizeof(::sim_msg::Obstacles)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Obstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Obstacles_default_instance_),
};

const char descriptor_table_protodef_obstacles_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017obstacles.proto\022\007sim_msg\032\013basic.proto\032"
  "\014header.proto\"\302\002\n\010Obstacle\022\n\n\002id\030\001 \001(\005\022-"
  "\n\016classification\030\002 \001(\0162\025.sim_msg.Obstacl"
  "eType\022\021\n\ttimestamp\030\003 \001(\001\022!\n\nbox_center\030\004"
  " \001(\0132\r.sim_msg.Vec3\022\037\n\010box_size\030\005 \001(\0132\r."
  "sim_msg.Vec3\022\013\n\003yaw\030\006 \001(\002\022\037\n\010velocity\030\007 "
  "\001(\0132\r.sim_msg.Vec3\022\034\n\024absolute_longitude"
  "_v\030\010 \001(\002\022\032\n\022absolute_lateral_v\030\t \001(\002\022\034\n\024"
  "absolute_longitude_a\030\n \001(\002\022\n\n\002dl\030\013 \001(\002\022\022"
  "\n\nconfidence\030\014 \001(\002\"R\n\tObstacles\022\037\n\006heade"
  "r\030\001 \001(\0132\017.sim_msg.Header\022$\n\tobstacles\030\002 "
  "\003(\0132\021.sim_msg.Obstacle*\271\001\n\014ObstacleType\022"
  "\025\n\021TYPE_UNCLASSIFIED\020\000\022\026\n\022TYPE_UNKNOWN_S"
  "MALL\020\001\022\024\n\020TYPE_UNKNOWN_BIG\020\002\022\023\n\017TYPE_PED"
  "ESTRIAN\020\003\022\r\n\tTYPE_BIKE\020\004\022\014\n\010TYPE_CAR\020\005\022\016"
  "\n\nTYPE_TRUCK\020\006\022\017\n\013TYPE_STATIC\020\007\022\021\n\rTYPE_"
  "RESERVED\020\010b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_obstacles_2eproto_deps[2] = {
  &::descriptor_table_basic_2eproto,
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_obstacles_2eproto_sccs[2] = {
  &scc_info_Obstacle_obstacles_2eproto.base,
  &scc_info_Obstacles_obstacles_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_obstacles_2eproto_once;
static bool descriptor_table_obstacles_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_obstacles_2eproto = {
  &descriptor_table_obstacles_2eproto_initialized, descriptor_table_protodef_obstacles_2eproto, "obstacles.proto", 658,
  &descriptor_table_obstacles_2eproto_once, descriptor_table_obstacles_2eproto_sccs, descriptor_table_obstacles_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_obstacles_2eproto::offsets,
  file_level_metadata_obstacles_2eproto, 2, file_level_enum_descriptors_obstacles_2eproto, file_level_service_descriptors_obstacles_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_obstacles_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_obstacles_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObstacleType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_obstacles_2eproto);
  return file_level_enum_descriptors_obstacles_2eproto[0];
}
bool ObstacleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
  ::sim_msg::_Obstacle_default_instance_._instance.get_mutable()->box_center_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Obstacle_default_instance_._instance.get_mutable()->box_size_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Obstacle_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}
class Obstacle::_Internal {
 public:
  static const ::sim_msg::Vec3& box_center(const Obstacle* msg);
  static const ::sim_msg::Vec3& box_size(const Obstacle* msg);
  static const ::sim_msg::Vec3& velocity(const Obstacle* msg);
};

const ::sim_msg::Vec3&
Obstacle::_Internal::box_center(const Obstacle* msg) {
  return *msg->box_center_;
}
const ::sim_msg::Vec3&
Obstacle::_Internal::box_size(const Obstacle* msg) {
  return *msg->box_size_;
}
const ::sim_msg::Vec3&
Obstacle::_Internal::velocity(const Obstacle* msg) {
  return *msg->velocity_;
}
void Obstacle::clear_box_center() {
  if (GetArenaNoVirtual() == nullptr && box_center_ != nullptr) {
    delete box_center_;
  }
  box_center_ = nullptr;
}
void Obstacle::clear_box_size() {
  if (GetArenaNoVirtual() == nullptr && box_size_ != nullptr) {
    delete box_size_;
  }
  box_size_ = nullptr;
}
void Obstacle::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
Obstacle::Obstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_box_center()) {
    box_center_ = new ::sim_msg::Vec3(*from.box_center_);
  } else {
    box_center_ = nullptr;
  }
  if (from.has_box_size()) {
    box_size_ = new ::sim_msg::Vec3(*from.box_size_);
  } else {
    box_size_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::sim_msg::Vec3(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Obstacle)
}

void Obstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacle_obstacles_2eproto.base);
  ::memset(&box_center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&box_center_)) + sizeof(confidence_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:sim_msg.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
  if (this != internal_default_instance()) delete box_center_;
  if (this != internal_default_instance()) delete box_size_;
  if (this != internal_default_instance()) delete velocity_;
}

void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle& Obstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_obstacles_2eproto.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && box_center_ != nullptr) {
    delete box_center_;
  }
  box_center_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && box_size_ != nullptr) {
    delete box_size_;
  }
  box_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confidence_) -
      reinterpret_cast<char*>(&id_)) + sizeof(confidence_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Obstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ObstacleType classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_classification(static_cast<::sim_msg::ObstacleType>(val));
        } else goto handle_unusual;
        continue;
      // double timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 box_center = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_box_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 box_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_box_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float yaw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 velocity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float absolute_longitude_v = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          absolute_longitude_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float absolute_lateral_v = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          absolute_lateral_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float absolute_longitude_a = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          absolute_longitude_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          dl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float confidence = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Obstacle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Obstacle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ObstacleType classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification(static_cast< ::sim_msg::ObstacleType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double timestamp = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 box_center = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 box_size = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_box_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float yaw = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (53 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 velocity = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float absolute_longitude_v = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_longitude_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float absolute_lateral_v = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_lateral_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float absolute_longitude_a = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (85 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolute_longitude_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dl = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (93 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (101 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Obstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Obstacle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .sim_msg.ObstacleType classification = 2;
  if (this->classification() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->classification(), output);
  }

  // double timestamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->timestamp(), output);
  }

  // .sim_msg.Vec3 box_center = 4;
  if (this->has_box_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::box_center(this), output);
  }

  // .sim_msg.Vec3 box_size = 5;
  if (this->has_box_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::box_size(this), output);
  }

  // float yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  // .sim_msg.Vec3 velocity = 7;
  if (this->has_velocity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::velocity(this), output);
  }

  // float absolute_longitude_v = 8;
  if (!(this->absolute_longitude_v() <= 0 && this->absolute_longitude_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(8, this->absolute_longitude_v(), output);
  }

  // float absolute_lateral_v = 9;
  if (!(this->absolute_lateral_v() <= 0 && this->absolute_lateral_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(9, this->absolute_lateral_v(), output);
  }

  // float absolute_longitude_a = 10;
  if (!(this->absolute_longitude_a() <= 0 && this->absolute_longitude_a() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(10, this->absolute_longitude_a(), output);
  }

  // float dl = 11;
  if (!(this->dl() <= 0 && this->dl() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(11, this->dl(), output);
  }

  // float confidence = 12;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(12, this->confidence(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Obstacle)
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .sim_msg.ObstacleType classification = 2;
  if (this->classification() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->classification(), target);
  }

  // double timestamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->timestamp(), target);
  }

  // .sim_msg.Vec3 box_center = 4;
  if (this->has_box_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::box_center(this), target);
  }

  // .sim_msg.Vec3 box_size = 5;
  if (this->has_box_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::box_size(this), target);
  }

  // float yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  // .sim_msg.Vec3 velocity = 7;
  if (this->has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::velocity(this), target);
  }

  // float absolute_longitude_v = 8;
  if (!(this->absolute_longitude_v() <= 0 && this->absolute_longitude_v() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->absolute_longitude_v(), target);
  }

  // float absolute_lateral_v = 9;
  if (!(this->absolute_lateral_v() <= 0 && this->absolute_lateral_v() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->absolute_lateral_v(), target);
  }

  // float absolute_longitude_a = 10;
  if (!(this->absolute_longitude_a() <= 0 && this->absolute_longitude_a() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->absolute_longitude_a(), target);
  }

  // float dl = 11;
  if (!(this->dl() <= 0 && this->dl() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->dl(), target);
  }

  // float confidence = 12;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->confidence(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Obstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 box_center = 4;
  if (this->has_box_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_center_);
  }

  // .sim_msg.Vec3 box_size = 5;
  if (this->has_box_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *box_size_);
  }

  // .sim_msg.Vec3 velocity = 7;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .sim_msg.ObstacleType classification = 2;
  if (this->classification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->classification());
  }

  // double timestamp = 3;
  if (!(this->timestamp() <= 0 && this->timestamp() >= 0)) {
    total_size += 1 + 8;
  }

  // float yaw = 6;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 4;
  }

  // float absolute_longitude_v = 8;
  if (!(this->absolute_longitude_v() <= 0 && this->absolute_longitude_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float absolute_lateral_v = 9;
  if (!(this->absolute_lateral_v() <= 0 && this->absolute_lateral_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float absolute_longitude_a = 10;
  if (!(this->absolute_longitude_a() <= 0 && this->absolute_longitude_a() >= 0)) {
    total_size += 1 + 4;
  }

  // float dl = 11;
  if (!(this->dl() <= 0 && this->dl() >= 0)) {
    total_size += 1 + 4;
  }

  // float confidence = 12;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Obstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_box_center()) {
    mutable_box_center()->::sim_msg::Vec3::MergeFrom(from.box_center());
  }
  if (from.has_box_size()) {
    mutable_box_size()->::sim_msg::Vec3::MergeFrom(from.box_size());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::sim_msg::Vec3::MergeFrom(from.velocity());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.classification() != 0) {
    set_classification(from.classification());
  }
  if (!(from.timestamp() <= 0 && from.timestamp() >= 0)) {
    set_timestamp(from.timestamp());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    set_yaw(from.yaw());
  }
  if (!(from.absolute_longitude_v() <= 0 && from.absolute_longitude_v() >= 0)) {
    set_absolute_longitude_v(from.absolute_longitude_v());
  }
  if (!(from.absolute_lateral_v() <= 0 && from.absolute_lateral_v() >= 0)) {
    set_absolute_lateral_v(from.absolute_lateral_v());
  }
  if (!(from.absolute_longitude_a() <= 0 && from.absolute_longitude_a() >= 0)) {
    set_absolute_longitude_a(from.absolute_longitude_a());
  }
  if (!(from.dl() <= 0 && from.dl() >= 0)) {
    set_dl(from.dl());
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    set_confidence(from.confidence());
  }
}

void Obstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(box_center_, other->box_center_);
  swap(box_size_, other->box_size_);
  swap(velocity_, other->velocity_);
  swap(id_, other->id_);
  swap(classification_, other->classification_);
  swap(timestamp_, other->timestamp_);
  swap(yaw_, other->yaw_);
  swap(absolute_longitude_v_, other->absolute_longitude_v_);
  swap(absolute_lateral_v_, other->absolute_lateral_v_);
  swap(absolute_longitude_a_, other->absolute_longitude_a_);
  swap(dl_, other->dl_);
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obstacles::InitAsDefaultInstance() {
  ::sim_msg::_Obstacles_default_instance_._instance.get_mutable()->header_ = const_cast< ::sim_msg::Header*>(
      ::sim_msg::Header::internal_default_instance());
}
class Obstacles::_Internal {
 public:
  static const ::sim_msg::Header& header(const Obstacles* msg);
};

const ::sim_msg::Header&
Obstacles::_Internal::header(const Obstacles* msg) {
  return *msg->header_;
}
void Obstacles::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Obstacles::Obstacles()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::sim_msg::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Obstacles)
}

void Obstacles::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Obstacles_obstacles_2eproto.base);
  header_ = nullptr;
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:sim_msg.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void Obstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacles& Obstacles::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacles_obstacles_2eproto.base);
  return *internal_default_instance();
}


void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Obstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Obstacle obstacles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Obstacles::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Obstacles)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Obstacle obstacles = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Obstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Obstacles)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Obstacles::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .sim_msg.Obstacle obstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Obstacles)
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacles::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Obstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .sim_msg.Obstacle obstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->obstacles(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Obstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Obstacle obstacles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacles::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacles>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Obstacles)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (from.has_header()) {
    mutable_header()->::sim_msg::Header::MergeFrom(from.header());
  }
}

void Obstacles::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacles::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Obstacle* Arena::CreateMaybeMessage< ::sim_msg::Obstacle >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Obstacles* Arena::CreateMaybeMessage< ::sim_msg::Obstacles >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Obstacles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
