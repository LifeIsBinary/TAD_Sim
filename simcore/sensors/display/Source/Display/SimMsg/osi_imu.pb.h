// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_imu.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fimu_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fimu_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fimu_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fimu_2eproto;
namespace osi3 {
class imu;
class imuDefaultTypeInternal;
extern imuDefaultTypeInternal _imu_default_instance_;
class imu_EulerAngle;
class imu_EulerAngleDefaultTypeInternal;
extern imu_EulerAngleDefaultTypeInternal _imu_EulerAngle_default_instance_;
class imu_GNSSData;
class imu_GNSSDataDefaultTypeInternal;
extern imu_GNSSDataDefaultTypeInternal _imu_GNSSData_default_instance_;
class imu_IMUCfg;
class imu_IMUCfgDefaultTypeInternal;
extern imu_IMUCfgDefaultTypeInternal _imu_IMUCfg_default_instance_;
class imu_IMUGroundTruth;
class imu_IMUGroundTruthDefaultTypeInternal;
extern imu_IMUGroundTruthDefaultTypeInternal _imu_IMUGroundTruth_default_instance_;
class imu_IMURigidENUGNSS;
class imu_IMURigidENUGNSSDefaultTypeInternal;
extern imu_IMURigidENUGNSSDefaultTypeInternal _imu_IMURigidENUGNSS_default_instance_;
class imu_IMUSensorData;
class imu_IMUSensorDataDefaultTypeInternal;
extern imu_IMUSensorDataDefaultTypeInternal _imu_IMUSensorData_default_instance_;
class imu_Quaternion;
class imu_QuaternionDefaultTypeInternal;
extern imu_QuaternionDefaultTypeInternal _imu_Quaternion_default_instance_;
class imu_WheelSpd;
class imu_WheelSpdDefaultTypeInternal;
extern imu_WheelSpdDefaultTypeInternal _imu_WheelSpd_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::imu* Arena::CreateMaybeMessage<::osi3::imu>(Arena*);
template<> ::osi3::imu_EulerAngle* Arena::CreateMaybeMessage<::osi3::imu_EulerAngle>(Arena*);
template<> ::osi3::imu_GNSSData* Arena::CreateMaybeMessage<::osi3::imu_GNSSData>(Arena*);
template<> ::osi3::imu_IMUCfg* Arena::CreateMaybeMessage<::osi3::imu_IMUCfg>(Arena*);
template<> ::osi3::imu_IMUGroundTruth* Arena::CreateMaybeMessage<::osi3::imu_IMUGroundTruth>(Arena*);
template<> ::osi3::imu_IMURigidENUGNSS* Arena::CreateMaybeMessage<::osi3::imu_IMURigidENUGNSS>(Arena*);
template<> ::osi3::imu_IMUSensorData* Arena::CreateMaybeMessage<::osi3::imu_IMUSensorData>(Arena*);
template<> ::osi3::imu_Quaternion* Arena::CreateMaybeMessage<::osi3::imu_Quaternion>(Arena*);
template<> ::osi3::imu_WheelSpd* Arena::CreateMaybeMessage<::osi3::imu_WheelSpd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class imu_Quaternion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.Quaternion) */ {
 public:
  imu_Quaternion();
  virtual ~imu_Quaternion();

  imu_Quaternion(const imu_Quaternion& from);
  imu_Quaternion(imu_Quaternion&& from) noexcept
    : imu_Quaternion() {
    *this = ::std::move(from);
  }

  inline imu_Quaternion& operator=(const imu_Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_Quaternion& operator=(imu_Quaternion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_Quaternion* internal_default_instance() {
    return reinterpret_cast<const imu_Quaternion*>(
               &_imu_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(imu_Quaternion& a, imu_Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_Quaternion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_Quaternion* New() const final {
    return CreateMaybeMessage<imu_Quaternion>(nullptr);
  }

  imu_Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_Quaternion& from);
  void MergeFrom(const imu_Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.Quaternion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQxFieldNumber = 1,
    kQyFieldNumber = 2,
    kQzFieldNumber = 3,
    kQwFieldNumber = 4,
  };
  // double qx = 1;
  void clear_qx();
  double qx() const;
  void set_qx(double value);

  // double qy = 2;
  void clear_qy();
  double qy() const;
  void set_qy(double value);

  // double qz = 3;
  void clear_qz();
  double qz() const;
  void set_qz(double value);

  // double qw = 4;
  void clear_qw();
  double qw() const;
  void set_qw(double value);

  // @@protoc_insertion_point(class_scope:osi3.imu.Quaternion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double qx_;
  double qy_;
  double qz_;
  double qw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu_EulerAngle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.EulerAngle) */ {
 public:
  imu_EulerAngle();
  virtual ~imu_EulerAngle();

  imu_EulerAngle(const imu_EulerAngle& from);
  imu_EulerAngle(imu_EulerAngle&& from) noexcept
    : imu_EulerAngle() {
    *this = ::std::move(from);
  }

  inline imu_EulerAngle& operator=(const imu_EulerAngle& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_EulerAngle& operator=(imu_EulerAngle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_EulerAngle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_EulerAngle* internal_default_instance() {
    return reinterpret_cast<const imu_EulerAngle*>(
               &_imu_EulerAngle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(imu_EulerAngle& a, imu_EulerAngle& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_EulerAngle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_EulerAngle* New() const final {
    return CreateMaybeMessage<imu_EulerAngle>(nullptr);
  }

  imu_EulerAngle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_EulerAngle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_EulerAngle& from);
  void MergeFrom(const imu_EulerAngle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_EulerAngle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.EulerAngle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // double roll = 1;
  void clear_roll();
  double roll() const;
  void set_roll(double value);

  // double pitch = 2;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);

  // double yaw = 3;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:osi3.imu.EulerAngle)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double roll_;
  double pitch_;
  double yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu_IMUCfg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.IMUCfg) */ {
 public:
  imu_IMUCfg();
  virtual ~imu_IMUCfg();

  imu_IMUCfg(const imu_IMUCfg& from);
  imu_IMUCfg(imu_IMUCfg&& from) noexcept
    : imu_IMUCfg() {
    *this = ::std::move(from);
  }

  inline imu_IMUCfg& operator=(const imu_IMUCfg& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_IMUCfg& operator=(imu_IMUCfg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_IMUCfg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_IMUCfg* internal_default_instance() {
    return reinterpret_cast<const imu_IMUCfg*>(
               &_imu_IMUCfg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(imu_IMUCfg& a, imu_IMUCfg& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_IMUCfg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_IMUCfg* New() const final {
    return CreateMaybeMessage<imu_IMUCfg>(nullptr);
  }

  imu_IMUCfg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_IMUCfg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_IMUCfg& from);
  void MergeFrom(const imu_IMUCfg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_IMUCfg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.IMUCfg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kEulerFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // .osi3.Vector3d position = 2;
  bool has_position() const;
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // .osi3.imu.Quaternion orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  const ::osi3::imu_Quaternion& orientation() const;
  ::osi3::imu_Quaternion* release_orientation();
  ::osi3::imu_Quaternion* mutable_orientation();
  void set_allocated_orientation(::osi3::imu_Quaternion* orientation);

  // .osi3.imu.EulerAngle euler = 4;
  bool has_euler() const;
  void clear_euler();
  const ::osi3::imu_EulerAngle& euler() const;
  ::osi3::imu_EulerAngle* release_euler();
  ::osi3::imu_EulerAngle* mutable_euler();
  void set_allocated_euler(::osi3::imu_EulerAngle* euler);

  // @@protoc_insertion_point(class_scope:osi3.imu.IMUCfg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::osi3::Vector3d* position_;
  ::osi3::imu_Quaternion* orientation_;
  ::osi3::imu_EulerAngle* euler_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu_WheelSpd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.WheelSpd) */ {
 public:
  imu_WheelSpd();
  virtual ~imu_WheelSpd();

  imu_WheelSpd(const imu_WheelSpd& from);
  imu_WheelSpd(imu_WheelSpd&& from) noexcept
    : imu_WheelSpd() {
    *this = ::std::move(from);
  }

  inline imu_WheelSpd& operator=(const imu_WheelSpd& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_WheelSpd& operator=(imu_WheelSpd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_WheelSpd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_WheelSpd* internal_default_instance() {
    return reinterpret_cast<const imu_WheelSpd*>(
               &_imu_WheelSpd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(imu_WheelSpd& a, imu_WheelSpd& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_WheelSpd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_WheelSpd* New() const final {
    return CreateMaybeMessage<imu_WheelSpd>(nullptr);
  }

  imu_WheelSpd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_WheelSpd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_WheelSpd& from);
  void MergeFrom(const imu_WheelSpd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_WheelSpd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.WheelSpd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheelSpdRLFieldNumber = 1,
    kWheelSpdRRFieldNumber = 2,
  };
  // double wheelSpdRL = 1;
  void clear_wheelspdrl();
  double wheelspdrl() const;
  void set_wheelspdrl(double value);

  // double wheelSpdRR = 2;
  void clear_wheelspdrr();
  double wheelspdrr() const;
  void set_wheelspdrr(double value);

  // @@protoc_insertion_point(class_scope:osi3.imu.WheelSpd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double wheelspdrl_;
  double wheelspdrr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu_GNSSData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.GNSSData) */ {
 public:
  imu_GNSSData();
  virtual ~imu_GNSSData();

  imu_GNSSData(const imu_GNSSData& from);
  imu_GNSSData(imu_GNSSData&& from) noexcept
    : imu_GNSSData() {
    *this = ::std::move(from);
  }

  inline imu_GNSSData& operator=(const imu_GNSSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_GNSSData& operator=(imu_GNSSData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_GNSSData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_GNSSData* internal_default_instance() {
    return reinterpret_cast<const imu_GNSSData*>(
               &_imu_GNSSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(imu_GNSSData& a, imu_GNSSData& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_GNSSData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_GNSSData* New() const final {
    return CreateMaybeMessage<imu_GNSSData>(nullptr);
  }

  imu_GNSSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_GNSSData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_GNSSData& from);
  void MergeFrom(const imu_GNSSData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_GNSSData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.GNSSData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongtiFieldNumber = 1,
    kLatFieldNumber = 2,
    kAltFieldNumber = 3,
  };
  // double longti = 1;
  void clear_longti();
  double longti() const;
  void set_longti(double value);

  // double lat = 2;
  void clear_lat();
  double lat() const;
  void set_lat(double value);

  // double alt = 3;
  void clear_alt();
  double alt() const;
  void set_alt(double value);

  // @@protoc_insertion_point(class_scope:osi3.imu.GNSSData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double longti_;
  double lat_;
  double alt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu_IMUSensorData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.IMUSensorData) */ {
 public:
  imu_IMUSensorData();
  virtual ~imu_IMUSensorData();

  imu_IMUSensorData(const imu_IMUSensorData& from);
  imu_IMUSensorData(imu_IMUSensorData&& from) noexcept
    : imu_IMUSensorData() {
    *this = ::std::move(from);
  }

  inline imu_IMUSensorData& operator=(const imu_IMUSensorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_IMUSensorData& operator=(imu_IMUSensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_IMUSensorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_IMUSensorData* internal_default_instance() {
    return reinterpret_cast<const imu_IMUSensorData*>(
               &_imu_IMUSensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(imu_IMUSensorData& a, imu_IMUSensorData& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_IMUSensorData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_IMUSensorData* New() const final {
    return CreateMaybeMessage<imu_IMUSensorData>(nullptr);
  }

  imu_IMUSensorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_IMUSensorData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_IMUSensorData& from);
  void MergeFrom(const imu_IMUSensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_IMUSensorData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.IMUSensorData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelFieldNumber = 1,
    kAngularVFieldNumber = 2,
    kWheelspdFieldNumber = 3,
  };
  // .osi3.Vector3d accel = 1;
  bool has_accel() const;
  void clear_accel();
  const ::osi3::Vector3d& accel() const;
  ::osi3::Vector3d* release_accel();
  ::osi3::Vector3d* mutable_accel();
  void set_allocated_accel(::osi3::Vector3d* accel);

  // .osi3.Vector3d angular_v = 2;
  bool has_angular_v() const;
  void clear_angular_v();
  const ::osi3::Vector3d& angular_v() const;
  ::osi3::Vector3d* release_angular_v();
  ::osi3::Vector3d* mutable_angular_v();
  void set_allocated_angular_v(::osi3::Vector3d* angular_v);

  // .osi3.imu.WheelSpd wheelspd = 3;
  bool has_wheelspd() const;
  void clear_wheelspd();
  const ::osi3::imu_WheelSpd& wheelspd() const;
  ::osi3::imu_WheelSpd* release_wheelspd();
  ::osi3::imu_WheelSpd* mutable_wheelspd();
  void set_allocated_wheelspd(::osi3::imu_WheelSpd* wheelspd);

  // @@protoc_insertion_point(class_scope:osi3.imu.IMUSensorData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Vector3d* accel_;
  ::osi3::Vector3d* angular_v_;
  ::osi3::imu_WheelSpd* wheelspd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu_IMUGroundTruth :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.IMUGroundTruth) */ {
 public:
  imu_IMUGroundTruth();
  virtual ~imu_IMUGroundTruth();

  imu_IMUGroundTruth(const imu_IMUGroundTruth& from);
  imu_IMUGroundTruth(imu_IMUGroundTruth&& from) noexcept
    : imu_IMUGroundTruth() {
    *this = ::std::move(from);
  }

  inline imu_IMUGroundTruth& operator=(const imu_IMUGroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_IMUGroundTruth& operator=(imu_IMUGroundTruth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_IMUGroundTruth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_IMUGroundTruth* internal_default_instance() {
    return reinterpret_cast<const imu_IMUGroundTruth*>(
               &_imu_IMUGroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(imu_IMUGroundTruth& a, imu_IMUGroundTruth& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_IMUGroundTruth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_IMUGroundTruth* New() const final {
    return CreateMaybeMessage<imu_IMUGroundTruth>(nullptr);
  }

  imu_IMUGroundTruth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_IMUGroundTruth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_IMUGroundTruth& from);
  void MergeFrom(const imu_IMUGroundTruth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_IMUGroundTruth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.IMUGroundTruth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kGnssFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kVelocityTruthFieldNumber = 4,
    kAccFieldNumber = 5,
    kAccTruthFieldNumber = 6,
    kQuatRotFieldNumber = 7,
    kQuatRotTruthFieldNumber = 8,
    kDist2GpsFieldNumber = 9,
  };
  // .osi3.Vector3d position = 1;
  bool has_position() const;
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // .osi3.imu.GNSSData gnss = 2;
  bool has_gnss() const;
  void clear_gnss();
  const ::osi3::imu_GNSSData& gnss() const;
  ::osi3::imu_GNSSData* release_gnss();
  ::osi3::imu_GNSSData* mutable_gnss();
  void set_allocated_gnss(::osi3::imu_GNSSData* gnss);

  // .osi3.Vector3d velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  const ::osi3::Vector3d& velocity() const;
  ::osi3::Vector3d* release_velocity();
  ::osi3::Vector3d* mutable_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);

  // .osi3.Vector3d velocity_truth = 4;
  bool has_velocity_truth() const;
  void clear_velocity_truth();
  const ::osi3::Vector3d& velocity_truth() const;
  ::osi3::Vector3d* release_velocity_truth();
  ::osi3::Vector3d* mutable_velocity_truth();
  void set_allocated_velocity_truth(::osi3::Vector3d* velocity_truth);

  // .osi3.Vector3d acc = 5;
  bool has_acc() const;
  void clear_acc();
  const ::osi3::Vector3d& acc() const;
  ::osi3::Vector3d* release_acc();
  ::osi3::Vector3d* mutable_acc();
  void set_allocated_acc(::osi3::Vector3d* acc);

  // .osi3.Vector3d acc_truth = 6;
  bool has_acc_truth() const;
  void clear_acc_truth();
  const ::osi3::Vector3d& acc_truth() const;
  ::osi3::Vector3d* release_acc_truth();
  ::osi3::Vector3d* mutable_acc_truth();
  void set_allocated_acc_truth(::osi3::Vector3d* acc_truth);

  // .osi3.imu.Quaternion quatRot = 7;
  bool has_quatrot() const;
  void clear_quatrot();
  const ::osi3::imu_Quaternion& quatrot() const;
  ::osi3::imu_Quaternion* release_quatrot();
  ::osi3::imu_Quaternion* mutable_quatrot();
  void set_allocated_quatrot(::osi3::imu_Quaternion* quatrot);

  // .osi3.imu.Quaternion quatRot_truth = 8;
  bool has_quatrot_truth() const;
  void clear_quatrot_truth();
  const ::osi3::imu_Quaternion& quatrot_truth() const;
  ::osi3::imu_Quaternion* release_quatrot_truth();
  ::osi3::imu_Quaternion* mutable_quatrot_truth();
  void set_allocated_quatrot_truth(::osi3::imu_Quaternion* quatrot_truth);

  // double dist_2_gps = 9;
  void clear_dist_2_gps();
  double dist_2_gps() const;
  void set_dist_2_gps(double value);

  // @@protoc_insertion_point(class_scope:osi3.imu.IMUGroundTruth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Vector3d* position_;
  ::osi3::imu_GNSSData* gnss_;
  ::osi3::Vector3d* velocity_;
  ::osi3::Vector3d* velocity_truth_;
  ::osi3::Vector3d* acc_;
  ::osi3::Vector3d* acc_truth_;
  ::osi3::imu_Quaternion* quatrot_;
  ::osi3::imu_Quaternion* quatrot_truth_;
  double dist_2_gps_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu_IMURigidENUGNSS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu.IMURigidENUGNSS) */ {
 public:
  imu_IMURigidENUGNSS();
  virtual ~imu_IMURigidENUGNSS();

  imu_IMURigidENUGNSS(const imu_IMURigidENUGNSS& from);
  imu_IMURigidENUGNSS(imu_IMURigidENUGNSS&& from) noexcept
    : imu_IMURigidENUGNSS() {
    *this = ::std::move(from);
  }

  inline imu_IMURigidENUGNSS& operator=(const imu_IMURigidENUGNSS& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu_IMURigidENUGNSS& operator=(imu_IMURigidENUGNSS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu_IMURigidENUGNSS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu_IMURigidENUGNSS* internal_default_instance() {
    return reinterpret_cast<const imu_IMURigidENUGNSS*>(
               &_imu_IMURigidENUGNSS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(imu_IMURigidENUGNSS& a, imu_IMURigidENUGNSS& b) {
    a.Swap(&b);
  }
  inline void Swap(imu_IMURigidENUGNSS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu_IMURigidENUGNSS* New() const final {
    return CreateMaybeMessage<imu_IMURigidENUGNSS>(nullptr);
  }

  imu_IMURigidENUGNSS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu_IMURigidENUGNSS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu_IMURigidENUGNSS& from);
  void MergeFrom(const imu_IMURigidENUGNSS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu_IMURigidENUGNSS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu.IMURigidENUGNSS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosENUFieldNumber = 1,
    kGnssFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kEulerAngleFieldNumber = 4,
    kQuatRotFieldNumber = 5,
  };
  // .osi3.Vector3d posENU = 1;
  bool has_posenu() const;
  void clear_posenu();
  const ::osi3::Vector3d& posenu() const;
  ::osi3::Vector3d* release_posenu();
  ::osi3::Vector3d* mutable_posenu();
  void set_allocated_posenu(::osi3::Vector3d* posenu);

  // .osi3.imu.GNSSData gnss = 2;
  bool has_gnss() const;
  void clear_gnss();
  const ::osi3::imu_GNSSData& gnss() const;
  ::osi3::imu_GNSSData* release_gnss();
  ::osi3::imu_GNSSData* mutable_gnss();
  void set_allocated_gnss(::osi3::imu_GNSSData* gnss);

  // .osi3.Vector3d velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  const ::osi3::Vector3d& velocity() const;
  ::osi3::Vector3d* release_velocity();
  ::osi3::Vector3d* mutable_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);

  // .osi3.imu.EulerAngle eulerAngle = 4;
  bool has_eulerangle() const;
  void clear_eulerangle();
  const ::osi3::imu_EulerAngle& eulerangle() const;
  ::osi3::imu_EulerAngle* release_eulerangle();
  ::osi3::imu_EulerAngle* mutable_eulerangle();
  void set_allocated_eulerangle(::osi3::imu_EulerAngle* eulerangle);

  // .osi3.imu.Quaternion quatRot = 5;
  bool has_quatrot() const;
  void clear_quatrot();
  const ::osi3::imu_Quaternion& quatrot() const;
  ::osi3::imu_Quaternion* release_quatrot();
  ::osi3::imu_Quaternion* mutable_quatrot();
  void set_allocated_quatrot(::osi3::imu_Quaternion* quatrot);

  // @@protoc_insertion_point(class_scope:osi3.imu.IMURigidENUGNSS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Vector3d* posenu_;
  ::osi3::imu_GNSSData* gnss_;
  ::osi3::Vector3d* velocity_;
  ::osi3::imu_EulerAngle* eulerangle_;
  ::osi3::imu_Quaternion* quatrot_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// -------------------------------------------------------------------

class imu :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.imu) */ {
 public:
  imu();
  virtual ~imu();

  imu(const imu& from);
  imu(imu&& from) noexcept
    : imu() {
    *this = ::std::move(from);
  }

  inline imu& operator=(const imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline imu& operator=(imu&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const imu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const imu* internal_default_instance() {
    return reinterpret_cast<const imu*>(
               &_imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(imu& a, imu& b) {
    a.Swap(&b);
  }
  inline void Swap(imu* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline imu* New() const final {
    return CreateMaybeMessage<imu>(nullptr);
  }

  imu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<imu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const imu& from);
  void MergeFrom(const imu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(imu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.imu";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fimu_2eproto);
    return ::descriptor_table_osi_5fimu_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef imu_Quaternion Quaternion;
  typedef imu_EulerAngle EulerAngle;
  typedef imu_IMUCfg IMUCfg;
  typedef imu_WheelSpd WheelSpd;
  typedef imu_GNSSData GNSSData;
  typedef imu_IMUSensorData IMUSensorData;
  typedef imu_IMUGroundTruth IMUGroundTruth;
  typedef imu_IMURigidENUGNSS IMURigidENUGNSS;

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kMountPosFieldNumber = 3,
    kImuDataFieldNumber = 4,
    kImuTruthFieldNumber = 5,
    kImuRigidFieldNumber = 6,
  };
  // .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);

  // .osi3.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);

  // .osi3.imu.IMUCfg mount_pos = 3;
  bool has_mount_pos() const;
  void clear_mount_pos();
  const ::osi3::imu_IMUCfg& mount_pos() const;
  ::osi3::imu_IMUCfg* release_mount_pos();
  ::osi3::imu_IMUCfg* mutable_mount_pos();
  void set_allocated_mount_pos(::osi3::imu_IMUCfg* mount_pos);

  // .osi3.imu.IMUSensorData imu_data = 4;
  bool has_imu_data() const;
  void clear_imu_data();
  const ::osi3::imu_IMUSensorData& imu_data() const;
  ::osi3::imu_IMUSensorData* release_imu_data();
  ::osi3::imu_IMUSensorData* mutable_imu_data();
  void set_allocated_imu_data(::osi3::imu_IMUSensorData* imu_data);

  // .osi3.imu.IMUGroundTruth imu_truth = 5;
  bool has_imu_truth() const;
  void clear_imu_truth();
  const ::osi3::imu_IMUGroundTruth& imu_truth() const;
  ::osi3::imu_IMUGroundTruth* release_imu_truth();
  ::osi3::imu_IMUGroundTruth* mutable_imu_truth();
  void set_allocated_imu_truth(::osi3::imu_IMUGroundTruth* imu_truth);

  // .osi3.imu.IMURigidENUGNSS imu_rigid = 6;
  bool has_imu_rigid() const;
  void clear_imu_rigid();
  const ::osi3::imu_IMURigidENUGNSS& imu_rigid() const;
  ::osi3::imu_IMURigidENUGNSS* release_imu_rigid();
  ::osi3::imu_IMURigidENUGNSS* mutable_imu_rigid();
  void set_allocated_imu_rigid(::osi3::imu_IMURigidENUGNSS* imu_rigid);

  // @@protoc_insertion_point(class_scope:osi3.imu)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::imu_IMUCfg* mount_pos_;
  ::osi3::imu_IMUSensorData* imu_data_;
  ::osi3::imu_IMUGroundTruth* imu_truth_;
  ::osi3::imu_IMURigidENUGNSS* imu_rigid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fimu_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// imu_Quaternion

// double qx = 1;
inline void imu_Quaternion::clear_qx() {
  qx_ = 0;
}
inline double imu_Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:osi3.imu.Quaternion.qx)
  return qx_;
}
inline void imu_Quaternion::set_qx(double value) {
  
  qx_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.Quaternion.qx)
}

// double qy = 2;
inline void imu_Quaternion::clear_qy() {
  qy_ = 0;
}
inline double imu_Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:osi3.imu.Quaternion.qy)
  return qy_;
}
inline void imu_Quaternion::set_qy(double value) {
  
  qy_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.Quaternion.qy)
}

// double qz = 3;
inline void imu_Quaternion::clear_qz() {
  qz_ = 0;
}
inline double imu_Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:osi3.imu.Quaternion.qz)
  return qz_;
}
inline void imu_Quaternion::set_qz(double value) {
  
  qz_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.Quaternion.qz)
}

// double qw = 4;
inline void imu_Quaternion::clear_qw() {
  qw_ = 0;
}
inline double imu_Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:osi3.imu.Quaternion.qw)
  return qw_;
}
inline void imu_Quaternion::set_qw(double value) {
  
  qw_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.Quaternion.qw)
}

// -------------------------------------------------------------------

// imu_EulerAngle

// double roll = 1;
inline void imu_EulerAngle::clear_roll() {
  roll_ = 0;
}
inline double imu_EulerAngle::roll() const {
  // @@protoc_insertion_point(field_get:osi3.imu.EulerAngle.roll)
  return roll_;
}
inline void imu_EulerAngle::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.EulerAngle.roll)
}

// double pitch = 2;
inline void imu_EulerAngle::clear_pitch() {
  pitch_ = 0;
}
inline double imu_EulerAngle::pitch() const {
  // @@protoc_insertion_point(field_get:osi3.imu.EulerAngle.pitch)
  return pitch_;
}
inline void imu_EulerAngle::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.EulerAngle.pitch)
}

// double yaw = 3;
inline void imu_EulerAngle::clear_yaw() {
  yaw_ = 0;
}
inline double imu_EulerAngle::yaw() const {
  // @@protoc_insertion_point(field_get:osi3.imu.EulerAngle.yaw)
  return yaw_;
}
inline void imu_EulerAngle::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.EulerAngle.yaw)
}

// -------------------------------------------------------------------

// imu_IMUCfg

// string name = 1;
inline void imu_IMUCfg::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& imu_IMUCfg::name() const {
  // @@protoc_insertion_point(field_get:osi3.imu.IMUCfg.name)
  return name_.GetNoArena();
}
inline void imu_IMUCfg::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.imu.IMUCfg.name)
}
inline void imu_IMUCfg::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.imu.IMUCfg.name)
}
inline void imu_IMUCfg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.imu.IMUCfg.name)
}
inline void imu_IMUCfg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.imu.IMUCfg.name)
}
inline std::string* imu_IMUCfg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUCfg.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* imu_IMUCfg::release_name() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUCfg.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void imu_IMUCfg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUCfg.name)
}

// .osi3.Vector3d position = 2;
inline bool imu_IMUCfg::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUCfg::position() const {
  const ::osi3::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUCfg.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUCfg::release_position() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUCfg.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUCfg::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUCfg.position)
  return position_;
}
inline void imu_IMUCfg::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUCfg.position)
}

// .osi3.imu.Quaternion orientation = 3;
inline bool imu_IMUCfg::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void imu_IMUCfg::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::osi3::imu_Quaternion& imu_IMUCfg::orientation() const {
  const ::osi3::imu_Quaternion* p = orientation_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUCfg.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_Quaternion*>(
      &::osi3::_imu_Quaternion_default_instance_);
}
inline ::osi3::imu_Quaternion* imu_IMUCfg::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUCfg.orientation)
  
  ::osi3::imu_Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::imu_Quaternion* imu_IMUCfg::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUCfg.orientation)
  return orientation_;
}
inline void imu_IMUCfg::set_allocated_orientation(::osi3::imu_Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUCfg.orientation)
}

// .osi3.imu.EulerAngle euler = 4;
inline bool imu_IMUCfg::has_euler() const {
  return this != internal_default_instance() && euler_ != nullptr;
}
inline void imu_IMUCfg::clear_euler() {
  if (GetArenaNoVirtual() == nullptr && euler_ != nullptr) {
    delete euler_;
  }
  euler_ = nullptr;
}
inline const ::osi3::imu_EulerAngle& imu_IMUCfg::euler() const {
  const ::osi3::imu_EulerAngle* p = euler_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUCfg.euler)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_EulerAngle*>(
      &::osi3::_imu_EulerAngle_default_instance_);
}
inline ::osi3::imu_EulerAngle* imu_IMUCfg::release_euler() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUCfg.euler)
  
  ::osi3::imu_EulerAngle* temp = euler_;
  euler_ = nullptr;
  return temp;
}
inline ::osi3::imu_EulerAngle* imu_IMUCfg::mutable_euler() {
  
  if (euler_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_EulerAngle>(GetArenaNoVirtual());
    euler_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUCfg.euler)
  return euler_;
}
inline void imu_IMUCfg::set_allocated_euler(::osi3::imu_EulerAngle* euler) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete euler_;
  }
  if (euler) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      euler = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler, submessage_arena);
    }
    
  } else {
    
  }
  euler_ = euler;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUCfg.euler)
}

// -------------------------------------------------------------------

// imu_WheelSpd

// double wheelSpdRL = 1;
inline void imu_WheelSpd::clear_wheelspdrl() {
  wheelspdrl_ = 0;
}
inline double imu_WheelSpd::wheelspdrl() const {
  // @@protoc_insertion_point(field_get:osi3.imu.WheelSpd.wheelSpdRL)
  return wheelspdrl_;
}
inline void imu_WheelSpd::set_wheelspdrl(double value) {
  
  wheelspdrl_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.WheelSpd.wheelSpdRL)
}

// double wheelSpdRR = 2;
inline void imu_WheelSpd::clear_wheelspdrr() {
  wheelspdrr_ = 0;
}
inline double imu_WheelSpd::wheelspdrr() const {
  // @@protoc_insertion_point(field_get:osi3.imu.WheelSpd.wheelSpdRR)
  return wheelspdrr_;
}
inline void imu_WheelSpd::set_wheelspdrr(double value) {
  
  wheelspdrr_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.WheelSpd.wheelSpdRR)
}

// -------------------------------------------------------------------

// imu_GNSSData

// double longti = 1;
inline void imu_GNSSData::clear_longti() {
  longti_ = 0;
}
inline double imu_GNSSData::longti() const {
  // @@protoc_insertion_point(field_get:osi3.imu.GNSSData.longti)
  return longti_;
}
inline void imu_GNSSData::set_longti(double value) {
  
  longti_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.GNSSData.longti)
}

// double lat = 2;
inline void imu_GNSSData::clear_lat() {
  lat_ = 0;
}
inline double imu_GNSSData::lat() const {
  // @@protoc_insertion_point(field_get:osi3.imu.GNSSData.lat)
  return lat_;
}
inline void imu_GNSSData::set_lat(double value) {
  
  lat_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.GNSSData.lat)
}

// double alt = 3;
inline void imu_GNSSData::clear_alt() {
  alt_ = 0;
}
inline double imu_GNSSData::alt() const {
  // @@protoc_insertion_point(field_get:osi3.imu.GNSSData.alt)
  return alt_;
}
inline void imu_GNSSData::set_alt(double value) {
  
  alt_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.GNSSData.alt)
}

// -------------------------------------------------------------------

// imu_IMUSensorData

// .osi3.Vector3d accel = 1;
inline bool imu_IMUSensorData::has_accel() const {
  return this != internal_default_instance() && accel_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUSensorData::accel() const {
  const ::osi3::Vector3d* p = accel_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUSensorData.accel)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUSensorData::release_accel() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUSensorData.accel)
  
  ::osi3::Vector3d* temp = accel_;
  accel_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUSensorData::mutable_accel() {
  
  if (accel_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    accel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUSensorData.accel)
  return accel_;
}
inline void imu_IMUSensorData::set_allocated_accel(::osi3::Vector3d* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_);
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUSensorData.accel)
}

// .osi3.Vector3d angular_v = 2;
inline bool imu_IMUSensorData::has_angular_v() const {
  return this != internal_default_instance() && angular_v_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUSensorData::angular_v() const {
  const ::osi3::Vector3d* p = angular_v_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUSensorData.angular_v)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUSensorData::release_angular_v() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUSensorData.angular_v)
  
  ::osi3::Vector3d* temp = angular_v_;
  angular_v_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUSensorData::mutable_angular_v() {
  
  if (angular_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    angular_v_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUSensorData.angular_v)
  return angular_v_;
}
inline void imu_IMUSensorData::set_allocated_angular_v(::osi3::Vector3d* angular_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_v_);
  }
  if (angular_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      angular_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular_v, submessage_arena);
    }
    
  } else {
    
  }
  angular_v_ = angular_v;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUSensorData.angular_v)
}

// .osi3.imu.WheelSpd wheelspd = 3;
inline bool imu_IMUSensorData::has_wheelspd() const {
  return this != internal_default_instance() && wheelspd_ != nullptr;
}
inline void imu_IMUSensorData::clear_wheelspd() {
  if (GetArenaNoVirtual() == nullptr && wheelspd_ != nullptr) {
    delete wheelspd_;
  }
  wheelspd_ = nullptr;
}
inline const ::osi3::imu_WheelSpd& imu_IMUSensorData::wheelspd() const {
  const ::osi3::imu_WheelSpd* p = wheelspd_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUSensorData.wheelspd)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_WheelSpd*>(
      &::osi3::_imu_WheelSpd_default_instance_);
}
inline ::osi3::imu_WheelSpd* imu_IMUSensorData::release_wheelspd() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUSensorData.wheelspd)
  
  ::osi3::imu_WheelSpd* temp = wheelspd_;
  wheelspd_ = nullptr;
  return temp;
}
inline ::osi3::imu_WheelSpd* imu_IMUSensorData::mutable_wheelspd() {
  
  if (wheelspd_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_WheelSpd>(GetArenaNoVirtual());
    wheelspd_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUSensorData.wheelspd)
  return wheelspd_;
}
inline void imu_IMUSensorData::set_allocated_wheelspd(::osi3::imu_WheelSpd* wheelspd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wheelspd_;
  }
  if (wheelspd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wheelspd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheelspd, submessage_arena);
    }
    
  } else {
    
  }
  wheelspd_ = wheelspd;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUSensorData.wheelspd)
}

// -------------------------------------------------------------------

// imu_IMUGroundTruth

// .osi3.Vector3d position = 1;
inline bool imu_IMUGroundTruth::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUGroundTruth::position() const {
  const ::osi3::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::release_position() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.position)
  return position_;
}
inline void imu_IMUGroundTruth::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.position)
}

// .osi3.imu.GNSSData gnss = 2;
inline bool imu_IMUGroundTruth::has_gnss() const {
  return this != internal_default_instance() && gnss_ != nullptr;
}
inline void imu_IMUGroundTruth::clear_gnss() {
  if (GetArenaNoVirtual() == nullptr && gnss_ != nullptr) {
    delete gnss_;
  }
  gnss_ = nullptr;
}
inline const ::osi3::imu_GNSSData& imu_IMUGroundTruth::gnss() const {
  const ::osi3::imu_GNSSData* p = gnss_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.gnss)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_GNSSData*>(
      &::osi3::_imu_GNSSData_default_instance_);
}
inline ::osi3::imu_GNSSData* imu_IMUGroundTruth::release_gnss() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.gnss)
  
  ::osi3::imu_GNSSData* temp = gnss_;
  gnss_ = nullptr;
  return temp;
}
inline ::osi3::imu_GNSSData* imu_IMUGroundTruth::mutable_gnss() {
  
  if (gnss_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_GNSSData>(GetArenaNoVirtual());
    gnss_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.gnss)
  return gnss_;
}
inline void imu_IMUGroundTruth::set_allocated_gnss(::osi3::imu_GNSSData* gnss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gnss_;
  }
  if (gnss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss, submessage_arena);
    }
    
  } else {
    
  }
  gnss_ = gnss;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.gnss)
}

// .osi3.Vector3d velocity = 3;
inline bool imu_IMUGroundTruth::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUGroundTruth::velocity() const {
  const ::osi3::Vector3d* p = velocity_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.velocity)
  
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.velocity)
  return velocity_;
}
inline void imu_IMUGroundTruth::set_allocated_velocity(::osi3::Vector3d* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.velocity)
}

// .osi3.Vector3d velocity_truth = 4;
inline bool imu_IMUGroundTruth::has_velocity_truth() const {
  return this != internal_default_instance() && velocity_truth_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUGroundTruth::velocity_truth() const {
  const ::osi3::Vector3d* p = velocity_truth_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.velocity_truth)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::release_velocity_truth() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.velocity_truth)
  
  ::osi3::Vector3d* temp = velocity_truth_;
  velocity_truth_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::mutable_velocity_truth() {
  
  if (velocity_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    velocity_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.velocity_truth)
  return velocity_truth_;
}
inline void imu_IMUGroundTruth::set_allocated_velocity_truth(::osi3::Vector3d* velocity_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_truth_);
  }
  if (velocity_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_truth, submessage_arena);
    }
    
  } else {
    
  }
  velocity_truth_ = velocity_truth;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.velocity_truth)
}

// .osi3.Vector3d acc = 5;
inline bool imu_IMUGroundTruth::has_acc() const {
  return this != internal_default_instance() && acc_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUGroundTruth::acc() const {
  const ::osi3::Vector3d* p = acc_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.acc)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::release_acc() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.acc)
  
  ::osi3::Vector3d* temp = acc_;
  acc_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::mutable_acc() {
  
  if (acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    acc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.acc)
  return acc_;
}
inline void imu_IMUGroundTruth::set_allocated_acc(::osi3::Vector3d* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_);
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.acc)
}

// .osi3.Vector3d acc_truth = 6;
inline bool imu_IMUGroundTruth::has_acc_truth() const {
  return this != internal_default_instance() && acc_truth_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMUGroundTruth::acc_truth() const {
  const ::osi3::Vector3d* p = acc_truth_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.acc_truth)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::release_acc_truth() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.acc_truth)
  
  ::osi3::Vector3d* temp = acc_truth_;
  acc_truth_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMUGroundTruth::mutable_acc_truth() {
  
  if (acc_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    acc_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.acc_truth)
  return acc_truth_;
}
inline void imu_IMUGroundTruth::set_allocated_acc_truth(::osi3::Vector3d* acc_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_truth_);
  }
  if (acc_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc_truth, submessage_arena);
    }
    
  } else {
    
  }
  acc_truth_ = acc_truth;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.acc_truth)
}

// .osi3.imu.Quaternion quatRot = 7;
inline bool imu_IMUGroundTruth::has_quatrot() const {
  return this != internal_default_instance() && quatrot_ != nullptr;
}
inline void imu_IMUGroundTruth::clear_quatrot() {
  if (GetArenaNoVirtual() == nullptr && quatrot_ != nullptr) {
    delete quatrot_;
  }
  quatrot_ = nullptr;
}
inline const ::osi3::imu_Quaternion& imu_IMUGroundTruth::quatrot() const {
  const ::osi3::imu_Quaternion* p = quatrot_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.quatRot)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_Quaternion*>(
      &::osi3::_imu_Quaternion_default_instance_);
}
inline ::osi3::imu_Quaternion* imu_IMUGroundTruth::release_quatrot() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.quatRot)
  
  ::osi3::imu_Quaternion* temp = quatrot_;
  quatrot_ = nullptr;
  return temp;
}
inline ::osi3::imu_Quaternion* imu_IMUGroundTruth::mutable_quatrot() {
  
  if (quatrot_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_Quaternion>(GetArenaNoVirtual());
    quatrot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.quatRot)
  return quatrot_;
}
inline void imu_IMUGroundTruth::set_allocated_quatrot(::osi3::imu_Quaternion* quatrot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quatrot_;
  }
  if (quatrot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quatrot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quatrot, submessage_arena);
    }
    
  } else {
    
  }
  quatrot_ = quatrot;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.quatRot)
}

// .osi3.imu.Quaternion quatRot_truth = 8;
inline bool imu_IMUGroundTruth::has_quatrot_truth() const {
  return this != internal_default_instance() && quatrot_truth_ != nullptr;
}
inline void imu_IMUGroundTruth::clear_quatrot_truth() {
  if (GetArenaNoVirtual() == nullptr && quatrot_truth_ != nullptr) {
    delete quatrot_truth_;
  }
  quatrot_truth_ = nullptr;
}
inline const ::osi3::imu_Quaternion& imu_IMUGroundTruth::quatrot_truth() const {
  const ::osi3::imu_Quaternion* p = quatrot_truth_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.quatRot_truth)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_Quaternion*>(
      &::osi3::_imu_Quaternion_default_instance_);
}
inline ::osi3::imu_Quaternion* imu_IMUGroundTruth::release_quatrot_truth() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMUGroundTruth.quatRot_truth)
  
  ::osi3::imu_Quaternion* temp = quatrot_truth_;
  quatrot_truth_ = nullptr;
  return temp;
}
inline ::osi3::imu_Quaternion* imu_IMUGroundTruth::mutable_quatrot_truth() {
  
  if (quatrot_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_Quaternion>(GetArenaNoVirtual());
    quatrot_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMUGroundTruth.quatRot_truth)
  return quatrot_truth_;
}
inline void imu_IMUGroundTruth::set_allocated_quatrot_truth(::osi3::imu_Quaternion* quatrot_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quatrot_truth_;
  }
  if (quatrot_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quatrot_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quatrot_truth, submessage_arena);
    }
    
  } else {
    
  }
  quatrot_truth_ = quatrot_truth;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMUGroundTruth.quatRot_truth)
}

// double dist_2_gps = 9;
inline void imu_IMUGroundTruth::clear_dist_2_gps() {
  dist_2_gps_ = 0;
}
inline double imu_IMUGroundTruth::dist_2_gps() const {
  // @@protoc_insertion_point(field_get:osi3.imu.IMUGroundTruth.dist_2_gps)
  return dist_2_gps_;
}
inline void imu_IMUGroundTruth::set_dist_2_gps(double value) {
  
  dist_2_gps_ = value;
  // @@protoc_insertion_point(field_set:osi3.imu.IMUGroundTruth.dist_2_gps)
}

// -------------------------------------------------------------------

// imu_IMURigidENUGNSS

// .osi3.Vector3d posENU = 1;
inline bool imu_IMURigidENUGNSS::has_posenu() const {
  return this != internal_default_instance() && posenu_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMURigidENUGNSS::posenu() const {
  const ::osi3::Vector3d* p = posenu_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMURigidENUGNSS.posENU)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMURigidENUGNSS::release_posenu() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMURigidENUGNSS.posENU)
  
  ::osi3::Vector3d* temp = posenu_;
  posenu_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMURigidENUGNSS::mutable_posenu() {
  
  if (posenu_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    posenu_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMURigidENUGNSS.posENU)
  return posenu_;
}
inline void imu_IMURigidENUGNSS::set_allocated_posenu(::osi3::Vector3d* posenu) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(posenu_);
  }
  if (posenu) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      posenu = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, posenu, submessage_arena);
    }
    
  } else {
    
  }
  posenu_ = posenu;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMURigidENUGNSS.posENU)
}

// .osi3.imu.GNSSData gnss = 2;
inline bool imu_IMURigidENUGNSS::has_gnss() const {
  return this != internal_default_instance() && gnss_ != nullptr;
}
inline void imu_IMURigidENUGNSS::clear_gnss() {
  if (GetArenaNoVirtual() == nullptr && gnss_ != nullptr) {
    delete gnss_;
  }
  gnss_ = nullptr;
}
inline const ::osi3::imu_GNSSData& imu_IMURigidENUGNSS::gnss() const {
  const ::osi3::imu_GNSSData* p = gnss_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMURigidENUGNSS.gnss)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_GNSSData*>(
      &::osi3::_imu_GNSSData_default_instance_);
}
inline ::osi3::imu_GNSSData* imu_IMURigidENUGNSS::release_gnss() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMURigidENUGNSS.gnss)
  
  ::osi3::imu_GNSSData* temp = gnss_;
  gnss_ = nullptr;
  return temp;
}
inline ::osi3::imu_GNSSData* imu_IMURigidENUGNSS::mutable_gnss() {
  
  if (gnss_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_GNSSData>(GetArenaNoVirtual());
    gnss_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMURigidENUGNSS.gnss)
  return gnss_;
}
inline void imu_IMURigidENUGNSS::set_allocated_gnss(::osi3::imu_GNSSData* gnss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete gnss_;
  }
  if (gnss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gnss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gnss, submessage_arena);
    }
    
  } else {
    
  }
  gnss_ = gnss;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMURigidENUGNSS.gnss)
}

// .osi3.Vector3d velocity = 3;
inline bool imu_IMURigidENUGNSS::has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline const ::osi3::Vector3d& imu_IMURigidENUGNSS::velocity() const {
  const ::osi3::Vector3d* p = velocity_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMURigidENUGNSS.velocity)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* imu_IMURigidENUGNSS::release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMURigidENUGNSS.velocity)
  
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* imu_IMURigidENUGNSS::mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMURigidENUGNSS.velocity)
  return velocity_;
}
inline void imu_IMURigidENUGNSS::set_allocated_velocity(::osi3::Vector3d* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMURigidENUGNSS.velocity)
}

// .osi3.imu.EulerAngle eulerAngle = 4;
inline bool imu_IMURigidENUGNSS::has_eulerangle() const {
  return this != internal_default_instance() && eulerangle_ != nullptr;
}
inline void imu_IMURigidENUGNSS::clear_eulerangle() {
  if (GetArenaNoVirtual() == nullptr && eulerangle_ != nullptr) {
    delete eulerangle_;
  }
  eulerangle_ = nullptr;
}
inline const ::osi3::imu_EulerAngle& imu_IMURigidENUGNSS::eulerangle() const {
  const ::osi3::imu_EulerAngle* p = eulerangle_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMURigidENUGNSS.eulerAngle)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_EulerAngle*>(
      &::osi3::_imu_EulerAngle_default_instance_);
}
inline ::osi3::imu_EulerAngle* imu_IMURigidENUGNSS::release_eulerangle() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMURigidENUGNSS.eulerAngle)
  
  ::osi3::imu_EulerAngle* temp = eulerangle_;
  eulerangle_ = nullptr;
  return temp;
}
inline ::osi3::imu_EulerAngle* imu_IMURigidENUGNSS::mutable_eulerangle() {
  
  if (eulerangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_EulerAngle>(GetArenaNoVirtual());
    eulerangle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMURigidENUGNSS.eulerAngle)
  return eulerangle_;
}
inline void imu_IMURigidENUGNSS::set_allocated_eulerangle(::osi3::imu_EulerAngle* eulerangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete eulerangle_;
  }
  if (eulerangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eulerangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eulerangle, submessage_arena);
    }
    
  } else {
    
  }
  eulerangle_ = eulerangle;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMURigidENUGNSS.eulerAngle)
}

// .osi3.imu.Quaternion quatRot = 5;
inline bool imu_IMURigidENUGNSS::has_quatrot() const {
  return this != internal_default_instance() && quatrot_ != nullptr;
}
inline void imu_IMURigidENUGNSS::clear_quatrot() {
  if (GetArenaNoVirtual() == nullptr && quatrot_ != nullptr) {
    delete quatrot_;
  }
  quatrot_ = nullptr;
}
inline const ::osi3::imu_Quaternion& imu_IMURigidENUGNSS::quatrot() const {
  const ::osi3::imu_Quaternion* p = quatrot_;
  // @@protoc_insertion_point(field_get:osi3.imu.IMURigidENUGNSS.quatRot)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_Quaternion*>(
      &::osi3::_imu_Quaternion_default_instance_);
}
inline ::osi3::imu_Quaternion* imu_IMURigidENUGNSS::release_quatrot() {
  // @@protoc_insertion_point(field_release:osi3.imu.IMURigidENUGNSS.quatRot)
  
  ::osi3::imu_Quaternion* temp = quatrot_;
  quatrot_ = nullptr;
  return temp;
}
inline ::osi3::imu_Quaternion* imu_IMURigidENUGNSS::mutable_quatrot() {
  
  if (quatrot_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_Quaternion>(GetArenaNoVirtual());
    quatrot_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.IMURigidENUGNSS.quatRot)
  return quatrot_;
}
inline void imu_IMURigidENUGNSS::set_allocated_quatrot(::osi3::imu_Quaternion* quatrot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete quatrot_;
  }
  if (quatrot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quatrot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quatrot, submessage_arena);
    }
    
  } else {
    
  }
  quatrot_ = quatrot;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.IMURigidENUGNSS.quatRot)
}

// -------------------------------------------------------------------

// imu

// .osi3.InterfaceVersion version = 1;
inline bool imu::has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline const ::osi3::InterfaceVersion& imu::version() const {
  const ::osi3::InterfaceVersion* p = version_;
  // @@protoc_insertion_point(field_get:osi3.imu.version)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::InterfaceVersion*>(
      &::osi3::_InterfaceVersion_default_instance_);
}
inline ::osi3::InterfaceVersion* imu::release_version() {
  // @@protoc_insertion_point(field_release:osi3.imu.version)
  
  ::osi3::InterfaceVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* imu::mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.version)
  return version_;
}
inline void imu::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.version)
}

// .osi3.Timestamp timestamp = 2;
inline bool imu::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const ::osi3::Timestamp& imu::timestamp() const {
  const ::osi3::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:osi3.imu.timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Timestamp*>(
      &::osi3::_Timestamp_default_instance_);
}
inline ::osi3::Timestamp* imu::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.imu.timestamp)
  
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* imu::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.timestamp)
  return timestamp_;
}
inline void imu::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.timestamp)
}

// .osi3.imu.IMUCfg mount_pos = 3;
inline bool imu::has_mount_pos() const {
  return this != internal_default_instance() && mount_pos_ != nullptr;
}
inline void imu::clear_mount_pos() {
  if (GetArenaNoVirtual() == nullptr && mount_pos_ != nullptr) {
    delete mount_pos_;
  }
  mount_pos_ = nullptr;
}
inline const ::osi3::imu_IMUCfg& imu::mount_pos() const {
  const ::osi3::imu_IMUCfg* p = mount_pos_;
  // @@protoc_insertion_point(field_get:osi3.imu.mount_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_IMUCfg*>(
      &::osi3::_imu_IMUCfg_default_instance_);
}
inline ::osi3::imu_IMUCfg* imu::release_mount_pos() {
  // @@protoc_insertion_point(field_release:osi3.imu.mount_pos)
  
  ::osi3::imu_IMUCfg* temp = mount_pos_;
  mount_pos_ = nullptr;
  return temp;
}
inline ::osi3::imu_IMUCfg* imu::mutable_mount_pos() {
  
  if (mount_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_IMUCfg>(GetArenaNoVirtual());
    mount_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.mount_pos)
  return mount_pos_;
}
inline void imu::set_allocated_mount_pos(::osi3::imu_IMUCfg* mount_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mount_pos_;
  }
  if (mount_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mount_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mount_pos, submessage_arena);
    }
    
  } else {
    
  }
  mount_pos_ = mount_pos;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.mount_pos)
}

// .osi3.imu.IMUSensorData imu_data = 4;
inline bool imu::has_imu_data() const {
  return this != internal_default_instance() && imu_data_ != nullptr;
}
inline void imu::clear_imu_data() {
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
}
inline const ::osi3::imu_IMUSensorData& imu::imu_data() const {
  const ::osi3::imu_IMUSensorData* p = imu_data_;
  // @@protoc_insertion_point(field_get:osi3.imu.imu_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_IMUSensorData*>(
      &::osi3::_imu_IMUSensorData_default_instance_);
}
inline ::osi3::imu_IMUSensorData* imu::release_imu_data() {
  // @@protoc_insertion_point(field_release:osi3.imu.imu_data)
  
  ::osi3::imu_IMUSensorData* temp = imu_data_;
  imu_data_ = nullptr;
  return temp;
}
inline ::osi3::imu_IMUSensorData* imu::mutable_imu_data() {
  
  if (imu_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_IMUSensorData>(GetArenaNoVirtual());
    imu_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.imu_data)
  return imu_data_;
}
inline void imu::set_allocated_imu_data(::osi3::imu_IMUSensorData* imu_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete imu_data_;
  }
  if (imu_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imu_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_data, submessage_arena);
    }
    
  } else {
    
  }
  imu_data_ = imu_data;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.imu_data)
}

// .osi3.imu.IMUGroundTruth imu_truth = 5;
inline bool imu::has_imu_truth() const {
  return this != internal_default_instance() && imu_truth_ != nullptr;
}
inline void imu::clear_imu_truth() {
  if (GetArenaNoVirtual() == nullptr && imu_truth_ != nullptr) {
    delete imu_truth_;
  }
  imu_truth_ = nullptr;
}
inline const ::osi3::imu_IMUGroundTruth& imu::imu_truth() const {
  const ::osi3::imu_IMUGroundTruth* p = imu_truth_;
  // @@protoc_insertion_point(field_get:osi3.imu.imu_truth)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_IMUGroundTruth*>(
      &::osi3::_imu_IMUGroundTruth_default_instance_);
}
inline ::osi3::imu_IMUGroundTruth* imu::release_imu_truth() {
  // @@protoc_insertion_point(field_release:osi3.imu.imu_truth)
  
  ::osi3::imu_IMUGroundTruth* temp = imu_truth_;
  imu_truth_ = nullptr;
  return temp;
}
inline ::osi3::imu_IMUGroundTruth* imu::mutable_imu_truth() {
  
  if (imu_truth_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_IMUGroundTruth>(GetArenaNoVirtual());
    imu_truth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.imu_truth)
  return imu_truth_;
}
inline void imu::set_allocated_imu_truth(::osi3::imu_IMUGroundTruth* imu_truth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete imu_truth_;
  }
  if (imu_truth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imu_truth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_truth, submessage_arena);
    }
    
  } else {
    
  }
  imu_truth_ = imu_truth;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.imu_truth)
}

// .osi3.imu.IMURigidENUGNSS imu_rigid = 6;
inline bool imu::has_imu_rigid() const {
  return this != internal_default_instance() && imu_rigid_ != nullptr;
}
inline void imu::clear_imu_rigid() {
  if (GetArenaNoVirtual() == nullptr && imu_rigid_ != nullptr) {
    delete imu_rigid_;
  }
  imu_rigid_ = nullptr;
}
inline const ::osi3::imu_IMURigidENUGNSS& imu::imu_rigid() const {
  const ::osi3::imu_IMURigidENUGNSS* p = imu_rigid_;
  // @@protoc_insertion_point(field_get:osi3.imu.imu_rigid)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::imu_IMURigidENUGNSS*>(
      &::osi3::_imu_IMURigidENUGNSS_default_instance_);
}
inline ::osi3::imu_IMURigidENUGNSS* imu::release_imu_rigid() {
  // @@protoc_insertion_point(field_release:osi3.imu.imu_rigid)
  
  ::osi3::imu_IMURigidENUGNSS* temp = imu_rigid_;
  imu_rigid_ = nullptr;
  return temp;
}
inline ::osi3::imu_IMURigidENUGNSS* imu::mutable_imu_rigid() {
  
  if (imu_rigid_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::imu_IMURigidENUGNSS>(GetArenaNoVirtual());
    imu_rigid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.imu.imu_rigid)
  return imu_rigid_;
}
inline void imu::set_allocated_imu_rigid(::osi3::imu_IMURigidENUGNSS* imu_rigid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete imu_rigid_;
  }
  if (imu_rigid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      imu_rigid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imu_rigid, submessage_arena);
    }
    
  } else {
    
  }
  imu_rigid_ = imu_rigid;
  // @@protoc_insertion_point(field_set_allocated:osi3.imu.imu_rigid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fimu_2eproto
