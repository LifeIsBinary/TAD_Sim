// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_common.proto
#pragma warning (disable : 4125)
#include "scene_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace sim_msg {
}  // namespace sim_msg
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_scene_5fcommon_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scene_5fcommon_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scene_5fcommon_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_5fcommon_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_scene_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022scene_common.proto\022\007sim_msg*$\n\005OnOff\022\r"
  "\n\tONOFF_OFF\020\000\022\014\n\010ONOFF_ON\020\001*/\n\003Dir\022\014\n\010DI"
  "R_LEFT\020\000\022\r\n\tDIR_RIGHT\020\001\022\013\n\007DIR_ANY\020\002*\300\001\n"
  "\007GearSts\022\016\n\nGEAR_STS_D\020\000\022\016\n\nGEAR_STS_P\020\001"
  "\022\016\n\nGEAR_STS_R\020\002\022\016\n\nGEAR_STS_N\020\003\022\017\n\013GEAR"
  "_STS_M1\020\004\022\017\n\013GEAR_STS_M2\020\005\022\017\n\013GEAR_STS_M"
  "3\020\006\022\017\n\013GEAR_STS_M4\020\007\022\017\n\013GEAR_STS_M5\020\010\022\017\n"
  "\013GEAR_STS_M6\020\t\022\017\n\013GEAR_STS_M7\020\n*W\n\010Wiper"
  "Sts\022\021\n\rWIPER_STS_OFF\020\000\022\021\n\rWIPER_STS_LOW\020"
  "\001\022\021\n\rWIPER_STS_MED\020\002\022\022\n\016WIPER_STS_HIGH\020\003"
  "*\221\001\n\017ParkingBrakeSts\022\036\n\032PARKING_BRAKE_ST"
  "S_RELEASED\020\000\022\035\n\031PARKING_BRAKE_STS_APPLIE"
  "D\020\001\022\036\n\032PARKING_BRAKE_STS_APPLYING\020\002\022\037\n\033P"
  "ARKING_BRAKE_STS_RELEASING\020\003*K\n\006KeySts\022\017"
  "\n\013KEY_STS_OFF\020\000\022\017\n\013KEY_STS_IGN\020\001\022\017\n\013KEY_"
  "STS_ACC\020\002\022\016\n\nKEY_STS_ON\020\003*S\n\007BeamSts\022\020\n\014"
  "BEAM_STS_OFF\020\000\022\021\n\rBEAM_STS_AUTO\020\001\022\020\n\014BEA"
  "M_STS_LOW\020\002\022\021\n\rBEAM_STS_HIGH\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scene_5fcommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scene_5fcommon_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_5fcommon_2eproto_once;
static bool descriptor_table_scene_5fcommon_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fcommon_2eproto = {
  &descriptor_table_scene_5fcommon_2eproto_initialized, descriptor_table_protodef_scene_5fcommon_2eproto, "scene_common.proto", 718,
  &descriptor_table_scene_5fcommon_2eproto_once, descriptor_table_scene_5fcommon_2eproto_sccs, descriptor_table_scene_5fcommon_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_scene_5fcommon_2eproto::offsets,
  file_level_metadata_scene_5fcommon_2eproto, 0, file_level_enum_descriptors_scene_5fcommon_2eproto, file_level_service_descriptors_scene_5fcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scene_5fcommon_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scene_5fcommon_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OnOff_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fcommon_2eproto);
  return file_level_enum_descriptors_scene_5fcommon_2eproto[0];
}
bool OnOff_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Dir_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fcommon_2eproto);
  return file_level_enum_descriptors_scene_5fcommon_2eproto[1];
}
bool Dir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearSts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fcommon_2eproto);
  return file_level_enum_descriptors_scene_5fcommon_2eproto[2];
}
bool GearSts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WiperSts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fcommon_2eproto);
  return file_level_enum_descriptors_scene_5fcommon_2eproto[3];
}
bool WiperSts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ParkingBrakeSts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fcommon_2eproto);
  return file_level_enum_descriptors_scene_5fcommon_2eproto[4];
}
bool ParkingBrakeSts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KeySts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fcommon_2eproto);
  return file_level_enum_descriptors_scene_5fcommon_2eproto[5];
}
bool KeySts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BeamSts_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fcommon_2eproto);
  return file_level_enum_descriptors_scene_5fcommon_2eproto[6];
}
bool BeamSts_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
