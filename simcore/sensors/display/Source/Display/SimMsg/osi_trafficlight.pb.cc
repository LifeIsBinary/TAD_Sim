// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficlight.proto
#pragma warning (disable : 4125)

#include "osi_trafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseStationary_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalReference_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficlight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto;
namespace osi3 {
class TrafficLight_ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight_Classification> _instance;
} _TrafficLight_Classification_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_TrafficLight_osi_5ftrafficlight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficLight_default_instance_;
    new (ptr) ::osi3::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TrafficLight_osi_5ftrafficlight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_TrafficLight_osi_5ftrafficlight_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,
      &scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_TrafficLight_Classification_default_instance_;
    new (ptr) ::osi3::TrafficLight_Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::TrafficLight_Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5ftrafficlight_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5ftrafficlight_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5ftrafficlight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5ftrafficlight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, color_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, icon_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, mode_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, counter_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight_Classification, logical_lane_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::TrafficLight, color_description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::TrafficLight_Classification)},
  { 12, -1, sizeof(::osi3::TrafficLight)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficLight_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_TrafficLight_default_instance_),
};

const char descriptor_table_protodef_osi_5ftrafficlight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026osi_trafficlight.proto\022\004osi3\032\020osi_comm"
  "on.proto\"\234\013\n\014TrafficLight\022\034\n\002id\030\001 \001(\0132\020."
  "osi3.Identifier\022\"\n\004base\030\002 \001(\0132\024.osi3.Bas"
  "eStationary\0229\n\016classification\030\003 \001(\0132!.os"
  "i3.TrafficLight.Classification\022\027\n\017model_"
  "reference\030\004 \001(\t\0221\n\020source_reference\030\005 \003("
  "\0132\027.osi3.ExternalReference\0221\n\021color_desc"
  "ription\030\006 \001(\0132\026.osi3.ColorDescription\032\217\t"
  "\n\016Classification\0226\n\005color\030\001 \001(\0162\'.osi3.T"
  "rafficLight.Classification.Color\0224\n\004icon"
  "\030\002 \001(\0162&.osi3.TrafficLight.Classificatio"
  "n.Icon\0224\n\004mode\030\003 \001(\0162&.osi3.TrafficLight"
  ".Classification.Mode\022\017\n\007counter\030\004 \001(\001\022*\n"
  "\020assigned_lane_id\030\005 \003(\0132\020.osi3.Identifie"
  "r\022\031\n\021is_out_of_service\030\006 \001(\010\022<\n\027logical_"
  "lane_assignment\030\007 \003(\0132\033.osi3.LogicalLane"
  "Assignment\"~\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017"
  "\n\013COLOR_OTHER\020\001\022\r\n\tCOLOR_RED\020\002\022\020\n\014COLOR_"
  "YELLOW\020\003\022\017\n\013COLOR_GREEN\020\004\022\016\n\nCOLOR_BLUE\020"
  "\005\022\017\n\013COLOR_WHITE\020\006\"\321\004\n\004Icon\022\020\n\014ICON_UNKN"
  "OWN\020\000\022\016\n\nICON_OTHER\020\001\022\r\n\tICON_NONE\020\002\022\035\n\031"
  "ICON_ARROW_STRAIGHT_AHEAD\020\003\022\023\n\017ICON_ARRO"
  "W_LEFT\020\004\022\030\n\024ICON_ARROW_DIAG_LEFT\020\005\022\"\n\036IC"
  "ON_ARROW_STRAIGHT_AHEAD_LEFT\020\006\022\024\n\020ICON_A"
  "RROW_RIGHT\020\007\022\031\n\025ICON_ARROW_DIAG_RIGHT\020\010\022"
  "#\n\037ICON_ARROW_STRAIGHT_AHEAD_RIGHT\020\t\022\031\n\025"
  "ICON_ARROW_LEFT_RIGHT\020\n\022\023\n\017ICON_ARROW_DO"
  "WN\020\013\022\030\n\024ICON_ARROW_DOWN_LEFT\020\014\022\031\n\025ICON_A"
  "RROW_DOWN_RIGHT\020\r\022\024\n\020ICON_ARROW_CROSS\020\016\022"
  "\023\n\017ICON_PEDESTRIAN\020\017\022\r\n\tICON_WALK\020\020\022\022\n\016I"
  "CON_DONT_WALK\020\021\022\020\n\014ICON_BICYCLE\020\022\022\037\n\033ICO"
  "N_PEDESTRIAN_AND_BICYCLE\020\023\022\032\n\026ICON_COUNT"
  "DOWN_SECONDS\020\024\022\032\n\026ICON_COUNTDOWN_PERCENT"
  "\020\025\022\r\n\tICON_TRAM\020\026\022\014\n\010ICON_BUS\020\027\022\025\n\021ICON_"
  "BUS_AND_TRAM\020\030\"o\n\004Mode\022\020\n\014MODE_UNKNOWN\020\000"
  "\022\016\n\nMODE_OTHER\020\001\022\014\n\010MODE_OFF\020\002\022\021\n\rMODE_C"
  "ONSTANT\020\003\022\021\n\rMODE_FLASHING\020\004\022\021\n\rMODE_COU"
  "NTING\020\005B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5ftrafficlight_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5ftrafficlight_2eproto_sccs[2] = {
  &scc_info_TrafficLight_osi_5ftrafficlight_2eproto.base,
  &scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5ftrafficlight_2eproto_once;
static bool descriptor_table_osi_5ftrafficlight_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5ftrafficlight_2eproto = {
  &descriptor_table_osi_5ftrafficlight_2eproto_initialized, descriptor_table_protodef_osi_5ftrafficlight_2eproto, "osi_trafficlight.proto", 1499,
  &descriptor_table_osi_5ftrafficlight_2eproto_once, descriptor_table_osi_5ftrafficlight_2eproto_sccs, descriptor_table_osi_5ftrafficlight_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_osi_5ftrafficlight_2eproto::offsets,
  file_level_metadata_osi_5ftrafficlight_2eproto, 2, file_level_enum_descriptors_osi_5ftrafficlight_2eproto, file_level_service_descriptors_osi_5ftrafficlight_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5ftrafficlight_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[0];
}
bool TrafficLight_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_UNKNOWN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_OTHER;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_RED;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_YELLOW;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_GREEN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_BLUE;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::COLOR_WHITE;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::Color_MIN;
constexpr TrafficLight_Classification_Color TrafficLight_Classification::Color_MAX;
constexpr int TrafficLight_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Icon_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[1];
}
bool TrafficLight_Classification_Icon_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_UNKNOWN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_OTHER;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_NONE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DIAG_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_STRAIGHT_AHEAD_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_LEFT_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_LEFT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_DOWN_RIGHT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_ARROW_CROSS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_WALK;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_DONT_WALK;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BICYCLE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_PEDESTRIAN_AND_BICYCLE;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_SECONDS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_COUNTDOWN_PERCENT;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_TRAM;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::ICON_BUS_AND_TRAM;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MIN;
constexpr TrafficLight_Classification_Icon TrafficLight_Classification::Icon_MAX;
constexpr int TrafficLight_Classification::Icon_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficLight_Classification_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ftrafficlight_2eproto);
  return file_level_enum_descriptors_osi_5ftrafficlight_2eproto[2];
}
bool TrafficLight_Classification_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_UNKNOWN;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OTHER;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_OFF;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_CONSTANT;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_FLASHING;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::MODE_COUNTING;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MIN;
constexpr TrafficLight_Classification_Mode TrafficLight_Classification::Mode_MAX;
constexpr int TrafficLight_Classification::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void TrafficLight_Classification::InitAsDefaultInstance() {
}
class TrafficLight_Classification::_Internal {
 public:
};

void TrafficLight_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void TrafficLight_Classification::clear_logical_lane_assignment() {
  logical_lane_assignment_.Clear();
}
TrafficLight_Classification::TrafficLight_Classification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficLight.Classification)
}
TrafficLight_Classification::TrafficLight_Classification(const TrafficLight_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assigned_lane_id_(from.assigned_lane_id_),
      logical_lane_assignment_(from.logical_lane_assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight.Classification)
}

void TrafficLight_Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto.base);
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
}

TrafficLight_Classification::~TrafficLight_Classification() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight.Classification)
  SharedDtor();
}

void TrafficLight_Classification::SharedDtor() {
}

void TrafficLight_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight_Classification& TrafficLight_Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  logical_lane_assignment_.Clear();
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&color_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficLight_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.TrafficLight.Classification.Color color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_color(static_cast<::osi3::TrafficLight_Classification_Color>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficLight.Classification.Icon icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_icon(static_cast<::osi3::TrafficLight_Classification_Icon>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficLight.Classification.Mode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::osi3::TrafficLight_Classification_Mode>(val));
        } else goto handle_unusual;
        continue;
      // double counter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          counter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // bool is_out_of_service = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficLight_Classification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficLight.Classification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.TrafficLight.Classification.Color color = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::TrafficLight_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficLight.Classification.Icon icon = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_icon(static_cast< ::osi3::TrafficLight_Classification_Icon >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficLight.Classification.Mode mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::osi3::TrafficLight_Classification_Mode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double counter = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficLight.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficLight.Classification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficLight_Classification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficLight.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficLight.Classification.Color color = 1;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->color(), output);
  }

  // .osi3.TrafficLight.Classification.Icon icon = 2;
  if (this->icon() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->icon(), output);
  }

  // .osi3.TrafficLight.Classification.Mode mode = 3;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // double counter = 4;
  if (!(this->counter() <= 0 && this->counter() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->counter(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->assigned_lane_id(static_cast<int>(i)),
      output);
  }

  // bool is_out_of_service = 6;
  if (this->is_out_of_service() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_out_of_service(), output);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->logical_lane_assignment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficLight.Classification)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight_Classification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.TrafficLight.Classification.Color color = 1;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->color(), target);
  }

  // .osi3.TrafficLight.Classification.Icon icon = 2;
  if (this->icon() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->icon(), target);
  }

  // .osi3.TrafficLight.Classification.Mode mode = 3;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // double counter = 4;
  if (!(this->counter() <= 0 && this->counter() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->counter(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->assigned_lane_id(static_cast<int>(i)), target);
  }

  // bool is_out_of_service = 6;
  if (this->is_out_of_service() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_out_of_service(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->logical_lane_assignment(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight.Classification)
  return target;
}

size_t TrafficLight_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight.Classification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_assignment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane_assignment(static_cast<int>(i)));
    }
  }

  // .osi3.TrafficLight.Classification.Color color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color());
  }

  // .osi3.TrafficLight.Classification.Icon icon = 2;
  if (this->icon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->icon());
  }

  // double counter = 4;
  if (!(this->counter() <= 0 && this->counter() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.TrafficLight.Classification.Mode mode = 3;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  // bool is_out_of_service = 6;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight_Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficLight.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight_Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight_Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficLight.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficLight.Classification)
    MergeFrom(*source);
  }
}

void TrafficLight_Classification::MergeFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  logical_lane_assignment_.MergeFrom(from.logical_lane_assignment_);
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.icon() != 0) {
    set_icon(from.icon());
  }
  if (!(from.counter() <= 0 && from.counter() >= 0)) {
    set_counter(from.counter());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void TrafficLight_Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight_Classification::CopyFrom(const TrafficLight_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight_Classification::IsInitialized() const {
  return true;
}

void TrafficLight_Classification::InternalSwap(TrafficLight_Classification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&assigned_lane_id_)->InternalSwap(CastToBase(&other->assigned_lane_id_));
  CastToBase(&logical_lane_assignment_)->InternalSwap(CastToBase(&other->logical_lane_assignment_));
  swap(color_, other->color_);
  swap(icon_, other->icon_);
  swap(counter_, other->counter_);
  swap(mode_, other->mode_);
  swap(is_out_of_service_, other->is_out_of_service_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight_Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
  ::osi3::_TrafficLight_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_TrafficLight_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_TrafficLight_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficLight_Classification*>(
      ::osi3::TrafficLight_Classification::internal_default_instance());
  ::osi3::_TrafficLight_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class TrafficLight::_Internal {
 public:
  static const ::osi3::Identifier& id(const TrafficLight* msg);
  static const ::osi3::BaseStationary& base(const TrafficLight* msg);
  static const ::osi3::TrafficLight_Classification& classification(const TrafficLight* msg);
  static const ::osi3::ColorDescription& color_description(const TrafficLight* msg);
};

const ::osi3::Identifier&
TrafficLight::_Internal::id(const TrafficLight* msg) {
  return *msg->id_;
}
const ::osi3::BaseStationary&
TrafficLight::_Internal::base(const TrafficLight* msg) {
  return *msg->base_;
}
const ::osi3::TrafficLight_Classification&
TrafficLight::_Internal::classification(const TrafficLight* msg) {
  return *msg->classification_;
}
const ::osi3::ColorDescription&
TrafficLight::_Internal::color_description(const TrafficLight* msg) {
  return *msg->color_description_;
}
void TrafficLight::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void TrafficLight::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void TrafficLight::clear_source_reference() {
  source_reference_.Clear();
}
void TrafficLight::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
TrafficLight::TrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_reference().empty()) {
    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficLight_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_osi_5ftrafficlight_2eproto.base);
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_description_) -
      reinterpret_cast<char*>(&id_)) + sizeof(color_description_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_osi_5ftrafficlight_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficLight.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_reference(), ptr, ctx, "osi3.TrafficLight.model_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficLight::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.TrafficLight)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficLight.Classification classification = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.TrafficLight.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.TrafficLight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficLight::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.TrafficLight.Classification classification = 3;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::classification(this), output);
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficLight.model_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->model_reference(), output);
  }

  // repeated .osi3.ExternalReference source_reference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.TrafficLight)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.TrafficLight.Classification classification = 3;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::classification(this), target);
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.TrafficLight.model_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->model_reference(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->source_reference(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.TrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // string model_reference = 4;
  if (this->model_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.TrafficLight.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(from.classification());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  model_reference_.Swap(&other->model_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  swap(color_description_, other->color_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::TrafficLight_Classification* Arena::CreateMaybeMessage< ::osi3::TrafficLight_Classification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficLight_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::TrafficLight* Arena::CreateMaybeMessage< ::osi3::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::TrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
