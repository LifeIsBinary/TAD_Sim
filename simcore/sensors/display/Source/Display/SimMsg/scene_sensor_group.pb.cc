// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_sensor_group.proto

#pragma warning (disable : 4125)
#include "scene_sensor_group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scene_5fsensor_5fgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sensor_scene_5fsensor_5fgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fsensor_5fgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fsensor_5fgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fsensor_5fgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sensor_Intrinsic_ParamsEntry_DoNotUse_scene_5fsensor_5fgroup_2eproto;
namespace sim_msg {
class Sensor_ExtrinsicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sensor_Extrinsic> _instance;
} _Sensor_Extrinsic_default_instance_;
class Sensor_Intrinsic_ParamsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sensor_Intrinsic_ParamsEntry_DoNotUse> _instance;
} _Sensor_Intrinsic_ParamsEntry_DoNotUse_default_instance_;
class Sensor_IntrinsicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sensor_Intrinsic> _instance;
} _Sensor_Intrinsic_default_instance_;
class SensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sensor> _instance;
} _Sensor_default_instance_;
class SensorGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorGroup> _instance;
} _SensorGroup_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Sensor_scene_5fsensor_5fgroup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Sensor_default_instance_;
    new (ptr) ::sim_msg::Sensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Sensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Sensor_scene_5fsensor_5fgroup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Sensor_scene_5fsensor_5fgroup_2eproto}, {
      &scc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto.base,
      &scc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto.base,}};

static void InitDefaultsscc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Sensor_Extrinsic_default_instance_;
    new (ptr) ::sim_msg::Sensor_Extrinsic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Sensor_Extrinsic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto}, {}};

static void InitDefaultsscc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Sensor_Intrinsic_default_instance_;
    new (ptr) ::sim_msg::Sensor_Intrinsic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Sensor_Intrinsic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto}, {
      &scc_info_Sensor_Intrinsic_ParamsEntry_DoNotUse_scene_5fsensor_5fgroup_2eproto.base,}};

static void InitDefaultsscc_info_Sensor_Intrinsic_ParamsEntry_DoNotUse_scene_5fsensor_5fgroup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Sensor_Intrinsic_ParamsEntry_DoNotUse_default_instance_;
    new (ptr) ::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse();
  }
  ::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sensor_Intrinsic_ParamsEntry_DoNotUse_scene_5fsensor_5fgroup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sensor_Intrinsic_ParamsEntry_DoNotUse_scene_5fsensor_5fgroup_2eproto}, {}};

static void InitDefaultsscc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_SensorGroup_default_instance_;
    new (ptr) ::sim_msg::SensorGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::SensorGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto}, {
      &scc_info_Sensor_scene_5fsensor_5fgroup_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scene_5fsensor_5fgroup_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scene_5fsensor_5fgroup_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scene_5fsensor_5fgroup_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_5fsensor_5fgroup_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, installslot_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, device_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, locationx_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, locationy_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, locationz_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, rotationx_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, rotationy_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Extrinsic, rotationz_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Intrinsic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor_Intrinsic, params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor, extrinsic_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sensor, intrinsic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SensorGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::SensorGroup, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::SensorGroup, sensors_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Sensor_Extrinsic)},
  { 14, 21, sizeof(::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse)},
  { 23, -1, sizeof(::sim_msg::Sensor_Intrinsic)},
  { 29, -1, sizeof(::sim_msg::Sensor)},
  { 37, -1, sizeof(::sim_msg::SensorGroup)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Sensor_Extrinsic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Sensor_Intrinsic_ParamsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Sensor_Intrinsic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Sensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_SensorGroup_default_instance_),
};

const char descriptor_table_protodef_scene_5fsensor_5fgroup_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030scene_sensor_group.proto\022\007sim_msg\"\253\003\n\006"
  "Sensor\022!\n\004type\030\001 \001(\0162\023.sim_msg.SensorTyp"
  "e\022,\n\textrinsic\030\002 \001(\0132\031.sim_msg.Sensor.Ex"
  "trinsic\022,\n\tintrinsic\030\003 \001(\0132\031.sim_msg.Sen"
  "sor.Intrinsic\032\256\001\n\tExtrinsic\022\n\n\002ID\030\001 \001(\003\022"
  "\023\n\013InstallSlot\030\002 \001(\t\022\016\n\006Device\030\003 \001(\t\022\021\n\t"
  "LocationX\030\004 \001(\001\022\021\n\tLocationY\030\005 \001(\001\022\021\n\tLo"
  "cationZ\030\006 \001(\001\022\021\n\tRotationX\030\007 \001(\001\022\021\n\tRota"
  "tionY\030\010 \001(\001\022\021\n\tRotationZ\030\t \001(\001\032q\n\tIntrin"
  "sic\0225\n\006params\030\001 \003(\0132%.sim_msg.Sensor.Int"
  "rinsic.ParamsEntry\032-\n\013ParamsEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"=\n\013SensorGroup"
  "\022\014\n\004name\030\001 \001(\t\022 \n\007sensors\030\002 \003(\0132\017.sim_ms"
  "g.Sensor*\267\002\n\nSensorType\022\033\n\027SENSOR_TYPE_U"
  "SER_DEFINE\020\000\022\026\n\022SENSOR_TYPE_CAMERA\020\001\022\027\n\023"
  "SENSOR_TYPE_FISHEYE\020\002\022\030\n\024SENSOR_TYPE_SEM"
  "ANTIC\020\003\022\025\n\021SENSOR_TYPE_DEPTH\020\004\022\025\n\021SENSOR"
  "_TYPE_RADAR\020\005\022!\n\035SENSOR_TYPE_TRADITIONAL"
  "_LIDAR\020\006\022\032\n\026SENSOR_TYPE_ULTRASONIC\020\007\022\023\n\017"
  "SENSOR_TYPE_OBU\020\010\022\023\n\017SENSOR_TYPE_IMU\020\t\022\023"
  "\n\017SENSOR_TYPE_GPS\020\n\022\025\n\021SENSOR_TYPE_TRUTH"
  "\020\013b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scene_5fsensor_5fgroup_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scene_5fsensor_5fgroup_2eproto_sccs[5] = {
  &scc_info_Sensor_scene_5fsensor_5fgroup_2eproto.base,
  &scc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto.base,
  &scc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto.base,
  &scc_info_Sensor_Intrinsic_ParamsEntry_DoNotUse_scene_5fsensor_5fgroup_2eproto.base,
  &scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_5fsensor_5fgroup_2eproto_once;
static bool descriptor_table_scene_5fsensor_5fgroup_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fsensor_5fgroup_2eproto = {
  &descriptor_table_scene_5fsensor_5fgroup_2eproto_initialized, descriptor_table_protodef_scene_5fsensor_5fgroup_2eproto, "scene_sensor_group.proto", 850,
  &descriptor_table_scene_5fsensor_5fgroup_2eproto_once, descriptor_table_scene_5fsensor_5fgroup_2eproto_sccs, descriptor_table_scene_5fsensor_5fgroup_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_scene_5fsensor_5fgroup_2eproto::offsets,
  file_level_metadata_scene_5fsensor_5fgroup_2eproto, 5, file_level_enum_descriptors_scene_5fsensor_5fgroup_2eproto, file_level_service_descriptors_scene_5fsensor_5fgroup_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scene_5fsensor_5fgroup_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scene_5fsensor_5fgroup_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_5fsensor_5fgroup_2eproto);
  return file_level_enum_descriptors_scene_5fsensor_5fgroup_2eproto[0];
}
bool SensorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Sensor_Extrinsic::InitAsDefaultInstance() {
}
class Sensor_Extrinsic::_Internal {
 public:
};

Sensor_Extrinsic::Sensor_Extrinsic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Sensor.Extrinsic)
}
Sensor_Extrinsic::Sensor_Extrinsic(const Sensor_Extrinsic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  installslot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.installslot().empty()) {
    installslot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.installslot_);
  }
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.device().empty()) {
    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotationz_) -
    reinterpret_cast<char*>(&id_)) + sizeof(rotationz_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Sensor.Extrinsic)
}

void Sensor_Extrinsic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto.base);
  installslot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationz_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rotationz_));
}

Sensor_Extrinsic::~Sensor_Extrinsic() {
  // @@protoc_insertion_point(destructor:sim_msg.Sensor.Extrinsic)
  SharedDtor();
}

void Sensor_Extrinsic::SharedDtor() {
  installslot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Sensor_Extrinsic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sensor_Extrinsic& Sensor_Extrinsic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sensor_Extrinsic_scene_5fsensor_5fgroup_2eproto.base);
  return *internal_default_instance();
}


void Sensor_Extrinsic::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Sensor.Extrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  installslot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotationz_) -
      reinterpret_cast<char*>(&id_)) + sizeof(rotationz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sensor_Extrinsic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 ID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string InstallSlot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_installslot(), ptr, ctx, "sim_msg.Sensor.Extrinsic.InstallSlot");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_device(), ptr, ctx, "sim_msg.Sensor.Extrinsic.Device");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double LocationX = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          locationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LocationY = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          locationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double LocationZ = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          locationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RotationX = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          rotationx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RotationY = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          rotationy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double RotationZ = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          rotationz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sensor_Extrinsic::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Sensor.Extrinsic)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ID = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string InstallSlot = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_installslot()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->installslot().data(), static_cast<int>(this->installslot().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Sensor.Extrinsic.InstallSlot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Device = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->device().data(), static_cast<int>(this->device().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Sensor.Extrinsic.Device"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LocationX = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LocationY = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locationy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double LocationZ = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &locationz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double RotationX = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotationx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double RotationY = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotationy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double RotationZ = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotationz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Sensor.Extrinsic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Sensor.Extrinsic)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sensor_Extrinsic::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Sensor.Extrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string InstallSlot = 2;
  if (this->installslot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->installslot().data(), static_cast<int>(this->installslot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Sensor.Extrinsic.InstallSlot");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->installslot(), output);
  }

  // string Device = 3;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Sensor.Extrinsic.Device");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->device(), output);
  }

  // double LocationX = 4;
  if (!(this->locationx() <= 0 && this->locationx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->locationx(), output);
  }

  // double LocationY = 5;
  if (!(this->locationy() <= 0 && this->locationy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->locationy(), output);
  }

  // double LocationZ = 6;
  if (!(this->locationz() <= 0 && this->locationz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->locationz(), output);
  }

  // double RotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->rotationx(), output);
  }

  // double RotationY = 8;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->rotationy(), output);
  }

  // double RotationZ = 9;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->rotationz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Sensor.Extrinsic)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sensor_Extrinsic::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Sensor.Extrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ID = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string InstallSlot = 2;
  if (this->installslot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->installslot().data(), static_cast<int>(this->installslot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Sensor.Extrinsic.InstallSlot");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->installslot(), target);
  }

  // string Device = 3;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->device().data(), static_cast<int>(this->device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Sensor.Extrinsic.Device");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  // double LocationX = 4;
  if (!(this->locationx() <= 0 && this->locationx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->locationx(), target);
  }

  // double LocationY = 5;
  if (!(this->locationy() <= 0 && this->locationy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->locationy(), target);
  }

  // double LocationZ = 6;
  if (!(this->locationz() <= 0 && this->locationz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->locationz(), target);
  }

  // double RotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->rotationx(), target);
  }

  // double RotationY = 8;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->rotationy(), target);
  }

  // double RotationZ = 9;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->rotationz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Sensor.Extrinsic)
  return target;
}

size_t Sensor_Extrinsic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Sensor.Extrinsic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string InstallSlot = 2;
  if (this->installslot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->installslot());
  }

  // string Device = 3;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->device());
  }

  // int64 ID = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // double LocationX = 4;
  if (!(this->locationx() <= 0 && this->locationx() >= 0)) {
    total_size += 1 + 8;
  }

  // double LocationY = 5;
  if (!(this->locationy() <= 0 && this->locationy() >= 0)) {
    total_size += 1 + 8;
  }

  // double LocationZ = 6;
  if (!(this->locationz() <= 0 && this->locationz() >= 0)) {
    total_size += 1 + 8;
  }

  // double RotationX = 7;
  if (!(this->rotationx() <= 0 && this->rotationx() >= 0)) {
    total_size += 1 + 8;
  }

  // double RotationY = 8;
  if (!(this->rotationy() <= 0 && this->rotationy() >= 0)) {
    total_size += 1 + 8;
  }

  // double RotationZ = 9;
  if (!(this->rotationz() <= 0 && this->rotationz() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor_Extrinsic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Sensor.Extrinsic)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor_Extrinsic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sensor_Extrinsic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Sensor.Extrinsic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Sensor.Extrinsic)
    MergeFrom(*source);
  }
}

void Sensor_Extrinsic::MergeFrom(const Sensor_Extrinsic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Sensor.Extrinsic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.installslot().size() > 0) {

    installslot_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.installslot_);
  }
  if (from.device().size() > 0) {

    device_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.device_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (!(from.locationx() <= 0 && from.locationx() >= 0)) {
    set_locationx(from.locationx());
  }
  if (!(from.locationy() <= 0 && from.locationy() >= 0)) {
    set_locationy(from.locationy());
  }
  if (!(from.locationz() <= 0 && from.locationz() >= 0)) {
    set_locationz(from.locationz());
  }
  if (!(from.rotationx() <= 0 && from.rotationx() >= 0)) {
    set_rotationx(from.rotationx());
  }
  if (!(from.rotationy() <= 0 && from.rotationy() >= 0)) {
    set_rotationy(from.rotationy());
  }
  if (!(from.rotationz() <= 0 && from.rotationz() >= 0)) {
    set_rotationz(from.rotationz());
  }
}

void Sensor_Extrinsic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Sensor.Extrinsic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor_Extrinsic::CopyFrom(const Sensor_Extrinsic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Sensor.Extrinsic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor_Extrinsic::IsInitialized() const {
  return true;
}

void Sensor_Extrinsic::InternalSwap(Sensor_Extrinsic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  installslot_.Swap(&other->installslot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(locationx_, other->locationx_);
  swap(locationy_, other->locationy_);
  swap(locationz_, other->locationz_);
  swap(rotationx_, other->rotationx_);
  swap(rotationy_, other->rotationy_);
  swap(rotationz_, other->rotationz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor_Extrinsic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Sensor_Intrinsic_ParamsEntry_DoNotUse::Sensor_Intrinsic_ParamsEntry_DoNotUse() {}
Sensor_Intrinsic_ParamsEntry_DoNotUse::Sensor_Intrinsic_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Sensor_Intrinsic_ParamsEntry_DoNotUse::MergeFrom(const Sensor_Intrinsic_ParamsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Sensor_Intrinsic_ParamsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Sensor_Intrinsic_ParamsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Sensor_Intrinsic::InitAsDefaultInstance() {
}
class Sensor_Intrinsic::_Internal {
 public:
};

Sensor_Intrinsic::Sensor_Intrinsic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Sensor.Intrinsic)
}
Sensor_Intrinsic::Sensor_Intrinsic(const Sensor_Intrinsic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  params_.MergeFrom(from.params_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.Sensor.Intrinsic)
}

void Sensor_Intrinsic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto.base);
}

Sensor_Intrinsic::~Sensor_Intrinsic() {
  // @@protoc_insertion_point(destructor:sim_msg.Sensor.Intrinsic)
  SharedDtor();
}

void Sensor_Intrinsic::SharedDtor() {
}

void Sensor_Intrinsic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sensor_Intrinsic& Sensor_Intrinsic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sensor_Intrinsic_scene_5fsensor_5fgroup_2eproto.base);
  return *internal_default_instance();
}


void Sensor_Intrinsic::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Sensor.Intrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sensor_Intrinsic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, string> params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&params_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sensor_Intrinsic::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Sensor.Intrinsic)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, string> params = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          Sensor_Intrinsic_ParamsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Sensor_Intrinsic_ParamsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&params_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Sensor.Intrinsic.ParamsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Sensor.Intrinsic.ParamsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Sensor.Intrinsic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Sensor.Intrinsic)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sensor_Intrinsic::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Sensor.Intrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> params = 1;
  if (!this->params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Sensor.Intrinsic.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Sensor.Intrinsic.ParamsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Sensor_Intrinsic_ParamsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        Sensor_Intrinsic_ParamsEntry_DoNotUse::Funcs::SerializeToCodedStream(1, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Sensor.Intrinsic)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sensor_Intrinsic::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Sensor.Intrinsic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> params = 1;
  if (!this->params().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Sensor.Intrinsic.ParamsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Sensor.Intrinsic.ParamsEntry.value");
      }
    };

    if (false &&
        this->params().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->params().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Sensor_Intrinsic_ParamsEntry_DoNotUse::Funcs::SerializeToArray(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->params().begin();
          it != this->params().end(); ++it) {
        target = Sensor_Intrinsic_ParamsEntry_DoNotUse::Funcs::SerializeToArray(1, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Sensor.Intrinsic)
  return target;
}

size_t Sensor_Intrinsic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Sensor.Intrinsic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> params = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->params_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->params().begin();
      it != this->params().end(); ++it) {
    total_size += Sensor_Intrinsic_ParamsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor_Intrinsic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Sensor.Intrinsic)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor_Intrinsic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sensor_Intrinsic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Sensor.Intrinsic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Sensor.Intrinsic)
    MergeFrom(*source);
  }
}

void Sensor_Intrinsic::MergeFrom(const Sensor_Intrinsic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Sensor.Intrinsic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
}

void Sensor_Intrinsic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Sensor.Intrinsic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor_Intrinsic::CopyFrom(const Sensor_Intrinsic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Sensor.Intrinsic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor_Intrinsic::IsInitialized() const {
  return true;
}

void Sensor_Intrinsic::InternalSwap(Sensor_Intrinsic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.Swap(&other->params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor_Intrinsic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Sensor::InitAsDefaultInstance() {
  ::sim_msg::_Sensor_default_instance_._instance.get_mutable()->extrinsic_ = const_cast< ::sim_msg::Sensor_Extrinsic*>(
      ::sim_msg::Sensor_Extrinsic::internal_default_instance());
  ::sim_msg::_Sensor_default_instance_._instance.get_mutable()->intrinsic_ = const_cast< ::sim_msg::Sensor_Intrinsic*>(
      ::sim_msg::Sensor_Intrinsic::internal_default_instance());
}
class Sensor::_Internal {
 public:
  static const ::sim_msg::Sensor_Extrinsic& extrinsic(const Sensor* msg);
  static const ::sim_msg::Sensor_Intrinsic& intrinsic(const Sensor* msg);
};

const ::sim_msg::Sensor_Extrinsic&
Sensor::_Internal::extrinsic(const Sensor* msg) {
  return *msg->extrinsic_;
}
const ::sim_msg::Sensor_Intrinsic&
Sensor::_Internal::intrinsic(const Sensor* msg) {
  return *msg->intrinsic_;
}
Sensor::Sensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Sensor)
}
Sensor::Sensor(const Sensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_extrinsic()) {
    extrinsic_ = new ::sim_msg::Sensor_Extrinsic(*from.extrinsic_);
  } else {
    extrinsic_ = nullptr;
  }
  if (from.has_intrinsic()) {
    intrinsic_ = new ::sim_msg::Sensor_Intrinsic(*from.intrinsic_);
  } else {
    intrinsic_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Sensor)
}

void Sensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Sensor_scene_5fsensor_5fgroup_2eproto.base);
  ::memset(&extrinsic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&extrinsic_)) + sizeof(type_));
}

Sensor::~Sensor() {
  // @@protoc_insertion_point(destructor:sim_msg.Sensor)
  SharedDtor();
}

void Sensor::SharedDtor() {
  if (this != internal_default_instance()) delete extrinsic_;
  if (this != internal_default_instance()) delete intrinsic_;
}

void Sensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sensor& Sensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sensor_scene_5fsensor_5fgroup_2eproto.base);
  return *internal_default_instance();
}


void Sensor::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && extrinsic_ != nullptr) {
    delete extrinsic_;
  }
  extrinsic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && intrinsic_ != nullptr) {
    delete intrinsic_;
  }
  intrinsic_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.SensorType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::sim_msg::SensorType>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Sensor.Extrinsic extrinsic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_extrinsic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Sensor.Intrinsic intrinsic = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_intrinsic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sensor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Sensor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.SensorType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sim_msg::SensorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Sensor.Extrinsic extrinsic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extrinsic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Sensor.Intrinsic intrinsic = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_intrinsic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Sensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Sensor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sensor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.SensorType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .sim_msg.Sensor.Extrinsic extrinsic = 2;
  if (this->has_extrinsic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::extrinsic(this), output);
  }

  // .sim_msg.Sensor.Intrinsic intrinsic = 3;
  if (this->has_intrinsic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::intrinsic(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Sensor)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sensor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Sensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.SensorType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .sim_msg.Sensor.Extrinsic extrinsic = 2;
  if (this->has_extrinsic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::extrinsic(this), target);
  }

  // .sim_msg.Sensor.Intrinsic intrinsic = 3;
  if (this->has_intrinsic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::intrinsic(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Sensor)
  return target;
}

size_t Sensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Sensor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Sensor.Extrinsic extrinsic = 2;
  if (this->has_extrinsic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extrinsic_);
  }

  // .sim_msg.Sensor.Intrinsic intrinsic = 3;
  if (this->has_intrinsic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsic_);
  }

  // .sim_msg.SensorType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  const Sensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Sensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Sensor)
    MergeFrom(*source);
  }
}

void Sensor::MergeFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Sensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_extrinsic()) {
    mutable_extrinsic()->::sim_msg::Sensor_Extrinsic::MergeFrom(from.extrinsic());
  }
  if (from.has_intrinsic()) {
    mutable_intrinsic()->::sim_msg::Sensor_Intrinsic::MergeFrom(from.intrinsic());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Sensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sensor::CopyFrom(const Sensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Sensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sensor::IsInitialized() const {
  return true;
}

void Sensor::InternalSwap(Sensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(extrinsic_, other->extrinsic_);
  swap(intrinsic_, other->intrinsic_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorGroup::InitAsDefaultInstance() {
}
class SensorGroup::_Internal {
 public:
};

SensorGroup::SensorGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SensorGroup)
}
SensorGroup::SensorGroup(const SensorGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensors_(from.sensors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.SensorGroup)
}

void SensorGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SensorGroup::~SensorGroup() {
  // @@protoc_insertion_point(destructor:sim_msg.SensorGroup)
  SharedDtor();
}

void SensorGroup::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SensorGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorGroup& SensorGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto.base);
  return *internal_default_instance();
}


void SensorGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SensorGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensors_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.SensorGroup.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Sensor sensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorGroup::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SensorGroup)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.SensorGroup.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Sensor sensors = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SensorGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SensorGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorGroup::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SensorGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.SensorGroup.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .sim_msg.Sensor sensors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->sensors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.SensorGroup)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorGroup::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SensorGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.SensorGroup.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .sim_msg.Sensor sensors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensors_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->sensors(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SensorGroup)
  return target;
}

size_t SensorGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SensorGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Sensor sensors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->sensors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensors(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SensorGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SensorGroup)
    MergeFrom(*source);
  }
}

void SensorGroup::MergeFrom(const SensorGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SensorGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensors_.MergeFrom(from.sensors_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void SensorGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorGroup::CopyFrom(const SensorGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SensorGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorGroup::IsInitialized() const {
  return true;
}

void SensorGroup::InternalSwap(SensorGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensors_)->InternalSwap(CastToBase(&other->sensors_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Sensor_Extrinsic* Arena::CreateMaybeMessage< ::sim_msg::Sensor_Extrinsic >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Sensor_Extrinsic >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage< ::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Sensor_Intrinsic* Arena::CreateMaybeMessage< ::sim_msg::Sensor_Intrinsic >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Sensor_Intrinsic >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Sensor* Arena::CreateMaybeMessage< ::sim_msg::Sensor >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Sensor >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::SensorGroup* Arena::CreateMaybeMessage< ::sim_msg::SensorGroup >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::SensorGroup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
