// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waypoint.proto
#pragma warning (disable : 4125)
#include "waypoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPosition_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Position_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionLane_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeLane_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeObject_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeRoad_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeWorld_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRoad_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRoute_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionWorld_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPosition_waypoint_2eproto;
namespace sim_msg {
class OrientationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Orientation> _instance;
} _Orientation_default_instance_;
class PositionWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionWorld> _instance;
} _PositionWorld_default_instance_;
class PositionRelativeWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionRelativeWorld> _instance;
} _PositionRelativeWorld_default_instance_;
class PositionRelativeObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionRelativeObject> _instance;
} _PositionRelativeObject_default_instance_;
class PositionRoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionRoad> _instance;
} _PositionRoad_default_instance_;
class PositionRelativeRoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionRelativeRoad> _instance;
} _PositionRelativeRoad_default_instance_;
class PositionLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionLane> _instance;
} _PositionLane_default_instance_;
class PositionRelativeLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionRelativeLane> _instance;
} _PositionRelativeLane_default_instance_;
class PositionRouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionRoute> _instance;
} _PositionRoute_default_instance_;
class GeoPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPosition> _instance;
} _GeoPosition_default_instance_;
class TrajectoryPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPosition> _instance;
} _TrajectoryPosition_default_instance_;
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class WaypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Waypoint> _instance;
} _Waypoint_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_GeoPosition_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_GeoPosition_default_instance_;
    new (ptr) ::sim_msg::GeoPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::GeoPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPosition_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_GeoPosition_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_Orientation_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Orientation_default_instance_;
    new (ptr) ::sim_msg::Orientation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Orientation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Orientation_waypoint_2eproto}, {}};

static void InitDefaultsscc_info_Position_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Position_default_instance_;
    new (ptr) ::sim_msg::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Position_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, InitDefaultsscc_info_Position_waypoint_2eproto}, {
      &scc_info_PositionWorld_waypoint_2eproto.base,
      &scc_info_PositionRelativeWorld_waypoint_2eproto.base,
      &scc_info_PositionRelativeObject_waypoint_2eproto.base,
      &scc_info_PositionRoad_waypoint_2eproto.base,
      &scc_info_PositionRelativeRoad_waypoint_2eproto.base,
      &scc_info_PositionLane_waypoint_2eproto.base,
      &scc_info_PositionRelativeLane_waypoint_2eproto.base,
      &scc_info_PositionRoute_waypoint_2eproto.base,
      &scc_info_GeoPosition_waypoint_2eproto.base,
      &scc_info_TrajectoryPosition_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionLane_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionLane_default_instance_;
    new (ptr) ::sim_msg::PositionLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionLane_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionLane_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionRelativeLane_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionRelativeLane_default_instance_;
    new (ptr) ::sim_msg::PositionRelativeLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionRelativeLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeLane_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionRelativeLane_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionRelativeObject_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionRelativeObject_default_instance_;
    new (ptr) ::sim_msg::PositionRelativeObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionRelativeObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeObject_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionRelativeObject_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionRelativeRoad_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionRelativeRoad_default_instance_;
    new (ptr) ::sim_msg::PositionRelativeRoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionRelativeRoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeRoad_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionRelativeRoad_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionRelativeWorld_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionRelativeWorld_default_instance_;
    new (ptr) ::sim_msg::PositionRelativeWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionRelativeWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRelativeWorld_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionRelativeWorld_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionRoad_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionRoad_default_instance_;
    new (ptr) ::sim_msg::PositionRoad();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionRoad::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRoad_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionRoad_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionRoute_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionRoute_default_instance_;
    new (ptr) ::sim_msg::PositionRoute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionRoute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PositionRoute_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PositionRoute_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_PositionWorld_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PositionWorld_default_instance_;
    new (ptr) ::sim_msg::PositionWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PositionWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PositionWorld_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_PositionWorld_waypoint_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryPosition_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TrajectoryPosition_default_instance_;
    new (ptr) ::sim_msg::TrajectoryPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TrajectoryPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryPosition_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrajectoryPosition_waypoint_2eproto}, {
      &scc_info_Orientation_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_Waypoint_waypoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Waypoint_default_instance_;
    new (ptr) ::sim_msg::Waypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Waypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Waypoint_waypoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Waypoint_waypoint_2eproto}, {
      &scc_info_Position_waypoint_2eproto.base,
      &scc_info_DoubleValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_waypoint_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_waypoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_waypoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_waypoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Orientation, h_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Orientation, p_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Orientation, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionWorld, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionWorld, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionWorld, z_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionWorld, h_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionWorld, p_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionWorld, r_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeWorld, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeWorld, dx_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeWorld, dy_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeWorld, dz_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeWorld, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeObject, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeObject, dx_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeObject, dy_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeObject, dz_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeObject, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoad, road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoad, s_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoad, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoad, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeRoad, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeRoad, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeRoad, ds_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeRoad, dt_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeRoad, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionLane, road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionLane, lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionLane, offset_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionLane, s_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionLane, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeLane, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeLane, dlane_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeLane, ds_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeLane, offset_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRelativeLane, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoute, route_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PositionRoute, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::GeoPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::GeoPosition, longitude_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::GeoPosition, latitude_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::GeoPosition, altitude_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::GeoPosition, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPosition, s_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPosition, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPosition, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, world_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, relative_world_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, relative_object_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, road_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, relative_road_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, lane_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, relative_lane_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, route_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, geo_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Position, trajectory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, position_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, speed_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, accel_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, heading_angle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, front_wheel_steer_angle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Waypoint, gear_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Orientation)},
  { 8, -1, sizeof(::sim_msg::PositionWorld)},
  { 19, -1, sizeof(::sim_msg::PositionRelativeWorld)},
  { 29, -1, sizeof(::sim_msg::PositionRelativeObject)},
  { 39, -1, sizeof(::sim_msg::PositionRoad)},
  { 48, -1, sizeof(::sim_msg::PositionRelativeRoad)},
  { 57, -1, sizeof(::sim_msg::PositionLane)},
  { 67, -1, sizeof(::sim_msg::PositionRelativeLane)},
  { 77, -1, sizeof(::sim_msg::PositionRoute)},
  { 84, -1, sizeof(::sim_msg::GeoPosition)},
  { 93, -1, sizeof(::sim_msg::TrajectoryPosition)},
  { 101, -1, sizeof(::sim_msg::Position)},
  { 116, -1, sizeof(::sim_msg::Waypoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionRelativeWorld_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionRelativeObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionRoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionRelativeRoad_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionRelativeLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PositionRoute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_GeoPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrajectoryPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Waypoint_default_instance_),
};

const char descriptor_table_protodef_waypoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016waypoint.proto\022\007sim_msg\032\036google/protob"
  "uf/wrappers.proto\032\022scene_common.proto\".\n"
  "\013Orientation\022\t\n\001h\030\001 \001(\001\022\t\n\001p\030\002 \001(\001\022\t\n\001r\030"
  "\003 \001(\001\"Q\n\rPositionWorld\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002"
  " \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001h\030\004 \001(\001\022\t\n\001p\030\005 \001(\001\022\t\n"
  "\001r\030\006 \001(\001\"z\n\025PositionRelativeWorld\022\022\n\nent"
  "ity_ref\030\001 \001(\t\022\n\n\002dx\030\002 \001(\001\022\n\n\002dy\030\003 \001(\001\022\n\n"
  "\002dz\030\004 \001(\001\022)\n\013orientation\030\005 \001(\0132\024.sim_msg"
  ".Orientation\"{\n\026PositionRelativeObject\022\022"
  "\n\nentity_ref\030\001 \001(\t\022\n\n\002dx\030\002 \001(\001\022\n\n\002dy\030\003 \001"
  "(\001\022\n\n\002dz\030\004 \001(\001\022)\n\013orientation\030\005 \001(\0132\024.si"
  "m_msg.Orientation\"`\n\014PositionRoad\022\017\n\007roa"
  "d_id\030\001 \001(\004\022\t\n\001s\030\002 \001(\001\022\t\n\001t\030\003 \001(\001\022)\n\013orie"
  "ntation\030\005 \001(\0132\024.sim_msg.Orientation\"m\n\024P"
  "ositionRelativeRoad\022\022\n\nentity_ref\030\001 \001(\t\022"
  "\n\n\002ds\030\002 \001(\001\022\n\n\002dt\030\003 \001(\001\022)\n\013orientation\030\004"
  " \001(\0132\024.sim_msg.Orientation\"v\n\014PositionLa"
  "ne\022\017\n\007road_id\030\001 \001(\004\022\017\n\007lane_id\030\003 \001(\003\022\016\n\006"
  "offset\030\004 \001(\001\022\t\n\001s\030\005 \001(\001\022)\n\013orientation\030\006"
  " \001(\0132\024.sim_msg.Orientation\"\200\001\n\024PositionR"
  "elativeLane\022\022\n\nentity_ref\030\001 \001(\t\022\r\n\005dlane"
  "\030\002 \001(\005\022\n\n\002ds\030\003 \001(\001\022\016\n\006offset\030\004 \001(\001\022)\n\013or"
  "ientation\030\005 \001(\0132\024.sim_msg.Orientation\"M\n"
  "\rPositionRoute\022\021\n\troute_ref\030\001 \001(\004\022)\n\013ori"
  "entation\030\002 \001(\0132\024.sim_msg.Orientation\"o\n\013"
  "GeoPosition\022\021\n\tlongitude\030\001 \001(\001\022\020\n\010latitu"
  "de\030\002 \001(\001\022\020\n\010altitude\030\003 \001(\001\022)\n\013orientatio"
  "n\030\004 \001(\0132\024.sim_msg.Orientation\"U\n\022Traject"
  "oryPosition\022\t\n\001s\030\001 \001(\001\022\t\n\001t\030\002 \001(\001\022)\n\013ori"
  "entation\030\003 \001(\0132\024.sim_msg.Orientation\"\324\003\n"
  "\010Position\022%\n\005world\030\001 \001(\0132\026.sim_msg.Posit"
  "ionWorld\0226\n\016relative_world\030\002 \001(\0132\036.sim_m"
  "sg.PositionRelativeWorld\0228\n\017relative_obj"
  "ect\030\003 \001(\0132\037.sim_msg.PositionRelativeObje"
  "ct\022#\n\004road\030\004 \001(\0132\025.sim_msg.PositionRoad\022"
  "4\n\rrelative_road\030\005 \001(\0132\035.sim_msg.Positio"
  "nRelativeRoad\022#\n\004lane\030\006 \001(\0132\025.sim_msg.Po"
  "sitionLane\0224\n\rrelative_lane\030\007 \001(\0132\035.sim_"
  "msg.PositionRelativeLane\022%\n\005route\030\010 \001(\0132"
  "\026.sim_msg.PositionRoute\022!\n\003geo\030\t \001(\0132\024.s"
  "im_msg.GeoPosition\022/\n\ntrajectory\030\n \001(\0132\033"
  ".sim_msg.TrajectoryPosition\"\251\002\n\010Waypoint"
  "\022\n\n\002id\030\001 \001(\005\022#\n\010position\030\002 \001(\0132\021.sim_msg"
  ".Position\022+\n\005speed\030\003 \001(\0132\034.google.protob"
  "uf.DoubleValue\022+\n\005accel\030\004 \001(\0132\034.google.p"
  "rotobuf.DoubleValue\0223\n\rheading_angle\030\005 \001"
  "(\0132\034.google.protobuf.DoubleValue\022=\n\027fron"
  "t_wheel_steer_angle\030\006 \001(\0132\034.google.proto"
  "buf.DoubleValue\022\036\n\004gear\030\007 \001(\0162\020.sim_msg."
  "GearStsb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_waypoint_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_scene_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_waypoint_2eproto_sccs[13] = {
  &scc_info_GeoPosition_waypoint_2eproto.base,
  &scc_info_Orientation_waypoint_2eproto.base,
  &scc_info_Position_waypoint_2eproto.base,
  &scc_info_PositionLane_waypoint_2eproto.base,
  &scc_info_PositionRelativeLane_waypoint_2eproto.base,
  &scc_info_PositionRelativeObject_waypoint_2eproto.base,
  &scc_info_PositionRelativeRoad_waypoint_2eproto.base,
  &scc_info_PositionRelativeWorld_waypoint_2eproto.base,
  &scc_info_PositionRoad_waypoint_2eproto.base,
  &scc_info_PositionRoute_waypoint_2eproto.base,
  &scc_info_PositionWorld_waypoint_2eproto.base,
  &scc_info_TrajectoryPosition_waypoint_2eproto.base,
  &scc_info_Waypoint_waypoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_waypoint_2eproto_once;
static bool descriptor_table_waypoint_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waypoint_2eproto = {
  &descriptor_table_waypoint_2eproto_initialized, descriptor_table_protodef_waypoint_2eproto, "waypoint.proto", 1975,
  &descriptor_table_waypoint_2eproto_once, descriptor_table_waypoint_2eproto_sccs, descriptor_table_waypoint_2eproto_deps, 13, 2,
  schemas, file_default_instances, TableStruct_waypoint_2eproto::offsets,
  file_level_metadata_waypoint_2eproto, 13, file_level_enum_descriptors_waypoint_2eproto, file_level_service_descriptors_waypoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_waypoint_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_waypoint_2eproto), true);
namespace sim_msg {

// ===================================================================

void Orientation::InitAsDefaultInstance() {
}
class Orientation::_Internal {
 public:
};

Orientation::Orientation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&h_, &from.h_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&h_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Orientation)
}

void Orientation::SharedCtor() {
  ::memset(&h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&h_)) + sizeof(r_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:sim_msg.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
}

void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Orientation& Orientation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Orientation_waypoint_2eproto.base);
  return *internal_default_instance();
}


void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&h_)) + sizeof(r_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double h = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double p = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double r = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Orientation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Orientation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double h = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double r = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Orientation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Orientation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double h = 1;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->h(), output);
  }

  // double p = 2;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->p(), output);
  }

  // double r = 3;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Orientation)
}

::PROTOBUF_NAMESPACE_ID::uint8* Orientation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Orientation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double h = 1;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->h(), target);
  }

  // double p = 2;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->p(), target);
  }

  // double r = 3;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Orientation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double h = 1;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 8;
  }

  // double p = 2;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    total_size += 1 + 8;
  }

  // double r = 3;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Orientation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Orientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Orientation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.h() <= 0 && from.h() >= 0)) {
    set_h(from.h());
  }
  if (!(from.p() <= 0 && from.p() >= 0)) {
    set_p(from.p());
  }
  if (!(from.r() <= 0 && from.r() >= 0)) {
    set_r(from.r());
  }
}

void Orientation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(h_, other->h_);
  swap(p_, other->p_);
  swap(r_, other->r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionWorld::InitAsDefaultInstance() {
}
class PositionWorld::_Internal {
 public:
};

PositionWorld::PositionWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionWorld)
}
PositionWorld::PositionWorld(const PositionWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&r_) -
    reinterpret_cast<char*>(&x_)) + sizeof(r_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionWorld)
}

void PositionWorld::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&x_)) + sizeof(r_));
}

PositionWorld::~PositionWorld() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionWorld)
  SharedDtor();
}

void PositionWorld::SharedDtor() {
}

void PositionWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionWorld& PositionWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionWorld_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r_) -
      reinterpret_cast<char*>(&x_)) + sizeof(r_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double p = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double r = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double x = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double h = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double p = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double r = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // double h = 4;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->h(), output);
  }

  // double p = 5;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->p(), output);
  }

  // double r = 6;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // double h = 4;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->h(), target);
  }

  // double p = 5;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->p(), target);
  }

  // double r = 6;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionWorld)
  return target;
}

size_t PositionWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double h = 4;
  if (!(this->h() <= 0 && this->h() >= 0)) {
    total_size += 1 + 8;
  }

  // double p = 5;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    total_size += 1 + 8;
  }

  // double r = 6;
  if (!(this->r() <= 0 && this->r() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionWorld)
    MergeFrom(*source);
  }
}

void PositionWorld::MergeFrom(const PositionWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (!(from.h() <= 0 && from.h() >= 0)) {
    set_h(from.h());
  }
  if (!(from.p() <= 0 && from.p() >= 0)) {
    set_p(from.p());
  }
  if (!(from.r() <= 0 && from.r() >= 0)) {
    set_r(from.r());
  }
}

void PositionWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionWorld::CopyFrom(const PositionWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionWorld::IsInitialized() const {
  return true;
}

void PositionWorld::InternalSwap(PositionWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(h_, other->h_);
  swap(p_, other->p_);
  swap(r_, other->r_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionRelativeWorld::InitAsDefaultInstance() {
  ::sim_msg::_PositionRelativeWorld_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class PositionRelativeWorld::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const PositionRelativeWorld* msg);
};

const ::sim_msg::Orientation&
PositionRelativeWorld::_Internal::orientation(const PositionRelativeWorld* msg) {
  return *msg->orientation_;
}
PositionRelativeWorld::PositionRelativeWorld()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionRelativeWorld)
}
PositionRelativeWorld::PositionRelativeWorld(const PositionRelativeWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dz_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(dz_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionRelativeWorld)
}

void PositionRelativeWorld::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionRelativeWorld_waypoint_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dz_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(dz_));
}

PositionRelativeWorld::~PositionRelativeWorld() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionRelativeWorld)
  SharedDtor();
}

void PositionRelativeWorld::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orientation_;
}

void PositionRelativeWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionRelativeWorld& PositionRelativeWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionRelativeWorld_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionRelativeWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionRelativeWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dz_) -
      reinterpret_cast<char*>(&dx_)) + sizeof(dz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionRelativeWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.PositionRelativeWorld.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionRelativeWorld::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionRelativeWorld)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.PositionRelativeWorld.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dz = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionRelativeWorld)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionRelativeWorld)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionRelativeWorld::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionRelativeWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeWorld.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // double dx = 2;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->dx(), output);
  }

  // double dy = 3;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->dy(), output);
  }

  // double dz = 4;
  if (!(this->dz() <= 0 && this->dz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->dz(), output);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionRelativeWorld)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionRelativeWorld::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionRelativeWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeWorld.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // double dx = 2;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->dx(), target);
  }

  // double dy = 3;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->dy(), target);
  }

  // double dz = 4;
  if (!(this->dz() <= 0 && this->dz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->dz(), target);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionRelativeWorld)
  return target;
}

size_t PositionRelativeWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionRelativeWorld)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // double dx = 2;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    total_size += 1 + 8;
  }

  // double dy = 3;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    total_size += 1 + 8;
  }

  // double dz = 4;
  if (!(this->dz() <= 0 && this->dz() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionRelativeWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionRelativeWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionRelativeWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionRelativeWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionRelativeWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionRelativeWorld)
    MergeFrom(*source);
  }
}

void PositionRelativeWorld::MergeFrom(const PositionRelativeWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionRelativeWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (!(from.dx() <= 0 && from.dx() >= 0)) {
    set_dx(from.dx());
  }
  if (!(from.dy() <= 0 && from.dy() >= 0)) {
    set_dy(from.dy());
  }
  if (!(from.dz() <= 0 && from.dz() >= 0)) {
    set_dz(from.dz());
  }
}

void PositionRelativeWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionRelativeWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionRelativeWorld::CopyFrom(const PositionRelativeWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionRelativeWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionRelativeWorld::IsInitialized() const {
  return true;
}

void PositionRelativeWorld::InternalSwap(PositionRelativeWorld* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orientation_, other->orientation_);
  swap(dx_, other->dx_);
  swap(dy_, other->dy_);
  swap(dz_, other->dz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionRelativeWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionRelativeObject::InitAsDefaultInstance() {
  ::sim_msg::_PositionRelativeObject_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class PositionRelativeObject::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const PositionRelativeObject* msg);
};

const ::sim_msg::Orientation&
PositionRelativeObject::_Internal::orientation(const PositionRelativeObject* msg) {
  return *msg->orientation_;
}
PositionRelativeObject::PositionRelativeObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionRelativeObject)
}
PositionRelativeObject::PositionRelativeObject(const PositionRelativeObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&dx_, &from.dx_,
    static_cast<size_t>(reinterpret_cast<char*>(&dz_) -
    reinterpret_cast<char*>(&dx_)) + sizeof(dz_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionRelativeObject)
}

void PositionRelativeObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionRelativeObject_waypoint_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dz_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(dz_));
}

PositionRelativeObject::~PositionRelativeObject() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionRelativeObject)
  SharedDtor();
}

void PositionRelativeObject::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orientation_;
}

void PositionRelativeObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionRelativeObject& PositionRelativeObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionRelativeObject_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionRelativeObject::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionRelativeObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&dx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dz_) -
      reinterpret_cast<char*>(&dx_)) + sizeof(dz_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionRelativeObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.PositionRelativeObject.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          dx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dz = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          dz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionRelativeObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionRelativeObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.PositionRelativeObject.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dy = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dz = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionRelativeObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionRelativeObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionRelativeObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionRelativeObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeObject.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // double dx = 2;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->dx(), output);
  }

  // double dy = 3;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->dy(), output);
  }

  // double dz = 4;
  if (!(this->dz() <= 0 && this->dz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->dz(), output);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionRelativeObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionRelativeObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionRelativeObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeObject.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // double dx = 2;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->dx(), target);
  }

  // double dy = 3;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->dy(), target);
  }

  // double dz = 4;
  if (!(this->dz() <= 0 && this->dz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->dz(), target);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionRelativeObject)
  return target;
}

size_t PositionRelativeObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionRelativeObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // double dx = 2;
  if (!(this->dx() <= 0 && this->dx() >= 0)) {
    total_size += 1 + 8;
  }

  // double dy = 3;
  if (!(this->dy() <= 0 && this->dy() >= 0)) {
    total_size += 1 + 8;
  }

  // double dz = 4;
  if (!(this->dz() <= 0 && this->dz() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionRelativeObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionRelativeObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionRelativeObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionRelativeObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionRelativeObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionRelativeObject)
    MergeFrom(*source);
  }
}

void PositionRelativeObject::MergeFrom(const PositionRelativeObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionRelativeObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (!(from.dx() <= 0 && from.dx() >= 0)) {
    set_dx(from.dx());
  }
  if (!(from.dy() <= 0 && from.dy() >= 0)) {
    set_dy(from.dy());
  }
  if (!(from.dz() <= 0 && from.dz() >= 0)) {
    set_dz(from.dz());
  }
}

void PositionRelativeObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionRelativeObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionRelativeObject::CopyFrom(const PositionRelativeObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionRelativeObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionRelativeObject::IsInitialized() const {
  return true;
}

void PositionRelativeObject::InternalSwap(PositionRelativeObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orientation_, other->orientation_);
  swap(dx_, other->dx_);
  swap(dy_, other->dy_);
  swap(dz_, other->dz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionRelativeObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionRoad::InitAsDefaultInstance() {
  ::sim_msg::_PositionRoad_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class PositionRoad::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const PositionRoad* msg);
};

const ::sim_msg::Orientation&
PositionRoad::_Internal::orientation(const PositionRoad* msg) {
  return *msg->orientation_;
}
PositionRoad::PositionRoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionRoad)
}
PositionRoad::PositionRoad(const PositionRoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&road_id_, &from.road_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&road_id_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionRoad)
}

void PositionRoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionRoad_waypoint_2eproto.base);
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(t_));
}

PositionRoad::~PositionRoad() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionRoad)
  SharedDtor();
}

void PositionRoad::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
}

void PositionRoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionRoad& PositionRoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionRoad_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&road_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&road_id_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionRoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 road_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionRoad::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionRoad)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 road_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double s = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionRoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionRoad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionRoad::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->road_id(), output);
  }

  // double s = 2;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->s(), output);
  }

  // double t = 3;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->t(), output);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionRoad)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionRoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->road_id(), target);
  }

  // double s = 2;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->s(), target);
  }

  // double t = 3;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->t(), target);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionRoad)
  return target;
}

size_t PositionRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionRoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->road_id());
  }

  // double s = 2;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double t = 3;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionRoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionRoad)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionRoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionRoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionRoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionRoad)
    MergeFrom(*source);
  }
}

void PositionRoad::MergeFrom(const PositionRoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionRoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (from.road_id() != 0) {
    set_road_id(from.road_id());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    set_t(from.t());
  }
}

void PositionRoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionRoad::CopyFrom(const PositionRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionRoad::IsInitialized() const {
  return true;
}

void PositionRoad::InternalSwap(PositionRoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orientation_, other->orientation_);
  swap(road_id_, other->road_id_);
  swap(s_, other->s_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionRoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionRelativeRoad::InitAsDefaultInstance() {
  ::sim_msg::_PositionRelativeRoad_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class PositionRelativeRoad::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const PositionRelativeRoad* msg);
};

const ::sim_msg::Orientation&
PositionRelativeRoad::_Internal::orientation(const PositionRelativeRoad* msg) {
  return *msg->orientation_;
}
PositionRelativeRoad::PositionRelativeRoad()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionRelativeRoad)
}
PositionRelativeRoad::PositionRelativeRoad(const PositionRelativeRoad& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&ds_, &from.ds_,
    static_cast<size_t>(reinterpret_cast<char*>(&dt_) -
    reinterpret_cast<char*>(&ds_)) + sizeof(dt_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionRelativeRoad)
}

void PositionRelativeRoad::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionRelativeRoad_waypoint_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dt_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(dt_));
}

PositionRelativeRoad::~PositionRelativeRoad() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionRelativeRoad)
  SharedDtor();
}

void PositionRelativeRoad::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orientation_;
}

void PositionRelativeRoad::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionRelativeRoad& PositionRelativeRoad::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionRelativeRoad_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionRelativeRoad::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionRelativeRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&ds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dt_) -
      reinterpret_cast<char*>(&ds_)) + sizeof(dt_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionRelativeRoad::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.PositionRelativeRoad.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          dt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionRelativeRoad::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionRelativeRoad)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.PositionRelativeRoad.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ds = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dt = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionRelativeRoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionRelativeRoad)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionRelativeRoad::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionRelativeRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeRoad.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // double ds = 2;
  if (!(this->ds() <= 0 && this->ds() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->ds(), output);
  }

  // double dt = 3;
  if (!(this->dt() <= 0 && this->dt() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->dt(), output);
  }

  // .sim_msg.Orientation orientation = 4;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionRelativeRoad)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionRelativeRoad::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionRelativeRoad)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeRoad.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // double ds = 2;
  if (!(this->ds() <= 0 && this->ds() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->ds(), target);
  }

  // double dt = 3;
  if (!(this->dt() <= 0 && this->dt() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->dt(), target);
  }

  // .sim_msg.Orientation orientation = 4;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionRelativeRoad)
  return target;
}

size_t PositionRelativeRoad::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionRelativeRoad)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // .sim_msg.Orientation orientation = 4;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // double ds = 2;
  if (!(this->ds() <= 0 && this->ds() >= 0)) {
    total_size += 1 + 8;
  }

  // double dt = 3;
  if (!(this->dt() <= 0 && this->dt() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionRelativeRoad::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionRelativeRoad)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionRelativeRoad* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionRelativeRoad>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionRelativeRoad)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionRelativeRoad)
    MergeFrom(*source);
  }
}

void PositionRelativeRoad::MergeFrom(const PositionRelativeRoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionRelativeRoad)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (!(from.ds() <= 0 && from.ds() >= 0)) {
    set_ds(from.ds());
  }
  if (!(from.dt() <= 0 && from.dt() >= 0)) {
    set_dt(from.dt());
  }
}

void PositionRelativeRoad::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionRelativeRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionRelativeRoad::CopyFrom(const PositionRelativeRoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionRelativeRoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionRelativeRoad::IsInitialized() const {
  return true;
}

void PositionRelativeRoad::InternalSwap(PositionRelativeRoad* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orientation_, other->orientation_);
  swap(ds_, other->ds_);
  swap(dt_, other->dt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionRelativeRoad::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionLane::InitAsDefaultInstance() {
  ::sim_msg::_PositionLane_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class PositionLane::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const PositionLane* msg);
};

const ::sim_msg::Orientation&
PositionLane::_Internal::orientation(const PositionLane* msg) {
  return *msg->orientation_;
}
PositionLane::PositionLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionLane)
}
PositionLane::PositionLane(const PositionLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&road_id_, &from.road_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&s_) -
    reinterpret_cast<char*>(&road_id_)) + sizeof(s_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionLane)
}

void PositionLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionLane_waypoint_2eproto.base);
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(s_));
}

PositionLane::~PositionLane() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionLane)
  SharedDtor();
}

void PositionLane::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
}

void PositionLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionLane& PositionLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionLane_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionLane::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&road_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&road_id_)) + sizeof(s_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 road_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionLane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionLane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 road_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lane_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double s = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionLane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionLane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->road_id(), output);
  }

  // int64 lane_id = 3;
  if (this->lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->lane_id(), output);
  }

  // double offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->offset(), output);
  }

  // double s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->s(), output);
  }

  // .sim_msg.Orientation orientation = 6;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionLane)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->road_id(), target);
  }

  // int64 lane_id = 3;
  if (this->lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->lane_id(), target);
  }

  // double offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->offset(), target);
  }

  // double s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->s(), target);
  }

  // .sim_msg.Orientation orientation = 6;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionLane)
  return target;
}

size_t PositionLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Orientation orientation = 6;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->road_id());
  }

  // int64 lane_id = 3;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lane_id());
  }

  // double offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 8;
  }

  // double s = 5;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionLane)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionLane)
    MergeFrom(*source);
  }
}

void PositionLane::MergeFrom(const PositionLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (from.road_id() != 0) {
    set_road_id(from.road_id());
  }
  if (from.lane_id() != 0) {
    set_lane_id(from.lane_id());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    set_offset(from.offset());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
}

void PositionLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionLane::CopyFrom(const PositionLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionLane::IsInitialized() const {
  return true;
}

void PositionLane::InternalSwap(PositionLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orientation_, other->orientation_);
  swap(road_id_, other->road_id_);
  swap(lane_id_, other->lane_id_);
  swap(offset_, other->offset_);
  swap(s_, other->s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionRelativeLane::InitAsDefaultInstance() {
  ::sim_msg::_PositionRelativeLane_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class PositionRelativeLane::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const PositionRelativeLane* msg);
};

const ::sim_msg::Orientation&
PositionRelativeLane::_Internal::orientation(const PositionRelativeLane* msg) {
  return *msg->orientation_;
}
PositionRelativeLane::PositionRelativeLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionRelativeLane)
}
PositionRelativeLane::PositionRelativeLane(const PositionRelativeLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&ds_, &from.ds_,
    static_cast<size_t>(reinterpret_cast<char*>(&dlane_) -
    reinterpret_cast<char*>(&ds_)) + sizeof(dlane_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionRelativeLane)
}

void PositionRelativeLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionRelativeLane_waypoint_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlane_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(dlane_));
}

PositionRelativeLane::~PositionRelativeLane() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionRelativeLane)
  SharedDtor();
}

void PositionRelativeLane::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete orientation_;
}

void PositionRelativeLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionRelativeLane& PositionRelativeLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionRelativeLane_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionRelativeLane::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionRelativeLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&ds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dlane_) -
      reinterpret_cast<char*>(&ds_)) + sizeof(dlane_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionRelativeLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.PositionRelativeLane.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dlane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dlane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionRelativeLane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionRelativeLane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.PositionRelativeLane.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dlane = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &dlane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ds = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionRelativeLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionRelativeLane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionRelativeLane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionRelativeLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeLane.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // int32 dlane = 2;
  if (this->dlane() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->dlane(), output);
  }

  // double ds = 3;
  if (!(this->ds() <= 0 && this->ds() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->ds(), output);
  }

  // double offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->offset(), output);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionRelativeLane)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionRelativeLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionRelativeLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PositionRelativeLane.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // int32 dlane = 2;
  if (this->dlane() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->dlane(), target);
  }

  // double ds = 3;
  if (!(this->ds() <= 0 && this->ds() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->ds(), target);
  }

  // double offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->offset(), target);
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionRelativeLane)
  return target;
}

size_t PositionRelativeLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionRelativeLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // .sim_msg.Orientation orientation = 5;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // double ds = 3;
  if (!(this->ds() <= 0 && this->ds() >= 0)) {
    total_size += 1 + 8;
  }

  // double offset = 4;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 dlane = 2;
  if (this->dlane() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->dlane());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionRelativeLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionRelativeLane)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionRelativeLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionRelativeLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionRelativeLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionRelativeLane)
    MergeFrom(*source);
  }
}

void PositionRelativeLane::MergeFrom(const PositionRelativeLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionRelativeLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (!(from.ds() <= 0 && from.ds() >= 0)) {
    set_ds(from.ds());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    set_offset(from.offset());
  }
  if (from.dlane() != 0) {
    set_dlane(from.dlane());
  }
}

void PositionRelativeLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionRelativeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionRelativeLane::CopyFrom(const PositionRelativeLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionRelativeLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionRelativeLane::IsInitialized() const {
  return true;
}

void PositionRelativeLane::InternalSwap(PositionRelativeLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(orientation_, other->orientation_);
  swap(ds_, other->ds_);
  swap(offset_, other->offset_);
  swap(dlane_, other->dlane_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionRelativeLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionRoute::InitAsDefaultInstance() {
  ::sim_msg::_PositionRoute_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class PositionRoute::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const PositionRoute* msg);
};

const ::sim_msg::Orientation&
PositionRoute::_Internal::orientation(const PositionRoute* msg) {
  return *msg->orientation_;
}
PositionRoute::PositionRoute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PositionRoute)
}
PositionRoute::PositionRoute(const PositionRoute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  route_ref_ = from.route_ref_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.PositionRoute)
}

void PositionRoute::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionRoute_waypoint_2eproto.base);
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&route_ref_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(route_ref_));
}

PositionRoute::~PositionRoute() {
  // @@protoc_insertion_point(destructor:sim_msg.PositionRoute)
  SharedDtor();
}

void PositionRoute::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
}

void PositionRoute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionRoute& PositionRoute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionRoute_waypoint_2eproto.base);
  return *internal_default_instance();
}


void PositionRoute::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PositionRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  route_ref_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PositionRoute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 route_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          route_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PositionRoute::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PositionRoute)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 route_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &route_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PositionRoute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PositionRoute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PositionRoute::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PositionRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 route_ref = 1;
  if (this->route_ref() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->route_ref(), output);
  }

  // .sim_msg.Orientation orientation = 2;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PositionRoute)
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionRoute::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PositionRoute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 route_ref = 1;
  if (this->route_ref() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->route_ref(), target);
  }

  // .sim_msg.Orientation orientation = 2;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PositionRoute)
  return target;
}

size_t PositionRoute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PositionRoute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Orientation orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // uint64 route_ref = 1;
  if (this->route_ref() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->route_ref());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionRoute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PositionRoute)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionRoute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionRoute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PositionRoute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PositionRoute)
    MergeFrom(*source);
  }
}

void PositionRoute::MergeFrom(const PositionRoute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PositionRoute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (from.route_ref() != 0) {
    set_route_ref(from.route_ref());
  }
}

void PositionRoute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PositionRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionRoute::CopyFrom(const PositionRoute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PositionRoute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionRoute::IsInitialized() const {
  return true;
}

void PositionRoute::InternalSwap(PositionRoute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orientation_, other->orientation_);
  swap(route_ref_, other->route_ref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionRoute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPosition::InitAsDefaultInstance() {
  ::sim_msg::_GeoPosition_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class GeoPosition::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const GeoPosition* msg);
};

const ::sim_msg::Orientation&
GeoPosition::_Internal::orientation(const GeoPosition* msg) {
  return *msg->orientation_;
}
GeoPosition::GeoPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.GeoPosition)
}
GeoPosition::GeoPosition(const GeoPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.GeoPosition)
}

void GeoPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPosition_waypoint_2eproto.base);
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(altitude_));
}

GeoPosition::~GeoPosition() {
  // @@protoc_insertion_point(destructor:sim_msg.GeoPosition)
  SharedDtor();
}

void GeoPosition::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
}

void GeoPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPosition& GeoPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPosition_waypoint_2eproto.base);
  return *internal_default_instance();
}


void GeoPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.GeoPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(altitude_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GeoPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double altitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GeoPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.GeoPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longitude = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double altitude = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.GeoPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.GeoPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GeoPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.GeoPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->altitude(), output);
  }

  // .sim_msg.Orientation orientation = 4;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.GeoPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.GeoPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->longitude(), target);
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->latitude(), target);
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->altitude(), target);
  }

  // .sim_msg.Orientation orientation = 4;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.GeoPosition)
  return target;
}

size_t GeoPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.GeoPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Orientation orientation = 4;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // double longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double altitude = 3;
  if (!(this->altitude() <= 0 && this->altitude() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.GeoPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.GeoPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.GeoPosition)
    MergeFrom(*source);
  }
}

void GeoPosition::MergeFrom(const GeoPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.GeoPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    set_longitude(from.longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    set_latitude(from.latitude());
  }
  if (!(from.altitude() <= 0 && from.altitude() >= 0)) {
    set_altitude(from.altitude());
  }
}

void GeoPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.GeoPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPosition::CopyFrom(const GeoPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.GeoPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPosition::IsInitialized() const {
  return true;
}

void GeoPosition::InternalSwap(GeoPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orientation_, other->orientation_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(altitude_, other->altitude_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPosition::InitAsDefaultInstance() {
  ::sim_msg::_TrajectoryPosition_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::sim_msg::Orientation*>(
      ::sim_msg::Orientation::internal_default_instance());
}
class TrajectoryPosition::_Internal {
 public:
  static const ::sim_msg::Orientation& orientation(const TrajectoryPosition* msg);
};

const ::sim_msg::Orientation&
TrajectoryPosition::_Internal::orientation(const TrajectoryPosition* msg) {
  return *msg->orientation_;
}
TrajectoryPosition::TrajectoryPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TrajectoryPosition)
}
TrajectoryPosition::TrajectoryPosition(const TrajectoryPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_orientation()) {
    orientation_ = new ::sim_msg::Orientation(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&s_)) + sizeof(t_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrajectoryPosition)
}

void TrajectoryPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPosition_waypoint_2eproto.base);
  ::memset(&orientation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&orientation_)) + sizeof(t_));
}

TrajectoryPosition::~TrajectoryPosition() {
  // @@protoc_insertion_point(destructor:sim_msg.TrajectoryPosition)
  SharedDtor();
}

void TrajectoryPosition::SharedDtor() {
  if (this != internal_default_instance()) delete orientation_;
}

void TrajectoryPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPosition& TrajectoryPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPosition_waypoint_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrajectoryPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&t_) -
      reinterpret_cast<char*>(&s_)) + sizeof(t_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Orientation orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TrajectoryPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Orientation orientation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TrajectoryPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TrajectoryPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TrajectoryPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->s(), output);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // .sim_msg.Orientation orientation = 3;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::orientation(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TrajectoryPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrajectoryPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->s(), target);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // .sim_msg.Orientation orientation = 3;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::orientation(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrajectoryPosition)
  return target;
}

size_t TrajectoryPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrajectoryPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Orientation orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // double s = 1;
  if (!(this->s() <= 0 && this->s() >= 0)) {
    total_size += 1 + 8;
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TrajectoryPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TrajectoryPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TrajectoryPosition)
    MergeFrom(*source);
  }
}

void TrajectoryPosition::MergeFrom(const TrajectoryPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrajectoryPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_orientation()) {
    mutable_orientation()->::sim_msg::Orientation::MergeFrom(from.orientation());
  }
  if (!(from.s() <= 0 && from.s() >= 0)) {
    set_s(from.s());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    set_t(from.t());
  }
}

void TrajectoryPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TrajectoryPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPosition::CopyFrom(const TrajectoryPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrajectoryPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPosition::IsInitialized() const {
  return true;
}

void TrajectoryPosition::InternalSwap(TrajectoryPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(orientation_, other->orientation_);
  swap(s_, other->s_);
  swap(t_, other->t_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Position::InitAsDefaultInstance() {
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->world_ = const_cast< ::sim_msg::PositionWorld*>(
      ::sim_msg::PositionWorld::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->relative_world_ = const_cast< ::sim_msg::PositionRelativeWorld*>(
      ::sim_msg::PositionRelativeWorld::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->relative_object_ = const_cast< ::sim_msg::PositionRelativeObject*>(
      ::sim_msg::PositionRelativeObject::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->road_ = const_cast< ::sim_msg::PositionRoad*>(
      ::sim_msg::PositionRoad::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->relative_road_ = const_cast< ::sim_msg::PositionRelativeRoad*>(
      ::sim_msg::PositionRelativeRoad::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->lane_ = const_cast< ::sim_msg::PositionLane*>(
      ::sim_msg::PositionLane::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->relative_lane_ = const_cast< ::sim_msg::PositionRelativeLane*>(
      ::sim_msg::PositionRelativeLane::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->route_ = const_cast< ::sim_msg::PositionRoute*>(
      ::sim_msg::PositionRoute::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->geo_ = const_cast< ::sim_msg::GeoPosition*>(
      ::sim_msg::GeoPosition::internal_default_instance());
  ::sim_msg::_Position_default_instance_._instance.get_mutable()->trajectory_ = const_cast< ::sim_msg::TrajectoryPosition*>(
      ::sim_msg::TrajectoryPosition::internal_default_instance());
}
class Position::_Internal {
 public:
  static const ::sim_msg::PositionWorld& world(const Position* msg);
  static const ::sim_msg::PositionRelativeWorld& relative_world(const Position* msg);
  static const ::sim_msg::PositionRelativeObject& relative_object(const Position* msg);
  static const ::sim_msg::PositionRoad& road(const Position* msg);
  static const ::sim_msg::PositionRelativeRoad& relative_road(const Position* msg);
  static const ::sim_msg::PositionLane& lane(const Position* msg);
  static const ::sim_msg::PositionRelativeLane& relative_lane(const Position* msg);
  static const ::sim_msg::PositionRoute& route(const Position* msg);
  static const ::sim_msg::GeoPosition& geo(const Position* msg);
  static const ::sim_msg::TrajectoryPosition& trajectory(const Position* msg);
};

const ::sim_msg::PositionWorld&
Position::_Internal::world(const Position* msg) {
  return *msg->world_;
}
const ::sim_msg::PositionRelativeWorld&
Position::_Internal::relative_world(const Position* msg) {
  return *msg->relative_world_;
}
const ::sim_msg::PositionRelativeObject&
Position::_Internal::relative_object(const Position* msg) {
  return *msg->relative_object_;
}
const ::sim_msg::PositionRoad&
Position::_Internal::road(const Position* msg) {
  return *msg->road_;
}
const ::sim_msg::PositionRelativeRoad&
Position::_Internal::relative_road(const Position* msg) {
  return *msg->relative_road_;
}
const ::sim_msg::PositionLane&
Position::_Internal::lane(const Position* msg) {
  return *msg->lane_;
}
const ::sim_msg::PositionRelativeLane&
Position::_Internal::relative_lane(const Position* msg) {
  return *msg->relative_lane_;
}
const ::sim_msg::PositionRoute&
Position::_Internal::route(const Position* msg) {
  return *msg->route_;
}
const ::sim_msg::GeoPosition&
Position::_Internal::geo(const Position* msg) {
  return *msg->geo_;
}
const ::sim_msg::TrajectoryPosition&
Position::_Internal::trajectory(const Position* msg) {
  return *msg->trajectory_;
}
Position::Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_world()) {
    world_ = new ::sim_msg::PositionWorld(*from.world_);
  } else {
    world_ = nullptr;
  }
  if (from.has_relative_world()) {
    relative_world_ = new ::sim_msg::PositionRelativeWorld(*from.relative_world_);
  } else {
    relative_world_ = nullptr;
  }
  if (from.has_relative_object()) {
    relative_object_ = new ::sim_msg::PositionRelativeObject(*from.relative_object_);
  } else {
    relative_object_ = nullptr;
  }
  if (from.has_road()) {
    road_ = new ::sim_msg::PositionRoad(*from.road_);
  } else {
    road_ = nullptr;
  }
  if (from.has_relative_road()) {
    relative_road_ = new ::sim_msg::PositionRelativeRoad(*from.relative_road_);
  } else {
    relative_road_ = nullptr;
  }
  if (from.has_lane()) {
    lane_ = new ::sim_msg::PositionLane(*from.lane_);
  } else {
    lane_ = nullptr;
  }
  if (from.has_relative_lane()) {
    relative_lane_ = new ::sim_msg::PositionRelativeLane(*from.relative_lane_);
  } else {
    relative_lane_ = nullptr;
  }
  if (from.has_route()) {
    route_ = new ::sim_msg::PositionRoute(*from.route_);
  } else {
    route_ = nullptr;
  }
  if (from.has_geo()) {
    geo_ = new ::sim_msg::GeoPosition(*from.geo_);
  } else {
    geo_ = nullptr;
  }
  if (from.has_trajectory()) {
    trajectory_ = new ::sim_msg::TrajectoryPosition(*from.trajectory_);
  } else {
    trajectory_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Position)
}

void Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Position_waypoint_2eproto.base);
  ::memset(&world_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_) -
      reinterpret_cast<char*>(&world_)) + sizeof(trajectory_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:sim_msg.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != internal_default_instance()) delete world_;
  if (this != internal_default_instance()) delete relative_world_;
  if (this != internal_default_instance()) delete relative_object_;
  if (this != internal_default_instance()) delete road_;
  if (this != internal_default_instance()) delete relative_road_;
  if (this != internal_default_instance()) delete lane_;
  if (this != internal_default_instance()) delete relative_lane_;
  if (this != internal_default_instance()) delete route_;
  if (this != internal_default_instance()) delete geo_;
  if (this != internal_default_instance()) delete trajectory_;
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_waypoint_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && world_ != nullptr) {
    delete world_;
  }
  world_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relative_world_ != nullptr) {
    delete relative_world_;
  }
  relative_world_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relative_object_ != nullptr) {
    delete relative_object_;
  }
  relative_object_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && road_ != nullptr) {
    delete road_;
  }
  road_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relative_road_ != nullptr) {
    delete relative_road_;
  }
  relative_road_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lane_ != nullptr) {
    delete lane_;
  }
  lane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && relative_lane_ != nullptr) {
    delete relative_lane_;
  }
  relative_lane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trajectory_ != nullptr) {
    delete trajectory_;
  }
  trajectory_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.PositionWorld world = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_world(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PositionRelativeWorld relative_world = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_relative_world(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PositionRelativeObject relative_object = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_relative_object(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PositionRoad road = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_road(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PositionRelativeRoad relative_road = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_relative_road(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PositionLane lane = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PositionRelativeLane relative_lane = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_relative_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PositionRoute route = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GeoPosition geo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_geo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.TrajectoryPosition trajectory = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Position::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Position)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.PositionWorld world = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PositionRelativeWorld relative_world = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_world()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PositionRelativeObject relative_object = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PositionRoad road = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PositionRelativeRoad relative_road = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_road()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PositionLane lane = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PositionRelativeLane relative_lane = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PositionRoute route = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GeoPosition geo = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.TrajectoryPosition trajectory = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Position)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Position::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PositionWorld world = 1;
  if (this->has_world()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::world(this), output);
  }

  // .sim_msg.PositionRelativeWorld relative_world = 2;
  if (this->has_relative_world()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::relative_world(this), output);
  }

  // .sim_msg.PositionRelativeObject relative_object = 3;
  if (this->has_relative_object()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::relative_object(this), output);
  }

  // .sim_msg.PositionRoad road = 4;
  if (this->has_road()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::road(this), output);
  }

  // .sim_msg.PositionRelativeRoad relative_road = 5;
  if (this->has_relative_road()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::relative_road(this), output);
  }

  // .sim_msg.PositionLane lane = 6;
  if (this->has_lane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::lane(this), output);
  }

  // .sim_msg.PositionRelativeLane relative_lane = 7;
  if (this->has_relative_lane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::relative_lane(this), output);
  }

  // .sim_msg.PositionRoute route = 8;
  if (this->has_route()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::route(this), output);
  }

  // .sim_msg.GeoPosition geo = 9;
  if (this->has_geo()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::geo(this), output);
  }

  // .sim_msg.TrajectoryPosition trajectory = 10;
  if (this->has_trajectory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::trajectory(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Position)
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PositionWorld world = 1;
  if (this->has_world()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::world(this), target);
  }

  // .sim_msg.PositionRelativeWorld relative_world = 2;
  if (this->has_relative_world()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::relative_world(this), target);
  }

  // .sim_msg.PositionRelativeObject relative_object = 3;
  if (this->has_relative_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::relative_object(this), target);
  }

  // .sim_msg.PositionRoad road = 4;
  if (this->has_road()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::road(this), target);
  }

  // .sim_msg.PositionRelativeRoad relative_road = 5;
  if (this->has_relative_road()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::relative_road(this), target);
  }

  // .sim_msg.PositionLane lane = 6;
  if (this->has_lane()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::lane(this), target);
  }

  // .sim_msg.PositionRelativeLane relative_lane = 7;
  if (this->has_relative_lane()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::relative_lane(this), target);
  }

  // .sim_msg.PositionRoute route = 8;
  if (this->has_route()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::route(this), target);
  }

  // .sim_msg.GeoPosition geo = 9;
  if (this->has_geo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::geo(this), target);
  }

  // .sim_msg.TrajectoryPosition trajectory = 10;
  if (this->has_trajectory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::trajectory(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Position)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.PositionWorld world = 1;
  if (this->has_world()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_);
  }

  // .sim_msg.PositionRelativeWorld relative_world = 2;
  if (this->has_relative_world()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_world_);
  }

  // .sim_msg.PositionRelativeObject relative_object = 3;
  if (this->has_relative_object()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_object_);
  }

  // .sim_msg.PositionRoad road = 4;
  if (this->has_road()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *road_);
  }

  // .sim_msg.PositionRelativeRoad relative_road = 5;
  if (this->has_relative_road()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_road_);
  }

  // .sim_msg.PositionLane lane = 6;
  if (this->has_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_);
  }

  // .sim_msg.PositionRelativeLane relative_lane = 7;
  if (this->has_relative_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *relative_lane_);
  }

  // .sim_msg.PositionRoute route = 8;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  // .sim_msg.GeoPosition geo = 9;
  if (this->has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_);
  }

  // .sim_msg.TrajectoryPosition trajectory = 10;
  if (this->has_trajectory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_world()) {
    mutable_world()->::sim_msg::PositionWorld::MergeFrom(from.world());
  }
  if (from.has_relative_world()) {
    mutable_relative_world()->::sim_msg::PositionRelativeWorld::MergeFrom(from.relative_world());
  }
  if (from.has_relative_object()) {
    mutable_relative_object()->::sim_msg::PositionRelativeObject::MergeFrom(from.relative_object());
  }
  if (from.has_road()) {
    mutable_road()->::sim_msg::PositionRoad::MergeFrom(from.road());
  }
  if (from.has_relative_road()) {
    mutable_relative_road()->::sim_msg::PositionRelativeRoad::MergeFrom(from.relative_road());
  }
  if (from.has_lane()) {
    mutable_lane()->::sim_msg::PositionLane::MergeFrom(from.lane());
  }
  if (from.has_relative_lane()) {
    mutable_relative_lane()->::sim_msg::PositionRelativeLane::MergeFrom(from.relative_lane());
  }
  if (from.has_route()) {
    mutable_route()->::sim_msg::PositionRoute::MergeFrom(from.route());
  }
  if (from.has_geo()) {
    mutable_geo()->::sim_msg::GeoPosition::MergeFrom(from.geo());
  }
  if (from.has_trajectory()) {
    mutable_trajectory()->::sim_msg::TrajectoryPosition::MergeFrom(from.trajectory());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(world_, other->world_);
  swap(relative_world_, other->relative_world_);
  swap(relative_object_, other->relative_object_);
  swap(road_, other->road_);
  swap(relative_road_, other->relative_road_);
  swap(lane_, other->lane_);
  swap(relative_lane_, other->relative_lane_);
  swap(route_, other->route_);
  swap(geo_, other->geo_);
  swap(trajectory_, other->trajectory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Waypoint::InitAsDefaultInstance() {
  ::sim_msg::_Waypoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::sim_msg::Position*>(
      ::sim_msg::Position::internal_default_instance());
  ::sim_msg::_Waypoint_default_instance_._instance.get_mutable()->speed_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::sim_msg::_Waypoint_default_instance_._instance.get_mutable()->accel_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::sim_msg::_Waypoint_default_instance_._instance.get_mutable()->heading_angle_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
  ::sim_msg::_Waypoint_default_instance_._instance.get_mutable()->front_wheel_steer_angle_ = const_cast< PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      PROTOBUF_NAMESPACE_ID::DoubleValue::internal_default_instance());
}
class Waypoint::_Internal {
 public:
  static const ::sim_msg::Position& position(const Waypoint* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& speed(const Waypoint* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& accel(const Waypoint* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& heading_angle(const Waypoint* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& front_wheel_steer_angle(const Waypoint* msg);
};

const ::sim_msg::Position&
Waypoint::_Internal::position(const Waypoint* msg) {
  return *msg->position_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Waypoint::_Internal::speed(const Waypoint* msg) {
  return *msg->speed_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Waypoint::_Internal::accel(const Waypoint* msg) {
  return *msg->accel_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Waypoint::_Internal::heading_angle(const Waypoint* msg) {
  return *msg->heading_angle_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
Waypoint::_Internal::front_wheel_steer_angle(const Waypoint* msg) {
  return *msg->front_wheel_steer_angle_;
}
void Waypoint::clear_speed() {
  if (GetArenaNoVirtual() == nullptr && speed_ != nullptr) {
    delete speed_;
  }
  speed_ = nullptr;
}
void Waypoint::clear_accel() {
  if (GetArenaNoVirtual() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
}
void Waypoint::clear_heading_angle() {
  if (GetArenaNoVirtual() == nullptr && heading_angle_ != nullptr) {
    delete heading_angle_;
  }
  heading_angle_ = nullptr;
}
void Waypoint::clear_front_wheel_steer_angle() {
  if (GetArenaNoVirtual() == nullptr && front_wheel_steer_angle_ != nullptr) {
    delete front_wheel_steer_angle_;
  }
  front_wheel_steer_angle_ = nullptr;
}
Waypoint::Waypoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::sim_msg::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_speed()) {
    speed_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.speed_);
  } else {
    speed_ = nullptr;
  }
  if (from.has_accel()) {
    accel_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.accel_);
  } else {
    accel_ = nullptr;
  }
  if (from.has_heading_angle()) {
    heading_angle_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.heading_angle_);
  } else {
    heading_angle_ = nullptr;
  }
  if (from.has_front_wheel_steer_angle()) {
    front_wheel_steer_angle_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.front_wheel_steer_angle_);
  } else {
    front_wheel_steer_angle_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_) -
    reinterpret_cast<char*>(&id_)) + sizeof(gear_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Waypoint)
}

void Waypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Waypoint_waypoint_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&position_)) + sizeof(gear_));
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:sim_msg.Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete accel_;
  if (this != internal_default_instance()) delete heading_angle_;
  if (this != internal_default_instance()) delete front_wheel_steer_angle_;
}

void Waypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Waypoint& Waypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Waypoint_waypoint_2eproto.base);
  return *internal_default_instance();
}


void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && speed_ != nullptr) {
    delete speed_;
  }
  speed_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && heading_angle_ != nullptr) {
    delete heading_angle_;
  }
  heading_angle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && front_wheel_steer_angle_ != nullptr) {
    delete front_wheel_steer_angle_;
  }
  front_wheel_steer_angle_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&id_)) + sizeof(gear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Waypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue accel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_accel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue heading_angle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_heading_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue front_wheel_steer_angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_front_wheel_steer_angle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GearSts gear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gear(static_cast<::sim_msg::GearSts>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Waypoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Waypoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Position position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.DoubleValue speed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.DoubleValue accel = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.DoubleValue heading_angle = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_heading_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.DoubleValue front_wheel_steer_angle = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_front_wheel_steer_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GearSts gear = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear(static_cast< ::sim_msg::GearSts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Waypoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Waypoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .sim_msg.Position position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::position(this), output);
  }

  // .google.protobuf.DoubleValue speed = 3;
  if (this->has_speed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::speed(this), output);
  }

  // .google.protobuf.DoubleValue accel = 4;
  if (this->has_accel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::accel(this), output);
  }

  // .google.protobuf.DoubleValue heading_angle = 5;
  if (this->has_heading_angle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::heading_angle(this), output);
  }

  // .google.protobuf.DoubleValue front_wheel_steer_angle = 6;
  if (this->has_front_wheel_steer_angle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::front_wheel_steer_angle(this), output);
  }

  // .sim_msg.GearSts gear = 7;
  if (this->gear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->gear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Waypoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* Waypoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .sim_msg.Position position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::position(this), target);
  }

  // .google.protobuf.DoubleValue speed = 3;
  if (this->has_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::speed(this), target);
  }

  // .google.protobuf.DoubleValue accel = 4;
  if (this->has_accel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::accel(this), target);
  }

  // .google.protobuf.DoubleValue heading_angle = 5;
  if (this->has_heading_angle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::heading_angle(this), target);
  }

  // .google.protobuf.DoubleValue front_wheel_steer_angle = 6;
  if (this->has_front_wheel_steer_angle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::front_wheel_steer_angle(this), target);
  }

  // .sim_msg.GearSts gear = 7;
  if (this->gear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->gear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Waypoint)
  return target;
}

size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Waypoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Position position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .google.protobuf.DoubleValue speed = 3;
  if (this->has_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_);
  }

  // .google.protobuf.DoubleValue accel = 4;
  if (this->has_accel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_);
  }

  // .google.protobuf.DoubleValue heading_angle = 5;
  if (this->has_heading_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *heading_angle_);
  }

  // .google.protobuf.DoubleValue front_wheel_steer_angle = 6;
  if (this->has_front_wheel_steer_angle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_wheel_steer_angle_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .sim_msg.GearSts gear = 7;
  if (this->gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Waypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Waypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Waypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Waypoint)
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::sim_msg::Position::MergeFrom(from.position());
  }
  if (from.has_speed()) {
    mutable_speed()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from.speed());
  }
  if (from.has_accel()) {
    mutable_accel()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from.accel());
  }
  if (from.has_heading_angle()) {
    mutable_heading_angle()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from.heading_angle());
  }
  if (from.has_front_wheel_steer_angle()) {
    mutable_front_wheel_steer_angle()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from.front_wheel_steer_angle());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
}

void Waypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  return true;
}

void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(speed_, other->speed_);
  swap(accel_, other->accel_);
  swap(heading_angle_, other->heading_angle_);
  swap(front_wheel_steer_angle_, other->front_wheel_steer_angle_);
  swap(id_, other->id_);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Waypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Orientation* Arena::CreateMaybeMessage< ::sim_msg::Orientation >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionWorld* Arena::CreateMaybeMessage< ::sim_msg::PositionWorld >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionRelativeWorld* Arena::CreateMaybeMessage< ::sim_msg::PositionRelativeWorld >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionRelativeWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionRelativeObject* Arena::CreateMaybeMessage< ::sim_msg::PositionRelativeObject >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionRelativeObject >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionRoad* Arena::CreateMaybeMessage< ::sim_msg::PositionRoad >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionRoad >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionRelativeRoad* Arena::CreateMaybeMessage< ::sim_msg::PositionRelativeRoad >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionRelativeRoad >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionLane* Arena::CreateMaybeMessage< ::sim_msg::PositionLane >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionLane >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionRelativeLane* Arena::CreateMaybeMessage< ::sim_msg::PositionRelativeLane >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionRelativeLane >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PositionRoute* Arena::CreateMaybeMessage< ::sim_msg::PositionRoute >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PositionRoute >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::GeoPosition* Arena::CreateMaybeMessage< ::sim_msg::GeoPosition >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::GeoPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TrajectoryPosition* Arena::CreateMaybeMessage< ::sim_msg::TrajectoryPosition >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TrajectoryPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Position* Arena::CreateMaybeMessage< ::sim_msg::Position >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Waypoint* Arena::CreateMaybeMessage< ::sim_msg::Waypoint >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Waypoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
