// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlSim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_controlSim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_controlSim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_controlSim_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_controlSim_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controlSim_2eproto;
namespace sim_msg {
class Car2Sim;
class Car2SimDefaultTypeInternal;
extern Car2SimDefaultTypeInternal _Car2Sim_default_instance_;
class ControlSim;
class ControlSimDefaultTypeInternal;
extern ControlSimDefaultTypeInternal _ControlSim_default_instance_;
class Sim2Car;
class Sim2CarDefaultTypeInternal;
extern Sim2CarDefaultTypeInternal _Sim2Car_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Car2Sim* Arena::CreateMaybeMessage<::sim_msg::Car2Sim>(Arena*);
template<> ::sim_msg::ControlSim* Arena::CreateMaybeMessage<::sim_msg::ControlSim>(Arena*);
template<> ::sim_msg::Sim2Car* Arena::CreateMaybeMessage<::sim_msg::Sim2Car>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum DriveMode : int {
  HUMAN = 0,
  AUTO = 1,
  DriveMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DriveMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DriveMode_IsValid(int value);
constexpr DriveMode DriveMode_MIN = HUMAN;
constexpr DriveMode DriveMode_MAX = AUTO;
constexpr int DriveMode_ARRAYSIZE = DriveMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveMode_descriptor();
template<typename T>
inline const std::string& DriveMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DriveMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DriveMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DriveMode_descriptor(), enum_t_value);
}
inline bool DriveMode_Parse(
    const std::string& name, DriveMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DriveMode>(
    DriveMode_descriptor(), name, value);
}
enum ProcessMode : int {
  START = 0,
  STOP = 1,
  PAUSE = 2,
  RESET = 3,
  ProcessMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessMode_IsValid(int value);
constexpr ProcessMode ProcessMode_MIN = START;
constexpr ProcessMode ProcessMode_MAX = RESET;
constexpr int ProcessMode_ARRAYSIZE = ProcessMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessMode_descriptor();
template<typename T>
inline const std::string& ProcessMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessMode_descriptor(), enum_t_value);
}
inline bool ProcessMode_Parse(
    const std::string& name, ProcessMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessMode>(
    ProcessMode_descriptor(), name, value);
}
enum GearMode : int {
  DRIVE = 0,
  REVERSE = 1,
  PARK = 2,
  NEUTRAL = 3,
  GearMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GearMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GearMode_IsValid(int value);
constexpr GearMode GearMode_MIN = DRIVE;
constexpr GearMode GearMode_MAX = NEUTRAL;
constexpr int GearMode_ARRAYSIZE = GearMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearMode_descriptor();
template<typename T>
inline const std::string& GearMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GearMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GearMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GearMode_descriptor(), enum_t_value);
}
inline bool GearMode_Parse(
    const std::string& name, GearMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GearMode>(
    GearMode_descriptor(), name, value);
}
// ===================================================================

class Sim2Car :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Sim2Car) */ {
 public:
  Sim2Car();
  virtual ~Sim2Car();

  Sim2Car(const Sim2Car& from);
  Sim2Car(Sim2Car&& from) noexcept
    : Sim2Car() {
    *this = ::std::move(from);
  }

  inline Sim2Car& operator=(const Sim2Car& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sim2Car& operator=(Sim2Car&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sim2Car& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sim2Car* internal_default_instance() {
    return reinterpret_cast<const Sim2Car*>(
               &_Sim2Car_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sim2Car& a, Sim2Car& b) {
    a.Swap(&b);
  }
  inline void Swap(Sim2Car* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sim2Car* New() const final {
    return CreateMaybeMessage<Sim2Car>(nullptr);
  }

  Sim2Car* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sim2Car>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sim2Car& from);
  void MergeFrom(const Sim2Car& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sim2Car* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Sim2Car";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlSim_2eproto);
    return ::descriptor_table_controlSim_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 2,
    kEnAngleFieldNumber = 1,
    kGearFieldNumber = 3,
  };
  // double angle = 2;
  void clear_angle();
  double angle() const;
  void set_angle(double value);

  // bool en_angle = 1;
  void clear_en_angle();
  bool en_angle() const;
  void set_en_angle(bool value);

  // .sim_msg.GearMode gear = 3;
  void clear_gear();
  ::sim_msg::GearMode gear() const;
  void set_gear(::sim_msg::GearMode value);

  // @@protoc_insertion_point(class_scope:sim_msg.Sim2Car)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double angle_;
  bool en_angle_;
  int gear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlSim_2eproto;
};
// -------------------------------------------------------------------

class Car2Sim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Car2Sim) */ {
 public:
  Car2Sim();
  virtual ~Car2Sim();

  Car2Sim(const Car2Sim& from);
  Car2Sim(Car2Sim&& from) noexcept
    : Car2Sim() {
    *this = ::std::move(from);
  }

  inline Car2Sim& operator=(const Car2Sim& from) {
    CopyFrom(from);
    return *this;
  }
  inline Car2Sim& operator=(Car2Sim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Car2Sim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Car2Sim* internal_default_instance() {
    return reinterpret_cast<const Car2Sim*>(
               &_Car2Sim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Car2Sim& a, Car2Sim& b) {
    a.Swap(&b);
  }
  inline void Swap(Car2Sim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Car2Sim* New() const final {
    return CreateMaybeMessage<Car2Sim>(nullptr);
  }

  Car2Sim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Car2Sim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Car2Sim& from);
  void MergeFrom(const Car2Sim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Car2Sim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Car2Sim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlSim_2eproto);
    return ::descriptor_table_controlSim_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDriveModeFieldNumber = 1,
    kProcessModeFieldNumber = 2,
    kSteeringAngleFieldNumber = 3,
    kSteeringTorqueFieldNumber = 4,
    kBrakePressureFieldNumber = 5,
    kThrottleValueFieldNumber = 6,
    kGearFieldNumber = 7,
  };
  // .sim_msg.DriveMode drive_mode = 1;
  void clear_drive_mode();
  ::sim_msg::DriveMode drive_mode() const;
  void set_drive_mode(::sim_msg::DriveMode value);

  // .sim_msg.ProcessMode process_mode = 2;
  void clear_process_mode();
  ::sim_msg::ProcessMode process_mode() const;
  void set_process_mode(::sim_msg::ProcessMode value);

  // double steering_angle = 3;
  void clear_steering_angle();
  double steering_angle() const;
  void set_steering_angle(double value);

  // double steering_torque = 4;
  void clear_steering_torque();
  double steering_torque() const;
  void set_steering_torque(double value);

  // double brake_pressure = 5;
  void clear_brake_pressure();
  double brake_pressure() const;
  void set_brake_pressure(double value);

  // double throttle_value = 6;
  void clear_throttle_value();
  double throttle_value() const;
  void set_throttle_value(double value);

  // .sim_msg.GearMode gear = 7;
  void clear_gear();
  ::sim_msg::GearMode gear() const;
  void set_gear(::sim_msg::GearMode value);

  // @@protoc_insertion_point(class_scope:sim_msg.Car2Sim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int drive_mode_;
  int process_mode_;
  double steering_angle_;
  double steering_torque_;
  double brake_pressure_;
  double throttle_value_;
  int gear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlSim_2eproto;
};
// -------------------------------------------------------------------

class ControlSim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.ControlSim) */ {
 public:
  ControlSim();
  virtual ~ControlSim();

  ControlSim(const ControlSim& from);
  ControlSim(ControlSim&& from) noexcept
    : ControlSim() {
    *this = ::std::move(from);
  }

  inline ControlSim& operator=(const ControlSim& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlSim& operator=(ControlSim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlSim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlSim* internal_default_instance() {
    return reinterpret_cast<const ControlSim*>(
               &_ControlSim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControlSim& a, ControlSim& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlSim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlSim* New() const final {
    return CreateMaybeMessage<ControlSim>(nullptr);
  }

  ControlSim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlSim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlSim& from);
  void MergeFrom(const ControlSim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlSim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.ControlSim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controlSim_2eproto);
    return ::descriptor_table_controlSim_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSim2CarFieldNumber = 1,
    kCar2SimFieldNumber = 2,
  };
  // .sim_msg.Sim2Car sim2car = 1;
  bool has_sim2car() const;
  void clear_sim2car();
  const ::sim_msg::Sim2Car& sim2car() const;
  ::sim_msg::Sim2Car* release_sim2car();
  ::sim_msg::Sim2Car* mutable_sim2car();
  void set_allocated_sim2car(::sim_msg::Sim2Car* sim2car);

  // .sim_msg.Car2Sim car2sim = 2;
  bool has_car2sim() const;
  void clear_car2sim();
  const ::sim_msg::Car2Sim& car2sim() const;
  ::sim_msg::Car2Sim* release_car2sim();
  ::sim_msg::Car2Sim* mutable_car2sim();
  void set_allocated_car2sim(::sim_msg::Car2Sim* car2sim);

  // @@protoc_insertion_point(class_scope:sim_msg.ControlSim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Sim2Car* sim2car_;
  ::sim_msg::Car2Sim* car2sim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_controlSim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sim2Car

// bool en_angle = 1;
inline void Sim2Car::clear_en_angle() {
  en_angle_ = false;
}
inline bool Sim2Car::en_angle() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sim2Car.en_angle)
  return en_angle_;
}
inline void Sim2Car::set_en_angle(bool value) {
  
  en_angle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sim2Car.en_angle)
}

// double angle = 2;
inline void Sim2Car::clear_angle() {
  angle_ = 0;
}
inline double Sim2Car::angle() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sim2Car.angle)
  return angle_;
}
inline void Sim2Car::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sim2Car.angle)
}

// .sim_msg.GearMode gear = 3;
inline void Sim2Car::clear_gear() {
  gear_ = 0;
}
inline ::sim_msg::GearMode Sim2Car::gear() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sim2Car.gear)
  return static_cast< ::sim_msg::GearMode >(gear_);
}
inline void Sim2Car::set_gear(::sim_msg::GearMode value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sim2Car.gear)
}

// -------------------------------------------------------------------

// Car2Sim

// .sim_msg.DriveMode drive_mode = 1;
inline void Car2Sim::clear_drive_mode() {
  drive_mode_ = 0;
}
inline ::sim_msg::DriveMode Car2Sim::drive_mode() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car2Sim.drive_mode)
  return static_cast< ::sim_msg::DriveMode >(drive_mode_);
}
inline void Car2Sim::set_drive_mode(::sim_msg::DriveMode value) {
  
  drive_mode_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car2Sim.drive_mode)
}

// .sim_msg.ProcessMode process_mode = 2;
inline void Car2Sim::clear_process_mode() {
  process_mode_ = 0;
}
inline ::sim_msg::ProcessMode Car2Sim::process_mode() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car2Sim.process_mode)
  return static_cast< ::sim_msg::ProcessMode >(process_mode_);
}
inline void Car2Sim::set_process_mode(::sim_msg::ProcessMode value) {
  
  process_mode_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car2Sim.process_mode)
}

// double steering_angle = 3;
inline void Car2Sim::clear_steering_angle() {
  steering_angle_ = 0;
}
inline double Car2Sim::steering_angle() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car2Sim.steering_angle)
  return steering_angle_;
}
inline void Car2Sim::set_steering_angle(double value) {
  
  steering_angle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car2Sim.steering_angle)
}

// double steering_torque = 4;
inline void Car2Sim::clear_steering_torque() {
  steering_torque_ = 0;
}
inline double Car2Sim::steering_torque() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car2Sim.steering_torque)
  return steering_torque_;
}
inline void Car2Sim::set_steering_torque(double value) {
  
  steering_torque_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car2Sim.steering_torque)
}

// double brake_pressure = 5;
inline void Car2Sim::clear_brake_pressure() {
  brake_pressure_ = 0;
}
inline double Car2Sim::brake_pressure() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car2Sim.brake_pressure)
  return brake_pressure_;
}
inline void Car2Sim::set_brake_pressure(double value) {
  
  brake_pressure_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car2Sim.brake_pressure)
}

// double throttle_value = 6;
inline void Car2Sim::clear_throttle_value() {
  throttle_value_ = 0;
}
inline double Car2Sim::throttle_value() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car2Sim.throttle_value)
  return throttle_value_;
}
inline void Car2Sim::set_throttle_value(double value) {
  
  throttle_value_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car2Sim.throttle_value)
}

// .sim_msg.GearMode gear = 7;
inline void Car2Sim::clear_gear() {
  gear_ = 0;
}
inline ::sim_msg::GearMode Car2Sim::gear() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car2Sim.gear)
  return static_cast< ::sim_msg::GearMode >(gear_);
}
inline void Car2Sim::set_gear(::sim_msg::GearMode value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car2Sim.gear)
}

// -------------------------------------------------------------------

// ControlSim

// .sim_msg.Sim2Car sim2car = 1;
inline bool ControlSim::has_sim2car() const {
  return this != internal_default_instance() && sim2car_ != nullptr;
}
inline void ControlSim::clear_sim2car() {
  if (GetArenaNoVirtual() == nullptr && sim2car_ != nullptr) {
    delete sim2car_;
  }
  sim2car_ = nullptr;
}
inline const ::sim_msg::Sim2Car& ControlSim::sim2car() const {
  const ::sim_msg::Sim2Car* p = sim2car_;
  // @@protoc_insertion_point(field_get:sim_msg.ControlSim.sim2car)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Sim2Car*>(
      &::sim_msg::_Sim2Car_default_instance_);
}
inline ::sim_msg::Sim2Car* ControlSim::release_sim2car() {
  // @@protoc_insertion_point(field_release:sim_msg.ControlSim.sim2car)
  
  ::sim_msg::Sim2Car* temp = sim2car_;
  sim2car_ = nullptr;
  return temp;
}
inline ::sim_msg::Sim2Car* ControlSim::mutable_sim2car() {
  
  if (sim2car_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Sim2Car>(GetArenaNoVirtual());
    sim2car_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.ControlSim.sim2car)
  return sim2car_;
}
inline void ControlSim::set_allocated_sim2car(::sim_msg::Sim2Car* sim2car) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sim2car_;
  }
  if (sim2car) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sim2car = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sim2car, submessage_arena);
    }
    
  } else {
    
  }
  sim2car_ = sim2car;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.ControlSim.sim2car)
}

// .sim_msg.Car2Sim car2sim = 2;
inline bool ControlSim::has_car2sim() const {
  return this != internal_default_instance() && car2sim_ != nullptr;
}
inline void ControlSim::clear_car2sim() {
  if (GetArenaNoVirtual() == nullptr && car2sim_ != nullptr) {
    delete car2sim_;
  }
  car2sim_ = nullptr;
}
inline const ::sim_msg::Car2Sim& ControlSim::car2sim() const {
  const ::sim_msg::Car2Sim* p = car2sim_;
  // @@protoc_insertion_point(field_get:sim_msg.ControlSim.car2sim)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Car2Sim*>(
      &::sim_msg::_Car2Sim_default_instance_);
}
inline ::sim_msg::Car2Sim* ControlSim::release_car2sim() {
  // @@protoc_insertion_point(field_release:sim_msg.ControlSim.car2sim)
  
  ::sim_msg::Car2Sim* temp = car2sim_;
  car2sim_ = nullptr;
  return temp;
}
inline ::sim_msg::Car2Sim* ControlSim::mutable_car2sim() {
  
  if (car2sim_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Car2Sim>(GetArenaNoVirtual());
    car2sim_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.ControlSim.car2sim)
  return car2sim_;
}
inline void ControlSim::set_allocated_car2sim(::sim_msg::Car2Sim* car2sim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete car2sim_;
  }
  if (car2sim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      car2sim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, car2sim, submessage_arena);
    }
    
  } else {
    
  }
  car2sim_ = car2sim;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.ControlSim.car2sim)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::DriveMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::DriveMode>() {
  return ::sim_msg::DriveMode_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::ProcessMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::ProcessMode>() {
  return ::sim_msg::ProcessMode_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GearMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GearMode>() {
  return ::sim_msg::GearMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_controlSim_2eproto
