// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedtrafficsign.proto
#pragma warning (disable : 4125)

#include "osi_detectedtrafficsign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseStationary_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto;
namespace osi3 {
class DetectedTrafficSign_DetectedMainSign_CandidateMainSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedTrafficSign_DetectedMainSign_CandidateMainSign> _instance;
} _DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_;
class DetectedTrafficSign_DetectedMainSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedTrafficSign_DetectedMainSign> _instance;
} _DetectedTrafficSign_DetectedMainSign_default_instance_;
class DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign> _instance;
} _DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_;
class DetectedTrafficSign_DetectedSupplementarySignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedTrafficSign_DetectedSupplementarySign> _instance;
} _DetectedTrafficSign_DetectedSupplementarySign_default_instance_;
class DetectedTrafficSignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedTrafficSign> _instance;
} _DetectedTrafficSign_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedTrafficSign_default_instance_;
    new (ptr) ::osi3::DetectedTrafficSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedTrafficSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto}, {
      &scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base,
      &scc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto.base,
      &scc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base,}};

static void InitDefaultsscc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedTrafficSign_DetectedMainSign_default_instance_;
    new (ptr) ::osi3::DetectedTrafficSign_DetectedMainSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedTrafficSign_DetectedMainSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto}, {
      &scc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto.base,
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_;
    new (ptr) ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto}, {
      &scc_info_TrafficSign_MainSign_Classification_osi_5ftrafficsign_2eproto.base,}};

static void InitDefaultsscc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedTrafficSign_DetectedSupplementarySign_default_instance_;
    new (ptr) ::osi3::DetectedTrafficSign_DetectedSupplementarySign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedTrafficSign_DetectedSupplementarySign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto}, {
      &scc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base,
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_;
    new (ptr) ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto}, {
      &scc_info_TrafficSign_SupplementarySign_Classification_osi_5ftrafficsign_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fdetectedtrafficsign_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fdetectedtrafficsign_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedtrafficsign_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fdetectedtrafficsign_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedMainSign, geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign_DetectedSupplementarySign, base_rmse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, main_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficSign, supplementary_sign_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign)},
  { 7, -1, sizeof(::osi3::DetectedTrafficSign_DetectedMainSign)},
  { 16, -1, sizeof(::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign)},
  { 23, -1, sizeof(::osi3::DetectedTrafficSign_DetectedSupplementarySign)},
  { 31, -1, sizeof(::osi3::DetectedTrafficSign)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedMainSign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_DetectedSupplementarySign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficSign_default_instance_),
};

const char descriptor_table_protodef_osi_5fdetectedtrafficsign_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035osi_detectedtrafficsign.proto\022\004osi3\032\020o"
  "si_common.proto\032\025osi_trafficsign.proto\032\030"
  "osi_detectedobject.proto\"\271\t\n\023DetectedTra"
  "fficSign\022(\n\006header\030\001 \001(\0132\030.osi3.Detected"
  "ItemHeader\022=\n\tmain_sign\030\002 \001(\0132*.osi3.Det"
  "ectedTrafficSign.DetectedMainSign\022O\n\022sup"
  "plementary_sign\030\003 \003(\01323.osi3.DetectedTra"
  "fficSign.DetectedSupplementarySign\032\232\005\n\020D"
  "etectedMainSign\022O\n\tcandidate\030\001 \003(\0132<.osi"
  "3.DetectedTrafficSign.DetectedMainSign.C"
  "andidateMainSign\022\"\n\004base\030\002 \001(\0132\024.osi3.Ba"
  "seStationary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.B"
  "aseStationary\022E\n\010geometry\030\004 \001(\01623.osi3.D"
  "etectedTrafficSign.DetectedMainSign.Geom"
  "etry\032k\n\021CandidateMainSign\022\023\n\013probability"
  "\030\001 \001(\001\022A\n\016classification\030\002 \001(\0132).osi3.Tr"
  "afficSign.MainSign.Classification\"\263\002\n\010Ge"
  "ometry\022\024\n\020GEOMETRY_UNKNOWN\020\000\022\022\n\016GEOMETRY"
  "_OTHER\020\001\022\023\n\017GEOMETRY_CIRCLE\020\002\022\031\n\025GEOMETR"
  "Y_TRIANGLE_TOP\020\003\022\032\n\026GEOMETRY_TRIANGLE_DO"
  "WN\020\004\022\023\n\017GEOMETRY_SQUARE\020\005\022\021\n\rGEOMETRY_PO"
  "LE\020\006\022\026\n\022GEOMETRY_RECTANGLE\020\007\022\022\n\016GEOMETRY"
  "_PLATE\020\010\022\024\n\020GEOMETRY_DIAMOND\020\t\022\027\n\023GEOMET"
  "RY_ARROW_LEFT\020\n\022\030\n\024GEOMETRY_ARROW_RIGHT\020"
  "\013\022\024\n\020GEOMETRY_OCTAGON\020\014\032\312\002\n\031DetectedSupp"
  "lementarySign\022a\n\tcandidate\030\001 \003(\0132N.osi3."
  "DetectedTrafficSign.DetectedSupplementar"
  "ySign.CandidateSupplementarySign\022\"\n\004base"
  "\030\002 \001(\0132\024.osi3.BaseStationary\022\'\n\tbase_rms"
  "e\030\003 \001(\0132\024.osi3.BaseStationary\032}\n\032Candida"
  "teSupplementarySign\022\023\n\013probability\030\001 \001(\001"
  "\022J\n\016classification\030\002 \001(\01322.osi3.TrafficS"
  "ign.SupplementarySign.ClassificationB\002H\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fdetectedtrafficsign_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5ftrafficsign_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fdetectedtrafficsign_2eproto_sccs[5] = {
  &scc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto.base,
  &scc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto.base,
  &scc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto.base,
  &scc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base,
  &scc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fdetectedtrafficsign_2eproto_once;
static bool descriptor_table_osi_5fdetectedtrafficsign_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedtrafficsign_2eproto = {
  &descriptor_table_osi_5fdetectedtrafficsign_2eproto_initialized, descriptor_table_protodef_osi_5fdetectedtrafficsign_2eproto, "osi_detectedtrafficsign.proto", 1328,
  &descriptor_table_osi_5fdetectedtrafficsign_2eproto_once, descriptor_table_osi_5fdetectedtrafficsign_2eproto_sccs, descriptor_table_osi_5fdetectedtrafficsign_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_osi_5fdetectedtrafficsign_2eproto::offsets,
  file_level_metadata_osi_5fdetectedtrafficsign_2eproto, 5, file_level_enum_descriptors_osi_5fdetectedtrafficsign_2eproto, file_level_service_descriptors_osi_5fdetectedtrafficsign_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fdetectedtrafficsign_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fdetectedtrafficsign_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedTrafficSign_DetectedMainSign_Geometry_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedtrafficsign_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedtrafficsign_2eproto[0];
}
bool DetectedTrafficSign_DetectedMainSign_Geometry_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_UNKNOWN;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_OTHER;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_CIRCLE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_TRIANGLE_TOP;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_TRIANGLE_DOWN;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_SQUARE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_POLE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_RECTANGLE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_PLATE;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_DIAMOND;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_ARROW_LEFT;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_ARROW_RIGHT;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::GEOMETRY_OCTAGON;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::Geometry_MIN;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::Geometry_MAX;
constexpr int DetectedTrafficSign_DetectedMainSign::Geometry_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::InitAsDefaultInstance() {
  ::osi3::_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficSign_MainSign_Classification*>(
      ::osi3::TrafficSign_MainSign_Classification::internal_default_instance());
}
class DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_Internal {
 public:
  static const ::osi3::TrafficSign_MainSign_Classification& classification(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign* msg);
};

const ::osi3::TrafficSign_MainSign_Classification&
DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_Internal::classification(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign* msg) {
  return *msg->classification_;
}
void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::clear_classification() {
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
DetectedTrafficSign_DetectedMainSign_CandidateMainSign::DetectedTrafficSign_DetectedMainSign_CandidateMainSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
}
DetectedTrafficSign_DetectedMainSign_CandidateMainSign::DetectedTrafficSign_DetectedMainSign_CandidateMainSign(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficSign_MainSign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto.base);
  ::memset(&classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedTrafficSign_DetectedMainSign_CandidateMainSign::~DetectedTrafficSign_DetectedMainSign_CandidateMainSign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  SharedDtor();
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::SharedDtor() {
  if (this != internal_default_instance()) delete classification_;
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& DetectedTrafficSign_DetectedMainSign_CandidateMainSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_osi_5fdetectedtrafficsign_2eproto.base);
  return *internal_default_instance();
}


void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedTrafficSign_DetectedMainSign_CandidateMainSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedTrafficSign_DetectedMainSign_CandidateMainSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedMainSign_CandidateMainSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  return target;
}

size_t DetectedTrafficSign_DetectedMainSign_CandidateMainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedTrafficSign_DetectedMainSign_CandidateMainSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedTrafficSign_DetectedMainSign_CandidateMainSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
    MergeFrom(*source);
  }
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::MergeFrom(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficSign_MainSign_Classification::MergeFrom(from.classification());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::CopyFrom(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedMainSign_CandidateMainSign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::InternalSwap(DetectedTrafficSign_DetectedMainSign_CandidateMainSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classification_, other->classification_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedMainSign_CandidateMainSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedTrafficSign_DetectedMainSign::InitAsDefaultInstance() {
  ::osi3::_DetectedTrafficSign_DetectedMainSign_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_DetectedTrafficSign_DetectedMainSign_default_instance_._instance.get_mutable()->base_rmse_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
}
class DetectedTrafficSign_DetectedMainSign::_Internal {
 public:
  static const ::osi3::BaseStationary& base(const DetectedTrafficSign_DetectedMainSign* msg);
  static const ::osi3::BaseStationary& base_rmse(const DetectedTrafficSign_DetectedMainSign* msg);
};

const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedMainSign::_Internal::base(const DetectedTrafficSign_DetectedMainSign* msg) {
  return *msg->base_;
}
const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedMainSign::_Internal::base_rmse(const DetectedTrafficSign_DetectedMainSign* msg) {
  return *msg->base_rmse_;
}
void DetectedTrafficSign_DetectedMainSign::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void DetectedTrafficSign_DetectedMainSign::clear_base_rmse() {
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
}
DetectedTrafficSign_DetectedMainSign::DetectedTrafficSign_DetectedMainSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficSign.DetectedMainSign)
}
DetectedTrafficSign_DetectedMainSign::DetectedTrafficSign_DetectedMainSign(const DetectedTrafficSign_DetectedMainSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseStationary(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  geometry_ = from.geometry_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedMainSign)
}

void DetectedTrafficSign_DetectedMainSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geometry_) -
      reinterpret_cast<char*>(&base_)) + sizeof(geometry_));
}

DetectedTrafficSign_DetectedMainSign::~DetectedTrafficSign_DetectedMainSign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedMainSign)
  SharedDtor();
}

void DetectedTrafficSign_DetectedMainSign::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
}

void DetectedTrafficSign_DetectedMainSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedTrafficSign_DetectedMainSign& DetectedTrafficSign_DetectedMainSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedTrafficSign_DetectedMainSign_osi_5fdetectedtrafficsign_2eproto.base);
  return *internal_default_instance();
}


void DetectedTrafficSign_DetectedMainSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
  geometry_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedTrafficSign_DetectedMainSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_geometry(static_cast<::osi3::DetectedTrafficSign_DetectedMainSign_Geometry>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedTrafficSign_DetectedMainSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficSign.DetectedMainSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_geometry(static_cast< ::osi3::DetectedTrafficSign_DetectedMainSign_Geometry >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficSign.DetectedMainSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficSign.DetectedMainSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedTrafficSign_DetectedMainSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficSign.DetectedMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->candidate(static_cast<int>(i)),
      output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::base_rmse(this), output);
  }

  // .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
  if (this->geometry() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->geometry(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficSign.DetectedMainSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedMainSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedMainSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->candidate(static_cast<int>(i)), target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::base_rmse(this), target);
  }

  // .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
  if (this->geometry() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->geometry(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedMainSign)
  return target;
}

size_t DetectedTrafficSign_DetectedMainSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedMainSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_rmse_);
  }

  // .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
  if (this->geometry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->geometry());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedTrafficSign_DetectedMainSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficSign.DetectedMainSign)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedTrafficSign_DetectedMainSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedTrafficSign_DetectedMainSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficSign.DetectedMainSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficSign.DetectedMainSign)
    MergeFrom(*source);
  }
}

void DetectedTrafficSign_DetectedMainSign::MergeFrom(const DetectedTrafficSign_DetectedMainSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedMainSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_base_rmse()) {
    mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from.base_rmse());
  }
  if (from.geometry() != 0) {
    set_geometry(from.geometry());
  }
}

void DetectedTrafficSign_DetectedMainSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficSign.DetectedMainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficSign_DetectedMainSign::CopyFrom(const DetectedTrafficSign_DetectedMainSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedMainSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedMainSign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedMainSign::InternalSwap(DetectedTrafficSign_DetectedMainSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  swap(base_, other->base_);
  swap(base_rmse_, other->base_rmse_);
  swap(geometry_, other->geometry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedMainSign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::InitAsDefaultInstance() {
  ::osi3::_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficSign_SupplementarySign_Classification*>(
      ::osi3::TrafficSign_SupplementarySign_Classification::internal_default_instance());
}
class DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_Internal {
 public:
  static const ::osi3::TrafficSign_SupplementarySign_Classification& classification(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* msg);
};

const ::osi3::TrafficSign_SupplementarySign_Classification&
DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_Internal::classification(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* msg) {
  return *msg->classification_;
}
void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::clear_classification() {
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
}
DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficSign_SupplementarySign_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base);
  ::memset(&classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::~DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  SharedDtor();
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::SharedDtor() {
  if (this != internal_default_instance()) delete classification_;
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base);
  return *internal_default_instance();
}


void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  return target;
}

size_t DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
    MergeFrom(*source);
  }
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::MergeFrom(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficSign_SupplementarySign_Classification::MergeFrom(from.classification());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::CopyFrom(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::InternalSwap(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classification_, other->classification_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedTrafficSign_DetectedSupplementarySign::InitAsDefaultInstance() {
  ::osi3::_DetectedTrafficSign_DetectedSupplementarySign_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_DetectedTrafficSign_DetectedSupplementarySign_default_instance_._instance.get_mutable()->base_rmse_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
}
class DetectedTrafficSign_DetectedSupplementarySign::_Internal {
 public:
  static const ::osi3::BaseStationary& base(const DetectedTrafficSign_DetectedSupplementarySign* msg);
  static const ::osi3::BaseStationary& base_rmse(const DetectedTrafficSign_DetectedSupplementarySign* msg);
};

const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedSupplementarySign::_Internal::base(const DetectedTrafficSign_DetectedSupplementarySign* msg) {
  return *msg->base_;
}
const ::osi3::BaseStationary&
DetectedTrafficSign_DetectedSupplementarySign::_Internal::base_rmse(const DetectedTrafficSign_DetectedSupplementarySign* msg) {
  return *msg->base_rmse_;
}
void DetectedTrafficSign_DetectedSupplementarySign::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void DetectedTrafficSign_DetectedSupplementarySign::clear_base_rmse() {
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
}
DetectedTrafficSign_DetectedSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign)
}
DetectedTrafficSign_DetectedSupplementarySign::DetectedTrafficSign_DetectedSupplementarySign(const DetectedTrafficSign_DetectedSupplementarySign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseStationary(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign.DetectedSupplementarySign)
}

void DetectedTrafficSign_DetectedSupplementarySign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&base_rmse_) -
      reinterpret_cast<char*>(&base_)) + sizeof(base_rmse_));
}

DetectedTrafficSign_DetectedSupplementarySign::~DetectedTrafficSign_DetectedSupplementarySign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  SharedDtor();
}

void DetectedTrafficSign_DetectedSupplementarySign::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
}

void DetectedTrafficSign_DetectedSupplementarySign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedTrafficSign_DetectedSupplementarySign& DetectedTrafficSign_DetectedSupplementarySign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedTrafficSign_DetectedSupplementarySign_osi_5fdetectedtrafficsign_2eproto.base);
  return *internal_default_instance();
}


void DetectedTrafficSign_DetectedSupplementarySign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedTrafficSign_DetectedSupplementarySign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedTrafficSign_DetectedSupplementarySign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedTrafficSign_DetectedSupplementarySign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->candidate(static_cast<int>(i)),
      output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::base_rmse(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficSign.DetectedSupplementarySign)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign_DetectedSupplementarySign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->candidate(static_cast<int>(i)), target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::base_rmse(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  return target;
}

size_t DetectedTrafficSign_DetectedSupplementarySign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_rmse_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedTrafficSign_DetectedSupplementarySign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedTrafficSign_DetectedSupplementarySign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedTrafficSign_DetectedSupplementarySign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficSign.DetectedSupplementarySign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficSign.DetectedSupplementarySign)
    MergeFrom(*source);
  }
}

void DetectedTrafficSign_DetectedSupplementarySign::MergeFrom(const DetectedTrafficSign_DetectedSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_base_rmse()) {
    mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from.base_rmse());
  }
}

void DetectedTrafficSign_DetectedSupplementarySign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficSign_DetectedSupplementarySign::CopyFrom(const DetectedTrafficSign_DetectedSupplementarySign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign.DetectedSupplementarySign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign_DetectedSupplementarySign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign_DetectedSupplementarySign::InternalSwap(DetectedTrafficSign_DetectedSupplementarySign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  swap(base_, other->base_);
  swap(base_rmse_, other->base_rmse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign_DetectedSupplementarySign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedTrafficSign::InitAsDefaultInstance() {
  ::osi3::_DetectedTrafficSign_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::DetectedItemHeader*>(
      ::osi3::DetectedItemHeader::internal_default_instance());
  ::osi3::_DetectedTrafficSign_default_instance_._instance.get_mutable()->main_sign_ = const_cast< ::osi3::DetectedTrafficSign_DetectedMainSign*>(
      ::osi3::DetectedTrafficSign_DetectedMainSign::internal_default_instance());
}
class DetectedTrafficSign::_Internal {
 public:
  static const ::osi3::DetectedItemHeader& header(const DetectedTrafficSign* msg);
  static const ::osi3::DetectedTrafficSign_DetectedMainSign& main_sign(const DetectedTrafficSign* msg);
};

const ::osi3::DetectedItemHeader&
DetectedTrafficSign::_Internal::header(const DetectedTrafficSign* msg) {
  return *msg->header_;
}
const ::osi3::DetectedTrafficSign_DetectedMainSign&
DetectedTrafficSign::_Internal::main_sign(const DetectedTrafficSign* msg) {
  return *msg->main_sign_;
}
void DetectedTrafficSign::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DetectedTrafficSign::DetectedTrafficSign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficSign)
}
DetectedTrafficSign::DetectedTrafficSign(const DetectedTrafficSign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      supplementary_sign_(from.supplementary_sign_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_main_sign()) {
    main_sign_ = new ::osi3::DetectedTrafficSign_DetectedMainSign(*from.main_sign_);
  } else {
    main_sign_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficSign)
}

void DetectedTrafficSign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&main_sign_) -
      reinterpret_cast<char*>(&header_)) + sizeof(main_sign_));
}

DetectedTrafficSign::~DetectedTrafficSign() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficSign)
  SharedDtor();
}

void DetectedTrafficSign::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete main_sign_;
}

void DetectedTrafficSign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedTrafficSign& DetectedTrafficSign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedTrafficSign_osi_5fdetectedtrafficsign_2eproto.base);
  return *internal_default_instance();
}


void DetectedTrafficSign::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supplementary_sign_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && main_sign_ != nullptr) {
    delete main_sign_;
  }
  main_sign_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedTrafficSign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_main_sign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_supplementary_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedTrafficSign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficSign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_main_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_supplementary_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficSign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficSign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedTrafficSign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
  if (this->has_main_sign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::main_sign(this), output);
  }

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->supplementary_sign(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficSign)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficSign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficSign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
  if (this->has_main_sign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::main_sign(this), target);
  }

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->supplementary_sign_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->supplementary_sign(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficSign)
  return target;
}

size_t DetectedTrafficSign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficSign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->supplementary_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->supplementary_sign(static_cast<int>(i)));
    }
  }

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
  if (this->has_main_sign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *main_sign_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedTrafficSign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedTrafficSign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedTrafficSign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficSign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficSign)
    MergeFrom(*source);
  }
}

void DetectedTrafficSign::MergeFrom(const DetectedTrafficSign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficSign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supplementary_sign_.MergeFrom(from.supplementary_sign_);
  if (from.has_header()) {
    mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
  }
  if (from.has_main_sign()) {
    mutable_main_sign()->::osi3::DetectedTrafficSign_DetectedMainSign::MergeFrom(from.main_sign());
  }
}

void DetectedTrafficSign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficSign::CopyFrom(const DetectedTrafficSign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficSign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficSign::IsInitialized() const {
  return true;
}

void DetectedTrafficSign::InternalSwap(DetectedTrafficSign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&supplementary_sign_)->InternalSwap(CastToBase(&other->supplementary_sign_));
  swap(header_, other->header_);
  swap(main_sign_, other->main_sign_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficSign::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedMainSign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedMainSign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedTrafficSign_DetectedMainSign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign_DetectedSupplementarySign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficSign* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficSign >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedTrafficSign >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
