// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_roadmarking.proto
#pragma warning (disable : 4125)

#include "osi_roadmarking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseStationary_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalReference_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5froadmarking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RoadMarking_Classification_osi_5froadmarking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto;
namespace osi3 {
class RoadMarking_ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadMarking_Classification> _instance;
} _RoadMarking_Classification_default_instance_;
class RoadMarkingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoadMarking> _instance;
} _RoadMarking_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_RoadMarking_osi_5froadmarking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_RoadMarking_default_instance_;
    new (ptr) ::osi3::RoadMarking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RoadMarking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoadMarking_osi_5froadmarking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_RoadMarking_osi_5froadmarking_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,
      &scc_info_RoadMarking_Classification_osi_5froadmarking_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_RoadMarking_Classification_osi_5froadmarking_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_RoadMarking_Classification_default_instance_;
    new (ptr) ::osi3::RoadMarking_Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RoadMarking_Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RoadMarking_Classification_osi_5froadmarking_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RoadMarking_Classification_osi_5froadmarking_2eproto}, {
      &scc_info_TrafficSignValue_osi_5ftrafficsign_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_LogicalLaneAssignment_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5froadmarking_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5froadmarking_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5froadmarking_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5froadmarking_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, traffic_main_sign_type_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, monochrome_color_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, value_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, value_text_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, assigned_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, is_out_of_service_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, country_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, country_revision_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, code_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, sub_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking_Classification, logical_lane_assignment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::RoadMarking, color_description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::RoadMarking_Classification)},
  { 17, -1, sizeof(::osi3::RoadMarking)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RoadMarking_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RoadMarking_default_instance_),
};

const char descriptor_table_protodef_osi_5froadmarking_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_roadmarking.proto\022\004osi3\032\020osi_commo"
  "n.proto\032\025osi_trafficsign.proto\"\311\010\n\013RoadM"
  "arking\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022\"\n\004"
  "base\030\002 \001(\0132\024.osi3.BaseStationary\0228\n\016clas"
  "sification\030\003 \001(\0132 .osi3.RoadMarking.Clas"
  "sification\0221\n\020source_reference\030\004 \003(\0132\027.o"
  "si3.ExternalReference\0221\n\021color_descripti"
  "on\030\005 \001(\0132\026.osi3.ColorDescription\032\327\006\n\016Cla"
  "ssification\0223\n\004type\030\001 \001(\0162%.osi3.RoadMar"
  "king.Classification.Type\022N\n\026traffic_main"
  "_sign_type\030\002 \001(\0162..osi3.TrafficSign.Main"
  "Sign.Classification.Type\022@\n\020monochrome_c"
  "olor\030\003 \001(\0162&.osi3.RoadMarking.Classifica"
  "tion.Color\022%\n\005value\030\004 \001(\0132\026.osi3.Traffic"
  "SignValue\022\022\n\nvalue_text\030\005 \001(\t\022*\n\020assigne"
  "d_lane_id\030\006 \003(\0132\020.osi3.Identifier\022\031\n\021is_"
  "out_of_service\030\007 \001(\010\022\017\n\007country\030\010 \001(\t\022\030\n"
  "\020country_revision\030\t \001(\t\022\014\n\004code\030\n \001(\t\022\020\n"
  "\010sub_code\030\013 \001(\t\022<\n\027logical_lane_assignme"
  "nt\030\014 \003(\0132\033.osi3.LogicalLaneAssignment\"\315\001"
  "\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001"
  "\022\035\n\031TYPE_PAINTED_TRAFFIC_SIGN\020\002\022\036\n\032TYPE_"
  "SYMBOLIC_TRAFFIC_SIGN\020\003\022\035\n\031TYPE_TEXTUAL_"
  "TRAFFIC_SIGN\020\004\022\027\n\023TYPE_GENERIC_SYMBOL\020\005\022"
  "\025\n\021TYPE_GENERIC_LINE\020\006\022\025\n\021TYPE_GENERIC_T"
  "EXT\020\007\"\242\001\n\005Color\022\021\n\rCOLOR_UNKNOWN\020\000\022\017\n\013CO"
  "LOR_OTHER\020\001\022\017\n\013COLOR_WHITE\020\002\022\020\n\014COLOR_YE"
  "LLOW\020\003\022\016\n\nCOLOR_BLUE\020\005\022\r\n\tCOLOR_RED\020\006\022\017\n"
  "\013COLOR_GREEN\020\007\022\020\n\014COLOR_VIOLET\020\010\022\020\n\014COLO"
  "R_ORANGE\020\tB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5froadmarking_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5ftrafficsign_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5froadmarking_2eproto_sccs[2] = {
  &scc_info_RoadMarking_osi_5froadmarking_2eproto.base,
  &scc_info_RoadMarking_Classification_osi_5froadmarking_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5froadmarking_2eproto_once;
static bool descriptor_table_osi_5froadmarking_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5froadmarking_2eproto = {
  &descriptor_table_osi_5froadmarking_2eproto_initialized, descriptor_table_protodef_osi_5froadmarking_2eproto, "osi_roadmarking.proto", 1182,
  &descriptor_table_osi_5froadmarking_2eproto_once, descriptor_table_osi_5froadmarking_2eproto_sccs, descriptor_table_osi_5froadmarking_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_osi_5froadmarking_2eproto::offsets,
  file_level_metadata_osi_5froadmarking_2eproto, 2, file_level_enum_descriptors_osi_5froadmarking_2eproto, file_level_service_descriptors_osi_5froadmarking_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5froadmarking_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5froadmarking_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarking_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5froadmarking_2eproto);
  return file_level_enum_descriptors_osi_5froadmarking_2eproto[0];
}
bool RoadMarking_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_UNKNOWN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_OTHER;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_PAINTED_TRAFFIC_SIGN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_SYMBOLIC_TRAFFIC_SIGN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_TEXTUAL_TRAFFIC_SIGN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_SYMBOL;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_LINE;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::TYPE_GENERIC_TEXT;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::Type_MIN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification::Type_MAX;
constexpr int RoadMarking_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarking_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5froadmarking_2eproto);
  return file_level_enum_descriptors_osi_5froadmarking_2eproto[1];
}
bool RoadMarking_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_UNKNOWN;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_OTHER;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_WHITE;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_YELLOW;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_BLUE;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_RED;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_GREEN;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_VIOLET;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::COLOR_ORANGE;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::Color_MIN;
constexpr RoadMarking_Classification_Color RoadMarking_Classification::Color_MAX;
constexpr int RoadMarking_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RoadMarking_Classification::InitAsDefaultInstance() {
  ::osi3::_RoadMarking_Classification_default_instance_._instance.get_mutable()->value_ = const_cast< ::osi3::TrafficSignValue*>(
      ::osi3::TrafficSignValue::internal_default_instance());
}
class RoadMarking_Classification::_Internal {
 public:
  static const ::osi3::TrafficSignValue& value(const RoadMarking_Classification* msg);
};

const ::osi3::TrafficSignValue&
RoadMarking_Classification::_Internal::value(const RoadMarking_Classification* msg) {
  return *msg->value_;
}
void RoadMarking_Classification::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
void RoadMarking_Classification::clear_assigned_lane_id() {
  assigned_lane_id_.Clear();
}
void RoadMarking_Classification::clear_logical_lane_assignment() {
  logical_lane_assignment_.Clear();
}
RoadMarking_Classification::RoadMarking_Classification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RoadMarking.Classification)
}
RoadMarking_Classification::RoadMarking_Classification(const RoadMarking_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      assigned_lane_id_(from.assigned_lane_id_),
      logical_lane_assignment_(from.logical_lane_assignment_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.value_text().empty()) {
    value_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_text_);
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.country().empty()) {
    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.country_revision().empty()) {
    country_revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_revision_);
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.code().empty()) {
    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.sub_code().empty()) {
    sub_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_code_);
  }
  if (from.has_value()) {
    value_ = new ::osi3::TrafficSignValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_out_of_service_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_out_of_service_));
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking.Classification)
}

void RoadMarking_Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadMarking_Classification_osi_5froadmarking_2eproto.base);
  value_text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&value_)) + sizeof(is_out_of_service_));
}

RoadMarking_Classification::~RoadMarking_Classification() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking.Classification)
  SharedDtor();
}

void RoadMarking_Classification::SharedDtor() {
  value_text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void RoadMarking_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadMarking_Classification& RoadMarking_Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadMarking_Classification_osi_5froadmarking_2eproto.base);
  return *internal_default_instance();
}


void RoadMarking_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_lane_id_.Clear();
  logical_lane_assignment_.Clear();
  value_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_revision_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sub_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_out_of_service_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_out_of_service_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadMarking_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.RoadMarking.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::RoadMarking_Classification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_traffic_main_sign_type(static_cast<::osi3::TrafficSign_MainSign_Classification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_monochrome_color(static_cast<::osi3::RoadMarking_Classification_Color>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficSignValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_value_text(), ptr, ctx, "osi3.RoadMarking.Classification.value_text");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_assigned_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // bool is_out_of_service = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_out_of_service_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_country(), ptr, ctx, "osi3.RoadMarking.Classification.country");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country_revision = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_country_revision(), ptr, ctx, "osi3.RoadMarking.Classification.country_revision");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_code(), ptr, ctx, "osi3.RoadMarking.Classification.code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sub_code = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_sub_code(), ptr, ctx, "osi3.RoadMarking.Classification.sub_code");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logical_lane_assignment(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadMarking_Classification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RoadMarking.Classification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.RoadMarking.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::RoadMarking_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_traffic_main_sign_type(static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_monochrome_color(static_cast< ::osi3::RoadMarking_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficSignValue value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value_text = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value_text()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->value_text().data(), static_cast<int>(this->value_text().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.RoadMarking.Classification.value_text"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier assigned_lane_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_assigned_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_out_of_service = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_out_of_service_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->country().data(), static_cast<int>(this->country().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.RoadMarking.Classification.country"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string country_revision = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_country_revision()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->country_revision().data(), static_cast<int>(this->country_revision().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.RoadMarking.Classification.country_revision"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string code = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->code().data(), static_cast<int>(this->code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.RoadMarking.Classification.code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sub_code = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_sub_code()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->sub_code().data(), static_cast<int>(this->sub_code().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.RoadMarking.Classification.sub_code"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane_assignment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RoadMarking.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RoadMarking.Classification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadMarking_Classification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RoadMarking.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.RoadMarking.Classification.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (this->traffic_main_sign_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->traffic_main_sign_type(), output);
  }

  // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (this->monochrome_color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->monochrome_color(), output);
  }

  // .osi3.TrafficSignValue value = 4;
  if (this->has_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::value(this), output);
  }

  // string value_text = 5;
  if (this->value_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value_text().data(), static_cast<int>(this->value_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.value_text");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->value_text(), output);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->assigned_lane_id(static_cast<int>(i)),
      output);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->is_out_of_service(), output);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.country");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country_revision().data(), static_cast<int>(this->country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.country_revision");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->country_revision(), output);
  }

  // string code = 10;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->code(), output);
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_code().data(), static_cast<int>(this->sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.sub_code");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->sub_code(), output);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->logical_lane_assignment(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RoadMarking.Classification)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadMarking_Classification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.RoadMarking.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (this->traffic_main_sign_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->traffic_main_sign_type(), target);
  }

  // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (this->monochrome_color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->monochrome_color(), target);
  }

  // .osi3.TrafficSignValue value = 4;
  if (this->has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::value(this), target);
  }

  // string value_text = 5;
  if (this->value_text().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->value_text().data(), static_cast<int>(this->value_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.value_text");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->value_text(), target);
  }

  // repeated .osi3.Identifier assigned_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->assigned_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->assigned_lane_id(static_cast<int>(i)), target);
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->is_out_of_service(), target);
  }

  // string country = 8;
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country().data(), static_cast<int>(this->country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.country");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->country_revision().data(), static_cast<int>(this->country_revision().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.country_revision");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->country_revision(), target);
  }

  // string code = 10;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->code().data(), static_cast<int>(this->code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->code(), target);
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->sub_code().data(), static_cast<int>(this->sub_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.RoadMarking.Classification.sub_code");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->sub_code(), target);
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_assignment_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->logical_lane_assignment(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking.Classification)
  return target;
}

size_t RoadMarking_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking.Classification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier assigned_lane_id = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->assigned_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->assigned_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_assignment_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane_assignment(static_cast<int>(i)));
    }
  }

  // string value_text = 5;
  if (this->value_text().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->value_text());
  }

  // string country = 8;
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->country());
  }

  // string country_revision = 9;
  if (this->country_revision().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->country_revision());
  }

  // string code = 10;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->code());
  }

  // string sub_code = 11;
  if (this->sub_code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->sub_code());
  }

  // .osi3.TrafficSignValue value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .osi3.RoadMarking.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  if (this->traffic_main_sign_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->traffic_main_sign_type());
  }

  // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  if (this->monochrome_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->monochrome_color());
  }

  // bool is_out_of_service = 7;
  if (this->is_out_of_service() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadMarking_Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RoadMarking.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarking_Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadMarking_Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RoadMarking.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RoadMarking.Classification)
    MergeFrom(*source);
  }
}

void RoadMarking_Classification::MergeFrom(const RoadMarking_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  assigned_lane_id_.MergeFrom(from.assigned_lane_id_);
  logical_lane_assignment_.MergeFrom(from.logical_lane_assignment_);
  if (from.value_text().size() > 0) {

    value_text_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_text_);
  }
  if (from.country().size() > 0) {

    country_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  if (from.country_revision().size() > 0) {

    country_revision_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.country_revision_);
  }
  if (from.code().size() > 0) {

    code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  if (from.sub_code().size() > 0) {

    sub_code_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_code_);
  }
  if (from.has_value()) {
    mutable_value()->::osi3::TrafficSignValue::MergeFrom(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.traffic_main_sign_type() != 0) {
    set_traffic_main_sign_type(from.traffic_main_sign_type());
  }
  if (from.monochrome_color() != 0) {
    set_monochrome_color(from.monochrome_color());
  }
  if (from.is_out_of_service() != 0) {
    set_is_out_of_service(from.is_out_of_service());
  }
}

void RoadMarking_Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RoadMarking.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarking_Classification::CopyFrom(const RoadMarking_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking_Classification::IsInitialized() const {
  return true;
}

void RoadMarking_Classification::InternalSwap(RoadMarking_Classification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&assigned_lane_id_)->InternalSwap(CastToBase(&other->assigned_lane_id_));
  CastToBase(&logical_lane_assignment_)->InternalSwap(CastToBase(&other->logical_lane_assignment_));
  value_text_.Swap(&other->value_text_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  country_revision_.Swap(&other->country_revision_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sub_code_.Swap(&other->sub_code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(type_, other->type_);
  swap(traffic_main_sign_type_, other->traffic_main_sign_type_);
  swap(monochrome_color_, other->monochrome_color_);
  swap(is_out_of_service_, other->is_out_of_service_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarking_Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoadMarking::InitAsDefaultInstance() {
  ::osi3::_RoadMarking_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_RoadMarking_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_RoadMarking_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::RoadMarking_Classification*>(
      ::osi3::RoadMarking_Classification::internal_default_instance());
  ::osi3::_RoadMarking_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class RoadMarking::_Internal {
 public:
  static const ::osi3::Identifier& id(const RoadMarking* msg);
  static const ::osi3::BaseStationary& base(const RoadMarking* msg);
  static const ::osi3::RoadMarking_Classification& classification(const RoadMarking* msg);
  static const ::osi3::ColorDescription& color_description(const RoadMarking* msg);
};

const ::osi3::Identifier&
RoadMarking::_Internal::id(const RoadMarking* msg) {
  return *msg->id_;
}
const ::osi3::BaseStationary&
RoadMarking::_Internal::base(const RoadMarking* msg) {
  return *msg->base_;
}
const ::osi3::RoadMarking_Classification&
RoadMarking::_Internal::classification(const RoadMarking* msg) {
  return *msg->classification_;
}
const ::osi3::ColorDescription&
RoadMarking::_Internal::color_description(const RoadMarking* msg) {
  return *msg->color_description_;
}
void RoadMarking::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void RoadMarking::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void RoadMarking::clear_source_reference() {
  source_reference_.Clear();
}
void RoadMarking::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
RoadMarking::RoadMarking()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RoadMarking)
}
RoadMarking::RoadMarking(const RoadMarking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::RoadMarking_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.RoadMarking)
}

void RoadMarking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoadMarking_osi_5froadmarking_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_description_) -
      reinterpret_cast<char*>(&id_)) + sizeof(color_description_));
}

RoadMarking::~RoadMarking() {
  // @@protoc_insertion_point(destructor:osi3.RoadMarking)
  SharedDtor();
}

void RoadMarking::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void RoadMarking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoadMarking& RoadMarking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoadMarking_osi_5froadmarking_2eproto.base);
  return *internal_default_instance();
}


void RoadMarking::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RoadMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RoadMarking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.RoadMarking.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RoadMarking::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RoadMarking)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.RoadMarking.Classification classification = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RoadMarking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RoadMarking)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RoadMarking::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RoadMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.RoadMarking.Classification classification = 3;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::classification(this), output);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RoadMarking)
}

::PROTOBUF_NAMESPACE_ID::uint8* RoadMarking::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RoadMarking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.RoadMarking.Classification classification = 3;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::classification(this), target);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->source_reference(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RoadMarking)
  return target;
}

size_t RoadMarking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RoadMarking)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.RoadMarking.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoadMarking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RoadMarking)
  GOOGLE_DCHECK_NE(&from, this);
  const RoadMarking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoadMarking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RoadMarking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RoadMarking)
    MergeFrom(*source);
  }
}

void RoadMarking::MergeFrom(const RoadMarking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RoadMarking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::RoadMarking_Classification::MergeFrom(from.classification());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
}

void RoadMarking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RoadMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoadMarking::CopyFrom(const RoadMarking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RoadMarking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadMarking::IsInitialized() const {
  return true;
}

void RoadMarking::InternalSwap(RoadMarking* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  swap(id_, other->id_);
  swap(base_, other->base_);
  swap(classification_, other->classification_);
  swap(color_description_, other->color_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoadMarking::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::RoadMarking_Classification* Arena::CreateMaybeMessage< ::osi3::RoadMarking_Classification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::RoadMarking_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RoadMarking* Arena::CreateMaybeMessage< ::osi3::RoadMarking >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::RoadMarking >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
