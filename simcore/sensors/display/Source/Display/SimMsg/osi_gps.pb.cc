// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_gps.proto

#pragma warning (disable : 4125)
#include "osi_gps.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MountingPosition_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
namespace osi3 {
class GPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPS> _instance;
} _GPS_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_GPS_osi_5fgps_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_GPS_default_instance_;
    new (ptr) ::osi3::GPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::GPS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GPS_osi_5fgps_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_GPS_osi_5fgps_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fgps_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fgps_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fgps_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fgps_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, mount_pos_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, longitude_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, latitude_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, height_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, vel_hrz_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, track_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, vel_vrt_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, latsdtdev_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, lonsdtdev_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, hgtsdtdev_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, solst_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, postype_),
  PROTOBUF_FIELD_OFFSET(::osi3::GPS, undulation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::GPS)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_GPS_default_instance_),
};

const char descriptor_table_protodef_osi_5fgps_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rosi_gps.proto\022\004osi3\032\021osi_version.proto"
  "\032\020osi_common.proto\"\320\002\n\003GPS\022\'\n\007version\030\001 "
  "\001(\0132\026.osi3.InterfaceVersion\022\"\n\ttimestamp"
  "\030\002 \001(\0132\017.osi3.Timestamp\022)\n\tmount_pos\030\003 \001"
  "(\0132\026.osi3.MountingPosition\022\021\n\tlongitude\030"
  "\004 \001(\001\022\020\n\010latitude\030\005 \001(\001\022\016\n\006height\030\006 \001(\001\022"
  "\017\n\007vel_hrz\030\007 \001(\001\022\r\n\005track\030\010 \001(\001\022\017\n\007vel_v"
  "rt\030\t \001(\001\022\021\n\tlatSdtDev\030\n \001(\001\022\021\n\tlonSdtDev"
  "\030\013 \001(\001\022\021\n\thgtSdtDev\030\014 \001(\001\022\r\n\005SolSt\030\r \001(\r"
  "\022\017\n\007PosType\030\016 \001(\r\022\022\n\nUndulation\030\017 \001(\001B\002H"
  "\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fgps_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fgps_2eproto_sccs[1] = {
  &scc_info_GPS_osi_5fgps_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fgps_2eproto_once;
static bool descriptor_table_osi_5fgps_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fgps_2eproto = {
  &descriptor_table_osi_5fgps_2eproto_initialized, descriptor_table_protodef_osi_5fgps_2eproto, "osi_gps.proto", 409,
  &descriptor_table_osi_5fgps_2eproto_once, descriptor_table_osi_5fgps_2eproto_sccs, descriptor_table_osi_5fgps_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_osi_5fgps_2eproto::offsets,
  file_level_metadata_osi_5fgps_2eproto, 1, file_level_enum_descriptors_osi_5fgps_2eproto, file_level_service_descriptors_osi_5fgps_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fgps_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fgps_2eproto), true);
namespace osi3 {

// ===================================================================

void GPS::InitAsDefaultInstance() {
  ::osi3::_GPS_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_GPS_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_GPS_default_instance_._instance.get_mutable()->mount_pos_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
}
class GPS::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const GPS* msg);
  static const ::osi3::Timestamp& timestamp(const GPS* msg);
  static const ::osi3::MountingPosition& mount_pos(const GPS* msg);
};

const ::osi3::InterfaceVersion&
GPS::_Internal::version(const GPS* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
GPS::_Internal::timestamp(const GPS* msg) {
  return *msg->timestamp_;
}
const ::osi3::MountingPosition&
GPS::_Internal::mount_pos(const GPS* msg) {
  return *msg->mount_pos_;
}
void GPS::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void GPS::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void GPS::clear_mount_pos() {
  if (GetArenaNoVirtual() == nullptr && mount_pos_ != nullptr) {
    delete mount_pos_;
  }
  mount_pos_ = nullptr;
}
GPS::GPS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.GPS)
}
GPS::GPS(const GPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_mount_pos()) {
    mount_pos_ = new ::osi3::MountingPosition(*from.mount_pos_);
  } else {
    mount_pos_ = nullptr;
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&undulation_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(undulation_));
  // @@protoc_insertion_point(copy_constructor:osi3.GPS)
}

void GPS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPS_osi_5fgps_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&undulation_) -
      reinterpret_cast<char*>(&version_)) + sizeof(undulation_));
}

GPS::~GPS() {
  // @@protoc_insertion_point(destructor:osi3.GPS)
  SharedDtor();
}

void GPS::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete mount_pos_;
}

void GPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPS& GPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPS_osi_5fgps_2eproto.base);
  return *internal_default_instance();
}


void GPS::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mount_pos_ != nullptr) {
    delete mount_pos_;
  }
  mount_pos_ = nullptr;
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&undulation_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(undulation_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mount_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mount_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel_hrz = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          vel_hrz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double track = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          track_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vel_vrt = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          vel_vrt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double latSdtDev = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          latsdtdev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lonSdtDev = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          lonsdtdev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double hgtSdtDev = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          hgtsdtdev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 SolSt = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          solst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 PosType = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          postype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double Undulation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          undulation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GPS::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.GPS)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mount_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mount_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double longitude = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latitude = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vel_hrz = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_hrz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double track = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &track_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vel_vrt = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_vrt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double latSdtDev = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latsdtdev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lonSdtDev = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lonsdtdev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double hgtSdtDev = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hgtsdtdev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 SolSt = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 PosType = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Undulation = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &undulation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.GPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.GPS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GPS::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.GPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::timestamp(this), output);
  }

  // .osi3.MountingPosition mount_pos = 3;
  if (this->has_mount_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mount_pos(this), output);
  }

  // double longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->latitude(), output);
  }

  // double height = 6;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->height(), output);
  }

  // double vel_hrz = 7;
  if (!(this->vel_hrz() <= 0 && this->vel_hrz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->vel_hrz(), output);
  }

  // double track = 8;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->track(), output);
  }

  // double vel_vrt = 9;
  if (!(this->vel_vrt() <= 0 && this->vel_vrt() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->vel_vrt(), output);
  }

  // double latSdtDev = 10;
  if (!(this->latsdtdev() <= 0 && this->latsdtdev() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->latsdtdev(), output);
  }

  // double lonSdtDev = 11;
  if (!(this->lonsdtdev() <= 0 && this->lonsdtdev() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->lonsdtdev(), output);
  }

  // double hgtSdtDev = 12;
  if (!(this->hgtsdtdev() <= 0 && this->hgtsdtdev() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->hgtsdtdev(), output);
  }

  // uint32 SolSt = 13;
  if (this->solst() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->solst(), output);
  }

  // uint32 PosType = 14;
  if (this->postype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->postype(), output);
  }

  // double Undulation = 15;
  if (!(this->undulation() <= 0 && this->undulation() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->undulation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.GPS)
}

::PROTOBUF_NAMESPACE_ID::uint8* GPS::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::timestamp(this), target);
  }

  // .osi3.MountingPosition mount_pos = 3;
  if (this->has_mount_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mount_pos(this), target);
  }

  // double longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->latitude(), target);
  }

  // double height = 6;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->height(), target);
  }

  // double vel_hrz = 7;
  if (!(this->vel_hrz() <= 0 && this->vel_hrz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->vel_hrz(), target);
  }

  // double track = 8;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->track(), target);
  }

  // double vel_vrt = 9;
  if (!(this->vel_vrt() <= 0 && this->vel_vrt() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->vel_vrt(), target);
  }

  // double latSdtDev = 10;
  if (!(this->latsdtdev() <= 0 && this->latsdtdev() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->latsdtdev(), target);
  }

  // double lonSdtDev = 11;
  if (!(this->lonsdtdev() <= 0 && this->lonsdtdev() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->lonsdtdev(), target);
  }

  // double hgtSdtDev = 12;
  if (!(this->hgtsdtdev() <= 0 && this->hgtsdtdev() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->hgtsdtdev(), target);
  }

  // uint32 SolSt = 13;
  if (this->solst() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->solst(), target);
  }

  // uint32 PosType = 14;
  if (this->postype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->postype(), target);
  }

  // double Undulation = 15;
  if (!(this->undulation() <= 0 && this->undulation() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->undulation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GPS)
  return target;
}

size_t GPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GPS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .osi3.MountingPosition mount_pos = 3;
  if (this->has_mount_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mount_pos_);
  }

  // double longitude = 4;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double latitude = 5;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 6;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double vel_hrz = 7;
  if (!(this->vel_hrz() <= 0 && this->vel_hrz() >= 0)) {
    total_size += 1 + 8;
  }

  // double track = 8;
  if (!(this->track() <= 0 && this->track() >= 0)) {
    total_size += 1 + 8;
  }

  // double vel_vrt = 9;
  if (!(this->vel_vrt() <= 0 && this->vel_vrt() >= 0)) {
    total_size += 1 + 8;
  }

  // double latSdtDev = 10;
  if (!(this->latsdtdev() <= 0 && this->latsdtdev() >= 0)) {
    total_size += 1 + 8;
  }

  // double lonSdtDev = 11;
  if (!(this->lonsdtdev() <= 0 && this->lonsdtdev() >= 0)) {
    total_size += 1 + 8;
  }

  // double hgtSdtDev = 12;
  if (!(this->hgtsdtdev() <= 0 && this->hgtsdtdev() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 SolSt = 13;
  if (this->solst() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->solst());
  }

  // uint32 PosType = 14;
  if (this->postype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->postype());
  }

  // double Undulation = 15;
  if (!(this->undulation() <= 0 && this->undulation() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.GPS)
  GOOGLE_DCHECK_NE(&from, this);
  const GPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.GPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.GPS)
    MergeFrom(*source);
  }
}

void GPS::MergeFrom(const GPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_mount_pos()) {
    mutable_mount_pos()->::osi3::MountingPosition::MergeFrom(from.mount_pos());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    set_longitude(from.longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    set_latitude(from.latitude());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.vel_hrz() <= 0 && from.vel_hrz() >= 0)) {
    set_vel_hrz(from.vel_hrz());
  }
  if (!(from.track() <= 0 && from.track() >= 0)) {
    set_track(from.track());
  }
  if (!(from.vel_vrt() <= 0 && from.vel_vrt() >= 0)) {
    set_vel_vrt(from.vel_vrt());
  }
  if (!(from.latsdtdev() <= 0 && from.latsdtdev() >= 0)) {
    set_latsdtdev(from.latsdtdev());
  }
  if (!(from.lonsdtdev() <= 0 && from.lonsdtdev() >= 0)) {
    set_lonsdtdev(from.lonsdtdev());
  }
  if (!(from.hgtsdtdev() <= 0 && from.hgtsdtdev() >= 0)) {
    set_hgtsdtdev(from.hgtsdtdev());
  }
  if (from.solst() != 0) {
    set_solst(from.solst());
  }
  if (from.postype() != 0) {
    set_postype(from.postype());
  }
  if (!(from.undulation() <= 0 && from.undulation() >= 0)) {
    set_undulation(from.undulation());
  }
}

void GPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.GPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS::CopyFrom(const GPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS::IsInitialized() const {
  return true;
}

void GPS::InternalSwap(GPS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(mount_pos_, other->mount_pos_);
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(height_, other->height_);
  swap(vel_hrz_, other->vel_hrz_);
  swap(track_, other->track_);
  swap(vel_vrt_, other->vel_vrt_);
  swap(latsdtdev_, other->latsdtdev_);
  swap(lonsdtdev_, other->lonsdtdev_);
  swap(hgtsdtdev_, other->hgtsdtdev_);
  swap(solst_, other->solst_);
  swap(postype_, other->postype_);
  swap(undulation_, other->undulation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::GPS* Arena::CreateMaybeMessage< ::osi3::GPS >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::GPS >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
