// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto
#pragma warning (disable : 4125)

#include "osi_hostvehicledata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseMoving_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeodeticPosition_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleBasics_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleBrakeSystem_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehiclePowertrain_Motor_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleWheels_WheelData_osi_5fhostvehicledata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleSteeringWheel_osi_5fcommon_2eproto;
namespace osi3 {
class HostVehicleData_VehicleBasicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleBasics> _instance;
} _HostVehicleData_VehicleBasics_default_instance_;
class HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehiclePowertrain_Motor> _instance;
} _HostVehicleData_VehiclePowertrain_Motor_default_instance_;
class HostVehicleData_VehiclePowertrainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehiclePowertrain> _instance;
} _HostVehicleData_VehiclePowertrain_default_instance_;
class HostVehicleData_VehicleBrakeSystemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleBrakeSystem> _instance;
} _HostVehicleData_VehicleBrakeSystem_default_instance_;
class HostVehicleData_VehicleSteeringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleSteering> _instance;
} _HostVehicleData_VehicleSteering_default_instance_;
class HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleWheels_WheelData> _instance;
} _HostVehicleData_VehicleWheels_WheelData_default_instance_;
class HostVehicleData_VehicleWheelsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleWheels> _instance;
} _HostVehicleData_VehicleWheels_default_instance_;
class HostVehicleData_VehicleLocalizationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleLocalization> _instance;
} _HostVehicleData_VehicleLocalization_default_instance_;
class HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverrideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride> _instance;
} _HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_;
class HostVehicleData_VehicleAutomatedDrivingFunctionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData_VehicleAutomatedDrivingFunction> _instance;
} _HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_;
class HostVehicleDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostVehicleData> _instance;
} _HostVehicleData_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_HostVehicleData_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_default_instance_;
    new (ptr) ::osi3::HostVehicleData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_HostVehicleData_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, InitDefaultsscc_info_HostVehicleData_osi_5fhostvehicledata_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_BaseMoving_osi_5fcommon_2eproto.base,
      &scc_info_HostVehicleData_VehicleBasics_osi_5fhostvehicledata_2eproto.base,
      &scc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto.base,
      &scc_info_HostVehicleData_VehicleBrakeSystem_osi_5fhostvehicledata_2eproto.base,
      &scc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto.base,
      &scc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto.base,
      &scc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto.base,
      &scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto.base,}};

static void InitDefaultsscc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto}, {
      &scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_osi_5fhostvehicledata_2eproto.base,
      &scc_info_KeyValuePair_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_osi_5fhostvehicledata_2eproto}, {}};

static void InitDefaultsscc_info_HostVehicleData_VehicleBasics_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleBasics_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleBasics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleBasics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleBasics_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HostVehicleData_VehicleBasics_osi_5fhostvehicledata_2eproto}, {}};

static void InitDefaultsscc_info_HostVehicleData_VehicleBrakeSystem_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleBrakeSystem_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleBrakeSystem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleBrakeSystem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleBrakeSystem_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HostVehicleData_VehicleBrakeSystem_osi_5fhostvehicledata_2eproto}, {}};

static void InitDefaultsscc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleLocalization_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleLocalization();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleLocalization::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_Orientation3d_osi_5fcommon_2eproto.base,
      &scc_info_GeodeticPosition_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehiclePowertrain_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehiclePowertrain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehiclePowertrain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto}, {
      &scc_info_HostVehicleData_VehiclePowertrain_Motor_osi_5fhostvehicledata_2eproto.base,}};

static void InitDefaultsscc_info_HostVehicleData_VehiclePowertrain_Motor_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehiclePowertrain_Motor_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehiclePowertrain_Motor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehiclePowertrain_Motor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehiclePowertrain_Motor_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HostVehicleData_VehiclePowertrain_Motor_osi_5fhostvehicledata_2eproto}, {}};

static void InitDefaultsscc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleSteering_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleSteering();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleSteering::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto}, {
      &scc_info_VehicleSteeringWheel_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleWheels_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleWheels();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleWheels::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto}, {
      &scc_info_HostVehicleData_VehicleWheels_WheelData_osi_5fhostvehicledata_2eproto.base,}};

static void InitDefaultsscc_info_HostVehicleData_VehicleWheels_WheelData_osi_5fhostvehicledata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_HostVehicleData_VehicleWheels_WheelData_default_instance_;
    new (ptr) ::osi3::HostVehicleData_VehicleWheels_WheelData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::HostVehicleData_VehicleWheels_WheelData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostVehicleData_VehicleWheels_WheelData_osi_5fhostvehicledata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_HostVehicleData_VehicleWheels_WheelData_osi_5fhostvehicledata_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fhostvehicledata_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fhostvehicledata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fhostvehicledata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, curb_weight_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBasics, operating_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, rpm_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain_Motor, torque_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, pedal_position_acceleration_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, pedal_position_clutch_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, gear_transmission_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehiclePowertrain, motor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleBrakeSystem, pedal_position_brake_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleSteering, vehicle_steering_wheel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, axle_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, index_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, rotation_rate_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels_WheelData, slip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleWheels, wheel_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleLocalization, geodetic_position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride, active_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride, override_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, name_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, custom_name_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, state_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, custom_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, driver_override_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction, custom_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, host_vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, location_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, location_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_basics_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_powertrain_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_brake_system_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_steering_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_wheels_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_localization_),
  PROTOBUF_FIELD_OFFSET(::osi3::HostVehicleData, vehicle_automated_driving_function_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::HostVehicleData_VehicleBasics)},
  { 7, -1, sizeof(::osi3::HostVehicleData_VehiclePowertrain_Motor)},
  { 15, -1, sizeof(::osi3::HostVehicleData_VehiclePowertrain)},
  { 24, -1, sizeof(::osi3::HostVehicleData_VehicleBrakeSystem)},
  { 30, -1, sizeof(::osi3::HostVehicleData_VehicleSteering)},
  { 36, -1, sizeof(::osi3::HostVehicleData_VehicleWheels_WheelData)},
  { 45, -1, sizeof(::osi3::HostVehicleData_VehicleWheels)},
  { 51, -1, sizeof(::osi3::HostVehicleData_VehicleLocalization)},
  { 59, -1, sizeof(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride)},
  { 66, -1, sizeof(::osi3::HostVehicleData_VehicleAutomatedDrivingFunction)},
  { 77, -1, sizeof(::osi3::HostVehicleData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleBasics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehiclePowertrain_Motor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehiclePowertrain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleBrakeSystem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleSteering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleWheels_WheelData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleWheels_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleLocalization_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_HostVehicleData_default_instance_),
};

const char descriptor_table_protodef_osi_5fhostvehicledata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031osi_hostvehicledata.proto\022\004osi3\032\021osi_v"
  "ersion.proto\032\020osi_common.proto\"\345\032\n\017HostV"
  "ehicleData\022\'\n\007version\030\t \001(\0132\026.osi3.Inter"
  "faceVersion\022\"\n\ttimestamp\030\n \001(\0132\017.osi3.Ti"
  "mestamp\022)\n\017host_vehicle_id\030\013 \001(\0132\020.osi3."
  "Identifier\022\"\n\010location\030\001 \001(\0132\020.osi3.Base"
  "Moving\022\'\n\rlocation_rmse\030\002 \001(\0132\020.osi3.Bas"
  "eMoving\022;\n\016vehicle_basics\030\003 \001(\0132#.osi3.H"
  "ostVehicleData.VehicleBasics\022C\n\022vehicle_"
  "powertrain\030\004 \001(\0132\'.osi3.HostVehicleData."
  "VehiclePowertrain\022F\n\024vehicle_brake_syste"
  "m\030\005 \001(\0132(.osi3.HostVehicleData.VehicleBr"
  "akeSystem\022\?\n\020vehicle_steering\030\006 \001(\0132%.os"
  "i3.HostVehicleData.VehicleSteering\022;\n\016ve"
  "hicle_wheels\030\007 \001(\0132#.osi3.HostVehicleDat"
  "a.VehicleWheels\022G\n\024vehicle_localization\030"
  "\010 \001(\0132).osi3.HostVehicleData.VehicleLoca"
  "lization\022a\n\"vehicle_automated_driving_fu"
  "nction\030\014 \003(\01325.osi3.HostVehicleData.Vehi"
  "cleAutomatedDrivingFunction\032\362\002\n\rVehicleB"
  "asics\022\023\n\013curb_weight\030\001 \001(\001\022K\n\017operating_"
  "state\030\002 \001(\01622.osi3.HostVehicleData.Vehic"
  "leBasics.OperatingState\"\376\001\n\016OperatingSta"
  "te\022\033\n\027OPERATING_STATE_UNKNOWN\020\000\022\031\n\025OPERA"
  "TING_STATE_OTHER\020\001\022\031\n\025OPERATING_STATE_SL"
  "EEP\020\002\022\033\n\027OPERATING_STATE_STANDBY\020\003\022\034\n\030OP"
  "ERATING_STATE_BOARDING\020\004\022!\n\035OPERATING_ST"
  "ATE_ENTERTAINMENT\020\005\022\033\n\027OPERATING_STATE_D"
  "RIVING\020\006\022\036\n\032OPERATING_STATE_DIAGNOSTIC\020\007"
  "\032\366\002\n\021VehiclePowertrain\022#\n\033pedal_position"
  "_acceleration\030\001 \001(\001\022\035\n\025pedal_position_cl"
  "utch\030\002 \001(\001\022\031\n\021gear_transmission\030\003 \001(\005\022<\n"
  "\005motor\030\004 \003(\0132-.osi3.HostVehicleData.Vehi"
  "clePowertrain.Motor\032\303\001\n\005Motor\022@\n\004type\030\001 "
  "\001(\01622.osi3.HostVehicleData.VehiclePowert"
  "rain.Motor.Type\022\013\n\003rpm\030\002 \001(\001\022\016\n\006torque\030\003"
  " \001(\001\"[\n\004Type\022\020\n\014TYPE_UNKNOWN\020\000\022\016\n\nTYPE_O"
  "THER\020\001\022\r\n\tTYPE_OTTO\020\002\022\017\n\013TYPE_DIESEL\020\003\022\021"
  "\n\rTYPE_ELECTRIC\020\004\0322\n\022VehicleBrakeSystem\022"
  "\034\n\024pedal_position_brake\030\001 \001(\001\032M\n\017Vehicle"
  "Steering\022:\n\026vehicle_steering_wheel\030\001 \001(\013"
  "2\032.osi3.VehicleSteeringWheel\032\241\001\n\rVehicle"
  "Wheels\022A\n\nwheel_data\030\001 \003(\0132-.osi3.HostVe"
  "hicleData.VehicleWheels.WheelData\032M\n\tWhe"
  "elData\022\014\n\004axle\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\025\n\rr"
  "otation_rate\030\003 \001(\001\022\014\n\004slip\030\004 \001(\001\032\224\001\n\023Veh"
  "icleLocalization\022 \n\010position\030\001 \001(\0132\016.osi"
  "3.Vector3d\022(\n\013orientation\030\002 \001(\0132\023.osi3.O"
  "rientation3d\0221\n\021geodetic_position\030\003 \001(\0132"
  "\026.osi3.GeodeticPosition\032\354\013\n\037VehicleAutom"
  "atedDrivingFunction\022H\n\004name\030\001 \001(\0162:.osi3"
  ".HostVehicleData.VehicleAutomatedDriving"
  "Function.Name\022\023\n\013custom_name\030\002 \001(\t\022J\n\005st"
  "ate\030\003 \001(\0162;.osi3.HostVehicleData.Vehicle"
  "AutomatedDrivingFunction.State\022\024\n\014custom"
  "_state\030\004 \001(\t\022]\n\017driver_override\030\005 \001(\0132D."
  "osi3.HostVehicleData.VehicleAutomatedDri"
  "vingFunction.DriverOverride\022)\n\rcustom_de"
  "tail\030\006 \003(\0132\022.osi3.KeyValuePair\032\303\001\n\016Drive"
  "rOverride\022\016\n\006active\030\001 \001(\010\022d\n\017override_re"
  "ason\030\002 \003(\0162K.osi3.HostVehicleData.Vehicl"
  "eAutomatedDrivingFunction.DriverOverride"
  ".Reason\";\n\006Reason\022\026\n\022REASON_BRAKE_PEDAL\020"
  "\000\022\031\n\025REASON_STEERING_INPUT\020\001\"\245\006\n\004Name\022\020\n"
  "\014NAME_UNKNOWN\020\000\022\016\n\nNAME_OTHER\020\001\022\033\n\027NAME_"
  "BLIND_SPOT_WARNING\020\002\022\"\n\036NAME_FORWARD_COL"
  "LISION_WARNING\020\003\022\037\n\033NAME_LANE_DEPARTURE_"
  "WARNING\020\004\022\"\n\036NAME_PARKING_COLLISION_WARN"
  "ING\020\005\022#\n\037NAME_REAR_CROSS_TRAFFIC_WARNING"
  "\020\006\022$\n NAME_AUTOMATIC_EMERGENCY_BRAKING\020\007"
  "\022%\n!NAME_AUTOMATIC_EMERGENCY_STEERING\020\010\022"
  ",\n(NAME_REVERSE_AUTOMATIC_EMERGENCY_BRAK"
  "ING\020\t\022 \n\034NAME_ADAPTIVE_CRUISE_CONTROL\020\n\022"
  "\034\n\030NAME_LANE_KEEPING_ASSIST\020\013\022\"\n\036NAME_AC"
  "TIVE_DRIVING_ASSISTANCE\020\014\022\026\n\022NAME_BACKUP"
  "_CAMERA\020\r\022\035\n\031NAME_SURROUND_VIEW_CAMERA\020\016"
  "\022\"\n\036NAME_ACTIVE_PARKING_ASSISTANCE\020\017\022\"\n\036"
  "NAME_REMOTE_PARKING_ASSISTANCE\020\020\022\033\n\027NAME"
  "_TRAILER_ASSISTANCE\020\021\022\035\n\031NAME_AUTOMATIC_"
  "HIGH_BEAMS\020\022\022\032\n\026NAME_DRIVER_MONITORING\020\023"
  "\022\030\n\024NAME_HEAD_UP_DISPLAY\020\024\022\025\n\021NAME_NIGHT"
  "_VISION\020\025\022\026\n\022NAME_URBAN_DRIVING\020\026\022\032\n\026NAM"
  "E_HIGHWAY_AUTOPILOT\020\027\022\027\n\023NAME_CRUISE_CON"
  "TROL\020\030\022\034\n\030NAME_SPEED_LIMIT_CONTROL\020\031\"\217\001\n"
  "\005State\022\021\n\rSTATE_UNKNOWN\020\000\022\017\n\013STATE_OTHER"
  "\020\001\022\021\n\rSTATE_ERRORED\020\002\022\025\n\021STATE_UNAVAILAB"
  "LE\020\003\022\023\n\017STATE_AVAILABLE\020\004\022\021\n\rSTATE_STAND"
  "BY\020\005\022\020\n\014STATE_ACTIVE\020\006B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fhostvehicledata_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fhostvehicledata_2eproto_sccs[11] = {
  &scc_info_HostVehicleData_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleBasics_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleBrakeSystem_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehiclePowertrain_Motor_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto.base,
  &scc_info_HostVehicleData_VehicleWheels_WheelData_osi_5fhostvehicledata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fhostvehicledata_2eproto_once;
static bool descriptor_table_osi_5fhostvehicledata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fhostvehicledata_2eproto = {
  &descriptor_table_osi_5fhostvehicledata_2eproto_initialized, descriptor_table_protodef_osi_5fhostvehicledata_2eproto, "osi_hostvehicledata.proto", 3514,
  &descriptor_table_osi_5fhostvehicledata_2eproto_once, descriptor_table_osi_5fhostvehicledata_2eproto_sccs, descriptor_table_osi_5fhostvehicledata_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_osi_5fhostvehicledata_2eproto::offsets,
  file_level_metadata_osi_5fhostvehicledata_2eproto, 11, file_level_enum_descriptors_osi_5fhostvehicledata_2eproto, file_level_service_descriptors_osi_5fhostvehicledata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fhostvehicledata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleBasics_OperatingState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[0];
}
bool HostVehicleData_VehicleBasics_OperatingState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_UNKNOWN;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_OTHER;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_SLEEP;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_STANDBY;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_BOARDING;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_ENTERTAINMENT;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_DRIVING;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OPERATING_STATE_DIAGNOSTIC;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OperatingState_MIN;
constexpr HostVehicleData_VehicleBasics_OperatingState HostVehicleData_VehicleBasics::OperatingState_MAX;
constexpr int HostVehicleData_VehicleBasics::OperatingState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehiclePowertrain_Motor_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[1];
}
bool HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_UNKNOWN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_OTHER;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_OTTO;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_DIESEL;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::TYPE_ELECTRIC;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::Type_MIN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::Type_MAX;
constexpr int HostVehicleData_VehiclePowertrain_Motor::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[2];
}
bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::REASON_BRAKE_PEDAL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::REASON_STEERING_INPUT;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Reason_MIN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Reason_MAX;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_Name_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[3];
}
bool HostVehicleData_VehicleAutomatedDrivingFunction_Name_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_UNKNOWN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_OTHER;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_BLIND_SPOT_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_FORWARD_COLLISION_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_LANE_DEPARTURE_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_PARKING_COLLISION_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_REAR_CROSS_TRAFFIC_WARNING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_AUTOMATIC_EMERGENCY_BRAKING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_AUTOMATIC_EMERGENCY_STEERING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_REVERSE_AUTOMATIC_EMERGENCY_BRAKING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_ADAPTIVE_CRUISE_CONTROL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_LANE_KEEPING_ASSIST;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_ACTIVE_DRIVING_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_BACKUP_CAMERA;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_SURROUND_VIEW_CAMERA;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_ACTIVE_PARKING_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_REMOTE_PARKING_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_TRAILER_ASSISTANCE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_AUTOMATIC_HIGH_BEAMS;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_DRIVER_MONITORING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_HEAD_UP_DISPLAY;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_NIGHT_VISION;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_URBAN_DRIVING;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_HIGHWAY_AUTOPILOT;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_CRUISE_CONTROL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::NAME_SPEED_LIMIT_CONTROL;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::Name_MIN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_Name HostVehicleData_VehicleAutomatedDrivingFunction::Name_MAX;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction::Name_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehicleAutomatedDrivingFunction_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fhostvehicledata_2eproto);
  return file_level_enum_descriptors_osi_5fhostvehicledata_2eproto[4];
}
bool HostVehicleData_VehicleAutomatedDrivingFunction_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_UNKNOWN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_OTHER;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_ERRORED;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_UNAVAILABLE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_AVAILABLE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_STANDBY;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::STATE_ACTIVE;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::State_MIN;
constexpr HostVehicleData_VehicleAutomatedDrivingFunction_State HostVehicleData_VehicleAutomatedDrivingFunction::State_MAX;
constexpr int HostVehicleData_VehicleAutomatedDrivingFunction::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void HostVehicleData_VehicleBasics::InitAsDefaultInstance() {
}
class HostVehicleData_VehicleBasics::_Internal {
 public:
};

HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleBasics)
}
HostVehicleData_VehicleBasics::HostVehicleData_VehicleBasics(const HostVehicleData_VehicleBasics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curb_weight_, &from.curb_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&operating_state_) -
    reinterpret_cast<char*>(&curb_weight_)) + sizeof(operating_state_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleBasics)
}

void HostVehicleData_VehicleBasics::SharedCtor() {
  ::memset(&curb_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_state_) -
      reinterpret_cast<char*>(&curb_weight_)) + sizeof(operating_state_));
}

HostVehicleData_VehicleBasics::~HostVehicleData_VehicleBasics() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleBasics)
  SharedDtor();
}

void HostVehicleData_VehicleBasics::SharedDtor() {
}

void HostVehicleData_VehicleBasics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleBasics& HostVehicleData_VehicleBasics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleBasics_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleBasics::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleBasics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curb_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operating_state_) -
      reinterpret_cast<char*>(&curb_weight_)) + sizeof(operating_state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleBasics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double curb_weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          curb_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_operating_state(static_cast<::osi3::HostVehicleData_VehicleBasics_OperatingState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleBasics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleBasics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double curb_weight = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &curb_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_operating_state(static_cast< ::osi3::HostVehicleData_VehicleBasics_OperatingState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleBasics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleBasics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleBasics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleBasics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double curb_weight = 1;
  if (!(this->curb_weight() <= 0 && this->curb_weight() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->curb_weight(), output);
  }

  // .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
  if (this->operating_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->operating_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleBasics)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleBasics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleBasics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double curb_weight = 1;
  if (!(this->curb_weight() <= 0 && this->curb_weight() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->curb_weight(), target);
  }

  // .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
  if (this->operating_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->operating_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleBasics)
  return target;
}

size_t HostVehicleData_VehicleBasics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleBasics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double curb_weight = 1;
  if (!(this->curb_weight() <= 0 && this->curb_weight() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.HostVehicleData.VehicleBasics.OperatingState operating_state = 2;
  if (this->operating_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->operating_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleBasics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleBasics)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleBasics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleBasics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleBasics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleBasics)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleBasics::MergeFrom(const HostVehicleData_VehicleBasics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleBasics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.curb_weight() <= 0 && from.curb_weight() >= 0)) {
    set_curb_weight(from.curb_weight());
  }
  if (from.operating_state() != 0) {
    set_operating_state(from.operating_state());
  }
}

void HostVehicleData_VehicleBasics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleBasics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleBasics::CopyFrom(const HostVehicleData_VehicleBasics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleBasics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleBasics::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleBasics::InternalSwap(HostVehicleData_VehicleBasics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(curb_weight_, other->curb_weight_);
  swap(operating_state_, other->operating_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleBasics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehiclePowertrain_Motor::InitAsDefaultInstance() {
}
class HostVehicleData_VehiclePowertrain_Motor::_Internal {
 public:
};

HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
}
HostVehicleData_VehiclePowertrain_Motor::HostVehicleData_VehiclePowertrain_Motor(const HostVehicleData_VehiclePowertrain_Motor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rpm_, &from.rpm_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&rpm_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
}

void HostVehicleData_VehiclePowertrain_Motor::SharedCtor() {
  ::memset(&rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rpm_)) + sizeof(type_));
}

HostVehicleData_VehiclePowertrain_Motor::~HostVehicleData_VehiclePowertrain_Motor() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehiclePowertrain.Motor)
  SharedDtor();
}

void HostVehicleData_VehiclePowertrain_Motor::SharedDtor() {
}

void HostVehicleData_VehiclePowertrain_Motor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehiclePowertrain_Motor& HostVehicleData_VehiclePowertrain_Motor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehiclePowertrain_Motor_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehiclePowertrain_Motor::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rpm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&rpm_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehiclePowertrain_Motor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::HostVehicleData_VehiclePowertrain_Motor_Type>(val));
        } else goto handle_unusual;
        continue;
      // double rpm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          rpm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double torque = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehiclePowertrain_Motor::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rpm = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double torque = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehiclePowertrain.Motor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehiclePowertrain.Motor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehiclePowertrain_Motor::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // double rpm = 2;
  if (!(this->rpm() <= 0 && this->rpm() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->rpm(), output);
  }

  // double torque = 3;
  if (!(this->torque() <= 0 && this->torque() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->torque(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehiclePowertrain.Motor)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehiclePowertrain_Motor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // double rpm = 2;
  if (!(this->rpm() <= 0 && this->rpm() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->rpm(), target);
  }

  // double torque = 3;
  if (!(this->torque() <= 0 && this->torque() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->torque(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehiclePowertrain.Motor)
  return target;
}

size_t HostVehicleData_VehiclePowertrain_Motor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rpm = 2;
  if (!(this->rpm() <= 0 && this->rpm() >= 0)) {
    total_size += 1 + 8;
  }

  // double torque = 3;
  if (!(this->torque() <= 0 && this->torque() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehiclePowertrain_Motor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehiclePowertrain_Motor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehiclePowertrain_Motor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehiclePowertrain.Motor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehiclePowertrain.Motor)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehiclePowertrain_Motor::MergeFrom(const HostVehicleData_VehiclePowertrain_Motor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rpm() <= 0 && from.rpm() >= 0)) {
    set_rpm(from.rpm());
  }
  if (!(from.torque() <= 0 && from.torque() >= 0)) {
    set_torque(from.torque());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void HostVehicleData_VehiclePowertrain_Motor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehiclePowertrain_Motor::CopyFrom(const HostVehicleData_VehiclePowertrain_Motor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehiclePowertrain.Motor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehiclePowertrain_Motor::IsInitialized() const {
  return true;
}

void HostVehicleData_VehiclePowertrain_Motor::InternalSwap(HostVehicleData_VehiclePowertrain_Motor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rpm_, other->rpm_);
  swap(torque_, other->torque_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehiclePowertrain_Motor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehiclePowertrain::InitAsDefaultInstance() {
}
class HostVehicleData_VehiclePowertrain::_Internal {
 public:
};

HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehiclePowertrain)
}
HostVehicleData_VehiclePowertrain::HostVehicleData_VehiclePowertrain(const HostVehicleData_VehiclePowertrain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      motor_(from.motor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pedal_position_acceleration_, &from.pedal_position_acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_transmission_) -
    reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(gear_transmission_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehiclePowertrain)
}

void HostVehicleData_VehiclePowertrain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto.base);
  ::memset(&pedal_position_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_transmission_) -
      reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(gear_transmission_));
}

HostVehicleData_VehiclePowertrain::~HostVehicleData_VehiclePowertrain() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehiclePowertrain)
  SharedDtor();
}

void HostVehicleData_VehiclePowertrain::SharedDtor() {
}

void HostVehicleData_VehiclePowertrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehiclePowertrain& HostVehicleData_VehiclePowertrain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehiclePowertrain_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehiclePowertrain::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehiclePowertrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motor_.Clear();
  ::memset(&pedal_position_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_transmission_) -
      reinterpret_cast<char*>(&pedal_position_acceleration_)) + sizeof(gear_transmission_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehiclePowertrain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double pedal_position_acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          pedal_position_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pedal_position_clutch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pedal_position_clutch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 gear_transmission = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          gear_transmission_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_motor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehiclePowertrain::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehiclePowertrain)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pedal_position_acceleration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pedal_position_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pedal_position_clutch = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pedal_position_clutch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 gear_transmission = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_transmission_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_motor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehiclePowertrain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehiclePowertrain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehiclePowertrain::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehiclePowertrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pedal_position_acceleration = 1;
  if (!(this->pedal_position_acceleration() <= 0 && this->pedal_position_acceleration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->pedal_position_acceleration(), output);
  }

  // double pedal_position_clutch = 2;
  if (!(this->pedal_position_clutch() <= 0 && this->pedal_position_clutch() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->pedal_position_clutch(), output);
  }

  // int32 gear_transmission = 3;
  if (this->gear_transmission() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->gear_transmission(), output);
  }

  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->motor(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehiclePowertrain)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehiclePowertrain::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehiclePowertrain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pedal_position_acceleration = 1;
  if (!(this->pedal_position_acceleration() <= 0 && this->pedal_position_acceleration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->pedal_position_acceleration(), target);
  }

  // double pedal_position_clutch = 2;
  if (!(this->pedal_position_clutch() <= 0 && this->pedal_position_clutch() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->pedal_position_clutch(), target);
  }

  // int32 gear_transmission = 3;
  if (this->gear_transmission() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->gear_transmission(), target);
  }

  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->motor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->motor(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehiclePowertrain)
  return target;
}

size_t HostVehicleData_VehiclePowertrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehiclePowertrain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->motor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->motor(static_cast<int>(i)));
    }
  }

  // double pedal_position_acceleration = 1;
  if (!(this->pedal_position_acceleration() <= 0 && this->pedal_position_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double pedal_position_clutch = 2;
  if (!(this->pedal_position_clutch() <= 0 && this->pedal_position_clutch() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 gear_transmission = 3;
  if (this->gear_transmission() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->gear_transmission());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehiclePowertrain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehiclePowertrain)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehiclePowertrain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehiclePowertrain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehiclePowertrain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehiclePowertrain)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehiclePowertrain::MergeFrom(const HostVehicleData_VehiclePowertrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehiclePowertrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  motor_.MergeFrom(from.motor_);
  if (!(from.pedal_position_acceleration() <= 0 && from.pedal_position_acceleration() >= 0)) {
    set_pedal_position_acceleration(from.pedal_position_acceleration());
  }
  if (!(from.pedal_position_clutch() <= 0 && from.pedal_position_clutch() >= 0)) {
    set_pedal_position_clutch(from.pedal_position_clutch());
  }
  if (from.gear_transmission() != 0) {
    set_gear_transmission(from.gear_transmission());
  }
}

void HostVehicleData_VehiclePowertrain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehiclePowertrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehiclePowertrain::CopyFrom(const HostVehicleData_VehiclePowertrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehiclePowertrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehiclePowertrain::IsInitialized() const {
  return true;
}

void HostVehicleData_VehiclePowertrain::InternalSwap(HostVehicleData_VehiclePowertrain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&motor_)->InternalSwap(CastToBase(&other->motor_));
  swap(pedal_position_acceleration_, other->pedal_position_acceleration_);
  swap(pedal_position_clutch_, other->pedal_position_clutch_);
  swap(gear_transmission_, other->gear_transmission_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehiclePowertrain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehicleBrakeSystem::InitAsDefaultInstance() {
}
class HostVehicleData_VehicleBrakeSystem::_Internal {
 public:
};

HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleBrakeSystem)
}
HostVehicleData_VehicleBrakeSystem::HostVehicleData_VehicleBrakeSystem(const HostVehicleData_VehicleBrakeSystem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pedal_position_brake_ = from.pedal_position_brake_;
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleBrakeSystem)
}

void HostVehicleData_VehicleBrakeSystem::SharedCtor() {
  pedal_position_brake_ = 0;
}

HostVehicleData_VehicleBrakeSystem::~HostVehicleData_VehicleBrakeSystem() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleBrakeSystem)
  SharedDtor();
}

void HostVehicleData_VehicleBrakeSystem::SharedDtor() {
}

void HostVehicleData_VehicleBrakeSystem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleBrakeSystem& HostVehicleData_VehicleBrakeSystem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleBrakeSystem_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleBrakeSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleBrakeSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pedal_position_brake_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleBrakeSystem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double pedal_position_brake = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          pedal_position_brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleBrakeSystem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleBrakeSystem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double pedal_position_brake = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pedal_position_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleBrakeSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleBrakeSystem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleBrakeSystem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleBrakeSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pedal_position_brake = 1;
  if (!(this->pedal_position_brake() <= 0 && this->pedal_position_brake() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->pedal_position_brake(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleBrakeSystem)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleBrakeSystem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleBrakeSystem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double pedal_position_brake = 1;
  if (!(this->pedal_position_brake() <= 0 && this->pedal_position_brake() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->pedal_position_brake(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleBrakeSystem)
  return target;
}

size_t HostVehicleData_VehicleBrakeSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleBrakeSystem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double pedal_position_brake = 1;
  if (!(this->pedal_position_brake() <= 0 && this->pedal_position_brake() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleBrakeSystem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleBrakeSystem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleBrakeSystem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleBrakeSystem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleBrakeSystem)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleBrakeSystem::MergeFrom(const HostVehicleData_VehicleBrakeSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.pedal_position_brake() <= 0 && from.pedal_position_brake() >= 0)) {
    set_pedal_position_brake(from.pedal_position_brake());
  }
}

void HostVehicleData_VehicleBrakeSystem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleBrakeSystem::CopyFrom(const HostVehicleData_VehicleBrakeSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleBrakeSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleBrakeSystem::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleBrakeSystem::InternalSwap(HostVehicleData_VehicleBrakeSystem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pedal_position_brake_, other->pedal_position_brake_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleBrakeSystem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehicleSteering::InitAsDefaultInstance() {
  ::osi3::_HostVehicleData_VehicleSteering_default_instance_._instance.get_mutable()->vehicle_steering_wheel_ = const_cast< ::osi3::VehicleSteeringWheel*>(
      ::osi3::VehicleSteeringWheel::internal_default_instance());
}
class HostVehicleData_VehicleSteering::_Internal {
 public:
  static const ::osi3::VehicleSteeringWheel& vehicle_steering_wheel(const HostVehicleData_VehicleSteering* msg);
};

const ::osi3::VehicleSteeringWheel&
HostVehicleData_VehicleSteering::_Internal::vehicle_steering_wheel(const HostVehicleData_VehicleSteering* msg) {
  return *msg->vehicle_steering_wheel_;
}
void HostVehicleData_VehicleSteering::clear_vehicle_steering_wheel() {
  if (GetArenaNoVirtual() == nullptr && vehicle_steering_wheel_ != nullptr) {
    delete vehicle_steering_wheel_;
  }
  vehicle_steering_wheel_ = nullptr;
}
HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleSteering)
}
HostVehicleData_VehicleSteering::HostVehicleData_VehicleSteering(const HostVehicleData_VehicleSteering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_steering_wheel()) {
    vehicle_steering_wheel_ = new ::osi3::VehicleSteeringWheel(*from.vehicle_steering_wheel_);
  } else {
    vehicle_steering_wheel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleSteering)
}

void HostVehicleData_VehicleSteering::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto.base);
  vehicle_steering_wheel_ = nullptr;
}

HostVehicleData_VehicleSteering::~HostVehicleData_VehicleSteering() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleSteering)
  SharedDtor();
}

void HostVehicleData_VehicleSteering::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_steering_wheel_;
}

void HostVehicleData_VehicleSteering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleSteering& HostVehicleData_VehicleSteering::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleSteering_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleSteering::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleSteering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && vehicle_steering_wheel_ != nullptr) {
    delete vehicle_steering_wheel_;
  }
  vehicle_steering_wheel_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleSteering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_vehicle_steering_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleSteering::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleSteering)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_steering_wheel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleSteering)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleSteering)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleSteering::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleSteering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  if (this->has_vehicle_steering_wheel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::vehicle_steering_wheel(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleSteering)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleSteering::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleSteering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  if (this->has_vehicle_steering_wheel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::vehicle_steering_wheel(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleSteering)
  return target;
}

size_t HostVehicleData_VehicleSteering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleSteering)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  if (this->has_vehicle_steering_wheel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_steering_wheel_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleSteering::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleSteering)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleSteering* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleSteering>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleSteering)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleSteering)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleSteering::MergeFrom(const HostVehicleData_VehicleSteering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleSteering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehicle_steering_wheel()) {
    mutable_vehicle_steering_wheel()->::osi3::VehicleSteeringWheel::MergeFrom(from.vehicle_steering_wheel());
  }
}

void HostVehicleData_VehicleSteering::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleSteering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleSteering::CopyFrom(const HostVehicleData_VehicleSteering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleSteering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleSteering::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleSteering::InternalSwap(HostVehicleData_VehicleSteering* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vehicle_steering_wheel_, other->vehicle_steering_wheel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleSteering::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehicleWheels_WheelData::InitAsDefaultInstance() {
}
class HostVehicleData_VehicleWheels_WheelData::_Internal {
 public:
};

HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleWheels.WheelData)
}
HostVehicleData_VehicleWheels_WheelData::HostVehicleData_VehicleWheels_WheelData(const HostVehicleData_VehicleWheels_WheelData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&axle_, &from.axle_,
    static_cast<size_t>(reinterpret_cast<char*>(&slip_) -
    reinterpret_cast<char*>(&axle_)) + sizeof(slip_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleWheels.WheelData)
}

void HostVehicleData_VehicleWheels_WheelData::SharedCtor() {
  ::memset(&axle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip_) -
      reinterpret_cast<char*>(&axle_)) + sizeof(slip_));
}

HostVehicleData_VehicleWheels_WheelData::~HostVehicleData_VehicleWheels_WheelData() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleWheels.WheelData)
  SharedDtor();
}

void HostVehicleData_VehicleWheels_WheelData::SharedDtor() {
}

void HostVehicleData_VehicleWheels_WheelData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleWheels_WheelData& HostVehicleData_VehicleWheels_WheelData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleWheels_WheelData_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleWheels_WheelData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&axle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slip_) -
      reinterpret_cast<char*>(&axle_)) + sizeof(slip_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleWheels_WheelData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 axle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          axle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double rotation_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rotation_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double slip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          slip_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleWheels_WheelData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 axle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &axle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 index = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rotation_rate = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double slip = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleWheels.WheelData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleWheels.WheelData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleWheels_WheelData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 axle = 1;
  if (this->axle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->axle(), output);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // double rotation_rate = 3;
  if (!(this->rotation_rate() <= 0 && this->rotation_rate() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->rotation_rate(), output);
  }

  // double slip = 4;
  if (!(this->slip() <= 0 && this->slip() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->slip(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleWheels.WheelData)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleWheels_WheelData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 axle = 1;
  if (this->axle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->axle(), target);
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // double rotation_rate = 3;
  if (!(this->rotation_rate() <= 0 && this->rotation_rate() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->rotation_rate(), target);
  }

  // double slip = 4;
  if (!(this->slip() <= 0 && this->slip() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->slip(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleWheels.WheelData)
  return target;
}

size_t HostVehicleData_VehicleWheels_WheelData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 axle = 1;
  if (this->axle() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->axle());
  }

  // uint32 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // double rotation_rate = 3;
  if (!(this->rotation_rate() <= 0 && this->rotation_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // double slip = 4;
  if (!(this->slip() <= 0 && this->slip() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleWheels_WheelData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleWheels_WheelData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleWheels_WheelData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleWheels.WheelData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleWheels.WheelData)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleWheels_WheelData::MergeFrom(const HostVehicleData_VehicleWheels_WheelData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.axle() != 0) {
    set_axle(from.axle());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (!(from.rotation_rate() <= 0 && from.rotation_rate() >= 0)) {
    set_rotation_rate(from.rotation_rate());
  }
  if (!(from.slip() <= 0 && from.slip() >= 0)) {
    set_slip(from.slip());
  }
}

void HostVehicleData_VehicleWheels_WheelData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleWheels_WheelData::CopyFrom(const HostVehicleData_VehicleWheels_WheelData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleWheels.WheelData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleWheels_WheelData::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleWheels_WheelData::InternalSwap(HostVehicleData_VehicleWheels_WheelData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(axle_, other->axle_);
  swap(index_, other->index_);
  swap(rotation_rate_, other->rotation_rate_);
  swap(slip_, other->slip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleWheels_WheelData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehicleWheels::InitAsDefaultInstance() {
}
class HostVehicleData_VehicleWheels::_Internal {
 public:
};

HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleWheels)
}
HostVehicleData_VehicleWheels::HostVehicleData_VehicleWheels(const HostVehicleData_VehicleWheels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      wheel_data_(from.wheel_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleWheels)
}

void HostVehicleData_VehicleWheels::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto.base);
}

HostVehicleData_VehicleWheels::~HostVehicleData_VehicleWheels() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleWheels)
  SharedDtor();
}

void HostVehicleData_VehicleWheels::SharedDtor() {
}

void HostVehicleData_VehicleWheels::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleWheels& HostVehicleData_VehicleWheels::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleWheels_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleWheels::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleWheels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleWheels::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_wheel_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleWheels::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleWheels)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wheel_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleWheels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleWheels)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleWheels::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleWheels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->wheel_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleWheels)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleWheels::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleWheels)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wheel_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->wheel_data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleWheels)
  return target;
}

size_t HostVehicleData_VehicleWheels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleWheels)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->wheel_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wheel_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleWheels::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleWheels)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleWheels* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleWheels>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleWheels)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleWheels)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleWheels::MergeFrom(const HostVehicleData_VehicleWheels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleWheels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_data_.MergeFrom(from.wheel_data_);
}

void HostVehicleData_VehicleWheels::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleWheels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleWheels::CopyFrom(const HostVehicleData_VehicleWheels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleWheels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleWheels::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleWheels::InternalSwap(HostVehicleData_VehicleWheels* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&wheel_data_)->InternalSwap(CastToBase(&other->wheel_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleWheels::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehicleLocalization::InitAsDefaultInstance() {
  ::osi3::_HostVehicleData_VehicleLocalization_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_HostVehicleData_VehicleLocalization_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::osi3::Orientation3d*>(
      ::osi3::Orientation3d::internal_default_instance());
  ::osi3::_HostVehicleData_VehicleLocalization_default_instance_._instance.get_mutable()->geodetic_position_ = const_cast< ::osi3::GeodeticPosition*>(
      ::osi3::GeodeticPosition::internal_default_instance());
}
class HostVehicleData_VehicleLocalization::_Internal {
 public:
  static const ::osi3::Vector3d& position(const HostVehicleData_VehicleLocalization* msg);
  static const ::osi3::Orientation3d& orientation(const HostVehicleData_VehicleLocalization* msg);
  static const ::osi3::GeodeticPosition& geodetic_position(const HostVehicleData_VehicleLocalization* msg);
};

const ::osi3::Vector3d&
HostVehicleData_VehicleLocalization::_Internal::position(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->position_;
}
const ::osi3::Orientation3d&
HostVehicleData_VehicleLocalization::_Internal::orientation(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->orientation_;
}
const ::osi3::GeodeticPosition&
HostVehicleData_VehicleLocalization::_Internal::geodetic_position(const HostVehicleData_VehicleLocalization* msg) {
  return *msg->geodetic_position_;
}
void HostVehicleData_VehicleLocalization::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void HostVehicleData_VehicleLocalization::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
void HostVehicleData_VehicleLocalization::clear_geodetic_position() {
  if (GetArenaNoVirtual() == nullptr && geodetic_position_ != nullptr) {
    delete geodetic_position_;
  }
  geodetic_position_ = nullptr;
}
HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleLocalization)
}
HostVehicleData_VehicleLocalization::HostVehicleData_VehicleLocalization(const HostVehicleData_VehicleLocalization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_orientation()) {
    orientation_ = new ::osi3::Orientation3d(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from.has_geodetic_position()) {
    geodetic_position_ = new ::osi3::GeodeticPosition(*from.geodetic_position_);
  } else {
    geodetic_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleLocalization)
}

void HostVehicleData_VehicleLocalization::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geodetic_position_) -
      reinterpret_cast<char*>(&position_)) + sizeof(geodetic_position_));
}

HostVehicleData_VehicleLocalization::~HostVehicleData_VehicleLocalization() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleLocalization)
  SharedDtor();
}

void HostVehicleData_VehicleLocalization::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete geodetic_position_;
}

void HostVehicleData_VehicleLocalization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleLocalization& HostVehicleData_VehicleLocalization::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleLocalization_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleLocalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geodetic_position_ != nullptr) {
    delete geodetic_position_;
  }
  geodetic_position_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleLocalization::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Orientation3d orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.GeodeticPosition geodetic_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_geodetic_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleLocalization::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleLocalization)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Vector3d position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Orientation3d orientation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.GeodeticPosition geodetic_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geodetic_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleLocalization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleLocalization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleLocalization::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleLocalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // .osi3.Orientation3d orientation = 2;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::orientation(this), output);
  }

  // .osi3.GeodeticPosition geodetic_position = 3;
  if (this->has_geodetic_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::geodetic_position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleLocalization)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleLocalization::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleLocalization)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // .osi3.Orientation3d orientation = 2;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::orientation(this), target);
  }

  // .osi3.GeodeticPosition geodetic_position = 3;
  if (this->has_geodetic_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::geodetic_position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleLocalization)
  return target;
}

size_t HostVehicleData_VehicleLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleLocalization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .osi3.Orientation3d orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .osi3.GeodeticPosition geodetic_position = 3;
  if (this->has_geodetic_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geodetic_position_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleLocalization::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleLocalization* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleLocalization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleLocalization)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleLocalization)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleLocalization::MergeFrom(const HostVehicleData_VehicleLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::osi3::Orientation3d::MergeFrom(from.orientation());
  }
  if (from.has_geodetic_position()) {
    mutable_geodetic_position()->::osi3::GeodeticPosition::MergeFrom(from.geodetic_position());
  }
}

void HostVehicleData_VehicleLocalization::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleLocalization::CopyFrom(const HostVehicleData_VehicleLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleLocalization::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleLocalization::InternalSwap(HostVehicleData_VehicleLocalization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(geodetic_position_, other->geodetic_position_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleLocalization::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::InitAsDefaultInstance() {
}
class HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_Internal {
 public:
};

HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
}
HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      override_reason_(from.override_reason_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::SharedCtor() {
  active_ = false;
}

HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::~HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  SharedDtor();
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::SharedDtor() {
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  override_reason_.Clear();
  active_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_override_reason(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_override_reason(static_cast<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool active = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_override_reason(static_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_override_reason(static_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride_Reason >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->active(), output);
  }

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
  if (this->override_reason_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_override_reason_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->override_reason_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->override_reason(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->active(), target);
  }

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
  if (this->override_reason_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _override_reason_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->override_reason_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  return target;
}

size_t HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride.Reason override_reason = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->override_reason_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->override_reason(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _override_reason_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergeFrom(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  override_reason_.MergeFrom(from.override_reason_);
  if (from.active() != 0) {
    set_active(from.active());
  }
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::CopyFrom(const HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::InternalSwap(HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  override_reason_.InternalSwap(&other->override_reason_);
  swap(active_, other->active_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData_VehicleAutomatedDrivingFunction::InitAsDefaultInstance() {
  ::osi3::_HostVehicleData_VehicleAutomatedDrivingFunction_default_instance_._instance.get_mutable()->driver_override_ = const_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride*>(
      ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::internal_default_instance());
}
class HostVehicleData_VehicleAutomatedDrivingFunction::_Internal {
 public:
  static const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride& driver_override(const HostVehicleData_VehicleAutomatedDrivingFunction* msg);
};

const ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride&
HostVehicleData_VehicleAutomatedDrivingFunction::_Internal::driver_override(const HostVehicleData_VehicleAutomatedDrivingFunction* msg) {
  return *msg->driver_override_;
}
void HostVehicleData_VehicleAutomatedDrivingFunction::clear_custom_detail() {
  custom_detail_.Clear();
}
HostVehicleData_VehicleAutomatedDrivingFunction::HostVehicleData_VehicleAutomatedDrivingFunction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
}
HostVehicleData_VehicleAutomatedDrivingFunction::HostVehicleData_VehicleAutomatedDrivingFunction(const HostVehicleData_VehicleAutomatedDrivingFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      custom_detail_(from.custom_detail_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.custom_name().empty()) {
    custom_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_name_);
  }
  custom_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.custom_state().empty()) {
    custom_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_state_);
  }
  if (from.has_driver_override()) {
    driver_override_ = new ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride(*from.driver_override_);
  } else {
    driver_override_ = nullptr;
  }
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&name_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
}

void HostVehicleData_VehicleAutomatedDrivingFunction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto.base);
  custom_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_state_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&driver_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&driver_override_)) + sizeof(state_));
}

HostVehicleData_VehicleAutomatedDrivingFunction::~HostVehicleData_VehicleAutomatedDrivingFunction() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  SharedDtor();
}

void HostVehicleData_VehicleAutomatedDrivingFunction::SharedDtor() {
  custom_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_state_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete driver_override_;
}

void HostVehicleData_VehicleAutomatedDrivingFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData_VehicleAutomatedDrivingFunction& HostVehicleData_VehicleAutomatedDrivingFunction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_VehicleAutomatedDrivingFunction_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData_VehicleAutomatedDrivingFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_detail_.Clear();
  custom_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  custom_state_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && driver_override_ != nullptr) {
    delete driver_override_;
  }
  driver_override_ = nullptr;
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&name_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData_VehicleAutomatedDrivingFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_name(static_cast<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name>(val));
        } else goto handle_unusual;
        continue;
      // string custom_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_custom_name(), ptr, ctx, "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State>(val));
        } else goto handle_unusual;
        continue;
      // string custom_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_custom_state(), ptr, ctx, "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_driver_override(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.KeyValuePair custom_detail = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_custom_detail(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData_VehicleAutomatedDrivingFunction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_name(static_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_Name >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->custom_name().data(), static_cast<int>(this->custom_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_State >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string custom_state = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_custom_state()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->custom_state().data(), static_cast<int>(this->custom_state().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_driver_override()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.KeyValuePair custom_detail = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_custom_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData_VehicleAutomatedDrivingFunction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
  if (this->name() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->name(), output);
  }

  // string custom_name = 2;
  if (this->custom_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_name().data(), static_cast<int>(this->custom_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->custom_name(), output);
  }

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  // string custom_state = 4;
  if (this->custom_state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_state().data(), static_cast<int>(this->custom_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->custom_state(), output);
  }

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
  if (this->has_driver_override()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::driver_override(this), output);
  }

  // repeated .osi3.KeyValuePair custom_detail = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_detail_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->custom_detail(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData_VehicleAutomatedDrivingFunction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
  if (this->name() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->name(), target);
  }

  // string custom_name = 2;
  if (this->custom_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_name().data(), static_cast<int>(this->custom_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->custom_name(), target);
  }

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  // string custom_state = 4;
  if (this->custom_state().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->custom_state().data(), static_cast<int>(this->custom_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.HostVehicleData.VehicleAutomatedDrivingFunction.custom_state");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        4, this->custom_state(), target);
  }

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
  if (this->has_driver_override()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::driver_override(this), target);
  }

  // repeated .osi3.KeyValuePair custom_detail = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_detail_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->custom_detail(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  return target;
}

size_t HostVehicleData_VehicleAutomatedDrivingFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.KeyValuePair custom_detail = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_detail_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->custom_detail(static_cast<int>(i)));
    }
  }

  // string custom_name = 2;
  if (this->custom_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->custom_name());
  }

  // string custom_state = 4;
  if (this->custom_state().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->custom_state());
  }

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.DriverOverride driver_override = 5;
  if (this->has_driver_override()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *driver_override_);
  }

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.Name name = 1;
  if (this->name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->name());
  }

  // .osi3.HostVehicleData.VehicleAutomatedDrivingFunction.State state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData_VehicleAutomatedDrivingFunction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData_VehicleAutomatedDrivingFunction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData_VehicleAutomatedDrivingFunction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
    MergeFrom(*source);
  }
}

void HostVehicleData_VehicleAutomatedDrivingFunction::MergeFrom(const HostVehicleData_VehicleAutomatedDrivingFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_detail_.MergeFrom(from.custom_detail_);
  if (from.custom_name().size() > 0) {

    custom_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_name_);
  }
  if (from.custom_state().size() > 0) {

    custom_state_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.custom_state_);
  }
  if (from.has_driver_override()) {
    mutable_driver_override()->::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride::MergeFrom(from.driver_override());
  }
  if (from.name() != 0) {
    set_name(from.name());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void HostVehicleData_VehicleAutomatedDrivingFunction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData_VehicleAutomatedDrivingFunction::CopyFrom(const HostVehicleData_VehicleAutomatedDrivingFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData.VehicleAutomatedDrivingFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData_VehicleAutomatedDrivingFunction::IsInitialized() const {
  return true;
}

void HostVehicleData_VehicleAutomatedDrivingFunction::InternalSwap(HostVehicleData_VehicleAutomatedDrivingFunction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&custom_detail_)->InternalSwap(CastToBase(&other->custom_detail_));
  custom_name_.Swap(&other->custom_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  custom_state_.Swap(&other->custom_state_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(driver_override_, other->driver_override_);
  swap(name_, other->name_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData_VehicleAutomatedDrivingFunction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostVehicleData::InitAsDefaultInstance() {
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->host_vehicle_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->location_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->location_rmse_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->vehicle_basics_ = const_cast< ::osi3::HostVehicleData_VehicleBasics*>(
      ::osi3::HostVehicleData_VehicleBasics::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->vehicle_powertrain_ = const_cast< ::osi3::HostVehicleData_VehiclePowertrain*>(
      ::osi3::HostVehicleData_VehiclePowertrain::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->vehicle_brake_system_ = const_cast< ::osi3::HostVehicleData_VehicleBrakeSystem*>(
      ::osi3::HostVehicleData_VehicleBrakeSystem::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->vehicle_steering_ = const_cast< ::osi3::HostVehicleData_VehicleSteering*>(
      ::osi3::HostVehicleData_VehicleSteering::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->vehicle_wheels_ = const_cast< ::osi3::HostVehicleData_VehicleWheels*>(
      ::osi3::HostVehicleData_VehicleWheels::internal_default_instance());
  ::osi3::_HostVehicleData_default_instance_._instance.get_mutable()->vehicle_localization_ = const_cast< ::osi3::HostVehicleData_VehicleLocalization*>(
      ::osi3::HostVehicleData_VehicleLocalization::internal_default_instance());
}
class HostVehicleData::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const HostVehicleData* msg);
  static const ::osi3::Timestamp& timestamp(const HostVehicleData* msg);
  static const ::osi3::Identifier& host_vehicle_id(const HostVehicleData* msg);
  static const ::osi3::BaseMoving& location(const HostVehicleData* msg);
  static const ::osi3::BaseMoving& location_rmse(const HostVehicleData* msg);
  static const ::osi3::HostVehicleData_VehicleBasics& vehicle_basics(const HostVehicleData* msg);
  static const ::osi3::HostVehicleData_VehiclePowertrain& vehicle_powertrain(const HostVehicleData* msg);
  static const ::osi3::HostVehicleData_VehicleBrakeSystem& vehicle_brake_system(const HostVehicleData* msg);
  static const ::osi3::HostVehicleData_VehicleSteering& vehicle_steering(const HostVehicleData* msg);
  static const ::osi3::HostVehicleData_VehicleWheels& vehicle_wheels(const HostVehicleData* msg);
  static const ::osi3::HostVehicleData_VehicleLocalization& vehicle_localization(const HostVehicleData* msg);
};

const ::osi3::InterfaceVersion&
HostVehicleData::_Internal::version(const HostVehicleData* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
HostVehicleData::_Internal::timestamp(const HostVehicleData* msg) {
  return *msg->timestamp_;
}
const ::osi3::Identifier&
HostVehicleData::_Internal::host_vehicle_id(const HostVehicleData* msg) {
  return *msg->host_vehicle_id_;
}
const ::osi3::BaseMoving&
HostVehicleData::_Internal::location(const HostVehicleData* msg) {
  return *msg->location_;
}
const ::osi3::BaseMoving&
HostVehicleData::_Internal::location_rmse(const HostVehicleData* msg) {
  return *msg->location_rmse_;
}
const ::osi3::HostVehicleData_VehicleBasics&
HostVehicleData::_Internal::vehicle_basics(const HostVehicleData* msg) {
  return *msg->vehicle_basics_;
}
const ::osi3::HostVehicleData_VehiclePowertrain&
HostVehicleData::_Internal::vehicle_powertrain(const HostVehicleData* msg) {
  return *msg->vehicle_powertrain_;
}
const ::osi3::HostVehicleData_VehicleBrakeSystem&
HostVehicleData::_Internal::vehicle_brake_system(const HostVehicleData* msg) {
  return *msg->vehicle_brake_system_;
}
const ::osi3::HostVehicleData_VehicleSteering&
HostVehicleData::_Internal::vehicle_steering(const HostVehicleData* msg) {
  return *msg->vehicle_steering_;
}
const ::osi3::HostVehicleData_VehicleWheels&
HostVehicleData::_Internal::vehicle_wheels(const HostVehicleData* msg) {
  return *msg->vehicle_wheels_;
}
const ::osi3::HostVehicleData_VehicleLocalization&
HostVehicleData::_Internal::vehicle_localization(const HostVehicleData* msg) {
  return *msg->vehicle_localization_;
}
void HostVehicleData::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void HostVehicleData::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void HostVehicleData::clear_host_vehicle_id() {
  if (GetArenaNoVirtual() == nullptr && host_vehicle_id_ != nullptr) {
    delete host_vehicle_id_;
  }
  host_vehicle_id_ = nullptr;
}
void HostVehicleData::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
void HostVehicleData::clear_location_rmse() {
  if (GetArenaNoVirtual() == nullptr && location_rmse_ != nullptr) {
    delete location_rmse_;
  }
  location_rmse_ = nullptr;
}
HostVehicleData::HostVehicleData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.HostVehicleData)
}
HostVehicleData::HostVehicleData(const HostVehicleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vehicle_automated_driving_function_(from.vehicle_automated_driving_function_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::osi3::BaseMoving(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from.has_location_rmse()) {
    location_rmse_ = new ::osi3::BaseMoving(*from.location_rmse_);
  } else {
    location_rmse_ = nullptr;
  }
  if (from.has_vehicle_basics()) {
    vehicle_basics_ = new ::osi3::HostVehicleData_VehicleBasics(*from.vehicle_basics_);
  } else {
    vehicle_basics_ = nullptr;
  }
  if (from.has_vehicle_powertrain()) {
    vehicle_powertrain_ = new ::osi3::HostVehicleData_VehiclePowertrain(*from.vehicle_powertrain_);
  } else {
    vehicle_powertrain_ = nullptr;
  }
  if (from.has_vehicle_brake_system()) {
    vehicle_brake_system_ = new ::osi3::HostVehicleData_VehicleBrakeSystem(*from.vehicle_brake_system_);
  } else {
    vehicle_brake_system_ = nullptr;
  }
  if (from.has_vehicle_steering()) {
    vehicle_steering_ = new ::osi3::HostVehicleData_VehicleSteering(*from.vehicle_steering_);
  } else {
    vehicle_steering_ = nullptr;
  }
  if (from.has_vehicle_wheels()) {
    vehicle_wheels_ = new ::osi3::HostVehicleData_VehicleWheels(*from.vehicle_wheels_);
  } else {
    vehicle_wheels_ = nullptr;
  }
  if (from.has_vehicle_localization()) {
    vehicle_localization_ = new ::osi3::HostVehicleData_VehicleLocalization(*from.vehicle_localization_);
  } else {
    vehicle_localization_ = nullptr;
  }
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_host_vehicle_id()) {
    host_vehicle_id_ = new ::osi3::Identifier(*from.host_vehicle_id_);
  } else {
    host_vehicle_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.HostVehicleData)
}

void HostVehicleData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostVehicleData_osi_5fhostvehicledata_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&host_vehicle_id_) -
      reinterpret_cast<char*>(&location_)) + sizeof(host_vehicle_id_));
}

HostVehicleData::~HostVehicleData() {
  // @@protoc_insertion_point(destructor:osi3.HostVehicleData)
  SharedDtor();
}

void HostVehicleData::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete location_rmse_;
  if (this != internal_default_instance()) delete vehicle_basics_;
  if (this != internal_default_instance()) delete vehicle_powertrain_;
  if (this != internal_default_instance()) delete vehicle_brake_system_;
  if (this != internal_default_instance()) delete vehicle_steering_;
  if (this != internal_default_instance()) delete vehicle_wheels_;
  if (this != internal_default_instance()) delete vehicle_localization_;
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_id_;
}

void HostVehicleData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostVehicleData& HostVehicleData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostVehicleData_osi_5fhostvehicledata_2eproto.base);
  return *internal_default_instance();
}


void HostVehicleData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.HostVehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicle_automated_driving_function_.Clear();
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && location_rmse_ != nullptr) {
    delete location_rmse_;
  }
  location_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_basics_ != nullptr) {
    delete vehicle_basics_;
  }
  vehicle_basics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_powertrain_ != nullptr) {
    delete vehicle_powertrain_;
  }
  vehicle_powertrain_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_brake_system_ != nullptr) {
    delete vehicle_brake_system_;
  }
  vehicle_brake_system_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_steering_ != nullptr) {
    delete vehicle_steering_;
  }
  vehicle_steering_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_wheels_ != nullptr) {
    delete vehicle_wheels_;
  }
  vehicle_wheels_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_localization_ != nullptr) {
    delete vehicle_localization_;
  }
  vehicle_localization_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_vehicle_id_ != nullptr) {
    delete host_vehicle_id_;
  }
  host_vehicle_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* HostVehicleData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.BaseMoving location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseMoving location_rmse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_location_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_vehicle_basics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_vehicle_powertrain(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_vehicle_brake_system(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_vehicle_steering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_vehicle_wheels(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_vehicle_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.InterfaceVersion version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier host_vehicle_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_host_vehicle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vehicle_automated_driving_function(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool HostVehicleData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.HostVehicleData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.BaseMoving location = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving location_rmse = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_basics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_powertrain()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_brake_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_steering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_wheels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_localization()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.InterfaceVersion version = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp timestamp = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier host_vehicle_id = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vehicle_automated_driving_function()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.HostVehicleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.HostVehicleData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void HostVehicleData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.HostVehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseMoving location = 1;
  if (this->has_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::location(this), output);
  }

  // .osi3.BaseMoving location_rmse = 2;
  if (this->has_location_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::location_rmse(this), output);
  }

  // .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
  if (this->has_vehicle_basics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::vehicle_basics(this), output);
  }

  // .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
  if (this->has_vehicle_powertrain()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::vehicle_powertrain(this), output);
  }

  // .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
  if (this->has_vehicle_brake_system()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::vehicle_brake_system(this), output);
  }

  // .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
  if (this->has_vehicle_steering()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::vehicle_steering(this), output);
  }

  // .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
  if (this->has_vehicle_wheels()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::vehicle_wheels(this), output);
  }

  // .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
  if (this->has_vehicle_localization()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::vehicle_localization(this), output);
  }

  // .osi3.InterfaceVersion version = 9;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::version(this), output);
  }

  // .osi3.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::timestamp(this), output);
  }

  // .osi3.Identifier host_vehicle_id = 11;
  if (this->has_host_vehicle_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::host_vehicle_id(this), output);
  }

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_automated_driving_function_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->vehicle_automated_driving_function(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.HostVehicleData)
}

::PROTOBUF_NAMESPACE_ID::uint8* HostVehicleData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.HostVehicleData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.BaseMoving location = 1;
  if (this->has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::location(this), target);
  }

  // .osi3.BaseMoving location_rmse = 2;
  if (this->has_location_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::location_rmse(this), target);
  }

  // .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
  if (this->has_vehicle_basics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::vehicle_basics(this), target);
  }

  // .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
  if (this->has_vehicle_powertrain()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::vehicle_powertrain(this), target);
  }

  // .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
  if (this->has_vehicle_brake_system()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::vehicle_brake_system(this), target);
  }

  // .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
  if (this->has_vehicle_steering()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::vehicle_steering(this), target);
  }

  // .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
  if (this->has_vehicle_wheels()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::vehicle_wheels(this), target);
  }

  // .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
  if (this->has_vehicle_localization()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::vehicle_localization(this), target);
  }

  // .osi3.InterfaceVersion version = 9;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::version(this), target);
  }

  // .osi3.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::timestamp(this), target);
  }

  // .osi3.Identifier host_vehicle_id = 11;
  if (this->has_host_vehicle_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::host_vehicle_id(this), target);
  }

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicle_automated_driving_function_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->vehicle_automated_driving_function(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.HostVehicleData)
  return target;
}

size_t HostVehicleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.HostVehicleData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.HostVehicleData.VehicleAutomatedDrivingFunction vehicle_automated_driving_function = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicle_automated_driving_function_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vehicle_automated_driving_function(static_cast<int>(i)));
    }
  }

  // .osi3.BaseMoving location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .osi3.BaseMoving location_rmse = 2;
  if (this->has_location_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_rmse_);
  }

  // .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
  if (this->has_vehicle_basics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_basics_);
  }

  // .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
  if (this->has_vehicle_powertrain()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_powertrain_);
  }

  // .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
  if (this->has_vehicle_brake_system()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_brake_system_);
  }

  // .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
  if (this->has_vehicle_steering()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_steering_);
  }

  // .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
  if (this->has_vehicle_wheels()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_wheels_);
  }

  // .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
  if (this->has_vehicle_localization()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_localization_);
  }

  // .osi3.InterfaceVersion version = 9;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .osi3.Timestamp timestamp = 10;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .osi3.Identifier host_vehicle_id = 11;
  if (this->has_host_vehicle_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_vehicle_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostVehicleData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.HostVehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  const HostVehicleData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostVehicleData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.HostVehicleData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.HostVehicleData)
    MergeFrom(*source);
  }
}

void HostVehicleData::MergeFrom(const HostVehicleData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.HostVehicleData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicle_automated_driving_function_.MergeFrom(from.vehicle_automated_driving_function_);
  if (from.has_location()) {
    mutable_location()->::osi3::BaseMoving::MergeFrom(from.location());
  }
  if (from.has_location_rmse()) {
    mutable_location_rmse()->::osi3::BaseMoving::MergeFrom(from.location_rmse());
  }
  if (from.has_vehicle_basics()) {
    mutable_vehicle_basics()->::osi3::HostVehicleData_VehicleBasics::MergeFrom(from.vehicle_basics());
  }
  if (from.has_vehicle_powertrain()) {
    mutable_vehicle_powertrain()->::osi3::HostVehicleData_VehiclePowertrain::MergeFrom(from.vehicle_powertrain());
  }
  if (from.has_vehicle_brake_system()) {
    mutable_vehicle_brake_system()->::osi3::HostVehicleData_VehicleBrakeSystem::MergeFrom(from.vehicle_brake_system());
  }
  if (from.has_vehicle_steering()) {
    mutable_vehicle_steering()->::osi3::HostVehicleData_VehicleSteering::MergeFrom(from.vehicle_steering());
  }
  if (from.has_vehicle_wheels()) {
    mutable_vehicle_wheels()->::osi3::HostVehicleData_VehicleWheels::MergeFrom(from.vehicle_wheels());
  }
  if (from.has_vehicle_localization()) {
    mutable_vehicle_localization()->::osi3::HostVehicleData_VehicleLocalization::MergeFrom(from.vehicle_localization());
  }
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_host_vehicle_id()) {
    mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(from.host_vehicle_id());
  }
}

void HostVehicleData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.HostVehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostVehicleData::CopyFrom(const HostVehicleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.HostVehicleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostVehicleData::IsInitialized() const {
  return true;
}

void HostVehicleData::InternalSwap(HostVehicleData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vehicle_automated_driving_function_)->InternalSwap(CastToBase(&other->vehicle_automated_driving_function_));
  swap(location_, other->location_);
  swap(location_rmse_, other->location_rmse_);
  swap(vehicle_basics_, other->vehicle_basics_);
  swap(vehicle_powertrain_, other->vehicle_powertrain_);
  swap(vehicle_brake_system_, other->vehicle_brake_system_);
  swap(vehicle_steering_, other->vehicle_steering_);
  swap(vehicle_wheels_, other->vehicle_wheels_);
  swap(vehicle_localization_, other->vehicle_localization_);
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(host_vehicle_id_, other->host_vehicle_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HostVehicleData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleBasics* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleBasics >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleBasics >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehiclePowertrain_Motor* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehiclePowertrain_Motor >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehiclePowertrain_Motor >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehiclePowertrain* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehiclePowertrain >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehiclePowertrain >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleBrakeSystem* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleBrakeSystem >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleBrakeSystem >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleSteering* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleSteering >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleSteering >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleWheels_WheelData* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleWheels_WheelData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleWheels_WheelData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleWheels* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleWheels >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleWheels >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleLocalization* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleLocalization >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleLocalization >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction_DriverOverride >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction* Arena::CreateMaybeMessage< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData_VehicleAutomatedDrivingFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::HostVehicleData* Arena::CreateMaybeMessage< ::osi3::HostVehicleData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::HostVehicleData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
