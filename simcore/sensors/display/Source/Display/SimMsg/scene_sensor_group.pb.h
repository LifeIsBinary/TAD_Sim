// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene_sensor_group.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_scene_5fsensor_5fgroup_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_scene_5fsensor_5fgroup_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_scene_5fsensor_5fgroup_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_scene_5fsensor_5fgroup_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_5fsensor_5fgroup_2eproto;
namespace sim_msg {
class Sensor;
class SensorDefaultTypeInternal;
extern SensorDefaultTypeInternal _Sensor_default_instance_;
class SensorGroup;
class SensorGroupDefaultTypeInternal;
extern SensorGroupDefaultTypeInternal _SensorGroup_default_instance_;
class Sensor_Extrinsic;
class Sensor_ExtrinsicDefaultTypeInternal;
extern Sensor_ExtrinsicDefaultTypeInternal _Sensor_Extrinsic_default_instance_;
class Sensor_Intrinsic;
class Sensor_IntrinsicDefaultTypeInternal;
extern Sensor_IntrinsicDefaultTypeInternal _Sensor_Intrinsic_default_instance_;
class Sensor_Intrinsic_ParamsEntry_DoNotUse;
class Sensor_Intrinsic_ParamsEntry_DoNotUseDefaultTypeInternal;
extern Sensor_Intrinsic_ParamsEntry_DoNotUseDefaultTypeInternal _Sensor_Intrinsic_ParamsEntry_DoNotUse_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Sensor* Arena::CreateMaybeMessage<::sim_msg::Sensor>(Arena*);
template<> ::sim_msg::SensorGroup* Arena::CreateMaybeMessage<::sim_msg::SensorGroup>(Arena*);
template<> ::sim_msg::Sensor_Extrinsic* Arena::CreateMaybeMessage<::sim_msg::Sensor_Extrinsic>(Arena*);
template<> ::sim_msg::Sensor_Intrinsic* Arena::CreateMaybeMessage<::sim_msg::Sensor_Intrinsic>(Arena*);
template<> ::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse* Arena::CreateMaybeMessage<::sim_msg::Sensor_Intrinsic_ParamsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum SensorType : int {
  SENSOR_TYPE_USER_DEFINE = 0,
  SENSOR_TYPE_CAMERA = 1,
  SENSOR_TYPE_FISHEYE = 2,
  SENSOR_TYPE_SEMANTIC = 3,
  SENSOR_TYPE_DEPTH = 4,
  SENSOR_TYPE_RADAR = 5,
  SENSOR_TYPE_TRADITIONAL_LIDAR = 6,
  SENSOR_TYPE_ULTRASONIC = 7,
  SENSOR_TYPE_OBU = 8,
  SENSOR_TYPE_IMU = 9,
  SENSOR_TYPE_GPS = 10,
  SENSOR_TYPE_TRUTH = 11,
  SensorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SensorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SensorType_IsValid(int value);
constexpr SensorType SensorType_MIN = SENSOR_TYPE_USER_DEFINE;
constexpr SensorType SensorType_MAX = SENSOR_TYPE_TRUTH;
constexpr int SensorType_ARRAYSIZE = SensorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorType_descriptor();
template<typename T>
inline const std::string& SensorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SensorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SensorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SensorType_descriptor(), enum_t_value);
}
inline bool SensorType_Parse(
    const std::string& name, SensorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SensorType>(
    SensorType_descriptor(), name, value);
}
// ===================================================================

class Sensor_Extrinsic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Sensor.Extrinsic) */ {
 public:
  Sensor_Extrinsic();
  virtual ~Sensor_Extrinsic();

  Sensor_Extrinsic(const Sensor_Extrinsic& from);
  Sensor_Extrinsic(Sensor_Extrinsic&& from) noexcept
    : Sensor_Extrinsic() {
    *this = ::std::move(from);
  }

  inline Sensor_Extrinsic& operator=(const Sensor_Extrinsic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor_Extrinsic& operator=(Sensor_Extrinsic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor_Extrinsic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor_Extrinsic* internal_default_instance() {
    return reinterpret_cast<const Sensor_Extrinsic*>(
               &_Sensor_Extrinsic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Sensor_Extrinsic& a, Sensor_Extrinsic& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor_Extrinsic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor_Extrinsic* New() const final {
    return CreateMaybeMessage<Sensor_Extrinsic>(nullptr);
  }

  Sensor_Extrinsic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor_Extrinsic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor_Extrinsic& from);
  void MergeFrom(const Sensor_Extrinsic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor_Extrinsic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Sensor.Extrinsic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fsensor_5fgroup_2eproto);
    return ::descriptor_table_scene_5fsensor_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstallSlotFieldNumber = 2,
    kDeviceFieldNumber = 3,
    kIDFieldNumber = 1,
    kLocationXFieldNumber = 4,
    kLocationYFieldNumber = 5,
    kLocationZFieldNumber = 6,
    kRotationXFieldNumber = 7,
    kRotationYFieldNumber = 8,
    kRotationZFieldNumber = 9,
  };
  // string InstallSlot = 2;
  void clear_installslot();
  const std::string& installslot() const;
  void set_installslot(const std::string& value);
  void set_installslot(std::string&& value);
  void set_installslot(const char* value);
  void set_installslot(const char* value, size_t size);
  std::string* mutable_installslot();
  std::string* release_installslot();
  void set_allocated_installslot(std::string* installslot);

  // string Device = 3;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);

  // int64 ID = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double LocationX = 4;
  void clear_locationx();
  double locationx() const;
  void set_locationx(double value);

  // double LocationY = 5;
  void clear_locationy();
  double locationy() const;
  void set_locationy(double value);

  // double LocationZ = 6;
  void clear_locationz();
  double locationz() const;
  void set_locationz(double value);

  // double RotationX = 7;
  void clear_rotationx();
  double rotationx() const;
  void set_rotationx(double value);

  // double RotationY = 8;
  void clear_rotationy();
  double rotationy() const;
  void set_rotationy(double value);

  // double RotationZ = 9;
  void clear_rotationz();
  double rotationz() const;
  void set_rotationz(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Sensor.Extrinsic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr installslot_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  double locationx_;
  double locationy_;
  double locationz_;
  double rotationx_;
  double rotationy_;
  double rotationz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fsensor_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class Sensor_Intrinsic_ParamsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Sensor_Intrinsic_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Sensor_Intrinsic_ParamsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Sensor_Intrinsic_ParamsEntry_DoNotUse();
  Sensor_Intrinsic_ParamsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Sensor_Intrinsic_ParamsEntry_DoNotUse& other);
  static const Sensor_Intrinsic_ParamsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Sensor_Intrinsic_ParamsEntry_DoNotUse*>(&_Sensor_Intrinsic_ParamsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sim_msg.Sensor.Intrinsic.ParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sim_msg.Sensor.Intrinsic.ParamsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fsensor_5fgroup_2eproto);
    return ::descriptor_table_scene_5fsensor_5fgroup_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Sensor_Intrinsic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Sensor.Intrinsic) */ {
 public:
  Sensor_Intrinsic();
  virtual ~Sensor_Intrinsic();

  Sensor_Intrinsic(const Sensor_Intrinsic& from);
  Sensor_Intrinsic(Sensor_Intrinsic&& from) noexcept
    : Sensor_Intrinsic() {
    *this = ::std::move(from);
  }

  inline Sensor_Intrinsic& operator=(const Sensor_Intrinsic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor_Intrinsic& operator=(Sensor_Intrinsic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor_Intrinsic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor_Intrinsic* internal_default_instance() {
    return reinterpret_cast<const Sensor_Intrinsic*>(
               &_Sensor_Intrinsic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Sensor_Intrinsic& a, Sensor_Intrinsic& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor_Intrinsic* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor_Intrinsic* New() const final {
    return CreateMaybeMessage<Sensor_Intrinsic>(nullptr);
  }

  Sensor_Intrinsic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor_Intrinsic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor_Intrinsic& from);
  void MergeFrom(const Sensor_Intrinsic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor_Intrinsic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Sensor.Intrinsic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fsensor_5fgroup_2eproto);
    return ::descriptor_table_scene_5fsensor_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 1,
  };
  // map<string, string> params = 1;
  int params_size() const;
  void clear_params();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_params();

  // @@protoc_insertion_point(class_scope:sim_msg.Sensor.Intrinsic)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Sensor_Intrinsic_ParamsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > params_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fsensor_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class Sensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Sensor) */ {
 public:
  Sensor();
  virtual ~Sensor();

  Sensor(const Sensor& from);
  Sensor(Sensor&& from) noexcept
    : Sensor() {
    *this = ::std::move(from);
  }

  inline Sensor& operator=(const Sensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sensor& operator=(Sensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Sensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Sensor* internal_default_instance() {
    return reinterpret_cast<const Sensor*>(
               &_Sensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Sensor& a, Sensor& b) {
    a.Swap(&b);
  }
  inline void Swap(Sensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Sensor* New() const final {
    return CreateMaybeMessage<Sensor>(nullptr);
  }

  Sensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Sensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Sensor& from);
  void MergeFrom(const Sensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Sensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fsensor_5fgroup_2eproto);
    return ::descriptor_table_scene_5fsensor_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Sensor_Extrinsic Extrinsic;
  typedef Sensor_Intrinsic Intrinsic;

  // accessors -------------------------------------------------------

  enum : int {
    kExtrinsicFieldNumber = 2,
    kIntrinsicFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // .sim_msg.Sensor.Extrinsic extrinsic = 2;
  bool has_extrinsic() const;
  void clear_extrinsic();
  const ::sim_msg::Sensor_Extrinsic& extrinsic() const;
  ::sim_msg::Sensor_Extrinsic* release_extrinsic();
  ::sim_msg::Sensor_Extrinsic* mutable_extrinsic();
  void set_allocated_extrinsic(::sim_msg::Sensor_Extrinsic* extrinsic);

  // .sim_msg.Sensor.Intrinsic intrinsic = 3;
  bool has_intrinsic() const;
  void clear_intrinsic();
  const ::sim_msg::Sensor_Intrinsic& intrinsic() const;
  ::sim_msg::Sensor_Intrinsic* release_intrinsic();
  ::sim_msg::Sensor_Intrinsic* mutable_intrinsic();
  void set_allocated_intrinsic(::sim_msg::Sensor_Intrinsic* intrinsic);

  // .sim_msg.SensorType type = 1;
  void clear_type();
  ::sim_msg::SensorType type() const;
  void set_type(::sim_msg::SensorType value);

  // @@protoc_insertion_point(class_scope:sim_msg.Sensor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Sensor_Extrinsic* extrinsic_;
  ::sim_msg::Sensor_Intrinsic* intrinsic_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fsensor_5fgroup_2eproto;
};
// -------------------------------------------------------------------

class SensorGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.SensorGroup) */ {
 public:
  SensorGroup();
  virtual ~SensorGroup();

  SensorGroup(const SensorGroup& from);
  SensorGroup(SensorGroup&& from) noexcept
    : SensorGroup() {
    *this = ::std::move(from);
  }

  inline SensorGroup& operator=(const SensorGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorGroup& operator=(SensorGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorGroup* internal_default_instance() {
    return reinterpret_cast<const SensorGroup*>(
               &_SensorGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SensorGroup& a, SensorGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorGroup* New() const final {
    return CreateMaybeMessage<SensorGroup>(nullptr);
  }

  SensorGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorGroup& from);
  void MergeFrom(const SensorGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.SensorGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_scene_5fsensor_5fgroup_2eproto);
    return ::descriptor_table_scene_5fsensor_5fgroup_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .sim_msg.Sensor sensors = 2;
  int sensors_size() const;
  void clear_sensors();
  ::sim_msg::Sensor* mutable_sensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Sensor >*
      mutable_sensors();
  const ::sim_msg::Sensor& sensors(int index) const;
  ::sim_msg::Sensor* add_sensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Sensor >&
      sensors() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:sim_msg.SensorGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Sensor > sensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_scene_5fsensor_5fgroup_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Sensor_Extrinsic

// int64 ID = 1;
inline void Sensor_Extrinsic::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Sensor_Extrinsic::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.ID)
  return id_;
}
inline void Sensor_Extrinsic::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.ID)
}

// string InstallSlot = 2;
inline void Sensor_Extrinsic::clear_installslot() {
  installslot_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sensor_Extrinsic::installslot() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.InstallSlot)
  return installslot_.GetNoArena();
}
inline void Sensor_Extrinsic::set_installslot(const std::string& value) {
  
  installslot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.InstallSlot)
}
inline void Sensor_Extrinsic::set_installslot(std::string&& value) {
  
  installslot_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Sensor.Extrinsic.InstallSlot)
}
inline void Sensor_Extrinsic::set_installslot(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  installslot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Sensor.Extrinsic.InstallSlot)
}
inline void Sensor_Extrinsic::set_installslot(const char* value, size_t size) {
  
  installslot_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Sensor.Extrinsic.InstallSlot)
}
inline std::string* Sensor_Extrinsic::mutable_installslot() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Sensor.Extrinsic.InstallSlot)
  return installslot_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sensor_Extrinsic::release_installslot() {
  // @@protoc_insertion_point(field_release:sim_msg.Sensor.Extrinsic.InstallSlot)
  
  return installslot_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor_Extrinsic::set_allocated_installslot(std::string* installslot) {
  if (installslot != nullptr) {
    
  } else {
    
  }
  installslot_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), installslot);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Sensor.Extrinsic.InstallSlot)
}

// string Device = 3;
inline void Sensor_Extrinsic::clear_device() {
  device_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Sensor_Extrinsic::device() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.Device)
  return device_.GetNoArena();
}
inline void Sensor_Extrinsic::set_device(const std::string& value) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.Device)
}
inline void Sensor_Extrinsic::set_device(std::string&& value) {
  
  device_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Sensor.Extrinsic.Device)
}
inline void Sensor_Extrinsic::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Sensor.Extrinsic.Device)
}
inline void Sensor_Extrinsic::set_device(const char* value, size_t size) {
  
  device_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Sensor.Extrinsic.Device)
}
inline std::string* Sensor_Extrinsic::mutable_device() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Sensor.Extrinsic.Device)
  return device_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Sensor_Extrinsic::release_device() {
  // @@protoc_insertion_point(field_release:sim_msg.Sensor.Extrinsic.Device)
  
  return device_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Sensor_Extrinsic::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Sensor.Extrinsic.Device)
}

// double LocationX = 4;
inline void Sensor_Extrinsic::clear_locationx() {
  locationx_ = 0;
}
inline double Sensor_Extrinsic::locationx() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.LocationX)
  return locationx_;
}
inline void Sensor_Extrinsic::set_locationx(double value) {
  
  locationx_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.LocationX)
}

// double LocationY = 5;
inline void Sensor_Extrinsic::clear_locationy() {
  locationy_ = 0;
}
inline double Sensor_Extrinsic::locationy() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.LocationY)
  return locationy_;
}
inline void Sensor_Extrinsic::set_locationy(double value) {
  
  locationy_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.LocationY)
}

// double LocationZ = 6;
inline void Sensor_Extrinsic::clear_locationz() {
  locationz_ = 0;
}
inline double Sensor_Extrinsic::locationz() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.LocationZ)
  return locationz_;
}
inline void Sensor_Extrinsic::set_locationz(double value) {
  
  locationz_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.LocationZ)
}

// double RotationX = 7;
inline void Sensor_Extrinsic::clear_rotationx() {
  rotationx_ = 0;
}
inline double Sensor_Extrinsic::rotationx() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.RotationX)
  return rotationx_;
}
inline void Sensor_Extrinsic::set_rotationx(double value) {
  
  rotationx_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.RotationX)
}

// double RotationY = 8;
inline void Sensor_Extrinsic::clear_rotationy() {
  rotationy_ = 0;
}
inline double Sensor_Extrinsic::rotationy() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.RotationY)
  return rotationy_;
}
inline void Sensor_Extrinsic::set_rotationy(double value) {
  
  rotationy_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.RotationY)
}

// double RotationZ = 9;
inline void Sensor_Extrinsic::clear_rotationz() {
  rotationz_ = 0;
}
inline double Sensor_Extrinsic::rotationz() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.Extrinsic.RotationZ)
  return rotationz_;
}
inline void Sensor_Extrinsic::set_rotationz(double value) {
  
  rotationz_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.Extrinsic.RotationZ)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Sensor_Intrinsic

// map<string, string> params = 1;
inline int Sensor_Intrinsic::params_size() const {
  return params_.size();
}
inline void Sensor_Intrinsic::clear_params() {
  params_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Sensor_Intrinsic::params() const {
  // @@protoc_insertion_point(field_map:sim_msg.Sensor.Intrinsic.params)
  return params_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Sensor_Intrinsic::mutable_params() {
  // @@protoc_insertion_point(field_mutable_map:sim_msg.Sensor.Intrinsic.params)
  return params_.MutableMap();
}

// -------------------------------------------------------------------

// Sensor

// .sim_msg.SensorType type = 1;
inline void Sensor::clear_type() {
  type_ = 0;
}
inline ::sim_msg::SensorType Sensor::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.type)
  return static_cast< ::sim_msg::SensorType >(type_);
}
inline void Sensor::set_type(::sim_msg::SensorType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Sensor.type)
}

// .sim_msg.Sensor.Extrinsic extrinsic = 2;
inline bool Sensor::has_extrinsic() const {
  return this != internal_default_instance() && extrinsic_ != nullptr;
}
inline void Sensor::clear_extrinsic() {
  if (GetArenaNoVirtual() == nullptr && extrinsic_ != nullptr) {
    delete extrinsic_;
  }
  extrinsic_ = nullptr;
}
inline const ::sim_msg::Sensor_Extrinsic& Sensor::extrinsic() const {
  const ::sim_msg::Sensor_Extrinsic* p = extrinsic_;
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.extrinsic)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Sensor_Extrinsic*>(
      &::sim_msg::_Sensor_Extrinsic_default_instance_);
}
inline ::sim_msg::Sensor_Extrinsic* Sensor::release_extrinsic() {
  // @@protoc_insertion_point(field_release:sim_msg.Sensor.extrinsic)
  
  ::sim_msg::Sensor_Extrinsic* temp = extrinsic_;
  extrinsic_ = nullptr;
  return temp;
}
inline ::sim_msg::Sensor_Extrinsic* Sensor::mutable_extrinsic() {
  
  if (extrinsic_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Sensor_Extrinsic>(GetArenaNoVirtual());
    extrinsic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Sensor.extrinsic)
  return extrinsic_;
}
inline void Sensor::set_allocated_extrinsic(::sim_msg::Sensor_Extrinsic* extrinsic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete extrinsic_;
  }
  if (extrinsic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extrinsic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extrinsic, submessage_arena);
    }
    
  } else {
    
  }
  extrinsic_ = extrinsic;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Sensor.extrinsic)
}

// .sim_msg.Sensor.Intrinsic intrinsic = 3;
inline bool Sensor::has_intrinsic() const {
  return this != internal_default_instance() && intrinsic_ != nullptr;
}
inline void Sensor::clear_intrinsic() {
  if (GetArenaNoVirtual() == nullptr && intrinsic_ != nullptr) {
    delete intrinsic_;
  }
  intrinsic_ = nullptr;
}
inline const ::sim_msg::Sensor_Intrinsic& Sensor::intrinsic() const {
  const ::sim_msg::Sensor_Intrinsic* p = intrinsic_;
  // @@protoc_insertion_point(field_get:sim_msg.Sensor.intrinsic)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Sensor_Intrinsic*>(
      &::sim_msg::_Sensor_Intrinsic_default_instance_);
}
inline ::sim_msg::Sensor_Intrinsic* Sensor::release_intrinsic() {
  // @@protoc_insertion_point(field_release:sim_msg.Sensor.intrinsic)
  
  ::sim_msg::Sensor_Intrinsic* temp = intrinsic_;
  intrinsic_ = nullptr;
  return temp;
}
inline ::sim_msg::Sensor_Intrinsic* Sensor::mutable_intrinsic() {
  
  if (intrinsic_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Sensor_Intrinsic>(GetArenaNoVirtual());
    intrinsic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Sensor.intrinsic)
  return intrinsic_;
}
inline void Sensor::set_allocated_intrinsic(::sim_msg::Sensor_Intrinsic* intrinsic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete intrinsic_;
  }
  if (intrinsic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      intrinsic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsic, submessage_arena);
    }
    
  } else {
    
  }
  intrinsic_ = intrinsic;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Sensor.intrinsic)
}

// -------------------------------------------------------------------

// SensorGroup

// string name = 1;
inline void SensorGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SensorGroup::name() const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorGroup.name)
  return name_.GetNoArena();
}
inline void SensorGroup::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.SensorGroup.name)
}
inline void SensorGroup::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.SensorGroup.name)
}
inline void SensorGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.SensorGroup.name)
}
inline void SensorGroup::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.SensorGroup.name)
}
inline std::string* SensorGroup::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.SensorGroup.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SensorGroup::release_name() {
  // @@protoc_insertion_point(field_release:sim_msg.SensorGroup.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SensorGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.SensorGroup.name)
}

// repeated .sim_msg.Sensor sensors = 2;
inline int SensorGroup::sensors_size() const {
  return sensors_.size();
}
inline void SensorGroup::clear_sensors() {
  sensors_.Clear();
}
inline ::sim_msg::Sensor* SensorGroup::mutable_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.SensorGroup.sensors)
  return sensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Sensor >*
SensorGroup::mutable_sensors() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.SensorGroup.sensors)
  return &sensors_;
}
inline const ::sim_msg::Sensor& SensorGroup::sensors(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.SensorGroup.sensors)
  return sensors_.Get(index);
}
inline ::sim_msg::Sensor* SensorGroup::add_sensors() {
  // @@protoc_insertion_point(field_add:sim_msg.SensorGroup.sensors)
  return sensors_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Sensor >&
SensorGroup::sensors() const {
  // @@protoc_insertion_point(field_list:sim_msg.SensorGroup.sensors)
  return sensors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::SensorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::SensorType>() {
  return ::sim_msg::SensorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_scene_5fsensor_5fgroup_2eproto
