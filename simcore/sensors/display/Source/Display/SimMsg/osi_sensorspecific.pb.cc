// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorspecific.proto
#pragma warning (disable : 4125)

#include "osi_sensorspecific.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorspecific_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto;
namespace osi3 {
class RadarSpecificObjectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarSpecificObjectData> _instance;
} _RadarSpecificObjectData_default_instance_;
class LidarSpecificObjectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarSpecificObjectData> _instance;
} _LidarSpecificObjectData_default_instance_;
class CameraSpecificObjectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraSpecificObjectData> _instance;
} _CameraSpecificObjectData_default_instance_;
class UltrasonicSpecificObjectData_SignalwayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicSpecificObjectData_Signalway> _instance;
} _UltrasonicSpecificObjectData_Signalway_default_instance_;
class UltrasonicSpecificObjectDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicSpecificObjectData> _instance;
} _UltrasonicSpecificObjectData_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_CameraSpecificObjectData_osi_5fsensorspecific_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_CameraSpecificObjectData_default_instance_;
    new (ptr) ::osi3::CameraSpecificObjectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraSpecificObjectData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraSpecificObjectData_osi_5fsensorspecific_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CameraSpecificObjectData_osi_5fsensorspecific_2eproto}, {}};

static void InitDefaultsscc_info_LidarSpecificObjectData_osi_5fsensorspecific_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LidarSpecificObjectData_default_instance_;
    new (ptr) ::osi3::LidarSpecificObjectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LidarSpecificObjectData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarSpecificObjectData_osi_5fsensorspecific_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LidarSpecificObjectData_osi_5fsensorspecific_2eproto}, {}};

static void InitDefaultsscc_info_RadarSpecificObjectData_osi_5fsensorspecific_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_RadarSpecificObjectData_default_instance_;
    new (ptr) ::osi3::RadarSpecificObjectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarSpecificObjectData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarSpecificObjectData_osi_5fsensorspecific_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RadarSpecificObjectData_osi_5fsensorspecific_2eproto}, {}};

static void InitDefaultsscc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_UltrasonicSpecificObjectData_default_instance_;
    new (ptr) ::osi3::UltrasonicSpecificObjectData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicSpecificObjectData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto}, {
      &scc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto.base,}};

static void InitDefaultsscc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_;
    new (ptr) ::osi3::UltrasonicSpecificObjectData_Signalway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicSpecificObjectData_Signalway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fsensorspecific_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fsensorspecific_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fsensorspecific_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fsensorspecific_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSpecificObjectData, rcs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData_Signalway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData_Signalway, sender_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData_Signalway, receiver_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, maximum_measurement_distance_sensor_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, trilateration_status_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, trend_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSpecificObjectData, signalway_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::RadarSpecificObjectData)},
  { 6, -1, sizeof(::osi3::LidarSpecificObjectData)},
  { 11, -1, sizeof(::osi3::CameraSpecificObjectData)},
  { 16, -1, sizeof(::osi3::UltrasonicSpecificObjectData_Signalway)},
  { 23, -1, sizeof(::osi3::UltrasonicSpecificObjectData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RadarSpecificObjectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LidarSpecificObjectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_CameraSpecificObjectData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicSpecificObjectData_default_instance_),
};

const char descriptor_table_protodef_osi_5fsensorspecific_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030osi_sensorspecific.proto\022\004osi3\032\020osi_co"
  "mmon.proto\"&\n\027RadarSpecificObjectData\022\013\n"
  "\003rcs\030\001 \001(\001\"\031\n\027LidarSpecificObjectData\"\032\n"
  "\030CameraSpecificObjectData\"\303\005\n\034Ultrasonic"
  "SpecificObjectData\022+\n#maximum_measuremen"
  "t_distance_sensor\030\001 \001(\001\022\023\n\013probability\030\002"
  " \001(\001\022T\n\024trilateration_status\030\003 \001(\01626.osi"
  "3.UltrasonicSpecificObjectData.Trilatera"
  "tionStatus\0227\n\005trend\030\004 \001(\0162(.osi3.Ultraso"
  "nicSpecificObjectData.Trend\022\?\n\tsignalway"
  "\030\005 \003(\0132,.osi3.UltrasonicSpecificObjectDa"
  "ta.Signalway\032W\n\tSignalway\022#\n\tsender_id\030\001"
  " \001(\0132\020.osi3.Identifier\022%\n\013receiver_id\030\002 "
  "\001(\0132\020.osi3.Identifier\"\251\001\n\023TrilaterationS"
  "tatus\022 \n\034TRILATERATION_STATUS_UNKNOWN\020\000\022"
  "\036\n\032TRILATERATION_STATUS_OTHER\020\001\022)\n%TRILA"
  "TERATION_STATUS_NOT_TRILATERATED\020\002\022%\n!TR"
  "ILATERATION_STATUS_TRILATERATED\020\003\"\213\001\n\005Tr"
  "end\022\021\n\rTREND_UNKNOWN\020\000\022\017\n\013TREND_OTHER\020\001\022"
  "\036\n\032TREND_CONSTANT_APPROACHING\020\002\022\022\n\016TREND"
  "_CONSTANT\020\003\022\025\n\021TREND_APPROACHING\020\004\022\023\n\017TR"
  "END_DEPARTING\020\005B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fsensorspecific_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fsensorspecific_2eproto_sccs[5] = {
  &scc_info_CameraSpecificObjectData_osi_5fsensorspecific_2eproto.base,
  &scc_info_LidarSpecificObjectData_osi_5fsensorspecific_2eproto.base,
  &scc_info_RadarSpecificObjectData_osi_5fsensorspecific_2eproto.base,
  &scc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto.base,
  &scc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fsensorspecific_2eproto_once;
static bool descriptor_table_osi_5fsensorspecific_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fsensorspecific_2eproto = {
  &descriptor_table_osi_5fsensorspecific_2eproto_initialized, descriptor_table_protodef_osi_5fsensorspecific_2eproto, "osi_sensorspecific.proto", 867,
  &descriptor_table_osi_5fsensorspecific_2eproto_once, descriptor_table_osi_5fsensorspecific_2eproto_sccs, descriptor_table_osi_5fsensorspecific_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_osi_5fsensorspecific_2eproto::offsets,
  file_level_metadata_osi_5fsensorspecific_2eproto, 5, file_level_enum_descriptors_osi_5fsensorspecific_2eproto, file_level_service_descriptors_osi_5fsensorspecific_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fsensorspecific_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fsensorspecific_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicSpecificObjectData_TrilaterationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fsensorspecific_2eproto);
  return file_level_enum_descriptors_osi_5fsensorspecific_2eproto[0];
}
bool UltrasonicSpecificObjectData_TrilaterationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_UNKNOWN;
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_OTHER;
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_NOT_TRILATERATED;
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TRILATERATION_STATUS_TRILATERATED;
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TrilaterationStatus_MIN;
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::TrilaterationStatus_MAX;
constexpr int UltrasonicSpecificObjectData::TrilaterationStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicSpecificObjectData_Trend_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fsensorspecific_2eproto);
  return file_level_enum_descriptors_osi_5fsensorspecific_2eproto[1];
}
bool UltrasonicSpecificObjectData_Trend_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_UNKNOWN;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_OTHER;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_CONSTANT_APPROACHING;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_CONSTANT;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_APPROACHING;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::TREND_DEPARTING;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::Trend_MIN;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::Trend_MAX;
constexpr int UltrasonicSpecificObjectData::Trend_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void RadarSpecificObjectData::InitAsDefaultInstance() {
}
class RadarSpecificObjectData::_Internal {
 public:
};

RadarSpecificObjectData::RadarSpecificObjectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSpecificObjectData)
}
RadarSpecificObjectData::RadarSpecificObjectData(const RadarSpecificObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rcs_ = from.rcs_;
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSpecificObjectData)
}

void RadarSpecificObjectData::SharedCtor() {
  rcs_ = 0;
}

RadarSpecificObjectData::~RadarSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.RadarSpecificObjectData)
  SharedDtor();
}

void RadarSpecificObjectData::SharedDtor() {
}

void RadarSpecificObjectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarSpecificObjectData& RadarSpecificObjectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarSpecificObjectData_osi_5fsensorspecific_2eproto.base);
  return *internal_default_instance();
}


void RadarSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rcs_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RadarSpecificObjectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double rcs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RadarSpecificObjectData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSpecificObjectData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double rcs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSpecificObjectData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RadarSpecificObjectData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rcs = 1;
  if (!(this->rcs() <= 0 && this->rcs() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->rcs(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSpecificObjectData)
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double rcs = 1;
  if (!(this->rcs() <= 0 && this->rcs() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->rcs(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSpecificObjectData)
  return target;
}

size_t RadarSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSpecificObjectData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double rcs = 1;
  if (!(this->rcs() <= 0 && this->rcs() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarSpecificObjectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarSpecificObjectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarSpecificObjectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSpecificObjectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSpecificObjectData)
    MergeFrom(*source);
  }
}

void RadarSpecificObjectData::MergeFrom(const RadarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.rcs() <= 0 && from.rcs() >= 0)) {
    set_rcs(from.rcs());
  }
}

void RadarSpecificObjectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSpecificObjectData::CopyFrom(const RadarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSpecificObjectData::IsInitialized() const {
  return true;
}

void RadarSpecificObjectData::InternalSwap(RadarSpecificObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rcs_, other->rcs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSpecificObjectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LidarSpecificObjectData::InitAsDefaultInstance() {
}
class LidarSpecificObjectData::_Internal {
 public:
};

LidarSpecificObjectData::LidarSpecificObjectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarSpecificObjectData)
}
LidarSpecificObjectData::LidarSpecificObjectData(const LidarSpecificObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSpecificObjectData)
}

void LidarSpecificObjectData::SharedCtor() {
}

LidarSpecificObjectData::~LidarSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.LidarSpecificObjectData)
  SharedDtor();
}

void LidarSpecificObjectData::SharedDtor() {
}

void LidarSpecificObjectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarSpecificObjectData& LidarSpecificObjectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarSpecificObjectData_osi_5fsensorspecific_2eproto.base);
  return *internal_default_instance();
}


void LidarSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LidarSpecificObjectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LidarSpecificObjectData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarSpecificObjectData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarSpecificObjectData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LidarSpecificObjectData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarSpecificObjectData)
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSpecificObjectData)
  return target;
}

size_t LidarSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSpecificObjectData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarSpecificObjectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarSpecificObjectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarSpecificObjectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarSpecificObjectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarSpecificObjectData)
    MergeFrom(*source);
  }
}

void LidarSpecificObjectData::MergeFrom(const LidarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LidarSpecificObjectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarSpecificObjectData::CopyFrom(const LidarSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSpecificObjectData::IsInitialized() const {
  return true;
}

void LidarSpecificObjectData::InternalSwap(LidarSpecificObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarSpecificObjectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraSpecificObjectData::InitAsDefaultInstance() {
}
class CameraSpecificObjectData::_Internal {
 public:
};

CameraSpecificObjectData::CameraSpecificObjectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraSpecificObjectData)
}
CameraSpecificObjectData::CameraSpecificObjectData(const CameraSpecificObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.CameraSpecificObjectData)
}

void CameraSpecificObjectData::SharedCtor() {
}

CameraSpecificObjectData::~CameraSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.CameraSpecificObjectData)
  SharedDtor();
}

void CameraSpecificObjectData::SharedDtor() {
}

void CameraSpecificObjectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraSpecificObjectData& CameraSpecificObjectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraSpecificObjectData_osi_5fsensorspecific_2eproto.base);
  return *internal_default_instance();
}


void CameraSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraSpecificObjectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraSpecificObjectData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraSpecificObjectData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraSpecificObjectData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraSpecificObjectData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraSpecificObjectData)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraSpecificObjectData)
  return target;
}

size_t CameraSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraSpecificObjectData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraSpecificObjectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSpecificObjectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraSpecificObjectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraSpecificObjectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraSpecificObjectData)
    MergeFrom(*source);
  }
}

void CameraSpecificObjectData::MergeFrom(const CameraSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CameraSpecificObjectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSpecificObjectData::CopyFrom(const CameraSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSpecificObjectData::IsInitialized() const {
  return true;
}

void CameraSpecificObjectData::InternalSwap(CameraSpecificObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraSpecificObjectData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicSpecificObjectData_Signalway::InitAsDefaultInstance() {
  ::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_._instance.get_mutable()->sender_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_UltrasonicSpecificObjectData_Signalway_default_instance_._instance.get_mutable()->receiver_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class UltrasonicSpecificObjectData_Signalway::_Internal {
 public:
  static const ::osi3::Identifier& sender_id(const UltrasonicSpecificObjectData_Signalway* msg);
  static const ::osi3::Identifier& receiver_id(const UltrasonicSpecificObjectData_Signalway* msg);
};

const ::osi3::Identifier&
UltrasonicSpecificObjectData_Signalway::_Internal::sender_id(const UltrasonicSpecificObjectData_Signalway* msg) {
  return *msg->sender_id_;
}
const ::osi3::Identifier&
UltrasonicSpecificObjectData_Signalway::_Internal::receiver_id(const UltrasonicSpecificObjectData_Signalway* msg) {
  return *msg->receiver_id_;
}
void UltrasonicSpecificObjectData_Signalway::clear_sender_id() {
  if (GetArenaNoVirtual() == nullptr && sender_id_ != nullptr) {
    delete sender_id_;
  }
  sender_id_ = nullptr;
}
void UltrasonicSpecificObjectData_Signalway::clear_receiver_id() {
  if (GetArenaNoVirtual() == nullptr && receiver_id_ != nullptr) {
    delete receiver_id_;
  }
  receiver_id_ = nullptr;
}
UltrasonicSpecificObjectData_Signalway::UltrasonicSpecificObjectData_Signalway()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicSpecificObjectData.Signalway)
}
UltrasonicSpecificObjectData_Signalway::UltrasonicSpecificObjectData_Signalway(const UltrasonicSpecificObjectData_Signalway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sender_id()) {
    sender_id_ = new ::osi3::Identifier(*from.sender_id_);
  } else {
    sender_id_ = nullptr;
  }
  if (from.has_receiver_id()) {
    receiver_id_ = new ::osi3::Identifier(*from.receiver_id_);
  } else {
    receiver_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSpecificObjectData.Signalway)
}

void UltrasonicSpecificObjectData_Signalway::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto.base);
  ::memset(&sender_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_id_) -
      reinterpret_cast<char*>(&sender_id_)) + sizeof(receiver_id_));
}

UltrasonicSpecificObjectData_Signalway::~UltrasonicSpecificObjectData_Signalway() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSpecificObjectData.Signalway)
  SharedDtor();
}

void UltrasonicSpecificObjectData_Signalway::SharedDtor() {
  if (this != internal_default_instance()) delete sender_id_;
  if (this != internal_default_instance()) delete receiver_id_;
}

void UltrasonicSpecificObjectData_Signalway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicSpecificObjectData_Signalway& UltrasonicSpecificObjectData_Signalway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicSpecificObjectData_Signalway_osi_5fsensorspecific_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicSpecificObjectData_Signalway::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSpecificObjectData.Signalway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sender_id_ != nullptr) {
    delete sender_id_;
  }
  sender_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && receiver_id_ != nullptr) {
    delete receiver_id_;
  }
  receiver_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UltrasonicSpecificObjectData_Signalway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier sender_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sender_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_receiver_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UltrasonicSpecificObjectData_Signalway::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicSpecificObjectData.Signalway)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier sender_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sender_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier receiver_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicSpecificObjectData.Signalway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicSpecificObjectData.Signalway)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UltrasonicSpecificObjectData_Signalway::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicSpecificObjectData.Signalway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sender_id = 1;
  if (this->has_sender_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sender_id(this), output);
  }

  // .osi3.Identifier receiver_id = 2;
  if (this->has_receiver_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::receiver_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicSpecificObjectData.Signalway)
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicSpecificObjectData_Signalway::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSpecificObjectData.Signalway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sender_id = 1;
  if (this->has_sender_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sender_id(this), target);
  }

  // .osi3.Identifier receiver_id = 2;
  if (this->has_receiver_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::receiver_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSpecificObjectData.Signalway)
  return target;
}

size_t UltrasonicSpecificObjectData_Signalway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSpecificObjectData.Signalway)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier sender_id = 1;
  if (this->has_sender_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_id_);
  }

  // .osi3.Identifier receiver_id = 2;
  if (this->has_receiver_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicSpecificObjectData_Signalway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicSpecificObjectData_Signalway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicSpecificObjectData_Signalway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicSpecificObjectData.Signalway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicSpecificObjectData.Signalway)
    MergeFrom(*source);
  }
}

void UltrasonicSpecificObjectData_Signalway::MergeFrom(const UltrasonicSpecificObjectData_Signalway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sender_id()) {
    mutable_sender_id()->::osi3::Identifier::MergeFrom(from.sender_id());
  }
  if (from.has_receiver_id()) {
    mutable_receiver_id()->::osi3::Identifier::MergeFrom(from.receiver_id());
  }
}

void UltrasonicSpecificObjectData_Signalway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicSpecificObjectData_Signalway::CopyFrom(const UltrasonicSpecificObjectData_Signalway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSpecificObjectData.Signalway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSpecificObjectData_Signalway::IsInitialized() const {
  return true;
}

void UltrasonicSpecificObjectData_Signalway::InternalSwap(UltrasonicSpecificObjectData_Signalway* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sender_id_, other->sender_id_);
  swap(receiver_id_, other->receiver_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicSpecificObjectData_Signalway::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicSpecificObjectData::InitAsDefaultInstance() {
}
class UltrasonicSpecificObjectData::_Internal {
 public:
};

UltrasonicSpecificObjectData::UltrasonicSpecificObjectData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicSpecificObjectData)
}
UltrasonicSpecificObjectData::UltrasonicSpecificObjectData(const UltrasonicSpecificObjectData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      signalway_(from.signalway_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&maximum_measurement_distance_sensor_, &from.maximum_measurement_distance_sensor_,
    static_cast<size_t>(reinterpret_cast<char*>(&trend_) -
    reinterpret_cast<char*>(&maximum_measurement_distance_sensor_)) + sizeof(trend_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSpecificObjectData)
}

void UltrasonicSpecificObjectData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto.base);
  ::memset(&maximum_measurement_distance_sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trend_) -
      reinterpret_cast<char*>(&maximum_measurement_distance_sensor_)) + sizeof(trend_));
}

UltrasonicSpecificObjectData::~UltrasonicSpecificObjectData() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSpecificObjectData)
  SharedDtor();
}

void UltrasonicSpecificObjectData::SharedDtor() {
}

void UltrasonicSpecificObjectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicSpecificObjectData& UltrasonicSpecificObjectData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicSpecificObjectData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalway_.Clear();
  ::memset(&maximum_measurement_distance_sensor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trend_) -
      reinterpret_cast<char*>(&maximum_measurement_distance_sensor_)) + sizeof(trend_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UltrasonicSpecificObjectData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double maximum_measurement_distance_sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          maximum_measurement_distance_sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double probability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_trilateration_status(static_cast<::osi3::UltrasonicSpecificObjectData_TrilaterationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_trend(static_cast<::osi3::UltrasonicSpecificObjectData_Trend>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_signalway(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UltrasonicSpecificObjectData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicSpecificObjectData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double maximum_measurement_distance_sensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maximum_measurement_distance_sensor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double probability = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trilateration_status(static_cast< ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trend(static_cast< ::osi3::UltrasonicSpecificObjectData_Trend >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_signalway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicSpecificObjectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicSpecificObjectData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UltrasonicSpecificObjectData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double maximum_measurement_distance_sensor = 1;
  if (!(this->maximum_measurement_distance_sensor() <= 0 && this->maximum_measurement_distance_sensor() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->maximum_measurement_distance_sensor(), output);
  }

  // double probability = 2;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->probability(), output);
  }

  // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
  if (this->trilateration_status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->trilateration_status(), output);
  }

  // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
  if (this->trend() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->trend(), output);
  }

  // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalway_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->signalway(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicSpecificObjectData)
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicSpecificObjectData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSpecificObjectData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double maximum_measurement_distance_sensor = 1;
  if (!(this->maximum_measurement_distance_sensor() <= 0 && this->maximum_measurement_distance_sensor() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->maximum_measurement_distance_sensor(), target);
  }

  // double probability = 2;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->probability(), target);
  }

  // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
  if (this->trilateration_status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->trilateration_status(), target);
  }

  // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
  if (this->trend() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->trend(), target);
  }

  // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->signalway_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->signalway(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSpecificObjectData)
  return target;
}

size_t UltrasonicSpecificObjectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSpecificObjectData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->signalway_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->signalway(static_cast<int>(i)));
    }
  }

  // double maximum_measurement_distance_sensor = 1;
  if (!(this->maximum_measurement_distance_sensor() <= 0 && this->maximum_measurement_distance_sensor() >= 0)) {
    total_size += 1 + 8;
  }

  // double probability = 2;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
  if (this->trilateration_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trilateration_status());
  }

  // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
  if (this->trend() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trend());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicSpecificObjectData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicSpecificObjectData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicSpecificObjectData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicSpecificObjectData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicSpecificObjectData)
    MergeFrom(*source);
  }
}

void UltrasonicSpecificObjectData::MergeFrom(const UltrasonicSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSpecificObjectData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  signalway_.MergeFrom(from.signalway_);
  if (!(from.maximum_measurement_distance_sensor() <= 0 && from.maximum_measurement_distance_sensor() >= 0)) {
    set_maximum_measurement_distance_sensor(from.maximum_measurement_distance_sensor());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
  if (from.trilateration_status() != 0) {
    set_trilateration_status(from.trilateration_status());
  }
  if (from.trend() != 0) {
    set_trend(from.trend());
  }
}

void UltrasonicSpecificObjectData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicSpecificObjectData::CopyFrom(const UltrasonicSpecificObjectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSpecificObjectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSpecificObjectData::IsInitialized() const {
  return true;
}

void UltrasonicSpecificObjectData::InternalSwap(UltrasonicSpecificObjectData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&signalway_)->InternalSwap(CastToBase(&other->signalway_));
  swap(maximum_measurement_distance_sensor_, other->maximum_measurement_distance_sensor_);
  swap(probability_, other->probability_);
  swap(trilateration_status_, other->trilateration_status_);
  swap(trend_, other->trend_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicSpecificObjectData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::RadarSpecificObjectData* Arena::CreateMaybeMessage< ::osi3::RadarSpecificObjectData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::RadarSpecificObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LidarSpecificObjectData* Arena::CreateMaybeMessage< ::osi3::LidarSpecificObjectData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LidarSpecificObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraSpecificObjectData* Arena::CreateMaybeMessage< ::osi3::CameraSpecificObjectData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::CameraSpecificObjectData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicSpecificObjectData_Signalway* Arena::CreateMaybeMessage< ::osi3::UltrasonicSpecificObjectData_Signalway >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::UltrasonicSpecificObjectData_Signalway >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicSpecificObjectData* Arena::CreateMaybeMessage< ::osi3::UltrasonicSpecificObjectData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::UltrasonicSpecificObjectData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
