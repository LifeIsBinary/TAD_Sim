// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_geometry.proto
#pragma warning (disable : 4125)
#include "vehicle_geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleGeometory_VehicleGeometoryScalar_vehicle_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleGeometory_WheelFour_vehicle_5fgeometry_2eproto;
namespace sim_msg {
class VehicleGeometory_VehicleGeometoryScalarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleGeometory_VehicleGeometoryScalar> _instance;
} _VehicleGeometory_VehicleGeometoryScalar_default_instance_;
class VehicleGeometory_PointInVehicleCoordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleGeometory_PointInVehicleCoord> _instance;
} _VehicleGeometory_PointInVehicleCoord_default_instance_;
class VehicleGeometory_WheelFourDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleGeometory_WheelFour> _instance;
} _VehicleGeometory_WheelFour_default_instance_;
class VehicleGeometoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleGeometory> _instance;
} _VehicleGeometory_default_instance_;
class VehicleGeometoryListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleGeometoryList> _instance;
} _VehicleGeometoryList_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_VehicleGeometory_vehicle_5fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_VehicleGeometory_default_instance_;
    new (ptr) ::sim_msg::VehicleGeometory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::VehicleGeometory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_VehicleGeometory_vehicle_5fgeometry_2eproto}, {
      &scc_info_VehicleGeometory_VehicleGeometoryScalar_vehicle_5fgeometry_2eproto.base,
      &scc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto.base,
      &scc_info_VehicleGeometory_WheelFour_vehicle_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_;
    new (ptr) ::sim_msg::VehicleGeometory_PointInVehicleCoord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::VehicleGeometory_PointInVehicleCoord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,}};

static void InitDefaultsscc_info_VehicleGeometory_VehicleGeometoryScalar_vehicle_5fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_VehicleGeometory_VehicleGeometoryScalar_default_instance_;
    new (ptr) ::sim_msg::VehicleGeometory_VehicleGeometoryScalar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::VehicleGeometory_VehicleGeometoryScalar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleGeometory_VehicleGeometoryScalar_vehicle_5fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VehicleGeometory_VehicleGeometoryScalar_vehicle_5fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_VehicleGeometory_WheelFour_vehicle_5fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_VehicleGeometory_WheelFour_default_instance_;
    new (ptr) ::sim_msg::VehicleGeometory_WheelFour();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::VehicleGeometory_WheelFour::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VehicleGeometory_WheelFour_vehicle_5fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_VehicleGeometory_WheelFour_vehicle_5fgeometry_2eproto}, {}};

static void InitDefaultsscc_info_VehicleGeometoryList_vehicle_5fgeometry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_VehicleGeometoryList_default_instance_;
    new (ptr) ::sim_msg::VehicleGeometoryList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::VehicleGeometoryList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VehicleGeometoryList_vehicle_5fgeometry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_VehicleGeometoryList_vehicle_5fgeometry_2eproto}, {
      &scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5fgeometry_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vehicle_5fgeometry_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5fgeometry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5fgeometry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, ref_to_front_axle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, ref_to_rear_axle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, front_axle_to_front_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, rear_axle_to_rear_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, wheel_base_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, height_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, track_width_front_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_VehicleGeometoryScalar, track_width_rear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, front_axle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, rear_axle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, wheel_base_center_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, front_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, rear_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, front_left_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, front_right_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, rear_left_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, rear_right_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, ref_point_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, bounding_box_center_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_PointInVehicleCoord, combination_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_WheelFour, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_WheelFour, front_left_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_WheelFour, front_right_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_WheelFour, rear_left_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory_WheelFour, rear_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory, coord_type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory, vehicle_geometory_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory, vehicle_coord_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory, max_steering_radius_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometory, wheel_diameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometoryList, front_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleGeometoryList, trailer_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::VehicleGeometory_VehicleGeometoryScalar)},
  { 15, -1, sizeof(::sim_msg::VehicleGeometory_PointInVehicleCoord)},
  { 32, -1, sizeof(::sim_msg::VehicleGeometory_WheelFour)},
  { 41, -1, sizeof(::sim_msg::VehicleGeometory)},
  { 51, -1, sizeof(::sim_msg::VehicleGeometoryList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_VehicleGeometory_VehicleGeometoryScalar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_VehicleGeometory_WheelFour_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_VehicleGeometory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_VehicleGeometoryList_default_instance_),
};

const char descriptor_table_protodef_vehicle_5fgeometry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026vehicle_geometry.proto\022\007sim_msg\032\013basic"
  ".proto\"\241\n\n\020VehicleGeometory\022>\n\ncoord_typ"
  "e\030\001 \001(\0162*.sim_msg.VehicleGeometory.Vehic"
  "leCoordType\022K\n\021vehicle_geometory\030\002 \001(\01320"
  ".sim_msg.VehicleGeometory.VehicleGeometo"
  "ryScalar\022D\n\rvehicle_coord\030\003 \001(\0132-.sim_ms"
  "g.VehicleGeometory.PointInVehicleCoord\022@"
  "\n\023max_steering_radius\030\004 \001(\0132#.sim_msg.Ve"
  "hicleGeometory.WheelFour\022;\n\016wheel_diamet"
  "er\030\005 \001(\0132#.sim_msg.VehicleGeometory.Whee"
  "lFour\032\375\001\n\026VehicleGeometoryScalar\022\031\n\021ref_"
  "to_front_axle\030\001 \001(\001\022\030\n\020ref_to_rear_axle\030"
  "\002 \001(\001\022\033\n\023front_axle_to_front\030\003 \001(\001\022\031\n\021re"
  "ar_axle_to_rear\030\004 \001(\001\022\022\n\nwheel_base\030\005 \001("
  "\001\022\016\n\006length\030\006 \001(\001\022\r\n\005width\030\007 \001(\001\022\016\n\006heig"
  "ht\030\010 \001(\001\022\031\n\021track_width_front\030\t \001(\001\022\030\n\020t"
  "rack_width_rear\030\n \001(\001\032\304\003\n\023PointInVehicle"
  "Coord\022!\n\nfront_axle\030\001 \001(\0132\r.sim_msg.Vec3"
  "\022 \n\trear_axle\030\002 \001(\0132\r.sim_msg.Vec3\022(\n\021wh"
  "eel_base_center\030\003 \001(\0132\r.sim_msg.Vec3\022\034\n\005"
  "front\030\004 \001(\0132\r.sim_msg.Vec3\022\033\n\004rear\030\005 \001(\013"
  "2\r.sim_msg.Vec3\022!\n\nfront_left\030\006 \001(\0132\r.si"
  "m_msg.Vec3\022\"\n\013front_right\030\007 \001(\0132\r.sim_ms"
  "g.Vec3\022 \n\trear_left\030\010 \001(\0132\r.sim_msg.Vec3"
  "\022!\n\nrear_right\030\t \001(\0132\r.sim_msg.Vec3\022 \n\tr"
  "ef_point\030\n \001(\0132\r.sim_msg.Vec3\022*\n\023boundin"
  "g_box_center\030\013 \001(\0132\r.sim_msg.Vec3\022)\n\022com"
  "bination_offset\030\014 \001(\0132\r.sim_msg.Vec3\032[\n\t"
  "WheelFour\022\022\n\nfront_left\030\001 \001(\001\022\023\n\013front_r"
  "ight\030\002 \001(\001\022\021\n\trear_left\030\003 \001(\001\022\022\n\nrear_ri"
  "ght\030\004 \001(\001\"\226\001\n\020VehicleCoordType\022\035\n\031FrontA"
  "xle_SnappedToGround\020\000\022#\n\037WheelBaseCenter"
  "_SnappedToGround\020\001\022\034\n\030RearAxle_SnappedTo"
  "Ground\020\002\022 \n\034TrailerHitch_SnappedToGround"
  "\020\003\"l\n\024VehicleGeometoryList\022(\n\005front\030\001 \001("
  "\0132\031.sim_msg.VehicleGeometory\022*\n\007trailer\030"
  "\002 \003(\0132\031.sim_msg.VehicleGeometoryb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5fgeometry_2eproto_deps[1] = {
  &::descriptor_table_basic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5fgeometry_2eproto_sccs[5] = {
  &scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto.base,
  &scc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto.base,
  &scc_info_VehicleGeometory_VehicleGeometoryScalar_vehicle_5fgeometry_2eproto.base,
  &scc_info_VehicleGeometory_WheelFour_vehicle_5fgeometry_2eproto.base,
  &scc_info_VehicleGeometoryList_vehicle_5fgeometry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5fgeometry_2eproto_once;
static bool descriptor_table_vehicle_5fgeometry_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fgeometry_2eproto = {
  &descriptor_table_vehicle_5fgeometry_2eproto_initialized, descriptor_table_protodef_vehicle_5fgeometry_2eproto, "vehicle_geometry.proto", 1480,
  &descriptor_table_vehicle_5fgeometry_2eproto_once, descriptor_table_vehicle_5fgeometry_2eproto_sccs, descriptor_table_vehicle_5fgeometry_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_vehicle_5fgeometry_2eproto::offsets,
  file_level_metadata_vehicle_5fgeometry_2eproto, 5, file_level_enum_descriptors_vehicle_5fgeometry_2eproto, file_level_service_descriptors_vehicle_5fgeometry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5fgeometry_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5fgeometry_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleGeometory_VehicleCoordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5fgeometry_2eproto);
  return file_level_enum_descriptors_vehicle_5fgeometry_2eproto[0];
}
bool VehicleGeometory_VehicleCoordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory::FrontAxle_SnappedToGround;
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory::WheelBaseCenter_SnappedToGround;
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory::RearAxle_SnappedToGround;
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory::TrailerHitch_SnappedToGround;
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory::VehicleCoordType_MIN;
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory::VehicleCoordType_MAX;
constexpr int VehicleGeometory::VehicleCoordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void VehicleGeometory_VehicleGeometoryScalar::InitAsDefaultInstance() {
}
class VehicleGeometory_VehicleGeometoryScalar::_Internal {
 public:
};

VehicleGeometory_VehicleGeometoryScalar::VehicleGeometory_VehicleGeometoryScalar()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
}
VehicleGeometory_VehicleGeometoryScalar::VehicleGeometory_VehicleGeometoryScalar(const VehicleGeometory_VehicleGeometoryScalar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ref_to_front_axle_, &from.ref_to_front_axle_,
    static_cast<size_t>(reinterpret_cast<char*>(&track_width_rear_) -
    reinterpret_cast<char*>(&ref_to_front_axle_)) + sizeof(track_width_rear_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
}

void VehicleGeometory_VehicleGeometoryScalar::SharedCtor() {
  ::memset(&ref_to_front_axle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_width_rear_) -
      reinterpret_cast<char*>(&ref_to_front_axle_)) + sizeof(track_width_rear_));
}

VehicleGeometory_VehicleGeometoryScalar::~VehicleGeometory_VehicleGeometoryScalar() {
  // @@protoc_insertion_point(destructor:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  SharedDtor();
}

void VehicleGeometory_VehicleGeometoryScalar::SharedDtor() {
}

void VehicleGeometory_VehicleGeometoryScalar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleGeometory_VehicleGeometoryScalar& VehicleGeometory_VehicleGeometoryScalar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleGeometory_VehicleGeometoryScalar_vehicle_5fgeometry_2eproto.base);
  return *internal_default_instance();
}


void VehicleGeometory_VehicleGeometoryScalar::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ref_to_front_axle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&track_width_rear_) -
      reinterpret_cast<char*>(&ref_to_front_axle_)) + sizeof(track_width_rear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleGeometory_VehicleGeometoryScalar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double ref_to_front_axle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          ref_to_front_axle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ref_to_rear_axle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          ref_to_rear_axle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_axle_to_front = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          front_axle_to_front_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rear_axle_to_rear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rear_axle_to_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheel_base = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          wheel_base_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double track_width_front = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          track_width_front_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double track_width_rear = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          track_width_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleGeometory_VehicleGeometoryScalar::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double ref_to_front_axle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_to_front_axle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ref_to_rear_axle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ref_to_rear_axle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double front_axle_to_front = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_axle_to_front_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rear_axle_to_rear = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rear_axle_to_rear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheel_base = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheel_base_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double track_width_front = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &track_width_front_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double track_width_rear = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &track_width_rear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleGeometory_VehicleGeometoryScalar::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ref_to_front_axle = 1;
  if (!(this->ref_to_front_axle() <= 0 && this->ref_to_front_axle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->ref_to_front_axle(), output);
  }

  // double ref_to_rear_axle = 2;
  if (!(this->ref_to_rear_axle() <= 0 && this->ref_to_rear_axle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->ref_to_rear_axle(), output);
  }

  // double front_axle_to_front = 3;
  if (!(this->front_axle_to_front() <= 0 && this->front_axle_to_front() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->front_axle_to_front(), output);
  }

  // double rear_axle_to_rear = 4;
  if (!(this->rear_axle_to_rear() <= 0 && this->rear_axle_to_rear() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->rear_axle_to_rear(), output);
  }

  // double wheel_base = 5;
  if (!(this->wheel_base() <= 0 && this->wheel_base() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->wheel_base(), output);
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // double track_width_front = 9;
  if (!(this->track_width_front() <= 0 && this->track_width_front() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->track_width_front(), output);
  }

  // double track_width_rear = 10;
  if (!(this->track_width_rear() <= 0 && this->track_width_rear() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->track_width_rear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleGeometory_VehicleGeometoryScalar::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double ref_to_front_axle = 1;
  if (!(this->ref_to_front_axle() <= 0 && this->ref_to_front_axle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->ref_to_front_axle(), target);
  }

  // double ref_to_rear_axle = 2;
  if (!(this->ref_to_rear_axle() <= 0 && this->ref_to_rear_axle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->ref_to_rear_axle(), target);
  }

  // double front_axle_to_front = 3;
  if (!(this->front_axle_to_front() <= 0 && this->front_axle_to_front() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->front_axle_to_front(), target);
  }

  // double rear_axle_to_rear = 4;
  if (!(this->rear_axle_to_rear() <= 0 && this->rear_axle_to_rear() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->rear_axle_to_rear(), target);
  }

  // double wheel_base = 5;
  if (!(this->wheel_base() <= 0 && this->wheel_base() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->wheel_base(), target);
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // double track_width_front = 9;
  if (!(this->track_width_front() <= 0 && this->track_width_front() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->track_width_front(), target);
  }

  // double track_width_rear = 10;
  if (!(this->track_width_rear() <= 0 && this->track_width_rear() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->track_width_rear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  return target;
}

size_t VehicleGeometory_VehicleGeometoryScalar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double ref_to_front_axle = 1;
  if (!(this->ref_to_front_axle() <= 0 && this->ref_to_front_axle() >= 0)) {
    total_size += 1 + 8;
  }

  // double ref_to_rear_axle = 2;
  if (!(this->ref_to_rear_axle() <= 0 && this->ref_to_rear_axle() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_axle_to_front = 3;
  if (!(this->front_axle_to_front() <= 0 && this->front_axle_to_front() >= 0)) {
    total_size += 1 + 8;
  }

  // double rear_axle_to_rear = 4;
  if (!(this->rear_axle_to_rear() <= 0 && this->rear_axle_to_rear() >= 0)) {
    total_size += 1 + 8;
  }

  // double wheel_base = 5;
  if (!(this->wheel_base() <= 0 && this->wheel_base() >= 0)) {
    total_size += 1 + 8;
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double track_width_front = 9;
  if (!(this->track_width_front() <= 0 && this->track_width_front() >= 0)) {
    total_size += 1 + 8;
  }

  // double track_width_rear = 10;
  if (!(this->track_width_rear() <= 0 && this->track_width_rear() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleGeometory_VehicleGeometoryScalar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleGeometory_VehicleGeometoryScalar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleGeometory_VehicleGeometoryScalar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
    MergeFrom(*source);
  }
}

void VehicleGeometory_VehicleGeometoryScalar::MergeFrom(const VehicleGeometory_VehicleGeometoryScalar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ref_to_front_axle() <= 0 && from.ref_to_front_axle() >= 0)) {
    set_ref_to_front_axle(from.ref_to_front_axle());
  }
  if (!(from.ref_to_rear_axle() <= 0 && from.ref_to_rear_axle() >= 0)) {
    set_ref_to_rear_axle(from.ref_to_rear_axle());
  }
  if (!(from.front_axle_to_front() <= 0 && from.front_axle_to_front() >= 0)) {
    set_front_axle_to_front(from.front_axle_to_front());
  }
  if (!(from.rear_axle_to_rear() <= 0 && from.rear_axle_to_rear() >= 0)) {
    set_rear_axle_to_rear(from.rear_axle_to_rear());
  }
  if (!(from.wheel_base() <= 0 && from.wheel_base() >= 0)) {
    set_wheel_base(from.wheel_base());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.track_width_front() <= 0 && from.track_width_front() >= 0)) {
    set_track_width_front(from.track_width_front());
  }
  if (!(from.track_width_rear() <= 0 && from.track_width_rear() >= 0)) {
    set_track_width_rear(from.track_width_rear());
  }
}

void VehicleGeometory_VehicleGeometoryScalar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleGeometory_VehicleGeometoryScalar::CopyFrom(const VehicleGeometory_VehicleGeometoryScalar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleGeometory_VehicleGeometoryScalar::IsInitialized() const {
  return true;
}

void VehicleGeometory_VehicleGeometoryScalar::InternalSwap(VehicleGeometory_VehicleGeometoryScalar* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ref_to_front_axle_, other->ref_to_front_axle_);
  swap(ref_to_rear_axle_, other->ref_to_rear_axle_);
  swap(front_axle_to_front_, other->front_axle_to_front_);
  swap(rear_axle_to_rear_, other->rear_axle_to_rear_);
  swap(wheel_base_, other->wheel_base_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(track_width_front_, other->track_width_front_);
  swap(track_width_rear_, other->track_width_rear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleGeometory_VehicleGeometoryScalar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleGeometory_PointInVehicleCoord::InitAsDefaultInstance() {
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->front_axle_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->rear_axle_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->wheel_base_center_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->front_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->rear_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->front_left_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->front_right_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->rear_left_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->rear_right_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->ref_point_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->bounding_box_center_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_._instance.get_mutable()->combination_offset_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}
class VehicleGeometory_PointInVehicleCoord::_Internal {
 public:
  static const ::sim_msg::Vec3& front_axle(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& rear_axle(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& wheel_base_center(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& front(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& rear(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& front_left(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& front_right(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& rear_left(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& rear_right(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& ref_point(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& bounding_box_center(const VehicleGeometory_PointInVehicleCoord* msg);
  static const ::sim_msg::Vec3& combination_offset(const VehicleGeometory_PointInVehicleCoord* msg);
};

const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::front_axle(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->front_axle_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::rear_axle(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->rear_axle_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::wheel_base_center(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->wheel_base_center_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::front(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->front_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::rear(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->rear_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::front_left(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->front_left_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::front_right(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->front_right_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::rear_left(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->rear_left_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::rear_right(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->rear_right_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::ref_point(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->ref_point_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::bounding_box_center(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->bounding_box_center_;
}
const ::sim_msg::Vec3&
VehicleGeometory_PointInVehicleCoord::_Internal::combination_offset(const VehicleGeometory_PointInVehicleCoord* msg) {
  return *msg->combination_offset_;
}
void VehicleGeometory_PointInVehicleCoord::clear_front_axle() {
  if (GetArenaNoVirtual() == nullptr && front_axle_ != nullptr) {
    delete front_axle_;
  }
  front_axle_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_rear_axle() {
  if (GetArenaNoVirtual() == nullptr && rear_axle_ != nullptr) {
    delete rear_axle_;
  }
  rear_axle_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_wheel_base_center() {
  if (GetArenaNoVirtual() == nullptr && wheel_base_center_ != nullptr) {
    delete wheel_base_center_;
  }
  wheel_base_center_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_front() {
  if (GetArenaNoVirtual() == nullptr && front_ != nullptr) {
    delete front_;
  }
  front_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_rear() {
  if (GetArenaNoVirtual() == nullptr && rear_ != nullptr) {
    delete rear_;
  }
  rear_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_front_left() {
  if (GetArenaNoVirtual() == nullptr && front_left_ != nullptr) {
    delete front_left_;
  }
  front_left_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_front_right() {
  if (GetArenaNoVirtual() == nullptr && front_right_ != nullptr) {
    delete front_right_;
  }
  front_right_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_rear_left() {
  if (GetArenaNoVirtual() == nullptr && rear_left_ != nullptr) {
    delete rear_left_;
  }
  rear_left_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_rear_right() {
  if (GetArenaNoVirtual() == nullptr && rear_right_ != nullptr) {
    delete rear_right_;
  }
  rear_right_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_ref_point() {
  if (GetArenaNoVirtual() == nullptr && ref_point_ != nullptr) {
    delete ref_point_;
  }
  ref_point_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_bounding_box_center() {
  if (GetArenaNoVirtual() == nullptr && bounding_box_center_ != nullptr) {
    delete bounding_box_center_;
  }
  bounding_box_center_ = nullptr;
}
void VehicleGeometory_PointInVehicleCoord::clear_combination_offset() {
  if (GetArenaNoVirtual() == nullptr && combination_offset_ != nullptr) {
    delete combination_offset_;
  }
  combination_offset_ = nullptr;
}
VehicleGeometory_PointInVehicleCoord::VehicleGeometory_PointInVehicleCoord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.VehicleGeometory.PointInVehicleCoord)
}
VehicleGeometory_PointInVehicleCoord::VehicleGeometory_PointInVehicleCoord(const VehicleGeometory_PointInVehicleCoord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_front_axle()) {
    front_axle_ = new ::sim_msg::Vec3(*from.front_axle_);
  } else {
    front_axle_ = nullptr;
  }
  if (from.has_rear_axle()) {
    rear_axle_ = new ::sim_msg::Vec3(*from.rear_axle_);
  } else {
    rear_axle_ = nullptr;
  }
  if (from.has_wheel_base_center()) {
    wheel_base_center_ = new ::sim_msg::Vec3(*from.wheel_base_center_);
  } else {
    wheel_base_center_ = nullptr;
  }
  if (from.has_front()) {
    front_ = new ::sim_msg::Vec3(*from.front_);
  } else {
    front_ = nullptr;
  }
  if (from.has_rear()) {
    rear_ = new ::sim_msg::Vec3(*from.rear_);
  } else {
    rear_ = nullptr;
  }
  if (from.has_front_left()) {
    front_left_ = new ::sim_msg::Vec3(*from.front_left_);
  } else {
    front_left_ = nullptr;
  }
  if (from.has_front_right()) {
    front_right_ = new ::sim_msg::Vec3(*from.front_right_);
  } else {
    front_right_ = nullptr;
  }
  if (from.has_rear_left()) {
    rear_left_ = new ::sim_msg::Vec3(*from.rear_left_);
  } else {
    rear_left_ = nullptr;
  }
  if (from.has_rear_right()) {
    rear_right_ = new ::sim_msg::Vec3(*from.rear_right_);
  } else {
    rear_right_ = nullptr;
  }
  if (from.has_ref_point()) {
    ref_point_ = new ::sim_msg::Vec3(*from.ref_point_);
  } else {
    ref_point_ = nullptr;
  }
  if (from.has_bounding_box_center()) {
    bounding_box_center_ = new ::sim_msg::Vec3(*from.bounding_box_center_);
  } else {
    bounding_box_center_ = nullptr;
  }
  if (from.has_combination_offset()) {
    combination_offset_ = new ::sim_msg::Vec3(*from.combination_offset_);
  } else {
    combination_offset_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.VehicleGeometory.PointInVehicleCoord)
}

void VehicleGeometory_PointInVehicleCoord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto.base);
  ::memset(&front_axle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&combination_offset_) -
      reinterpret_cast<char*>(&front_axle_)) + sizeof(combination_offset_));
}

VehicleGeometory_PointInVehicleCoord::~VehicleGeometory_PointInVehicleCoord() {
  // @@protoc_insertion_point(destructor:sim_msg.VehicleGeometory.PointInVehicleCoord)
  SharedDtor();
}

void VehicleGeometory_PointInVehicleCoord::SharedDtor() {
  if (this != internal_default_instance()) delete front_axle_;
  if (this != internal_default_instance()) delete rear_axle_;
  if (this != internal_default_instance()) delete wheel_base_center_;
  if (this != internal_default_instance()) delete front_;
  if (this != internal_default_instance()) delete rear_;
  if (this != internal_default_instance()) delete front_left_;
  if (this != internal_default_instance()) delete front_right_;
  if (this != internal_default_instance()) delete rear_left_;
  if (this != internal_default_instance()) delete rear_right_;
  if (this != internal_default_instance()) delete ref_point_;
  if (this != internal_default_instance()) delete bounding_box_center_;
  if (this != internal_default_instance()) delete combination_offset_;
}

void VehicleGeometory_PointInVehicleCoord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleGeometory_PointInVehicleCoord& VehicleGeometory_PointInVehicleCoord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleGeometory_PointInVehicleCoord_vehicle_5fgeometry_2eproto.base);
  return *internal_default_instance();
}


void VehicleGeometory_PointInVehicleCoord::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && front_axle_ != nullptr) {
    delete front_axle_;
  }
  front_axle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rear_axle_ != nullptr) {
    delete rear_axle_;
  }
  rear_axle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wheel_base_center_ != nullptr) {
    delete wheel_base_center_;
  }
  wheel_base_center_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && front_ != nullptr) {
    delete front_;
  }
  front_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rear_ != nullptr) {
    delete rear_;
  }
  rear_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && front_left_ != nullptr) {
    delete front_left_;
  }
  front_left_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && front_right_ != nullptr) {
    delete front_right_;
  }
  front_right_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rear_left_ != nullptr) {
    delete rear_left_;
  }
  rear_left_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rear_right_ != nullptr) {
    delete rear_right_;
  }
  rear_right_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ref_point_ != nullptr) {
    delete ref_point_;
  }
  ref_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bounding_box_center_ != nullptr) {
    delete bounding_box_center_;
  }
  bounding_box_center_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && combination_offset_ != nullptr) {
    delete combination_offset_;
  }
  combination_offset_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleGeometory_PointInVehicleCoord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Vec3 front_axle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_front_axle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 rear_axle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_rear_axle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 wheel_base_center = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_wheel_base_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 front = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_front(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 rear = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_rear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 front_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_front_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 front_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_front_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 rear_left = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_rear_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 rear_right = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_rear_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 ref_point = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_ref_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 bounding_box_center = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_bounding_box_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 combination_offset = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_combination_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleGeometory_PointInVehicleCoord::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Vec3 front_axle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_front_axle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 rear_axle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rear_axle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 wheel_base_center = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wheel_base_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 front = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 rear = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 front_left = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_front_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 front_right = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_front_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 rear_left = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rear_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 rear_right = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rear_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 ref_point = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ref_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 bounding_box_center = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 combination_offset = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_combination_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.VehicleGeometory.PointInVehicleCoord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.VehicleGeometory.PointInVehicleCoord)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleGeometory_PointInVehicleCoord::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Vec3 front_axle = 1;
  if (this->has_front_axle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::front_axle(this), output);
  }

  // .sim_msg.Vec3 rear_axle = 2;
  if (this->has_rear_axle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::rear_axle(this), output);
  }

  // .sim_msg.Vec3 wheel_base_center = 3;
  if (this->has_wheel_base_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::wheel_base_center(this), output);
  }

  // .sim_msg.Vec3 front = 4;
  if (this->has_front()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::front(this), output);
  }

  // .sim_msg.Vec3 rear = 5;
  if (this->has_rear()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::rear(this), output);
  }

  // .sim_msg.Vec3 front_left = 6;
  if (this->has_front_left()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::front_left(this), output);
  }

  // .sim_msg.Vec3 front_right = 7;
  if (this->has_front_right()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::front_right(this), output);
  }

  // .sim_msg.Vec3 rear_left = 8;
  if (this->has_rear_left()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::rear_left(this), output);
  }

  // .sim_msg.Vec3 rear_right = 9;
  if (this->has_rear_right()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::rear_right(this), output);
  }

  // .sim_msg.Vec3 ref_point = 10;
  if (this->has_ref_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::ref_point(this), output);
  }

  // .sim_msg.Vec3 bounding_box_center = 11;
  if (this->has_bounding_box_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::bounding_box_center(this), output);
  }

  // .sim_msg.Vec3 combination_offset = 12;
  if (this->has_combination_offset()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::combination_offset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.VehicleGeometory.PointInVehicleCoord)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleGeometory_PointInVehicleCoord::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Vec3 front_axle = 1;
  if (this->has_front_axle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::front_axle(this), target);
  }

  // .sim_msg.Vec3 rear_axle = 2;
  if (this->has_rear_axle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::rear_axle(this), target);
  }

  // .sim_msg.Vec3 wheel_base_center = 3;
  if (this->has_wheel_base_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::wheel_base_center(this), target);
  }

  // .sim_msg.Vec3 front = 4;
  if (this->has_front()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::front(this), target);
  }

  // .sim_msg.Vec3 rear = 5;
  if (this->has_rear()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::rear(this), target);
  }

  // .sim_msg.Vec3 front_left = 6;
  if (this->has_front_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::front_left(this), target);
  }

  // .sim_msg.Vec3 front_right = 7;
  if (this->has_front_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::front_right(this), target);
  }

  // .sim_msg.Vec3 rear_left = 8;
  if (this->has_rear_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::rear_left(this), target);
  }

  // .sim_msg.Vec3 rear_right = 9;
  if (this->has_rear_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::rear_right(this), target);
  }

  // .sim_msg.Vec3 ref_point = 10;
  if (this->has_ref_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::ref_point(this), target);
  }

  // .sim_msg.Vec3 bounding_box_center = 11;
  if (this->has_bounding_box_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::bounding_box_center(this), target);
  }

  // .sim_msg.Vec3 combination_offset = 12;
  if (this->has_combination_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::combination_offset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.VehicleGeometory.PointInVehicleCoord)
  return target;
}

size_t VehicleGeometory_PointInVehicleCoord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 front_axle = 1;
  if (this->has_front_axle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_axle_);
  }

  // .sim_msg.Vec3 rear_axle = 2;
  if (this->has_rear_axle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rear_axle_);
  }

  // .sim_msg.Vec3 wheel_base_center = 3;
  if (this->has_wheel_base_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheel_base_center_);
  }

  // .sim_msg.Vec3 front = 4;
  if (this->has_front()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_);
  }

  // .sim_msg.Vec3 rear = 5;
  if (this->has_rear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rear_);
  }

  // .sim_msg.Vec3 front_left = 6;
  if (this->has_front_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_left_);
  }

  // .sim_msg.Vec3 front_right = 7;
  if (this->has_front_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_right_);
  }

  // .sim_msg.Vec3 rear_left = 8;
  if (this->has_rear_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rear_left_);
  }

  // .sim_msg.Vec3 rear_right = 9;
  if (this->has_rear_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rear_right_);
  }

  // .sim_msg.Vec3 ref_point = 10;
  if (this->has_ref_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ref_point_);
  }

  // .sim_msg.Vec3 bounding_box_center = 11;
  if (this->has_bounding_box_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_box_center_);
  }

  // .sim_msg.Vec3 combination_offset = 12;
  if (this->has_combination_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *combination_offset_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleGeometory_PointInVehicleCoord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleGeometory_PointInVehicleCoord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleGeometory_PointInVehicleCoord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.VehicleGeometory.PointInVehicleCoord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.VehicleGeometory.PointInVehicleCoord)
    MergeFrom(*source);
  }
}

void VehicleGeometory_PointInVehicleCoord::MergeFrom(const VehicleGeometory_PointInVehicleCoord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_front_axle()) {
    mutable_front_axle()->::sim_msg::Vec3::MergeFrom(from.front_axle());
  }
  if (from.has_rear_axle()) {
    mutable_rear_axle()->::sim_msg::Vec3::MergeFrom(from.rear_axle());
  }
  if (from.has_wheel_base_center()) {
    mutable_wheel_base_center()->::sim_msg::Vec3::MergeFrom(from.wheel_base_center());
  }
  if (from.has_front()) {
    mutable_front()->::sim_msg::Vec3::MergeFrom(from.front());
  }
  if (from.has_rear()) {
    mutable_rear()->::sim_msg::Vec3::MergeFrom(from.rear());
  }
  if (from.has_front_left()) {
    mutable_front_left()->::sim_msg::Vec3::MergeFrom(from.front_left());
  }
  if (from.has_front_right()) {
    mutable_front_right()->::sim_msg::Vec3::MergeFrom(from.front_right());
  }
  if (from.has_rear_left()) {
    mutable_rear_left()->::sim_msg::Vec3::MergeFrom(from.rear_left());
  }
  if (from.has_rear_right()) {
    mutable_rear_right()->::sim_msg::Vec3::MergeFrom(from.rear_right());
  }
  if (from.has_ref_point()) {
    mutable_ref_point()->::sim_msg::Vec3::MergeFrom(from.ref_point());
  }
  if (from.has_bounding_box_center()) {
    mutable_bounding_box_center()->::sim_msg::Vec3::MergeFrom(from.bounding_box_center());
  }
  if (from.has_combination_offset()) {
    mutable_combination_offset()->::sim_msg::Vec3::MergeFrom(from.combination_offset());
  }
}

void VehicleGeometory_PointInVehicleCoord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleGeometory_PointInVehicleCoord::CopyFrom(const VehicleGeometory_PointInVehicleCoord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.VehicleGeometory.PointInVehicleCoord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleGeometory_PointInVehicleCoord::IsInitialized() const {
  return true;
}

void VehicleGeometory_PointInVehicleCoord::InternalSwap(VehicleGeometory_PointInVehicleCoord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(front_axle_, other->front_axle_);
  swap(rear_axle_, other->rear_axle_);
  swap(wheel_base_center_, other->wheel_base_center_);
  swap(front_, other->front_);
  swap(rear_, other->rear_);
  swap(front_left_, other->front_left_);
  swap(front_right_, other->front_right_);
  swap(rear_left_, other->rear_left_);
  swap(rear_right_, other->rear_right_);
  swap(ref_point_, other->ref_point_);
  swap(bounding_box_center_, other->bounding_box_center_);
  swap(combination_offset_, other->combination_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleGeometory_PointInVehicleCoord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleGeometory_WheelFour::InitAsDefaultInstance() {
}
class VehicleGeometory_WheelFour::_Internal {
 public:
};

VehicleGeometory_WheelFour::VehicleGeometory_WheelFour()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.VehicleGeometory.WheelFour)
}
VehicleGeometory_WheelFour::VehicleGeometory_WheelFour(const VehicleGeometory_WheelFour& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_left_, &from.front_left_,
    static_cast<size_t>(reinterpret_cast<char*>(&rear_right_) -
    reinterpret_cast<char*>(&front_left_)) + sizeof(rear_right_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.VehicleGeometory.WheelFour)
}

void VehicleGeometory_WheelFour::SharedCtor() {
  ::memset(&front_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_right_) -
      reinterpret_cast<char*>(&front_left_)) + sizeof(rear_right_));
}

VehicleGeometory_WheelFour::~VehicleGeometory_WheelFour() {
  // @@protoc_insertion_point(destructor:sim_msg.VehicleGeometory.WheelFour)
  SharedDtor();
}

void VehicleGeometory_WheelFour::SharedDtor() {
}

void VehicleGeometory_WheelFour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleGeometory_WheelFour& VehicleGeometory_WheelFour::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleGeometory_WheelFour_vehicle_5fgeometry_2eproto.base);
  return *internal_default_instance();
}


void VehicleGeometory_WheelFour::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.VehicleGeometory.WheelFour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&front_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rear_right_) -
      reinterpret_cast<char*>(&front_left_)) + sizeof(rear_right_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleGeometory_WheelFour::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double front_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          front_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          front_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rear_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          rear_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rear_right = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          rear_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleGeometory_WheelFour::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.VehicleGeometory.WheelFour)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double front_left = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double front_right = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rear_left = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rear_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rear_right = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rear_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.VehicleGeometory.WheelFour)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.VehicleGeometory.WheelFour)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleGeometory_WheelFour::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.VehicleGeometory.WheelFour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double front_left = 1;
  if (!(this->front_left() <= 0 && this->front_left() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->front_left(), output);
  }

  // double front_right = 2;
  if (!(this->front_right() <= 0 && this->front_right() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->front_right(), output);
  }

  // double rear_left = 3;
  if (!(this->rear_left() <= 0 && this->rear_left() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->rear_left(), output);
  }

  // double rear_right = 4;
  if (!(this->rear_right() <= 0 && this->rear_right() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->rear_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.VehicleGeometory.WheelFour)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleGeometory_WheelFour::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.VehicleGeometory.WheelFour)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double front_left = 1;
  if (!(this->front_left() <= 0 && this->front_left() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->front_left(), target);
  }

  // double front_right = 2;
  if (!(this->front_right() <= 0 && this->front_right() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->front_right(), target);
  }

  // double rear_left = 3;
  if (!(this->rear_left() <= 0 && this->rear_left() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->rear_left(), target);
  }

  // double rear_right = 4;
  if (!(this->rear_right() <= 0 && this->rear_right() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->rear_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.VehicleGeometory.WheelFour)
  return target;
}

size_t VehicleGeometory_WheelFour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.VehicleGeometory.WheelFour)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double front_left = 1;
  if (!(this->front_left() <= 0 && this->front_left() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_right = 2;
  if (!(this->front_right() <= 0 && this->front_right() >= 0)) {
    total_size += 1 + 8;
  }

  // double rear_left = 3;
  if (!(this->rear_left() <= 0 && this->rear_left() >= 0)) {
    total_size += 1 + 8;
  }

  // double rear_right = 4;
  if (!(this->rear_right() <= 0 && this->rear_right() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleGeometory_WheelFour::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.VehicleGeometory.WheelFour)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleGeometory_WheelFour* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleGeometory_WheelFour>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.VehicleGeometory.WheelFour)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.VehicleGeometory.WheelFour)
    MergeFrom(*source);
  }
}

void VehicleGeometory_WheelFour::MergeFrom(const VehicleGeometory_WheelFour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.VehicleGeometory.WheelFour)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.front_left() <= 0 && from.front_left() >= 0)) {
    set_front_left(from.front_left());
  }
  if (!(from.front_right() <= 0 && from.front_right() >= 0)) {
    set_front_right(from.front_right());
  }
  if (!(from.rear_left() <= 0 && from.rear_left() >= 0)) {
    set_rear_left(from.rear_left());
  }
  if (!(from.rear_right() <= 0 && from.rear_right() >= 0)) {
    set_rear_right(from.rear_right());
  }
}

void VehicleGeometory_WheelFour::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.VehicleGeometory.WheelFour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleGeometory_WheelFour::CopyFrom(const VehicleGeometory_WheelFour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.VehicleGeometory.WheelFour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleGeometory_WheelFour::IsInitialized() const {
  return true;
}

void VehicleGeometory_WheelFour::InternalSwap(VehicleGeometory_WheelFour* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(front_left_, other->front_left_);
  swap(front_right_, other->front_right_);
  swap(rear_left_, other->rear_left_);
  swap(rear_right_, other->rear_right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleGeometory_WheelFour::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleGeometory::InitAsDefaultInstance() {
  ::sim_msg::_VehicleGeometory_default_instance_._instance.get_mutable()->vehicle_geometory_ = const_cast< ::sim_msg::VehicleGeometory_VehicleGeometoryScalar*>(
      ::sim_msg::VehicleGeometory_VehicleGeometoryScalar::internal_default_instance());
  ::sim_msg::_VehicleGeometory_default_instance_._instance.get_mutable()->vehicle_coord_ = const_cast< ::sim_msg::VehicleGeometory_PointInVehicleCoord*>(
      ::sim_msg::VehicleGeometory_PointInVehicleCoord::internal_default_instance());
  ::sim_msg::_VehicleGeometory_default_instance_._instance.get_mutable()->max_steering_radius_ = const_cast< ::sim_msg::VehicleGeometory_WheelFour*>(
      ::sim_msg::VehicleGeometory_WheelFour::internal_default_instance());
  ::sim_msg::_VehicleGeometory_default_instance_._instance.get_mutable()->wheel_diameter_ = const_cast< ::sim_msg::VehicleGeometory_WheelFour*>(
      ::sim_msg::VehicleGeometory_WheelFour::internal_default_instance());
}
class VehicleGeometory::_Internal {
 public:
  static const ::sim_msg::VehicleGeometory_VehicleGeometoryScalar& vehicle_geometory(const VehicleGeometory* msg);
  static const ::sim_msg::VehicleGeometory_PointInVehicleCoord& vehicle_coord(const VehicleGeometory* msg);
  static const ::sim_msg::VehicleGeometory_WheelFour& max_steering_radius(const VehicleGeometory* msg);
  static const ::sim_msg::VehicleGeometory_WheelFour& wheel_diameter(const VehicleGeometory* msg);
};

const ::sim_msg::VehicleGeometory_VehicleGeometoryScalar&
VehicleGeometory::_Internal::vehicle_geometory(const VehicleGeometory* msg) {
  return *msg->vehicle_geometory_;
}
const ::sim_msg::VehicleGeometory_PointInVehicleCoord&
VehicleGeometory::_Internal::vehicle_coord(const VehicleGeometory* msg) {
  return *msg->vehicle_coord_;
}
const ::sim_msg::VehicleGeometory_WheelFour&
VehicleGeometory::_Internal::max_steering_radius(const VehicleGeometory* msg) {
  return *msg->max_steering_radius_;
}
const ::sim_msg::VehicleGeometory_WheelFour&
VehicleGeometory::_Internal::wheel_diameter(const VehicleGeometory* msg) {
  return *msg->wheel_diameter_;
}
VehicleGeometory::VehicleGeometory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.VehicleGeometory)
}
VehicleGeometory::VehicleGeometory(const VehicleGeometory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_geometory()) {
    vehicle_geometory_ = new ::sim_msg::VehicleGeometory_VehicleGeometoryScalar(*from.vehicle_geometory_);
  } else {
    vehicle_geometory_ = nullptr;
  }
  if (from.has_vehicle_coord()) {
    vehicle_coord_ = new ::sim_msg::VehicleGeometory_PointInVehicleCoord(*from.vehicle_coord_);
  } else {
    vehicle_coord_ = nullptr;
  }
  if (from.has_max_steering_radius()) {
    max_steering_radius_ = new ::sim_msg::VehicleGeometory_WheelFour(*from.max_steering_radius_);
  } else {
    max_steering_radius_ = nullptr;
  }
  if (from.has_wheel_diameter()) {
    wheel_diameter_ = new ::sim_msg::VehicleGeometory_WheelFour(*from.wheel_diameter_);
  } else {
    wheel_diameter_ = nullptr;
  }
  coord_type_ = from.coord_type_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.VehicleGeometory)
}

void VehicleGeometory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto.base);
  ::memset(&vehicle_geometory_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&coord_type_) -
      reinterpret_cast<char*>(&vehicle_geometory_)) + sizeof(coord_type_));
}

VehicleGeometory::~VehicleGeometory() {
  // @@protoc_insertion_point(destructor:sim_msg.VehicleGeometory)
  SharedDtor();
}

void VehicleGeometory::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_geometory_;
  if (this != internal_default_instance()) delete vehicle_coord_;
  if (this != internal_default_instance()) delete max_steering_radius_;
  if (this != internal_default_instance()) delete wheel_diameter_;
}

void VehicleGeometory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleGeometory& VehicleGeometory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto.base);
  return *internal_default_instance();
}


void VehicleGeometory::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.VehicleGeometory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && vehicle_geometory_ != nullptr) {
    delete vehicle_geometory_;
  }
  vehicle_geometory_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vehicle_coord_ != nullptr) {
    delete vehicle_coord_;
  }
  vehicle_coord_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_steering_radius_ != nullptr) {
    delete max_steering_radius_;
  }
  max_steering_radius_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wheel_diameter_ != nullptr) {
    delete wheel_diameter_;
  }
  wheel_diameter_ = nullptr;
  coord_type_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleGeometory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.VehicleGeometory.VehicleCoordType coord_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_coord_type(static_cast<::sim_msg::VehicleGeometory_VehicleCoordType>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.VehicleGeometory.VehicleGeometoryScalar vehicle_geometory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_vehicle_geometory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.VehicleGeometory.PointInVehicleCoord vehicle_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_vehicle_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.VehicleGeometory.WheelFour max_steering_radius = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_max_steering_radius(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.VehicleGeometory.WheelFour wheel_diameter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_wheel_diameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleGeometory::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.VehicleGeometory)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.VehicleGeometory.VehicleCoordType coord_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_coord_type(static_cast< ::sim_msg::VehicleGeometory_VehicleCoordType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.VehicleGeometory.VehicleGeometoryScalar vehicle_geometory = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_geometory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.VehicleGeometory.PointInVehicleCoord vehicle_coord = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_coord()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.VehicleGeometory.WheelFour max_steering_radius = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_steering_radius()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.VehicleGeometory.WheelFour wheel_diameter = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wheel_diameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.VehicleGeometory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.VehicleGeometory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleGeometory::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.VehicleGeometory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.VehicleGeometory.VehicleCoordType coord_type = 1;
  if (this->coord_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->coord_type(), output);
  }

  // .sim_msg.VehicleGeometory.VehicleGeometoryScalar vehicle_geometory = 2;
  if (this->has_vehicle_geometory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::vehicle_geometory(this), output);
  }

  // .sim_msg.VehicleGeometory.PointInVehicleCoord vehicle_coord = 3;
  if (this->has_vehicle_coord()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::vehicle_coord(this), output);
  }

  // .sim_msg.VehicleGeometory.WheelFour max_steering_radius = 4;
  if (this->has_max_steering_radius()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::max_steering_radius(this), output);
  }

  // .sim_msg.VehicleGeometory.WheelFour wheel_diameter = 5;
  if (this->has_wheel_diameter()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::wheel_diameter(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.VehicleGeometory)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleGeometory::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.VehicleGeometory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.VehicleGeometory.VehicleCoordType coord_type = 1;
  if (this->coord_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->coord_type(), target);
  }

  // .sim_msg.VehicleGeometory.VehicleGeometoryScalar vehicle_geometory = 2;
  if (this->has_vehicle_geometory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::vehicle_geometory(this), target);
  }

  // .sim_msg.VehicleGeometory.PointInVehicleCoord vehicle_coord = 3;
  if (this->has_vehicle_coord()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::vehicle_coord(this), target);
  }

  // .sim_msg.VehicleGeometory.WheelFour max_steering_radius = 4;
  if (this->has_max_steering_radius()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::max_steering_radius(this), target);
  }

  // .sim_msg.VehicleGeometory.WheelFour wheel_diameter = 5;
  if (this->has_wheel_diameter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::wheel_diameter(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.VehicleGeometory)
  return target;
}

size_t VehicleGeometory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.VehicleGeometory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.VehicleGeometory.VehicleGeometoryScalar vehicle_geometory = 2;
  if (this->has_vehicle_geometory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_geometory_);
  }

  // .sim_msg.VehicleGeometory.PointInVehicleCoord vehicle_coord = 3;
  if (this->has_vehicle_coord()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_coord_);
  }

  // .sim_msg.VehicleGeometory.WheelFour max_steering_radius = 4;
  if (this->has_max_steering_radius()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_steering_radius_);
  }

  // .sim_msg.VehicleGeometory.WheelFour wheel_diameter = 5;
  if (this->has_wheel_diameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheel_diameter_);
  }

  // .sim_msg.VehicleGeometory.VehicleCoordType coord_type = 1;
  if (this->coord_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->coord_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleGeometory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.VehicleGeometory)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleGeometory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleGeometory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.VehicleGeometory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.VehicleGeometory)
    MergeFrom(*source);
  }
}

void VehicleGeometory::MergeFrom(const VehicleGeometory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.VehicleGeometory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehicle_geometory()) {
    mutable_vehicle_geometory()->::sim_msg::VehicleGeometory_VehicleGeometoryScalar::MergeFrom(from.vehicle_geometory());
  }
  if (from.has_vehicle_coord()) {
    mutable_vehicle_coord()->::sim_msg::VehicleGeometory_PointInVehicleCoord::MergeFrom(from.vehicle_coord());
  }
  if (from.has_max_steering_radius()) {
    mutable_max_steering_radius()->::sim_msg::VehicleGeometory_WheelFour::MergeFrom(from.max_steering_radius());
  }
  if (from.has_wheel_diameter()) {
    mutable_wheel_diameter()->::sim_msg::VehicleGeometory_WheelFour::MergeFrom(from.wheel_diameter());
  }
  if (from.coord_type() != 0) {
    set_coord_type(from.coord_type());
  }
}

void VehicleGeometory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.VehicleGeometory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleGeometory::CopyFrom(const VehicleGeometory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.VehicleGeometory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleGeometory::IsInitialized() const {
  return true;
}

void VehicleGeometory::InternalSwap(VehicleGeometory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vehicle_geometory_, other->vehicle_geometory_);
  swap(vehicle_coord_, other->vehicle_coord_);
  swap(max_steering_radius_, other->max_steering_radius_);
  swap(wheel_diameter_, other->wheel_diameter_);
  swap(coord_type_, other->coord_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleGeometory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleGeometoryList::InitAsDefaultInstance() {
  ::sim_msg::_VehicleGeometoryList_default_instance_._instance.get_mutable()->front_ = const_cast< ::sim_msg::VehicleGeometory*>(
      ::sim_msg::VehicleGeometory::internal_default_instance());
}
class VehicleGeometoryList::_Internal {
 public:
  static const ::sim_msg::VehicleGeometory& front(const VehicleGeometoryList* msg);
};

const ::sim_msg::VehicleGeometory&
VehicleGeometoryList::_Internal::front(const VehicleGeometoryList* msg) {
  return *msg->front_;
}
VehicleGeometoryList::VehicleGeometoryList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.VehicleGeometoryList)
}
VehicleGeometoryList::VehicleGeometoryList(const VehicleGeometoryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trailer_(from.trailer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_front()) {
    front_ = new ::sim_msg::VehicleGeometory(*from.front_);
  } else {
    front_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.VehicleGeometoryList)
}

void VehicleGeometoryList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleGeometoryList_vehicle_5fgeometry_2eproto.base);
  front_ = nullptr;
}

VehicleGeometoryList::~VehicleGeometoryList() {
  // @@protoc_insertion_point(destructor:sim_msg.VehicleGeometoryList)
  SharedDtor();
}

void VehicleGeometoryList::SharedDtor() {
  if (this != internal_default_instance()) delete front_;
}

void VehicleGeometoryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleGeometoryList& VehicleGeometoryList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleGeometoryList_vehicle_5fgeometry_2eproto.base);
  return *internal_default_instance();
}


void VehicleGeometoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.VehicleGeometoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trailer_.Clear();
  if (GetArenaNoVirtual() == nullptr && front_ != nullptr) {
    delete front_;
  }
  front_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleGeometoryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.VehicleGeometory front = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_front(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.VehicleGeometory trailer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trailer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleGeometoryList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.VehicleGeometoryList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.VehicleGeometory front = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_front()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.VehicleGeometory trailer = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trailer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.VehicleGeometoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.VehicleGeometoryList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleGeometoryList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.VehicleGeometoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.VehicleGeometory front = 1;
  if (this->has_front()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::front(this), output);
  }

  // repeated .sim_msg.VehicleGeometory trailer = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trailer_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->trailer(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.VehicleGeometoryList)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleGeometoryList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.VehicleGeometoryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.VehicleGeometory front = 1;
  if (this->has_front()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::front(this), target);
  }

  // repeated .sim_msg.VehicleGeometory trailer = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trailer_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trailer(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.VehicleGeometoryList)
  return target;
}

size_t VehicleGeometoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.VehicleGeometoryList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.VehicleGeometory trailer = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trailer_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trailer(static_cast<int>(i)));
    }
  }

  // .sim_msg.VehicleGeometory front = 1;
  if (this->has_front()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleGeometoryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.VehicleGeometoryList)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleGeometoryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleGeometoryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.VehicleGeometoryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.VehicleGeometoryList)
    MergeFrom(*source);
  }
}

void VehicleGeometoryList::MergeFrom(const VehicleGeometoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.VehicleGeometoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trailer_.MergeFrom(from.trailer_);
  if (from.has_front()) {
    mutable_front()->::sim_msg::VehicleGeometory::MergeFrom(from.front());
  }
}

void VehicleGeometoryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.VehicleGeometoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleGeometoryList::CopyFrom(const VehicleGeometoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.VehicleGeometoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleGeometoryList::IsInitialized() const {
  return true;
}

void VehicleGeometoryList::InternalSwap(VehicleGeometoryList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&trailer_)->InternalSwap(CastToBase(&other->trailer_));
  swap(front_, other->front_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleGeometoryList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* Arena::CreateMaybeMessage< ::sim_msg::VehicleGeometory_VehicleGeometoryScalar >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::VehicleGeometory_VehicleGeometoryScalar >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::VehicleGeometory_PointInVehicleCoord* Arena::CreateMaybeMessage< ::sim_msg::VehicleGeometory_PointInVehicleCoord >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::VehicleGeometory_PointInVehicleCoord >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::VehicleGeometory_WheelFour* Arena::CreateMaybeMessage< ::sim_msg::VehicleGeometory_WheelFour >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::VehicleGeometory_WheelFour >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::VehicleGeometory* Arena::CreateMaybeMessage< ::sim_msg::VehicleGeometory >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::VehicleGeometory >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::VehicleGeometoryList* Arena::CreateMaybeMessage< ::sim_msg::VehicleGeometoryList >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::VehicleGeometoryList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
