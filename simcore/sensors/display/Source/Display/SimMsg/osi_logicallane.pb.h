// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_logicallane.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5flogicallane_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5flogicallane_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5flogicallane_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5flogicallane_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5flogicallane_2eproto;
namespace osi3 {
class LogicalLane;
class LogicalLaneDefaultTypeInternal;
extern LogicalLaneDefaultTypeInternal _LogicalLane_default_instance_;
class LogicalLaneBoundary;
class LogicalLaneBoundaryDefaultTypeInternal;
extern LogicalLaneBoundaryDefaultTypeInternal _LogicalLaneBoundary_default_instance_;
class LogicalLaneBoundary_LogicalBoundaryPoint;
class LogicalLaneBoundary_LogicalBoundaryPointDefaultTypeInternal;
extern LogicalLaneBoundary_LogicalBoundaryPointDefaultTypeInternal _LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_;
class LogicalLane_LaneConnection;
class LogicalLane_LaneConnectionDefaultTypeInternal;
extern LogicalLane_LaneConnectionDefaultTypeInternal _LogicalLane_LaneConnection_default_instance_;
class LogicalLane_LaneRelation;
class LogicalLane_LaneRelationDefaultTypeInternal;
extern LogicalLane_LaneRelationDefaultTypeInternal _LogicalLane_LaneRelation_default_instance_;
class LogicalLane_PhysicalLaneReference;
class LogicalLane_PhysicalLaneReferenceDefaultTypeInternal;
extern LogicalLane_PhysicalLaneReferenceDefaultTypeInternal _LogicalLane_PhysicalLaneReference_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::LogicalLane* Arena::CreateMaybeMessage<::osi3::LogicalLane>(Arena*);
template<> ::osi3::LogicalLaneBoundary* Arena::CreateMaybeMessage<::osi3::LogicalLaneBoundary>(Arena*);
template<> ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint* Arena::CreateMaybeMessage<::osi3::LogicalLaneBoundary_LogicalBoundaryPoint>(Arena*);
template<> ::osi3::LogicalLane_LaneConnection* Arena::CreateMaybeMessage<::osi3::LogicalLane_LaneConnection>(Arena*);
template<> ::osi3::LogicalLane_LaneRelation* Arena::CreateMaybeMessage<::osi3::LogicalLane_LaneRelation>(Arena*);
template<> ::osi3::LogicalLane_PhysicalLaneReference* Arena::CreateMaybeMessage<::osi3::LogicalLane_PhysicalLaneReference>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum LogicalLaneBoundary_PassingRule : int {
  LogicalLaneBoundary_PassingRule_PASSING_RULE_UNKNOWN = 0,
  LogicalLaneBoundary_PassingRule_PASSING_RULE_OTHER = 1,
  LogicalLaneBoundary_PassingRule_PASSING_RULE_NONE_ALLOWED = 2,
  LogicalLaneBoundary_PassingRule_PASSING_RULE_INCREASING_T = 3,
  LogicalLaneBoundary_PassingRule_PASSING_RULE_DECREASING_T = 4,
  LogicalLaneBoundary_PassingRule_PASSING_RULE_BOTH_ALLOWED = 5,
  LogicalLaneBoundary_PassingRule_LogicalLaneBoundary_PassingRule_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogicalLaneBoundary_PassingRule_LogicalLaneBoundary_PassingRule_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogicalLaneBoundary_PassingRule_IsValid(int value);
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary_PassingRule_PassingRule_MIN = LogicalLaneBoundary_PassingRule_PASSING_RULE_UNKNOWN;
constexpr LogicalLaneBoundary_PassingRule LogicalLaneBoundary_PassingRule_PassingRule_MAX = LogicalLaneBoundary_PassingRule_PASSING_RULE_BOTH_ALLOWED;
constexpr int LogicalLaneBoundary_PassingRule_PassingRule_ARRAYSIZE = LogicalLaneBoundary_PassingRule_PassingRule_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLaneBoundary_PassingRule_descriptor();
template<typename T>
inline const std::string& LogicalLaneBoundary_PassingRule_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalLaneBoundary_PassingRule>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalLaneBoundary_PassingRule_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalLaneBoundary_PassingRule_descriptor(), enum_t_value);
}
inline bool LogicalLaneBoundary_PassingRule_Parse(
    const std::string& name, LogicalLaneBoundary_PassingRule* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalLaneBoundary_PassingRule>(
    LogicalLaneBoundary_PassingRule_descriptor(), name, value);
}
enum LogicalLane_Type : int {
  LogicalLane_Type_TYPE_UNKNOWN = 0,
  LogicalLane_Type_TYPE_OTHER = 1,
  LogicalLane_Type_TYPE_NORMAL = 2,
  LogicalLane_Type_TYPE_BIKING = 3,
  LogicalLane_Type_TYPE_SIDEWALK = 4,
  LogicalLane_Type_TYPE_PARKING = 5,
  LogicalLane_Type_TYPE_STOP = 6,
  LogicalLane_Type_TYPE_RESTRICTED = 7,
  LogicalLane_Type_TYPE_BORDER = 8,
  LogicalLane_Type_TYPE_SHOULDER = 9,
  LogicalLane_Type_TYPE_EXIT = 10,
  LogicalLane_Type_TYPE_ENTRY = 11,
  LogicalLane_Type_TYPE_ONRAMP = 12,
  LogicalLane_Type_TYPE_OFFRAMP = 13,
  LogicalLane_Type_TYPE_CONNECTINGRAMP = 14,
  LogicalLane_Type_TYPE_MEDIAN = 15,
  LogicalLane_Type_TYPE_CURB = 16,
  LogicalLane_Type_TYPE_RAIL = 17,
  LogicalLane_Type_TYPE_TRAM = 18,
  LogicalLane_Type_LogicalLane_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogicalLane_Type_LogicalLane_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogicalLane_Type_IsValid(int value);
constexpr LogicalLane_Type LogicalLane_Type_Type_MIN = LogicalLane_Type_TYPE_UNKNOWN;
constexpr LogicalLane_Type LogicalLane_Type_Type_MAX = LogicalLane_Type_TYPE_TRAM;
constexpr int LogicalLane_Type_Type_ARRAYSIZE = LogicalLane_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLane_Type_descriptor();
template<typename T>
inline const std::string& LogicalLane_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalLane_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalLane_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalLane_Type_descriptor(), enum_t_value);
}
inline bool LogicalLane_Type_Parse(
    const std::string& name, LogicalLane_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalLane_Type>(
    LogicalLane_Type_descriptor(), name, value);
}
enum LogicalLane_MoveDirection : int {
  LogicalLane_MoveDirection_MOVE_DIRECTION_UNKNOWN = 0,
  LogicalLane_MoveDirection_MOVE_DIRECTION_OTHER = 1,
  LogicalLane_MoveDirection_MOVE_DIRECTION_INCREASING_S = 2,
  LogicalLane_MoveDirection_MOVE_DIRECTION_DECREASING_S = 3,
  LogicalLane_MoveDirection_MOVE_DIRECTION_BOTH_ALLOWED = 4,
  LogicalLane_MoveDirection_LogicalLane_MoveDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogicalLane_MoveDirection_LogicalLane_MoveDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogicalLane_MoveDirection_IsValid(int value);
constexpr LogicalLane_MoveDirection LogicalLane_MoveDirection_MoveDirection_MIN = LogicalLane_MoveDirection_MOVE_DIRECTION_UNKNOWN;
constexpr LogicalLane_MoveDirection LogicalLane_MoveDirection_MoveDirection_MAX = LogicalLane_MoveDirection_MOVE_DIRECTION_BOTH_ALLOWED;
constexpr int LogicalLane_MoveDirection_MoveDirection_ARRAYSIZE = LogicalLane_MoveDirection_MoveDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalLane_MoveDirection_descriptor();
template<typename T>
inline const std::string& LogicalLane_MoveDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalLane_MoveDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalLane_MoveDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalLane_MoveDirection_descriptor(), enum_t_value);
}
inline bool LogicalLane_MoveDirection_Parse(
    const std::string& name, LogicalLane_MoveDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalLane_MoveDirection>(
    LogicalLane_MoveDirection_descriptor(), name, value);
}
// ===================================================================

class LogicalLaneBoundary_LogicalBoundaryPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalLaneBoundary.LogicalBoundaryPoint) */ {
 public:
  LogicalLaneBoundary_LogicalBoundaryPoint();
  virtual ~LogicalLaneBoundary_LogicalBoundaryPoint();

  LogicalLaneBoundary_LogicalBoundaryPoint(const LogicalLaneBoundary_LogicalBoundaryPoint& from);
  LogicalLaneBoundary_LogicalBoundaryPoint(LogicalLaneBoundary_LogicalBoundaryPoint&& from) noexcept
    : LogicalLaneBoundary_LogicalBoundaryPoint() {
    *this = ::std::move(from);
  }

  inline LogicalLaneBoundary_LogicalBoundaryPoint& operator=(const LogicalLaneBoundary_LogicalBoundaryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalLaneBoundary_LogicalBoundaryPoint& operator=(LogicalLaneBoundary_LogicalBoundaryPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalLaneBoundary_LogicalBoundaryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalLaneBoundary_LogicalBoundaryPoint* internal_default_instance() {
    return reinterpret_cast<const LogicalLaneBoundary_LogicalBoundaryPoint*>(
               &_LogicalLaneBoundary_LogicalBoundaryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogicalLaneBoundary_LogicalBoundaryPoint& a, LogicalLaneBoundary_LogicalBoundaryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalLaneBoundary_LogicalBoundaryPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalLaneBoundary_LogicalBoundaryPoint* New() const final {
    return CreateMaybeMessage<LogicalLaneBoundary_LogicalBoundaryPoint>(nullptr);
  }

  LogicalLaneBoundary_LogicalBoundaryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalLaneBoundary_LogicalBoundaryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalLaneBoundary_LogicalBoundaryPoint& from);
  void MergeFrom(const LogicalLaneBoundary_LogicalBoundaryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalLaneBoundary_LogicalBoundaryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalLaneBoundary.LogicalBoundaryPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicallane_2eproto);
    return ::descriptor_table_osi_5flogicallane_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kSPositionFieldNumber = 2,
    kTPositionFieldNumber = 3,
  };
  // .osi3.Vector3d position = 1;
  bool has_position() const;
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);

  // double s_position = 2;
  void clear_s_position();
  double s_position() const;
  void set_s_position(double value);

  // double t_position = 3;
  void clear_t_position();
  double t_position() const;
  void set_t_position(double value);

  // @@protoc_insertion_point(class_scope:osi3.LogicalLaneBoundary.LogicalBoundaryPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Vector3d* position_;
  double s_position_;
  double t_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5flogicallane_2eproto;
};
// -------------------------------------------------------------------

class LogicalLaneBoundary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalLaneBoundary) */ {
 public:
  LogicalLaneBoundary();
  virtual ~LogicalLaneBoundary();

  LogicalLaneBoundary(const LogicalLaneBoundary& from);
  LogicalLaneBoundary(LogicalLaneBoundary&& from) noexcept
    : LogicalLaneBoundary() {
    *this = ::std::move(from);
  }

  inline LogicalLaneBoundary& operator=(const LogicalLaneBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalLaneBoundary& operator=(LogicalLaneBoundary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalLaneBoundary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalLaneBoundary* internal_default_instance() {
    return reinterpret_cast<const LogicalLaneBoundary*>(
               &_LogicalLaneBoundary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogicalLaneBoundary& a, LogicalLaneBoundary& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalLaneBoundary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalLaneBoundary* New() const final {
    return CreateMaybeMessage<LogicalLaneBoundary>(nullptr);
  }

  LogicalLaneBoundary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalLaneBoundary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalLaneBoundary& from);
  void MergeFrom(const LogicalLaneBoundary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalLaneBoundary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalLaneBoundary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicallane_2eproto);
    return ::descriptor_table_osi_5flogicallane_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogicalLaneBoundary_LogicalBoundaryPoint LogicalBoundaryPoint;

  typedef LogicalLaneBoundary_PassingRule PassingRule;
  static constexpr PassingRule PASSING_RULE_UNKNOWN =
    LogicalLaneBoundary_PassingRule_PASSING_RULE_UNKNOWN;
  static constexpr PassingRule PASSING_RULE_OTHER =
    LogicalLaneBoundary_PassingRule_PASSING_RULE_OTHER;
  static constexpr PassingRule PASSING_RULE_NONE_ALLOWED =
    LogicalLaneBoundary_PassingRule_PASSING_RULE_NONE_ALLOWED;
  static constexpr PassingRule PASSING_RULE_INCREASING_T =
    LogicalLaneBoundary_PassingRule_PASSING_RULE_INCREASING_T;
  static constexpr PassingRule PASSING_RULE_DECREASING_T =
    LogicalLaneBoundary_PassingRule_PASSING_RULE_DECREASING_T;
  static constexpr PassingRule PASSING_RULE_BOTH_ALLOWED =
    LogicalLaneBoundary_PassingRule_PASSING_RULE_BOTH_ALLOWED;
  static inline bool PassingRule_IsValid(int value) {
    return LogicalLaneBoundary_PassingRule_IsValid(value);
  }
  static constexpr PassingRule PassingRule_MIN =
    LogicalLaneBoundary_PassingRule_PassingRule_MIN;
  static constexpr PassingRule PassingRule_MAX =
    LogicalLaneBoundary_PassingRule_PassingRule_MAX;
  static constexpr int PassingRule_ARRAYSIZE =
    LogicalLaneBoundary_PassingRule_PassingRule_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PassingRule_descriptor() {
    return LogicalLaneBoundary_PassingRule_descriptor();
  }
  template<typename T>
  static inline const std::string& PassingRule_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PassingRule>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PassingRule_Name.");
    return LogicalLaneBoundary_PassingRule_Name(enum_t_value);
  }
  static inline bool PassingRule_Parse(const std::string& name,
      PassingRule* value) {
    return LogicalLaneBoundary_PassingRule_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBoundaryLineFieldNumber = 2,
    kPhysicalBoundaryIdFieldNumber = 4,
    kSourceReferenceFieldNumber = 6,
    kIdFieldNumber = 1,
    kReferenceLineIdFieldNumber = 3,
    kPassingRuleFieldNumber = 5,
  };
  // repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
  int boundary_line_size() const;
  void clear_boundary_line();
  ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint* mutable_boundary_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >*
      mutable_boundary_line();
  const ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint& boundary_line(int index) const;
  ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint* add_boundary_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >&
      boundary_line() const;

  // repeated .osi3.Identifier physical_boundary_id = 4;
  int physical_boundary_id_size() const;
  void clear_physical_boundary_id();
  ::osi3::Identifier* mutable_physical_boundary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_physical_boundary_id();
  const ::osi3::Identifier& physical_boundary_id(int index) const;
  ::osi3::Identifier* add_physical_boundary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      physical_boundary_id() const;

  // repeated .osi3.ExternalReference source_reference = 6;
  int source_reference_size() const;
  void clear_source_reference();
  ::osi3::ExternalReference* mutable_source_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
      mutable_source_reference();
  const ::osi3::ExternalReference& source_reference(int index) const;
  ::osi3::ExternalReference* add_source_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
      source_reference() const;

  // .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* release_id();
  ::osi3::Identifier* mutable_id();
  void set_allocated_id(::osi3::Identifier* id);

  // .osi3.Identifier reference_line_id = 3;
  bool has_reference_line_id() const;
  void clear_reference_line_id();
  const ::osi3::Identifier& reference_line_id() const;
  ::osi3::Identifier* release_reference_line_id();
  ::osi3::Identifier* mutable_reference_line_id();
  void set_allocated_reference_line_id(::osi3::Identifier* reference_line_id);

  // .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
  void clear_passing_rule();
  ::osi3::LogicalLaneBoundary_PassingRule passing_rule() const;
  void set_passing_rule(::osi3::LogicalLaneBoundary_PassingRule value);

  // @@protoc_insertion_point(class_scope:osi3.LogicalLaneBoundary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint > boundary_line_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > physical_boundary_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference > source_reference_;
  ::osi3::Identifier* id_;
  ::osi3::Identifier* reference_line_id_;
  int passing_rule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5flogicallane_2eproto;
};
// -------------------------------------------------------------------

class LogicalLane_PhysicalLaneReference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalLane.PhysicalLaneReference) */ {
 public:
  LogicalLane_PhysicalLaneReference();
  virtual ~LogicalLane_PhysicalLaneReference();

  LogicalLane_PhysicalLaneReference(const LogicalLane_PhysicalLaneReference& from);
  LogicalLane_PhysicalLaneReference(LogicalLane_PhysicalLaneReference&& from) noexcept
    : LogicalLane_PhysicalLaneReference() {
    *this = ::std::move(from);
  }

  inline LogicalLane_PhysicalLaneReference& operator=(const LogicalLane_PhysicalLaneReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalLane_PhysicalLaneReference& operator=(LogicalLane_PhysicalLaneReference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalLane_PhysicalLaneReference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalLane_PhysicalLaneReference* internal_default_instance() {
    return reinterpret_cast<const LogicalLane_PhysicalLaneReference*>(
               &_LogicalLane_PhysicalLaneReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogicalLane_PhysicalLaneReference& a, LogicalLane_PhysicalLaneReference& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalLane_PhysicalLaneReference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalLane_PhysicalLaneReference* New() const final {
    return CreateMaybeMessage<LogicalLane_PhysicalLaneReference>(nullptr);
  }

  LogicalLane_PhysicalLaneReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalLane_PhysicalLaneReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalLane_PhysicalLaneReference& from);
  void MergeFrom(const LogicalLane_PhysicalLaneReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalLane_PhysicalLaneReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalLane.PhysicalLaneReference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicallane_2eproto);
    return ::descriptor_table_osi_5flogicallane_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhysicalLaneIdFieldNumber = 1,
    kStartSFieldNumber = 2,
    kEndSFieldNumber = 3,
  };
  // .osi3.Identifier physical_lane_id = 1;
  bool has_physical_lane_id() const;
  void clear_physical_lane_id();
  const ::osi3::Identifier& physical_lane_id() const;
  ::osi3::Identifier* release_physical_lane_id();
  ::osi3::Identifier* mutable_physical_lane_id();
  void set_allocated_physical_lane_id(::osi3::Identifier* physical_lane_id);

  // double start_s = 2;
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);

  // double end_s = 3;
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);

  // @@protoc_insertion_point(class_scope:osi3.LogicalLane.PhysicalLaneReference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Identifier* physical_lane_id_;
  double start_s_;
  double end_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5flogicallane_2eproto;
};
// -------------------------------------------------------------------

class LogicalLane_LaneConnection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalLane.LaneConnection) */ {
 public:
  LogicalLane_LaneConnection();
  virtual ~LogicalLane_LaneConnection();

  LogicalLane_LaneConnection(const LogicalLane_LaneConnection& from);
  LogicalLane_LaneConnection(LogicalLane_LaneConnection&& from) noexcept
    : LogicalLane_LaneConnection() {
    *this = ::std::move(from);
  }

  inline LogicalLane_LaneConnection& operator=(const LogicalLane_LaneConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalLane_LaneConnection& operator=(LogicalLane_LaneConnection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalLane_LaneConnection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalLane_LaneConnection* internal_default_instance() {
    return reinterpret_cast<const LogicalLane_LaneConnection*>(
               &_LogicalLane_LaneConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogicalLane_LaneConnection& a, LogicalLane_LaneConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalLane_LaneConnection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalLane_LaneConnection* New() const final {
    return CreateMaybeMessage<LogicalLane_LaneConnection>(nullptr);
  }

  LogicalLane_LaneConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalLane_LaneConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalLane_LaneConnection& from);
  void MergeFrom(const LogicalLane_LaneConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalLane_LaneConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalLane.LaneConnection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicallane_2eproto);
    return ::descriptor_table_osi_5flogicallane_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherLaneIdFieldNumber = 1,
    kAtBeginOfOtherLaneFieldNumber = 2,
  };
  // .osi3.Identifier other_lane_id = 1;
  bool has_other_lane_id() const;
  void clear_other_lane_id();
  const ::osi3::Identifier& other_lane_id() const;
  ::osi3::Identifier* release_other_lane_id();
  ::osi3::Identifier* mutable_other_lane_id();
  void set_allocated_other_lane_id(::osi3::Identifier* other_lane_id);

  // bool at_begin_of_other_lane = 2;
  void clear_at_begin_of_other_lane();
  bool at_begin_of_other_lane() const;
  void set_at_begin_of_other_lane(bool value);

  // @@protoc_insertion_point(class_scope:osi3.LogicalLane.LaneConnection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Identifier* other_lane_id_;
  bool at_begin_of_other_lane_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5flogicallane_2eproto;
};
// -------------------------------------------------------------------

class LogicalLane_LaneRelation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalLane.LaneRelation) */ {
 public:
  LogicalLane_LaneRelation();
  virtual ~LogicalLane_LaneRelation();

  LogicalLane_LaneRelation(const LogicalLane_LaneRelation& from);
  LogicalLane_LaneRelation(LogicalLane_LaneRelation&& from) noexcept
    : LogicalLane_LaneRelation() {
    *this = ::std::move(from);
  }

  inline LogicalLane_LaneRelation& operator=(const LogicalLane_LaneRelation& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalLane_LaneRelation& operator=(LogicalLane_LaneRelation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalLane_LaneRelation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalLane_LaneRelation* internal_default_instance() {
    return reinterpret_cast<const LogicalLane_LaneRelation*>(
               &_LogicalLane_LaneRelation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogicalLane_LaneRelation& a, LogicalLane_LaneRelation& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalLane_LaneRelation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalLane_LaneRelation* New() const final {
    return CreateMaybeMessage<LogicalLane_LaneRelation>(nullptr);
  }

  LogicalLane_LaneRelation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalLane_LaneRelation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalLane_LaneRelation& from);
  void MergeFrom(const LogicalLane_LaneRelation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalLane_LaneRelation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalLane.LaneRelation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicallane_2eproto);
    return ::descriptor_table_osi_5flogicallane_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherLaneIdFieldNumber = 1,
    kStartSFieldNumber = 2,
    kEndSFieldNumber = 3,
    kStartSOtherFieldNumber = 4,
    kEndSOtherFieldNumber = 5,
  };
  // .osi3.Identifier other_lane_id = 1;
  bool has_other_lane_id() const;
  void clear_other_lane_id();
  const ::osi3::Identifier& other_lane_id() const;
  ::osi3::Identifier* release_other_lane_id();
  ::osi3::Identifier* mutable_other_lane_id();
  void set_allocated_other_lane_id(::osi3::Identifier* other_lane_id);

  // double start_s = 2;
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);

  // double end_s = 3;
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);

  // double start_s_other = 4;
  void clear_start_s_other();
  double start_s_other() const;
  void set_start_s_other(double value);

  // double end_s_other = 5;
  void clear_end_s_other();
  double end_s_other() const;
  void set_end_s_other(double value);

  // @@protoc_insertion_point(class_scope:osi3.LogicalLane.LaneRelation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::Identifier* other_lane_id_;
  double start_s_;
  double end_s_;
  double start_s_other_;
  double end_s_other_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5flogicallane_2eproto;
};
// -------------------------------------------------------------------

class LogicalLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalLane) */ {
 public:
  LogicalLane();
  virtual ~LogicalLane();

  LogicalLane(const LogicalLane& from);
  LogicalLane(LogicalLane&& from) noexcept
    : LogicalLane() {
    *this = ::std::move(from);
  }

  inline LogicalLane& operator=(const LogicalLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalLane& operator=(LogicalLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalLane* internal_default_instance() {
    return reinterpret_cast<const LogicalLane*>(
               &_LogicalLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LogicalLane& a, LogicalLane& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalLane* New() const final {
    return CreateMaybeMessage<LogicalLane>(nullptr);
  }

  LogicalLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalLane& from);
  void MergeFrom(const LogicalLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicallane_2eproto);
    return ::descriptor_table_osi_5flogicallane_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogicalLane_PhysicalLaneReference PhysicalLaneReference;
  typedef LogicalLane_LaneConnection LaneConnection;
  typedef LogicalLane_LaneRelation LaneRelation;

  typedef LogicalLane_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    LogicalLane_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_OTHER =
    LogicalLane_Type_TYPE_OTHER;
  static constexpr Type TYPE_NORMAL =
    LogicalLane_Type_TYPE_NORMAL;
  static constexpr Type TYPE_BIKING =
    LogicalLane_Type_TYPE_BIKING;
  static constexpr Type TYPE_SIDEWALK =
    LogicalLane_Type_TYPE_SIDEWALK;
  static constexpr Type TYPE_PARKING =
    LogicalLane_Type_TYPE_PARKING;
  static constexpr Type TYPE_STOP =
    LogicalLane_Type_TYPE_STOP;
  static constexpr Type TYPE_RESTRICTED =
    LogicalLane_Type_TYPE_RESTRICTED;
  static constexpr Type TYPE_BORDER =
    LogicalLane_Type_TYPE_BORDER;
  static constexpr Type TYPE_SHOULDER =
    LogicalLane_Type_TYPE_SHOULDER;
  static constexpr Type TYPE_EXIT =
    LogicalLane_Type_TYPE_EXIT;
  static constexpr Type TYPE_ENTRY =
    LogicalLane_Type_TYPE_ENTRY;
  static constexpr Type TYPE_ONRAMP =
    LogicalLane_Type_TYPE_ONRAMP;
  static constexpr Type TYPE_OFFRAMP =
    LogicalLane_Type_TYPE_OFFRAMP;
  static constexpr Type TYPE_CONNECTINGRAMP =
    LogicalLane_Type_TYPE_CONNECTINGRAMP;
  static constexpr Type TYPE_MEDIAN =
    LogicalLane_Type_TYPE_MEDIAN;
  static constexpr Type TYPE_CURB =
    LogicalLane_Type_TYPE_CURB;
  static constexpr Type TYPE_RAIL =
    LogicalLane_Type_TYPE_RAIL;
  static constexpr Type TYPE_TRAM =
    LogicalLane_Type_TYPE_TRAM;
  static inline bool Type_IsValid(int value) {
    return LogicalLane_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LogicalLane_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LogicalLane_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LogicalLane_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return LogicalLane_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LogicalLane_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return LogicalLane_Type_Parse(name, value);
  }

  typedef LogicalLane_MoveDirection MoveDirection;
  static constexpr MoveDirection MOVE_DIRECTION_UNKNOWN =
    LogicalLane_MoveDirection_MOVE_DIRECTION_UNKNOWN;
  static constexpr MoveDirection MOVE_DIRECTION_OTHER =
    LogicalLane_MoveDirection_MOVE_DIRECTION_OTHER;
  static constexpr MoveDirection MOVE_DIRECTION_INCREASING_S =
    LogicalLane_MoveDirection_MOVE_DIRECTION_INCREASING_S;
  static constexpr MoveDirection MOVE_DIRECTION_DECREASING_S =
    LogicalLane_MoveDirection_MOVE_DIRECTION_DECREASING_S;
  static constexpr MoveDirection MOVE_DIRECTION_BOTH_ALLOWED =
    LogicalLane_MoveDirection_MOVE_DIRECTION_BOTH_ALLOWED;
  static inline bool MoveDirection_IsValid(int value) {
    return LogicalLane_MoveDirection_IsValid(value);
  }
  static constexpr MoveDirection MoveDirection_MIN =
    LogicalLane_MoveDirection_MoveDirection_MIN;
  static constexpr MoveDirection MoveDirection_MAX =
    LogicalLane_MoveDirection_MoveDirection_MAX;
  static constexpr int MoveDirection_ARRAYSIZE =
    LogicalLane_MoveDirection_MoveDirection_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MoveDirection_descriptor() {
    return LogicalLane_MoveDirection_descriptor();
  }
  template<typename T>
  static inline const std::string& MoveDirection_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MoveDirection>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MoveDirection_Name.");
    return LogicalLane_MoveDirection_Name(enum_t_value);
  }
  static inline bool MoveDirection_Parse(const std::string& name,
      MoveDirection* value) {
    return LogicalLane_MoveDirection_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceReferenceFieldNumber = 3,
    kPhysicalLaneReferenceFieldNumber = 4,
    kRightAdjacentLaneFieldNumber = 9,
    kLeftAdjacentLaneFieldNumber = 10,
    kOverlappingLaneFieldNumber = 11,
    kRightBoundaryIdFieldNumber = 12,
    kLeftBoundaryIdFieldNumber = 13,
    kPredecessorLaneFieldNumber = 14,
    kSuccessorLaneFieldNumber = 15,
    kIdFieldNumber = 1,
    kReferenceLineIdFieldNumber = 5,
    kTypeFieldNumber = 2,
    kMoveDirectionFieldNumber = 8,
    kStartSFieldNumber = 6,
    kEndSFieldNumber = 7,
  };
  // repeated .osi3.ExternalReference source_reference = 3;
  int source_reference_size() const;
  void clear_source_reference();
  ::osi3::ExternalReference* mutable_source_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
      mutable_source_reference();
  const ::osi3::ExternalReference& source_reference(int index) const;
  ::osi3::ExternalReference* add_source_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
      source_reference() const;

  // repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
  int physical_lane_reference_size() const;
  void clear_physical_lane_reference();
  ::osi3::LogicalLane_PhysicalLaneReference* mutable_physical_lane_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_PhysicalLaneReference >*
      mutable_physical_lane_reference();
  const ::osi3::LogicalLane_PhysicalLaneReference& physical_lane_reference(int index) const;
  ::osi3::LogicalLane_PhysicalLaneReference* add_physical_lane_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_PhysicalLaneReference >&
      physical_lane_reference() const;

  // repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
  int right_adjacent_lane_size() const;
  void clear_right_adjacent_lane();
  ::osi3::LogicalLane_LaneRelation* mutable_right_adjacent_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >*
      mutable_right_adjacent_lane();
  const ::osi3::LogicalLane_LaneRelation& right_adjacent_lane(int index) const;
  ::osi3::LogicalLane_LaneRelation* add_right_adjacent_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >&
      right_adjacent_lane() const;

  // repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
  int left_adjacent_lane_size() const;
  void clear_left_adjacent_lane();
  ::osi3::LogicalLane_LaneRelation* mutable_left_adjacent_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >*
      mutable_left_adjacent_lane();
  const ::osi3::LogicalLane_LaneRelation& left_adjacent_lane(int index) const;
  ::osi3::LogicalLane_LaneRelation* add_left_adjacent_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >&
      left_adjacent_lane() const;

  // repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
  int overlapping_lane_size() const;
  void clear_overlapping_lane();
  ::osi3::LogicalLane_LaneRelation* mutable_overlapping_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >*
      mutable_overlapping_lane();
  const ::osi3::LogicalLane_LaneRelation& overlapping_lane(int index) const;
  ::osi3::LogicalLane_LaneRelation* add_overlapping_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >&
      overlapping_lane() const;

  // repeated .osi3.Identifier right_boundary_id = 12;
  int right_boundary_id_size() const;
  void clear_right_boundary_id();
  ::osi3::Identifier* mutable_right_boundary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_right_boundary_id();
  const ::osi3::Identifier& right_boundary_id(int index) const;
  ::osi3::Identifier* add_right_boundary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      right_boundary_id() const;

  // repeated .osi3.Identifier left_boundary_id = 13;
  int left_boundary_id_size() const;
  void clear_left_boundary_id();
  ::osi3::Identifier* mutable_left_boundary_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_left_boundary_id();
  const ::osi3::Identifier& left_boundary_id(int index) const;
  ::osi3::Identifier* add_left_boundary_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      left_boundary_id() const;

  // repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
  int predecessor_lane_size() const;
  void clear_predecessor_lane();
  ::osi3::LogicalLane_LaneConnection* mutable_predecessor_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >*
      mutable_predecessor_lane();
  const ::osi3::LogicalLane_LaneConnection& predecessor_lane(int index) const;
  ::osi3::LogicalLane_LaneConnection* add_predecessor_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >&
      predecessor_lane() const;

  // repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
  int successor_lane_size() const;
  void clear_successor_lane();
  ::osi3::LogicalLane_LaneConnection* mutable_successor_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >*
      mutable_successor_lane();
  const ::osi3::LogicalLane_LaneConnection& successor_lane(int index) const;
  ::osi3::LogicalLane_LaneConnection* add_successor_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >&
      successor_lane() const;

  // .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* release_id();
  ::osi3::Identifier* mutable_id();
  void set_allocated_id(::osi3::Identifier* id);

  // .osi3.Identifier reference_line_id = 5;
  bool has_reference_line_id() const;
  void clear_reference_line_id();
  const ::osi3::Identifier& reference_line_id() const;
  ::osi3::Identifier* release_reference_line_id();
  ::osi3::Identifier* mutable_reference_line_id();
  void set_allocated_reference_line_id(::osi3::Identifier* reference_line_id);

  // .osi3.LogicalLane.Type type = 2;
  void clear_type();
  ::osi3::LogicalLane_Type type() const;
  void set_type(::osi3::LogicalLane_Type value);

  // .osi3.LogicalLane.MoveDirection move_direction = 8;
  void clear_move_direction();
  ::osi3::LogicalLane_MoveDirection move_direction() const;
  void set_move_direction(::osi3::LogicalLane_MoveDirection value);

  // double start_s = 6;
  void clear_start_s();
  double start_s() const;
  void set_start_s(double value);

  // double end_s = 7;
  void clear_end_s();
  double end_s() const;
  void set_end_s(double value);

  // @@protoc_insertion_point(class_scope:osi3.LogicalLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference > source_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_PhysicalLaneReference > physical_lane_reference_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation > right_adjacent_lane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation > left_adjacent_lane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation > overlapping_lane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > right_boundary_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > left_boundary_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection > predecessor_lane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection > successor_lane_;
  ::osi3::Identifier* id_;
  ::osi3::Identifier* reference_line_id_;
  int type_;
  int move_direction_;
  double start_s_;
  double end_s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5flogicallane_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogicalLaneBoundary_LogicalBoundaryPoint

// .osi3.Vector3d position = 1;
inline bool LogicalLaneBoundary_LogicalBoundaryPoint::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline const ::osi3::Vector3d& LogicalLaneBoundary_LogicalBoundaryPoint::position() const {
  const ::osi3::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline ::osi3::Vector3d* LogicalLaneBoundary_LogicalBoundaryPoint::release_position() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* LogicalLaneBoundary_LogicalBoundaryPoint::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.position)
  return position_;
}
inline void LogicalLaneBoundary_LogicalBoundaryPoint::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.position)
}

// double s_position = 2;
inline void LogicalLaneBoundary_LogicalBoundaryPoint::clear_s_position() {
  s_position_ = 0;
}
inline double LogicalLaneBoundary_LogicalBoundaryPoint::s_position() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.s_position)
  return s_position_;
}
inline void LogicalLaneBoundary_LogicalBoundaryPoint::set_s_position(double value) {
  
  s_position_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.s_position)
}

// double t_position = 3;
inline void LogicalLaneBoundary_LogicalBoundaryPoint::clear_t_position() {
  t_position_ = 0;
}
inline double LogicalLaneBoundary_LogicalBoundaryPoint::t_position() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.t_position)
  return t_position_;
}
inline void LogicalLaneBoundary_LogicalBoundaryPoint::set_t_position(double value) {
  
  t_position_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLaneBoundary.LogicalBoundaryPoint.t_position)
}

// -------------------------------------------------------------------

// LogicalLaneBoundary

// .osi3.Identifier id = 1;
inline bool LogicalLaneBoundary::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::osi3::Identifier& LogicalLaneBoundary::id() const {
  const ::osi3::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* LogicalLaneBoundary::release_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLaneBoundary.id)
  
  ::osi3::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLaneBoundary::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLaneBoundary.id)
  return id_;
}
inline void LogicalLaneBoundary::set_allocated_id(::osi3::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLaneBoundary.id)
}

// repeated .osi3.LogicalLaneBoundary.LogicalBoundaryPoint boundary_line = 2;
inline int LogicalLaneBoundary::boundary_line_size() const {
  return boundary_line_.size();
}
inline void LogicalLaneBoundary::clear_boundary_line() {
  boundary_line_.Clear();
}
inline ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint* LogicalLaneBoundary::mutable_boundary_line(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLaneBoundary.boundary_line)
  return boundary_line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >*
LogicalLaneBoundary::mutable_boundary_line() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLaneBoundary.boundary_line)
  return &boundary_line_;
}
inline const ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint& LogicalLaneBoundary::boundary_line(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.boundary_line)
  return boundary_line_.Get(index);
}
inline ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint* LogicalLaneBoundary::add_boundary_line() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLaneBoundary.boundary_line)
  return boundary_line_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary_LogicalBoundaryPoint >&
LogicalLaneBoundary::boundary_line() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLaneBoundary.boundary_line)
  return boundary_line_;
}

// .osi3.Identifier reference_line_id = 3;
inline bool LogicalLaneBoundary::has_reference_line_id() const {
  return this != internal_default_instance() && reference_line_id_ != nullptr;
}
inline const ::osi3::Identifier& LogicalLaneBoundary::reference_line_id() const {
  const ::osi3::Identifier* p = reference_line_id_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.reference_line_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* LogicalLaneBoundary::release_reference_line_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLaneBoundary.reference_line_id)
  
  ::osi3::Identifier* temp = reference_line_id_;
  reference_line_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLaneBoundary::mutable_reference_line_id() {
  
  if (reference_line_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    reference_line_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLaneBoundary.reference_line_id)
  return reference_line_id_;
}
inline void LogicalLaneBoundary::set_allocated_reference_line_id(::osi3::Identifier* reference_line_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_line_id_);
  }
  if (reference_line_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_line_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_line_id, submessage_arena);
    }
    
  } else {
    
  }
  reference_line_id_ = reference_line_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLaneBoundary.reference_line_id)
}

// repeated .osi3.Identifier physical_boundary_id = 4;
inline int LogicalLaneBoundary::physical_boundary_id_size() const {
  return physical_boundary_id_.size();
}
inline ::osi3::Identifier* LogicalLaneBoundary::mutable_physical_boundary_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLaneBoundary.physical_boundary_id)
  return physical_boundary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
LogicalLaneBoundary::mutable_physical_boundary_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLaneBoundary.physical_boundary_id)
  return &physical_boundary_id_;
}
inline const ::osi3::Identifier& LogicalLaneBoundary::physical_boundary_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.physical_boundary_id)
  return physical_boundary_id_.Get(index);
}
inline ::osi3::Identifier* LogicalLaneBoundary::add_physical_boundary_id() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLaneBoundary.physical_boundary_id)
  return physical_boundary_id_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
LogicalLaneBoundary::physical_boundary_id() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLaneBoundary.physical_boundary_id)
  return physical_boundary_id_;
}

// .osi3.LogicalLaneBoundary.PassingRule passing_rule = 5;
inline void LogicalLaneBoundary::clear_passing_rule() {
  passing_rule_ = 0;
}
inline ::osi3::LogicalLaneBoundary_PassingRule LogicalLaneBoundary::passing_rule() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.passing_rule)
  return static_cast< ::osi3::LogicalLaneBoundary_PassingRule >(passing_rule_);
}
inline void LogicalLaneBoundary::set_passing_rule(::osi3::LogicalLaneBoundary_PassingRule value) {
  
  passing_rule_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLaneBoundary.passing_rule)
}

// repeated .osi3.ExternalReference source_reference = 6;
inline int LogicalLaneBoundary::source_reference_size() const {
  return source_reference_.size();
}
inline ::osi3::ExternalReference* LogicalLaneBoundary::mutable_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLaneBoundary.source_reference)
  return source_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
LogicalLaneBoundary::mutable_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLaneBoundary.source_reference)
  return &source_reference_;
}
inline const ::osi3::ExternalReference& LogicalLaneBoundary::source_reference(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneBoundary.source_reference)
  return source_reference_.Get(index);
}
inline ::osi3::ExternalReference* LogicalLaneBoundary::add_source_reference() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLaneBoundary.source_reference)
  return source_reference_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
LogicalLaneBoundary::source_reference() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLaneBoundary.source_reference)
  return source_reference_;
}

// -------------------------------------------------------------------

// LogicalLane_PhysicalLaneReference

// .osi3.Identifier physical_lane_id = 1;
inline bool LogicalLane_PhysicalLaneReference::has_physical_lane_id() const {
  return this != internal_default_instance() && physical_lane_id_ != nullptr;
}
inline const ::osi3::Identifier& LogicalLane_PhysicalLaneReference::physical_lane_id() const {
  const ::osi3::Identifier* p = physical_lane_id_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.PhysicalLaneReference.physical_lane_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* LogicalLane_PhysicalLaneReference::release_physical_lane_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLane.PhysicalLaneReference.physical_lane_id)
  
  ::osi3::Identifier* temp = physical_lane_id_;
  physical_lane_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLane_PhysicalLaneReference::mutable_physical_lane_id() {
  
  if (physical_lane_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    physical_lane_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.PhysicalLaneReference.physical_lane_id)
  return physical_lane_id_;
}
inline void LogicalLane_PhysicalLaneReference::set_allocated_physical_lane_id(::osi3::Identifier* physical_lane_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(physical_lane_id_);
  }
  if (physical_lane_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      physical_lane_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physical_lane_id, submessage_arena);
    }
    
  } else {
    
  }
  physical_lane_id_ = physical_lane_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLane.PhysicalLaneReference.physical_lane_id)
}

// double start_s = 2;
inline void LogicalLane_PhysicalLaneReference::clear_start_s() {
  start_s_ = 0;
}
inline double LogicalLane_PhysicalLaneReference::start_s() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.PhysicalLaneReference.start_s)
  return start_s_;
}
inline void LogicalLane_PhysicalLaneReference::set_start_s(double value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.PhysicalLaneReference.start_s)
}

// double end_s = 3;
inline void LogicalLane_PhysicalLaneReference::clear_end_s() {
  end_s_ = 0;
}
inline double LogicalLane_PhysicalLaneReference::end_s() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.PhysicalLaneReference.end_s)
  return end_s_;
}
inline void LogicalLane_PhysicalLaneReference::set_end_s(double value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.PhysicalLaneReference.end_s)
}

// -------------------------------------------------------------------

// LogicalLane_LaneConnection

// .osi3.Identifier other_lane_id = 1;
inline bool LogicalLane_LaneConnection::has_other_lane_id() const {
  return this != internal_default_instance() && other_lane_id_ != nullptr;
}
inline const ::osi3::Identifier& LogicalLane_LaneConnection::other_lane_id() const {
  const ::osi3::Identifier* p = other_lane_id_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.LaneConnection.other_lane_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* LogicalLane_LaneConnection::release_other_lane_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLane.LaneConnection.other_lane_id)
  
  ::osi3::Identifier* temp = other_lane_id_;
  other_lane_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLane_LaneConnection::mutable_other_lane_id() {
  
  if (other_lane_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    other_lane_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.LaneConnection.other_lane_id)
  return other_lane_id_;
}
inline void LogicalLane_LaneConnection::set_allocated_other_lane_id(::osi3::Identifier* other_lane_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_lane_id_);
  }
  if (other_lane_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      other_lane_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_lane_id, submessage_arena);
    }
    
  } else {
    
  }
  other_lane_id_ = other_lane_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLane.LaneConnection.other_lane_id)
}

// bool at_begin_of_other_lane = 2;
inline void LogicalLane_LaneConnection::clear_at_begin_of_other_lane() {
  at_begin_of_other_lane_ = false;
}
inline bool LogicalLane_LaneConnection::at_begin_of_other_lane() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.LaneConnection.at_begin_of_other_lane)
  return at_begin_of_other_lane_;
}
inline void LogicalLane_LaneConnection::set_at_begin_of_other_lane(bool value) {
  
  at_begin_of_other_lane_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.LaneConnection.at_begin_of_other_lane)
}

// -------------------------------------------------------------------

// LogicalLane_LaneRelation

// .osi3.Identifier other_lane_id = 1;
inline bool LogicalLane_LaneRelation::has_other_lane_id() const {
  return this != internal_default_instance() && other_lane_id_ != nullptr;
}
inline const ::osi3::Identifier& LogicalLane_LaneRelation::other_lane_id() const {
  const ::osi3::Identifier* p = other_lane_id_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.LaneRelation.other_lane_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* LogicalLane_LaneRelation::release_other_lane_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLane.LaneRelation.other_lane_id)
  
  ::osi3::Identifier* temp = other_lane_id_;
  other_lane_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLane_LaneRelation::mutable_other_lane_id() {
  
  if (other_lane_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    other_lane_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.LaneRelation.other_lane_id)
  return other_lane_id_;
}
inline void LogicalLane_LaneRelation::set_allocated_other_lane_id(::osi3::Identifier* other_lane_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_lane_id_);
  }
  if (other_lane_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      other_lane_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_lane_id, submessage_arena);
    }
    
  } else {
    
  }
  other_lane_id_ = other_lane_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLane.LaneRelation.other_lane_id)
}

// double start_s = 2;
inline void LogicalLane_LaneRelation::clear_start_s() {
  start_s_ = 0;
}
inline double LogicalLane_LaneRelation::start_s() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.LaneRelation.start_s)
  return start_s_;
}
inline void LogicalLane_LaneRelation::set_start_s(double value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.LaneRelation.start_s)
}

// double end_s = 3;
inline void LogicalLane_LaneRelation::clear_end_s() {
  end_s_ = 0;
}
inline double LogicalLane_LaneRelation::end_s() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.LaneRelation.end_s)
  return end_s_;
}
inline void LogicalLane_LaneRelation::set_end_s(double value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.LaneRelation.end_s)
}

// double start_s_other = 4;
inline void LogicalLane_LaneRelation::clear_start_s_other() {
  start_s_other_ = 0;
}
inline double LogicalLane_LaneRelation::start_s_other() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.LaneRelation.start_s_other)
  return start_s_other_;
}
inline void LogicalLane_LaneRelation::set_start_s_other(double value) {
  
  start_s_other_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.LaneRelation.start_s_other)
}

// double end_s_other = 5;
inline void LogicalLane_LaneRelation::clear_end_s_other() {
  end_s_other_ = 0;
}
inline double LogicalLane_LaneRelation::end_s_other() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.LaneRelation.end_s_other)
  return end_s_other_;
}
inline void LogicalLane_LaneRelation::set_end_s_other(double value) {
  
  end_s_other_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.LaneRelation.end_s_other)
}

// -------------------------------------------------------------------

// LogicalLane

// .osi3.Identifier id = 1;
inline bool LogicalLane::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::osi3::Identifier& LogicalLane::id() const {
  const ::osi3::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* LogicalLane::release_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLane.id)
  
  ::osi3::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLane::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.id)
  return id_;
}
inline void LogicalLane::set_allocated_id(::osi3::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLane.id)
}

// .osi3.LogicalLane.Type type = 2;
inline void LogicalLane::clear_type() {
  type_ = 0;
}
inline ::osi3::LogicalLane_Type LogicalLane::type() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.type)
  return static_cast< ::osi3::LogicalLane_Type >(type_);
}
inline void LogicalLane::set_type(::osi3::LogicalLane_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.type)
}

// repeated .osi3.ExternalReference source_reference = 3;
inline int LogicalLane::source_reference_size() const {
  return source_reference_.size();
}
inline ::osi3::ExternalReference* LogicalLane::mutable_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.source_reference)
  return source_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
LogicalLane::mutable_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.source_reference)
  return &source_reference_;
}
inline const ::osi3::ExternalReference& LogicalLane::source_reference(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.source_reference)
  return source_reference_.Get(index);
}
inline ::osi3::ExternalReference* LogicalLane::add_source_reference() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.source_reference)
  return source_reference_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
LogicalLane::source_reference() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.source_reference)
  return source_reference_;
}

// repeated .osi3.LogicalLane.PhysicalLaneReference physical_lane_reference = 4;
inline int LogicalLane::physical_lane_reference_size() const {
  return physical_lane_reference_.size();
}
inline void LogicalLane::clear_physical_lane_reference() {
  physical_lane_reference_.Clear();
}
inline ::osi3::LogicalLane_PhysicalLaneReference* LogicalLane::mutable_physical_lane_reference(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.physical_lane_reference)
  return physical_lane_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_PhysicalLaneReference >*
LogicalLane::mutable_physical_lane_reference() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.physical_lane_reference)
  return &physical_lane_reference_;
}
inline const ::osi3::LogicalLane_PhysicalLaneReference& LogicalLane::physical_lane_reference(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.physical_lane_reference)
  return physical_lane_reference_.Get(index);
}
inline ::osi3::LogicalLane_PhysicalLaneReference* LogicalLane::add_physical_lane_reference() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.physical_lane_reference)
  return physical_lane_reference_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_PhysicalLaneReference >&
LogicalLane::physical_lane_reference() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.physical_lane_reference)
  return physical_lane_reference_;
}

// .osi3.Identifier reference_line_id = 5;
inline bool LogicalLane::has_reference_line_id() const {
  return this != internal_default_instance() && reference_line_id_ != nullptr;
}
inline const ::osi3::Identifier& LogicalLane::reference_line_id() const {
  const ::osi3::Identifier* p = reference_line_id_;
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.reference_line_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* LogicalLane::release_reference_line_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLane.reference_line_id)
  
  ::osi3::Identifier* temp = reference_line_id_;
  reference_line_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLane::mutable_reference_line_id() {
  
  if (reference_line_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    reference_line_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.reference_line_id)
  return reference_line_id_;
}
inline void LogicalLane::set_allocated_reference_line_id(::osi3::Identifier* reference_line_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_line_id_);
  }
  if (reference_line_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference_line_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_line_id, submessage_arena);
    }
    
  } else {
    
  }
  reference_line_id_ = reference_line_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLane.reference_line_id)
}

// double start_s = 6;
inline void LogicalLane::clear_start_s() {
  start_s_ = 0;
}
inline double LogicalLane::start_s() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.start_s)
  return start_s_;
}
inline void LogicalLane::set_start_s(double value) {
  
  start_s_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.start_s)
}

// double end_s = 7;
inline void LogicalLane::clear_end_s() {
  end_s_ = 0;
}
inline double LogicalLane::end_s() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.end_s)
  return end_s_;
}
inline void LogicalLane::set_end_s(double value) {
  
  end_s_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.end_s)
}

// .osi3.LogicalLane.MoveDirection move_direction = 8;
inline void LogicalLane::clear_move_direction() {
  move_direction_ = 0;
}
inline ::osi3::LogicalLane_MoveDirection LogicalLane::move_direction() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.move_direction)
  return static_cast< ::osi3::LogicalLane_MoveDirection >(move_direction_);
}
inline void LogicalLane::set_move_direction(::osi3::LogicalLane_MoveDirection value) {
  
  move_direction_ = value;
  // @@protoc_insertion_point(field_set:osi3.LogicalLane.move_direction)
}

// repeated .osi3.LogicalLane.LaneRelation right_adjacent_lane = 9;
inline int LogicalLane::right_adjacent_lane_size() const {
  return right_adjacent_lane_.size();
}
inline void LogicalLane::clear_right_adjacent_lane() {
  right_adjacent_lane_.Clear();
}
inline ::osi3::LogicalLane_LaneRelation* LogicalLane::mutable_right_adjacent_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.right_adjacent_lane)
  return right_adjacent_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >*
LogicalLane::mutable_right_adjacent_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.right_adjacent_lane)
  return &right_adjacent_lane_;
}
inline const ::osi3::LogicalLane_LaneRelation& LogicalLane::right_adjacent_lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.right_adjacent_lane)
  return right_adjacent_lane_.Get(index);
}
inline ::osi3::LogicalLane_LaneRelation* LogicalLane::add_right_adjacent_lane() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.right_adjacent_lane)
  return right_adjacent_lane_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >&
LogicalLane::right_adjacent_lane() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.right_adjacent_lane)
  return right_adjacent_lane_;
}

// repeated .osi3.LogicalLane.LaneRelation left_adjacent_lane = 10;
inline int LogicalLane::left_adjacent_lane_size() const {
  return left_adjacent_lane_.size();
}
inline void LogicalLane::clear_left_adjacent_lane() {
  left_adjacent_lane_.Clear();
}
inline ::osi3::LogicalLane_LaneRelation* LogicalLane::mutable_left_adjacent_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.left_adjacent_lane)
  return left_adjacent_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >*
LogicalLane::mutable_left_adjacent_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.left_adjacent_lane)
  return &left_adjacent_lane_;
}
inline const ::osi3::LogicalLane_LaneRelation& LogicalLane::left_adjacent_lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.left_adjacent_lane)
  return left_adjacent_lane_.Get(index);
}
inline ::osi3::LogicalLane_LaneRelation* LogicalLane::add_left_adjacent_lane() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.left_adjacent_lane)
  return left_adjacent_lane_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >&
LogicalLane::left_adjacent_lane() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.left_adjacent_lane)
  return left_adjacent_lane_;
}

// repeated .osi3.LogicalLane.LaneRelation overlapping_lane = 11;
inline int LogicalLane::overlapping_lane_size() const {
  return overlapping_lane_.size();
}
inline void LogicalLane::clear_overlapping_lane() {
  overlapping_lane_.Clear();
}
inline ::osi3::LogicalLane_LaneRelation* LogicalLane::mutable_overlapping_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.overlapping_lane)
  return overlapping_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >*
LogicalLane::mutable_overlapping_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.overlapping_lane)
  return &overlapping_lane_;
}
inline const ::osi3::LogicalLane_LaneRelation& LogicalLane::overlapping_lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.overlapping_lane)
  return overlapping_lane_.Get(index);
}
inline ::osi3::LogicalLane_LaneRelation* LogicalLane::add_overlapping_lane() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.overlapping_lane)
  return overlapping_lane_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneRelation >&
LogicalLane::overlapping_lane() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.overlapping_lane)
  return overlapping_lane_;
}

// repeated .osi3.Identifier right_boundary_id = 12;
inline int LogicalLane::right_boundary_id_size() const {
  return right_boundary_id_.size();
}
inline ::osi3::Identifier* LogicalLane::mutable_right_boundary_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.right_boundary_id)
  return right_boundary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
LogicalLane::mutable_right_boundary_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.right_boundary_id)
  return &right_boundary_id_;
}
inline const ::osi3::Identifier& LogicalLane::right_boundary_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.right_boundary_id)
  return right_boundary_id_.Get(index);
}
inline ::osi3::Identifier* LogicalLane::add_right_boundary_id() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.right_boundary_id)
  return right_boundary_id_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
LogicalLane::right_boundary_id() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.right_boundary_id)
  return right_boundary_id_;
}

// repeated .osi3.Identifier left_boundary_id = 13;
inline int LogicalLane::left_boundary_id_size() const {
  return left_boundary_id_.size();
}
inline ::osi3::Identifier* LogicalLane::mutable_left_boundary_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.left_boundary_id)
  return left_boundary_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
LogicalLane::mutable_left_boundary_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.left_boundary_id)
  return &left_boundary_id_;
}
inline const ::osi3::Identifier& LogicalLane::left_boundary_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.left_boundary_id)
  return left_boundary_id_.Get(index);
}
inline ::osi3::Identifier* LogicalLane::add_left_boundary_id() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.left_boundary_id)
  return left_boundary_id_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
LogicalLane::left_boundary_id() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.left_boundary_id)
  return left_boundary_id_;
}

// repeated .osi3.LogicalLane.LaneConnection predecessor_lane = 14;
inline int LogicalLane::predecessor_lane_size() const {
  return predecessor_lane_.size();
}
inline void LogicalLane::clear_predecessor_lane() {
  predecessor_lane_.Clear();
}
inline ::osi3::LogicalLane_LaneConnection* LogicalLane::mutable_predecessor_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.predecessor_lane)
  return predecessor_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >*
LogicalLane::mutable_predecessor_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.predecessor_lane)
  return &predecessor_lane_;
}
inline const ::osi3::LogicalLane_LaneConnection& LogicalLane::predecessor_lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.predecessor_lane)
  return predecessor_lane_.Get(index);
}
inline ::osi3::LogicalLane_LaneConnection* LogicalLane::add_predecessor_lane() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.predecessor_lane)
  return predecessor_lane_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >&
LogicalLane::predecessor_lane() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.predecessor_lane)
  return predecessor_lane_;
}

// repeated .osi3.LogicalLane.LaneConnection successor_lane = 15;
inline int LogicalLane::successor_lane_size() const {
  return successor_lane_.size();
}
inline void LogicalLane::clear_successor_lane() {
  successor_lane_.Clear();
}
inline ::osi3::LogicalLane_LaneConnection* LogicalLane::mutable_successor_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLane.successor_lane)
  return successor_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >*
LogicalLane::mutable_successor_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalLane.successor_lane)
  return &successor_lane_;
}
inline const ::osi3::LogicalLane_LaneConnection& LogicalLane::successor_lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLane.successor_lane)
  return successor_lane_.Get(index);
}
inline ::osi3::LogicalLane_LaneConnection* LogicalLane::add_successor_lane() {
  // @@protoc_insertion_point(field_add:osi3.LogicalLane.successor_lane)
  return successor_lane_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane_LaneConnection >&
LogicalLane::successor_lane() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalLane.successor_lane)
  return successor_lane_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::LogicalLaneBoundary_PassingRule> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::LogicalLaneBoundary_PassingRule>() {
  return ::osi3::LogicalLaneBoundary_PassingRule_descriptor();
}
template <> struct is_proto_enum< ::osi3::LogicalLane_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::LogicalLane_Type>() {
  return ::osi3::LogicalLane_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::LogicalLane_MoveDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::LogicalLane_MoveDirection>() {
  return ::osi3::LogicalLane_MoveDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5flogicallane_2eproto
