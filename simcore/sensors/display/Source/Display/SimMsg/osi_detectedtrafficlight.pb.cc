// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedtrafficlight.proto
#pragma warning (disable : 4125)

#include "osi_detectedtrafficlight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseStationary_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficlight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficlight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto;
namespace osi3 {
class DetectedTrafficLight_CandidateTrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedTrafficLight_CandidateTrafficLight> _instance;
} _DetectedTrafficLight_CandidateTrafficLight_default_instance_;
class DetectedTrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedTrafficLight> _instance;
} _DetectedTrafficLight_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedTrafficLight_default_instance_;
    new (ptr) ::osi3::DetectedTrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedTrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto}, {
      &scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base,
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,
      &scc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedTrafficLight_CandidateTrafficLight_default_instance_;
    new (ptr) ::osi3::DetectedTrafficLight_CandidateTrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedTrafficLight_CandidateTrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto}, {
      &scc_info_TrafficLight_Classification_osi_5ftrafficlight_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fdetectedtrafficlight_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fdetectedtrafficlight_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedtrafficlight_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fdetectedtrafficlight_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight_CandidateTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight_CandidateTrafficLight, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight_CandidateTrafficLight, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedTrafficLight, color_description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::DetectedTrafficLight_CandidateTrafficLight)},
  { 7, -1, sizeof(::osi3::DetectedTrafficLight)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficLight_CandidateTrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedTrafficLight_default_instance_),
};

const char descriptor_table_protodef_osi_5fdetectedtrafficlight_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036osi_detectedtrafficlight.proto\022\004osi3\032\020"
  "osi_common.proto\032\026osi_trafficlight.proto"
  "\032\030osi_detectedobject.proto\"\356\002\n\024DetectedT"
  "rafficLight\022(\n\006header\030\001 \001(\0132\030.osi3.Detec"
  "tedItemHeader\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseS"
  "tationary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.Base"
  "Stationary\022C\n\tcandidate\030\004 \003(\01320.osi3.Det"
  "ectedTrafficLight.CandidateTrafficLight\022"
  "1\n\021color_description\030\005 \001(\0132\026.osi3.ColorD"
  "escription\032g\n\025CandidateTrafficLight\022\023\n\013p"
  "robability\030\001 \001(\001\0229\n\016classification\030\002 \001(\013"
  "2!.osi3.TrafficLight.ClassificationB\002H\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fdetectedtrafficlight_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5ftrafficlight_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fdetectedtrafficlight_2eproto_sccs[2] = {
  &scc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto.base,
  &scc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fdetectedtrafficlight_2eproto_once;
static bool descriptor_table_osi_5fdetectedtrafficlight_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedtrafficlight_2eproto = {
  &descriptor_table_osi_5fdetectedtrafficlight_2eproto_initialized, descriptor_table_protodef_osi_5fdetectedtrafficlight_2eproto, "osi_detectedtrafficlight.proto", 487,
  &descriptor_table_osi_5fdetectedtrafficlight_2eproto_once, descriptor_table_osi_5fdetectedtrafficlight_2eproto_sccs, descriptor_table_osi_5fdetectedtrafficlight_2eproto_deps, 2, 3,
  schemas, file_default_instances, TableStruct_osi_5fdetectedtrafficlight_2eproto::offsets,
  file_level_metadata_osi_5fdetectedtrafficlight_2eproto, 2, file_level_enum_descriptors_osi_5fdetectedtrafficlight_2eproto, file_level_service_descriptors_osi_5fdetectedtrafficlight_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fdetectedtrafficlight_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fdetectedtrafficlight_2eproto), true);
namespace osi3 {

// ===================================================================

void DetectedTrafficLight_CandidateTrafficLight::InitAsDefaultInstance() {
  ::osi3::_DetectedTrafficLight_CandidateTrafficLight_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::TrafficLight_Classification*>(
      ::osi3::TrafficLight_Classification::internal_default_instance());
}
class DetectedTrafficLight_CandidateTrafficLight::_Internal {
 public:
  static const ::osi3::TrafficLight_Classification& classification(const DetectedTrafficLight_CandidateTrafficLight* msg);
};

const ::osi3::TrafficLight_Classification&
DetectedTrafficLight_CandidateTrafficLight::_Internal::classification(const DetectedTrafficLight_CandidateTrafficLight* msg) {
  return *msg->classification_;
}
void DetectedTrafficLight_CandidateTrafficLight::clear_classification() {
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
DetectedTrafficLight_CandidateTrafficLight::DetectedTrafficLight_CandidateTrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
}
DetectedTrafficLight_CandidateTrafficLight::DetectedTrafficLight_CandidateTrafficLight(const DetectedTrafficLight_CandidateTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classification()) {
    classification_ = new ::osi3::TrafficLight_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
}

void DetectedTrafficLight_CandidateTrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto.base);
  ::memset(&classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedTrafficLight_CandidateTrafficLight::~DetectedTrafficLight_CandidateTrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficLight.CandidateTrafficLight)
  SharedDtor();
}

void DetectedTrafficLight_CandidateTrafficLight::SharedDtor() {
  if (this != internal_default_instance()) delete classification_;
}

void DetectedTrafficLight_CandidateTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedTrafficLight_CandidateTrafficLight& DetectedTrafficLight_CandidateTrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedTrafficLight_CandidateTrafficLight_osi_5fdetectedtrafficlight_2eproto.base);
  return *internal_default_instance();
}


void DetectedTrafficLight_CandidateTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedTrafficLight_CandidateTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.TrafficLight.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedTrafficLight_CandidateTrafficLight::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.TrafficLight.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficLight.CandidateTrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficLight.CandidateTrafficLight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedTrafficLight_CandidateTrafficLight::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // .osi3.TrafficLight.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficLight.CandidateTrafficLight)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficLight_CandidateTrafficLight::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // .osi3.TrafficLight.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficLight.CandidateTrafficLight)
  return target;
}

size_t DetectedTrafficLight_CandidateTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.TrafficLight.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedTrafficLight_CandidateTrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedTrafficLight_CandidateTrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedTrafficLight_CandidateTrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficLight.CandidateTrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficLight.CandidateTrafficLight)
    MergeFrom(*source);
  }
}

void DetectedTrafficLight_CandidateTrafficLight::MergeFrom(const DetectedTrafficLight_CandidateTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classification()) {
    mutable_classification()->::osi3::TrafficLight_Classification::MergeFrom(from.classification());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
}

void DetectedTrafficLight_CandidateTrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficLight_CandidateTrafficLight::CopyFrom(const DetectedTrafficLight_CandidateTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficLight.CandidateTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficLight_CandidateTrafficLight::IsInitialized() const {
  return true;
}

void DetectedTrafficLight_CandidateTrafficLight::InternalSwap(DetectedTrafficLight_CandidateTrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classification_, other->classification_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficLight_CandidateTrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedTrafficLight::InitAsDefaultInstance() {
  ::osi3::_DetectedTrafficLight_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::DetectedItemHeader*>(
      ::osi3::DetectedItemHeader::internal_default_instance());
  ::osi3::_DetectedTrafficLight_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_DetectedTrafficLight_default_instance_._instance.get_mutable()->base_rmse_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_DetectedTrafficLight_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class DetectedTrafficLight::_Internal {
 public:
  static const ::osi3::DetectedItemHeader& header(const DetectedTrafficLight* msg);
  static const ::osi3::BaseStationary& base(const DetectedTrafficLight* msg);
  static const ::osi3::BaseStationary& base_rmse(const DetectedTrafficLight* msg);
  static const ::osi3::ColorDescription& color_description(const DetectedTrafficLight* msg);
};

const ::osi3::DetectedItemHeader&
DetectedTrafficLight::_Internal::header(const DetectedTrafficLight* msg) {
  return *msg->header_;
}
const ::osi3::BaseStationary&
DetectedTrafficLight::_Internal::base(const DetectedTrafficLight* msg) {
  return *msg->base_;
}
const ::osi3::BaseStationary&
DetectedTrafficLight::_Internal::base_rmse(const DetectedTrafficLight* msg) {
  return *msg->base_rmse_;
}
const ::osi3::ColorDescription&
DetectedTrafficLight::_Internal::color_description(const DetectedTrafficLight* msg) {
  return *msg->color_description_;
}
void DetectedTrafficLight::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void DetectedTrafficLight::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void DetectedTrafficLight::clear_base_rmse() {
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
}
void DetectedTrafficLight::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
DetectedTrafficLight::DetectedTrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedTrafficLight)
}
DetectedTrafficLight::DetectedTrafficLight(const DetectedTrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseStationary(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedTrafficLight)
}

void DetectedTrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_description_) -
      reinterpret_cast<char*>(&header_)) + sizeof(color_description_));
}

DetectedTrafficLight::~DetectedTrafficLight() {
  // @@protoc_insertion_point(destructor:osi3.DetectedTrafficLight)
  SharedDtor();
}

void DetectedTrafficLight::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
  if (this != internal_default_instance()) delete color_description_;
}

void DetectedTrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedTrafficLight& DetectedTrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedTrafficLight_osi_5fdetectedtrafficlight_2eproto.base);
  return *internal_default_instance();
}


void DetectedTrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedTrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedTrafficLight::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedTrafficLight)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedTrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedTrafficLight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedTrafficLight::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::base_rmse(this), output);
  }

  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->candidate(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedTrafficLight)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedTrafficLight::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedTrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::base_rmse(this), target);
  }

  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->candidate(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedTrafficLight)
  return target;
}

size_t DetectedTrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedTrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_rmse_);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedTrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedTrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedTrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedTrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedTrafficLight)
    MergeFrom(*source);
  }
}

void DetectedTrafficLight::MergeFrom(const DetectedTrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedTrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  if (from.has_header()) {
    mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_base_rmse()) {
    mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from.base_rmse());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
}

void DetectedTrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedTrafficLight::CopyFrom(const DetectedTrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedTrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedTrafficLight::IsInitialized() const {
  return true;
}

void DetectedTrafficLight::InternalSwap(DetectedTrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  swap(header_, other->header_);
  swap(base_, other->base_);
  swap(base_rmse_, other->base_rmse_);
  swap(color_description_, other->color_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedTrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficLight_CandidateTrafficLight* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficLight_CandidateTrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedTrafficLight_CandidateTrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedTrafficLight* Arena::CreateMaybeMessage< ::osi3::DetectedTrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedTrafficLight >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
