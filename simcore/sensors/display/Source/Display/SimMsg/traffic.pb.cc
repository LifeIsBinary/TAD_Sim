// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto
#pragma warning (disable : 4125)
#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Car_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicObstacle_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EgoInfo_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extra_Info_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardCollisionWarning_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneUid_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_location_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Location_location_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualVehicleControlInfo_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearestObject_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StaticObstacle_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Traffic_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficRecords4Logsim_DisengageEventInfo_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_trajectory_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trajectory_trajectory_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryInfo_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_traffic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TwinInfo_traffic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
namespace sim_msg {
class TwinInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TwinInfo> _instance;
} _TwinInfo_default_instance_;
class ManualVehicleControlInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualVehicleControlInfo> _instance;
} _ManualVehicleControlInfo_default_instance_;
class ManualVehicleControlInfoArrayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ManualVehicleControlInfoArray> _instance;
} _ManualVehicleControlInfoArray_default_instance_;
class NearestObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NearestObject> _instance;
} _NearestObject_default_instance_;
class ForwardCollisionWarningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardCollisionWarning> _instance;
} _ForwardCollisionWarning_default_instance_;
class Extra_InfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Extra_Info> _instance;
} _Extra_Info_default_instance_;
class CarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Car> _instance;
} _Car_default_instance_;
class StaticObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticObstacle> _instance;
} _StaticObstacle_default_instance_;
class DynamicObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicObstacle> _instance;
} _DynamicObstacle_default_instance_;
class LaneUidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneUid> _instance;
} _LaneUid_default_instance_;
class TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficLight> _instance;
} _TrafficLight_default_instance_;
class EgoInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EgoInfo> _instance;
} _EgoInfo_default_instance_;
class TrafficDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Traffic> _instance;
} _Traffic_default_instance_;
class TrafficRecordsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRecords> _instance;
} _TrafficRecords_default_instance_;
class TrajectoryInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryInfo> _instance;
} _TrajectoryInfo_default_instance_;
class TrafficRecords4Logsim_DisengageEventInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRecords4Logsim_DisengageEventInfo> _instance;
} _TrafficRecords4Logsim_DisengageEventInfo_default_instance_;
class TrafficRecords4LogsimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrafficRecords4Logsim> _instance;
} _TrafficRecords4Logsim_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Car_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Car_default_instance_;
    new (ptr) ::sim_msg::Car();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Car::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Car_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Car_traffic_2eproto}, {
      &scc_info_Trajectory_trajectory_2eproto.base,
      &scc_info_NearestObject_traffic_2eproto.base,
      &scc_info_TwinInfo_traffic_2eproto.base,
      &scc_info_ForwardCollisionWarning_traffic_2eproto.base,
      &scc_info_Extra_Info_traffic_2eproto.base,}};

static void InitDefaultsscc_info_DynamicObstacle_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_DynamicObstacle_default_instance_;
    new (ptr) ::sim_msg::DynamicObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::DynamicObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DynamicObstacle_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DynamicObstacle_traffic_2eproto}, {
      &scc_info_TwinInfo_traffic_2eproto.base,}};

static void InitDefaultsscc_info_EgoInfo_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EgoInfo_default_instance_;
    new (ptr) ::sim_msg::EgoInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EgoInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EgoInfo_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EgoInfo_traffic_2eproto}, {}};

static void InitDefaultsscc_info_Extra_Info_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Extra_Info_default_instance_;
    new (ptr) ::sim_msg::Extra_Info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Extra_Info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Extra_Info_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Extra_Info_traffic_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,}};

static void InitDefaultsscc_info_ForwardCollisionWarning_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ForwardCollisionWarning_default_instance_;
    new (ptr) ::sim_msg::ForwardCollisionWarning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ForwardCollisionWarning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardCollisionWarning_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ForwardCollisionWarning_traffic_2eproto}, {}};

static void InitDefaultsscc_info_LaneUid_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_LaneUid_default_instance_;
    new (ptr) ::sim_msg::LaneUid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::LaneUid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LaneUid_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_LaneUid_traffic_2eproto}, {}};

static void InitDefaultsscc_info_ManualVehicleControlInfo_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ManualVehicleControlInfo_default_instance_;
    new (ptr) ::sim_msg::ManualVehicleControlInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ManualVehicleControlInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualVehicleControlInfo_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ManualVehicleControlInfo_traffic_2eproto}, {
      &scc_info_Location_location_2eproto.base,}};

static void InitDefaultsscc_info_ManualVehicleControlInfoArray_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ManualVehicleControlInfoArray_default_instance_;
    new (ptr) ::sim_msg::ManualVehicleControlInfoArray();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ManualVehicleControlInfoArray::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ManualVehicleControlInfoArray_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ManualVehicleControlInfoArray_traffic_2eproto}, {
      &scc_info_ManualVehicleControlInfo_traffic_2eproto.base,}};

static void InitDefaultsscc_info_NearestObject_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_NearestObject_default_instance_;
    new (ptr) ::sim_msg::NearestObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::NearestObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NearestObject_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_NearestObject_traffic_2eproto}, {}};

static void InitDefaultsscc_info_StaticObstacle_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_StaticObstacle_default_instance_;
    new (ptr) ::sim_msg::StaticObstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::StaticObstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StaticObstacle_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_StaticObstacle_traffic_2eproto}, {
      &scc_info_TwinInfo_traffic_2eproto.base,}};

static void InitDefaultsscc_info_Traffic_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Traffic_default_instance_;
    new (ptr) ::sim_msg::Traffic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Traffic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Traffic_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_Traffic_traffic_2eproto}, {
      &scc_info_Car_traffic_2eproto.base,
      &scc_info_StaticObstacle_traffic_2eproto.base,
      &scc_info_DynamicObstacle_traffic_2eproto.base,
      &scc_info_TrafficLight_traffic_2eproto.base,
      &scc_info_EgoInfo_traffic_2eproto.base,}};

static void InitDefaultsscc_info_TrafficLight_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TrafficLight_default_instance_;
    new (ptr) ::sim_msg::TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficLight_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrafficLight_traffic_2eproto}, {
      &scc_info_LaneUid_traffic_2eproto.base,}};

static void InitDefaultsscc_info_TrafficRecords_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TrafficRecords_default_instance_;
    new (ptr) ::sim_msg::TrafficRecords();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TrafficRecords::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrafficRecords_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrafficRecords_traffic_2eproto}, {
      &scc_info_Traffic_traffic_2eproto.base,}};

static void InitDefaultsscc_info_TrafficRecords4Logsim_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TrafficRecords4Logsim_default_instance_;
    new (ptr) ::sim_msg::TrafficRecords4Logsim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TrafficRecords4Logsim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrafficRecords4Logsim_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_TrafficRecords4Logsim_traffic_2eproto}, {
      &scc_info_Location_location_2eproto.base,
      &scc_info_Traffic_traffic_2eproto.base,
      &scc_info_TrafficRecords4Logsim_DisengageEventInfo_traffic_2eproto.base,
      &scc_info_TrajectoryInfo_traffic_2eproto.base,}};

static void InitDefaultsscc_info_TrafficRecords4Logsim_DisengageEventInfo_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TrafficRecords4Logsim_DisengageEventInfo_default_instance_;
    new (ptr) ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrafficRecords4Logsim_DisengageEventInfo_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrafficRecords4Logsim_DisengageEventInfo_traffic_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryInfo_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TrajectoryInfo_default_instance_;
    new (ptr) ::sim_msg::TrajectoryInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TrajectoryInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrajectoryInfo_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_TrajectoryInfo_traffic_2eproto}, {
      &scc_info_Trajectory_trajectory_2eproto.base,}};

static void InitDefaultsscc_info_TwinInfo_traffic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_TwinInfo_default_instance_;
    new (ptr) ::sim_msg::TwinInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::TwinInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TwinInfo_traffic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TwinInfo_traffic_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_traffic_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_traffic_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_traffic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_traffic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TwinInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfo, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfo, veh_control_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfoArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfoArray, vehicles_control_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, euclid_dist_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, euclidean_distance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, lane_proj_distance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, ego_v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, vehicle_v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, ttc_euclidean_distance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, ttc_lane_proj_distance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, thw_euclidean_distance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ForwardCollisionWarning, thw_lane_proj_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Extra_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Extra_Info, local_cartesian_point_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Extra_Info, front_veh_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Extra_Info, rear_veh_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Extra_Info, speed_ms_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Extra_Info, dist_to_ego_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, vl_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, theta_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, height_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, laneid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, z_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_lanelink_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, planning_line_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_abs_velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_abs_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_velocity_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_acc_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_dist_vertical_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_dist_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, control_state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_nearestobjectinfo_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, angle_along_centerline_degree_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, strid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, twin_data_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, fcw_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, loffset_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, to_tx_road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, to_tx_section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, to_tx_lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, serialization_archive_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, extra_info_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, acc_l_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, height_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, z_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, strid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, twin_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, height_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, vl_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, z_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_abs_velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_abs_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_relative_velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_relative_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_relative_velocity_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_relative_acc_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_relative_dist_vertical_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, show_relative_dist_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, strid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, twin_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, tx_road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, tx_section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, tx_lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, color_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, z_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, tx_road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, tx_section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, tx_lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, control_lanes_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, control_phases_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, next_color_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, next_age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, plan_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, junction_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, phasenumber_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, signalhead_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EgoInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EgoInfo, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EgoInfo, angle_along_centerline_degree_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EgoInfo, slope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, cars_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, staticobstacles_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, dynamicobstacles_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, trafficlights_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, road_network_aver_velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, road_network_total_vehicle_count_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, time_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, egos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords, traffic_record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryInfo, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryInfo, trajectory_line_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim_DisengageEventInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim_DisengageEventInfo, timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim_DisengageEventInfo, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim, ego_location_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim, traffic_record_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim, disengage_events_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim, duration_ms_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficRecords4Logsim, ego_trajectory_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::TwinInfo)},
  { 5, -1, sizeof(::sim_msg::ManualVehicleControlInfo)},
  { 12, -1, sizeof(::sim_msg::ManualVehicleControlInfoArray)},
  { 18, -1, sizeof(::sim_msg::NearestObject)},
  { 26, -1, sizeof(::sim_msg::ForwardCollisionWarning)},
  { 40, -1, sizeof(::sim_msg::Extra_Info)},
  { 50, -1, sizeof(::sim_msg::Car)},
  { 97, -1, sizeof(::sim_msg::StaticObstacle)},
  { 115, -1, sizeof(::sim_msg::DynamicObstacle)},
  { 144, -1, sizeof(::sim_msg::LaneUid)},
  { 152, -1, sizeof(::sim_msg::TrafficLight)},
  { 175, -1, sizeof(::sim_msg::EgoInfo)},
  { 183, -1, sizeof(::sim_msg::Traffic)},
  { 196, -1, sizeof(::sim_msg::TrafficRecords)},
  { 202, -1, sizeof(::sim_msg::TrajectoryInfo)},
  { 209, -1, sizeof(::sim_msg::TrafficRecords4Logsim_DisengageEventInfo)},
  { 216, -1, sizeof(::sim_msg::TrafficRecords4Logsim)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TwinInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ManualVehicleControlInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ManualVehicleControlInfoArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_NearestObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ForwardCollisionWarning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Extra_Info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Car_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_StaticObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_DynamicObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_LaneUid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EgoInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Traffic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrafficRecords_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrajectoryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrafficRecords4Logsim_DisengageEventInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrafficRecords4Logsim_default_instance_),
};

const char descriptor_table_protodef_traffic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtraffic.proto\022\007sim_msg\032\013basic.proto\032\020t"
  "rajectory.proto\032\016location.proto\"\n\n\010TwinI"
  "nfo\"S\n\030ManualVehicleControlInfo\022\n\n\002id\030\001 "
  "\001(\005\022+\n\020veh_control_info\030\002 \001(\0132\021.sim_msg."
  "Location\"a\n\035ManualVehicleControlInfoArra"
  "y\022@\n\025vehicles_control_info\030\001 \003(\0132!.sim_m"
  "sg.ManualVehicleControlInfo\"^\n\rNearestOb"
  "ject\022\n\n\002id\030\001 \001(\005\022\023\n\013euclid_dist\030\002 \001(\001\022,\n"
  "\003dir\030\003 \001(\0162\037.sim_msg.NearestObjectDirect"
  "ion\"\262\002\n\027ForwardCollisionWarning\022=\n\005state"
  "\030\001 \001(\0162..sim_msg.VehicleRelativePosition"
  "alRelationship\022\032\n\022euclidean_distance\030\002 \001"
  "(\001\022\032\n\022lane_proj_distance\030\003 \001(\001\022\r\n\005ego_v\030"
  "\004 \001(\001\022\021\n\tvehicle_v\030\005 \001(\001\022\036\n\026ttc_euclidea"
  "n_distance\030\006 \001(\001\022\036\n\026ttc_lane_proj_distan"
  "ce\030\007 \001(\001\022\036\n\026thw_euclidean_distance\030\010 \001(\001"
  "\022\036\n\026thw_lane_proj_distance\030\t \001(\001\"\210\001\n\nExt"
  "ra_Info\022,\n\025local_cartesian_point\030\001 \001(\0132\r"
  ".sim_msg.Vec3\022\021\n\tfront_veh\030\002 \001(\010\022\020\n\010rear"
  "_veh\030\003 \001(\010\022\020\n\010speed_ms\030\004 \001(\002\022\025\n\rdist_to_"
  "ego_m\030\005 \001(\002\"\210\010\n\003Car\022\n\n\002id\030\001 \001(\003\022\t\n\001t\030\002 \001"
  "(\001\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007heading\030\005 \001("
  "\001\022\t\n\001v\030\006 \001(\001\022\n\n\002vl\030\007 \001(\001\022\r\n\005theta\030\010 \001(\001\022"
  "\016\n\006length\030\t \001(\001\022\r\n\005width\030\n \001(\001\022\016\n\006height"
  "\030\013 \001(\001\022\014\n\004type\030\014 \001(\005\022\016\n\006laneId\030\r \001(\005\022\013\n\003"
  "acc\030\016 \001(\001\022\013\n\003age\030\017 \001(\005\022\t\n\001z\030\020 \001(\001\022\022\n\ntx_"
  "road_id\030\021 \001(\004\022\025\n\rtx_section_id\030\022 \001(\004\022\022\n\n"
  "tx_lane_id\030\023 \001(\003\022\026\n\016tx_lanelink_id\030\024 \001(\004"
  "\022*\n\rplanning_line\030\025 \001(\0132\023.sim_msg.Trajec"
  "tory\022\031\n\021show_abs_velocity\030\026 \001(\001\022\024\n\014show_"
  "abs_acc\030\027 \001(\001\022\036\n\026show_relative_velocity\030"
  "\030 \001(\001\022\031\n\021show_relative_acc\030\031 \001(\001\022)\n!show"
  "_relative_velocity_horizontal\030\032 \001(\001\022$\n\034s"
  "how_relative_acc_horizontal\030\033 \001(\001\022#\n\033sho"
  "w_relative_dist_vertical\030\034 \001(\001\022%\n\035show_r"
  "elative_dist_horizontal\030\035 \001(\001\022,\n\rcontrol"
  "_state\030\036 \001(\0162\025.sim_msg.ControlState\0226\n\026s"
  "how_NearestObjectInfo\030\037 \003(\0132\026.sim_msg.Ne"
  "arestObject\022%\n\035angle_along_centerline_de"
  "gree\030  \001(\001\022\r\n\005strid\030! \001(\t\022$\n\ttwin_data\030\""
  " \001(\0132\021.sim_msg.TwinInfo\022-\n\003fcw\030# \001(\0132 .s"
  "im_msg.ForwardCollisionWarning\022\017\n\007lOffse"
  "t\030$ \001(\001\022\025\n\rto_tx_road_id\030% \001(\004\022\030\n\020to_tx_"
  "section_id\030& \001(\004\022\025\n\rto_tx_lane_id\030\' \001(\003\022"
  "\035\n\025serialization_archive\030( \001(\014\022\'\n\nextra_"
  "info\030) \001(\0132\023.sim_msg.Extra_Info\022\r\n\005acc_l"
  "\030* \001(\002\"\330\001\n\016StaticObstacle\022\n\n\002id\030\001 \001(\005\022\t\n"
  "\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007headin"
  "g\030\005 \001(\001\022\016\n\006length\030\006 \001(\001\022\r\n\005width\030\007 \001(\001\022\016"
  "\n\006height\030\010 \001(\001\022\014\n\004type\030\t \001(\005\022\013\n\003age\030\n \001("
  "\005\022\t\n\001z\030\013 \001(\001\022\r\n\005strid\030\014 \001(\t\022$\n\ttwin_data"
  "\030\r \001(\0132\021.sim_msg.TwinInfo\"\206\004\n\017DynamicObs"
  "tacle\022\n\n\002id\030\001 \001(\005\022\t\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022"
  "\t\n\001y\030\004 \001(\001\022\017\n\007heading\030\005 \001(\001\022\016\n\006length\030\006 "
  "\001(\001\022\r\n\005width\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\014\n\004ty"
  "pe\030\t \001(\005\022\t\n\001v\030\n \001(\001\022\n\n\002vl\030\013 \001(\001\022\013\n\003acc\030\014"
  " \001(\001\022\013\n\003age\030\r \001(\005\022\t\n\001z\030\016 \001(\001\022\031\n\021show_abs"
  "_velocity\030\017 \001(\001\022\024\n\014show_abs_acc\030\020 \001(\001\022\036\n"
  "\026show_relative_velocity\030\021 \001(\001\022\031\n\021show_re"
  "lative_acc\030\022 \001(\001\022)\n!show_relative_veloci"
  "ty_horizontal\030\023 \001(\001\022$\n\034show_relative_acc"
  "_horizontal\030\024 \001(\001\022#\n\033show_relative_dist_"
  "vertical\030\025 \001(\001\022%\n\035show_relative_dist_hor"
  "izontal\030\026 \001(\001\022\r\n\005strid\030\027 \001(\t\022$\n\ttwin_dat"
  "a\030\030 \001(\0132\021.sim_msg.TwinInfo\"H\n\007LaneUid\022\022\n"
  "\ntx_road_id\030\001 \001(\004\022\025\n\rtx_section_id\030\002 \001(\004"
  "\022\022\n\ntx_lane_id\030\003 \001(\003\"\347\002\n\014TrafficLight\022\n\n"
  "\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\017\n\007headi"
  "ng\030\004 \001(\001\022\r\n\005color\030\005 \001(\005\022\013\n\003age\030\006 \001(\005\022\t\n\001"
  "z\030\007 \001(\001\022\022\n\ntx_road_id\030\010 \001(\004\022\025\n\rtx_sectio"
  "n_id\030\t \001(\004\022\022\n\ntx_lane_id\030\n \001(\003\022\'\n\rcontro"
  "l_lanes\030\013 \003(\0132\020.sim_msg.LaneUid\022&\n\016contr"
  "ol_phases\030\014 \003(\0162\016.sim_msg.Phase\022\022\n\nnext_"
  "color\030\r \001(\005\022\020\n\010next_age\030\016 \001(\005\022\014\n\004plan\030\017 "
  "\001(\t\022\020\n\010junction\030\020 \001(\t\022\023\n\013phaseNumber\030\021 \001"
  "(\t\022\022\n\nsignalHead\030\022 \001(\t\"K\n\007EgoInfo\022\n\n\002id\030"
  "\001 \001(\005\022%\n\035angle_along_centerline_degree\030\002"
  " \001(\002\022\r\n\005slope\030\003 \001(\002\"\265\002\n\007Traffic\022\032\n\004cars\030"
  "\001 \003(\0132\014.sim_msg.Car\0220\n\017staticObstacles\030\002"
  " \003(\0132\027.sim_msg.StaticObstacle\0222\n\020dynamic"
  "Obstacles\030\003 \003(\0132\030.sim_msg.DynamicObstacl"
  "e\022,\n\rtrafficLights\030\004 \003(\0132\025.sim_msg.Traff"
  "icLight\022\"\n\032road_network_aver_velocity\030\005 "
  "\001(\001\022(\n road_network_total_vehicle_count\030"
  "\006 \001(\005\022\014\n\004time\030\007 \001(\004\022\036\n\004egos\030\010 \003(\0132\020.sim_"
  "msg.EgoInfo\":\n\016TrafficRecords\022(\n\016traffic"
  "_record\030\001 \003(\0132\020.sim_msg.Traffic\"R\n\016Traje"
  "ctoryInfo\022\022\n\ntime_stamp\030\001 \001(\001\022,\n\017traject"
  "ory_line\030\002 \001(\0132\023.sim_msg.Trajectory\"\324\002\n\025"
  "TrafficRecords4Logsim\022\'\n\014ego_location\030\001 "
  "\003(\0132\021.sim_msg.Location\022(\n\016traffic_record"
  "\030\002 \003(\0132\020.sim_msg.Traffic\022K\n\020disengage_ev"
  "ents\030\003 \003(\01321.sim_msg.TrafficRecords4Logs"
  "im.DisengageEventInfo\022\023\n\013duration_ms\030\004 \001"
  "(\004\022/\n\016ego_trajectory\030\005 \003(\0132\027.sim_msg.Tra"
  "jectoryInfo\032U\n\022DisengageEventInfo\022\024\n\014tim"
  "estamp_ms\030\001 \001(\003\022)\n\004type\030\002 \001(\0162\033.sim_msg."
  "DisengageEventType**\n\014ControlState\022\016\n\nAu"
  "tonomous\020\000\022\n\n\006Manual\020\001*\214\001\n\026NearestObject"
  "Direction\022\t\n\005FRONT\020\000\022\022\n\016BACK_DIRECTION\020\001"
  "\022\010\n\004LEFT\020\002\022\016\n\nLEFT_FRONT\020\003\022\r\n\tLEFT_BACK\020"
  "\004\022\t\n\005RIGHT\020\005\022\017\n\013RIGHT_FRONT\020\006\022\016\n\nRIGHT_B"
  "ACK\020\007*x\n%VehicleRelativePositionalRelati"
  "onship\022\023\n\017No_Relationship\020\000\022\020\n\014Ego_In_Fr"
  "ont\020\001\022\017\n\013Ego_In_Back\020\002\022\027\n\023Ego_Vehicle_Ov"
  "erlap\020\003*#\n\005Phase\022\005\n\001U\020\000\022\005\n\001L\020\001\022\005\n\001T\020\002\022\005\n"
  "\001R\020\003*\226\001\n\022DisengageEventType\022\024\n\020Disengage"
  "_Manual\020\000\022\026\n\022Disengage_Planning\020\001\022\023\n\017Dis"
  "engage_Route\020\002\022\030\n\024Disengage_Perception\020\003"
  "\022\020\n\014Disengage_OS\020\004\022\021\n\rDisengage_Sim\020\005b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_traffic_2eproto_deps[3] = {
  &::descriptor_table_basic_2eproto,
  &::descriptor_table_location_2eproto,
  &::descriptor_table_trajectory_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_traffic_2eproto_sccs[17] = {
  &scc_info_Car_traffic_2eproto.base,
  &scc_info_DynamicObstacle_traffic_2eproto.base,
  &scc_info_EgoInfo_traffic_2eproto.base,
  &scc_info_Extra_Info_traffic_2eproto.base,
  &scc_info_ForwardCollisionWarning_traffic_2eproto.base,
  &scc_info_LaneUid_traffic_2eproto.base,
  &scc_info_ManualVehicleControlInfo_traffic_2eproto.base,
  &scc_info_ManualVehicleControlInfoArray_traffic_2eproto.base,
  &scc_info_NearestObject_traffic_2eproto.base,
  &scc_info_StaticObstacle_traffic_2eproto.base,
  &scc_info_Traffic_traffic_2eproto.base,
  &scc_info_TrafficLight_traffic_2eproto.base,
  &scc_info_TrafficRecords_traffic_2eproto.base,
  &scc_info_TrafficRecords4Logsim_traffic_2eproto.base,
  &scc_info_TrafficRecords4Logsim_DisengageEventInfo_traffic_2eproto.base,
  &scc_info_TrajectoryInfo_traffic_2eproto.base,
  &scc_info_TwinInfo_traffic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_traffic_2eproto_once;
static bool descriptor_table_traffic_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_2eproto = {
  &descriptor_table_traffic_2eproto_initialized, descriptor_table_protodef_traffic_2eproto, "traffic.proto", 4405,
  &descriptor_table_traffic_2eproto_once, descriptor_table_traffic_2eproto_sccs, descriptor_table_traffic_2eproto_deps, 17, 3,
  schemas, file_default_instances, TableStruct_traffic_2eproto::offsets,
  file_level_metadata_traffic_2eproto, 17, file_level_enum_descriptors_traffic_2eproto, file_level_service_descriptors_traffic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_traffic_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_traffic_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[0];
}
bool ControlState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NearestObjectDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[1];
}
bool NearestObjectDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleRelativePositionalRelationship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[2];
}
bool VehicleRelativePositionalRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[3];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DisengageEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[4];
}
bool DisengageEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void TwinInfo::InitAsDefaultInstance() {
}
class TwinInfo::_Internal {
 public:
};

TwinInfo::TwinInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TwinInfo)
}
TwinInfo::TwinInfo(const TwinInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.TwinInfo)
}

void TwinInfo::SharedCtor() {
}

TwinInfo::~TwinInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.TwinInfo)
  SharedDtor();
}

void TwinInfo::SharedDtor() {
}

void TwinInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TwinInfo& TwinInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TwinInfo_traffic_2eproto.base);
  return *internal_default_instance();
}


void TwinInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TwinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TwinInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TwinInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TwinInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TwinInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TwinInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TwinInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TwinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TwinInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TwinInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TwinInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TwinInfo)
  return target;
}

size_t TwinInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TwinInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TwinInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TwinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TwinInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TwinInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TwinInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TwinInfo)
    MergeFrom(*source);
  }
}

void TwinInfo::MergeFrom(const TwinInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TwinInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TwinInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TwinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwinInfo::CopyFrom(const TwinInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TwinInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwinInfo::IsInitialized() const {
  return true;
}

void TwinInfo::InternalSwap(TwinInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TwinInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualVehicleControlInfo::InitAsDefaultInstance() {
  ::sim_msg::_ManualVehicleControlInfo_default_instance_._instance.get_mutable()->veh_control_info_ = const_cast< ::sim_msg::Location*>(
      ::sim_msg::Location::internal_default_instance());
}
class ManualVehicleControlInfo::_Internal {
 public:
  static const ::sim_msg::Location& veh_control_info(const ManualVehicleControlInfo* msg);
};

const ::sim_msg::Location&
ManualVehicleControlInfo::_Internal::veh_control_info(const ManualVehicleControlInfo* msg) {
  return *msg->veh_control_info_;
}
void ManualVehicleControlInfo::clear_veh_control_info() {
  if (GetArenaNoVirtual() == nullptr && veh_control_info_ != nullptr) {
    delete veh_control_info_;
  }
  veh_control_info_ = nullptr;
}
ManualVehicleControlInfo::ManualVehicleControlInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ManualVehicleControlInfo)
}
ManualVehicleControlInfo::ManualVehicleControlInfo(const ManualVehicleControlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_veh_control_info()) {
    veh_control_info_ = new ::sim_msg::Location(*from.veh_control_info_);
  } else {
    veh_control_info_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.ManualVehicleControlInfo)
}

void ManualVehicleControlInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualVehicleControlInfo_traffic_2eproto.base);
  ::memset(&veh_control_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&veh_control_info_)) + sizeof(id_));
}

ManualVehicleControlInfo::~ManualVehicleControlInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.ManualVehicleControlInfo)
  SharedDtor();
}

void ManualVehicleControlInfo::SharedDtor() {
  if (this != internal_default_instance()) delete veh_control_info_;
}

void ManualVehicleControlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualVehicleControlInfo& ManualVehicleControlInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualVehicleControlInfo_traffic_2eproto.base);
  return *internal_default_instance();
}


void ManualVehicleControlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ManualVehicleControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && veh_control_info_ != nullptr) {
    delete veh_control_info_;
  }
  veh_control_info_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManualVehicleControlInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Location veh_control_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_veh_control_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManualVehicleControlInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ManualVehicleControlInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Location veh_control_info = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_veh_control_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ManualVehicleControlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ManualVehicleControlInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManualVehicleControlInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ManualVehicleControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .sim_msg.Location veh_control_info = 2;
  if (this->has_veh_control_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::veh_control_info(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ManualVehicleControlInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualVehicleControlInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ManualVehicleControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .sim_msg.Location veh_control_info = 2;
  if (this->has_veh_control_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::veh_control_info(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ManualVehicleControlInfo)
  return target;
}

size_t ManualVehicleControlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ManualVehicleControlInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Location veh_control_info = 2;
  if (this->has_veh_control_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_control_info_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualVehicleControlInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ManualVehicleControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualVehicleControlInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualVehicleControlInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ManualVehicleControlInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ManualVehicleControlInfo)
    MergeFrom(*source);
  }
}

void ManualVehicleControlInfo::MergeFrom(const ManualVehicleControlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ManualVehicleControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_veh_control_info()) {
    mutable_veh_control_info()->::sim_msg::Location::MergeFrom(from.veh_control_info());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ManualVehicleControlInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ManualVehicleControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualVehicleControlInfo::CopyFrom(const ManualVehicleControlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ManualVehicleControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualVehicleControlInfo::IsInitialized() const {
  return true;
}

void ManualVehicleControlInfo::InternalSwap(ManualVehicleControlInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(veh_control_info_, other->veh_control_info_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualVehicleControlInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ManualVehicleControlInfoArray::InitAsDefaultInstance() {
}
class ManualVehicleControlInfoArray::_Internal {
 public:
};

ManualVehicleControlInfoArray::ManualVehicleControlInfoArray()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ManualVehicleControlInfoArray)
}
ManualVehicleControlInfoArray::ManualVehicleControlInfoArray(const ManualVehicleControlInfoArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      vehicles_control_info_(from.vehicles_control_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.ManualVehicleControlInfoArray)
}

void ManualVehicleControlInfoArray::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ManualVehicleControlInfoArray_traffic_2eproto.base);
}

ManualVehicleControlInfoArray::~ManualVehicleControlInfoArray() {
  // @@protoc_insertion_point(destructor:sim_msg.ManualVehicleControlInfoArray)
  SharedDtor();
}

void ManualVehicleControlInfoArray::SharedDtor() {
}

void ManualVehicleControlInfoArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ManualVehicleControlInfoArray& ManualVehicleControlInfoArray::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ManualVehicleControlInfoArray_traffic_2eproto.base);
  return *internal_default_instance();
}


void ManualVehicleControlInfoArray::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ManualVehicleControlInfoArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicles_control_info_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ManualVehicleControlInfoArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vehicles_control_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ManualVehicleControlInfoArray::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ManualVehicleControlInfoArray)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vehicles_control_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ManualVehicleControlInfoArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ManualVehicleControlInfoArray)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ManualVehicleControlInfoArray::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ManualVehicleControlInfoArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_control_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->vehicles_control_info(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ManualVehicleControlInfoArray)
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualVehicleControlInfoArray::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ManualVehicleControlInfoArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_control_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->vehicles_control_info(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ManualVehicleControlInfoArray)
  return target;
}

size_t ManualVehicleControlInfoArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ManualVehicleControlInfoArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicles_control_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vehicles_control_info(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ManualVehicleControlInfoArray::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ManualVehicleControlInfoArray)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualVehicleControlInfoArray* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ManualVehicleControlInfoArray>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ManualVehicleControlInfoArray)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ManualVehicleControlInfoArray)
    MergeFrom(*source);
  }
}

void ManualVehicleControlInfoArray::MergeFrom(const ManualVehicleControlInfoArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ManualVehicleControlInfoArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicles_control_info_.MergeFrom(from.vehicles_control_info_);
}

void ManualVehicleControlInfoArray::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ManualVehicleControlInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualVehicleControlInfoArray::CopyFrom(const ManualVehicleControlInfoArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ManualVehicleControlInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualVehicleControlInfoArray::IsInitialized() const {
  return true;
}

void ManualVehicleControlInfoArray::InternalSwap(ManualVehicleControlInfoArray* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&vehicles_control_info_)->InternalSwap(CastToBase(&other->vehicles_control_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualVehicleControlInfoArray::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NearestObject::InitAsDefaultInstance() {
}
class NearestObject::_Internal {
 public:
};

NearestObject::NearestObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.NearestObject)
}
NearestObject::NearestObject(const NearestObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&euclid_dist_, &from.euclid_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&euclid_dist_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.NearestObject)
}

void NearestObject::SharedCtor() {
  ::memset(&euclid_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&euclid_dist_)) + sizeof(dir_));
}

NearestObject::~NearestObject() {
  // @@protoc_insertion_point(destructor:sim_msg.NearestObject)
  SharedDtor();
}

void NearestObject::SharedDtor() {
}

void NearestObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NearestObject& NearestObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NearestObject_traffic_2eproto.base);
  return *internal_default_instance();
}


void NearestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.NearestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&euclid_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&euclid_dist_)) + sizeof(dir_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* NearestObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double euclid_dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          euclid_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.NearestObjectDirection dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dir(static_cast<::sim_msg::NearestObjectDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool NearestObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.NearestObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double euclid_dist = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &euclid_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.NearestObjectDirection dir = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dir(static_cast< ::sim_msg::NearestObjectDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.NearestObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.NearestObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void NearestObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.NearestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double euclid_dist = 2;
  if (!(this->euclid_dist() <= 0 && this->euclid_dist() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->euclid_dist(), output);
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->dir() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->dir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.NearestObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.NearestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double euclid_dist = 2;
  if (!(this->euclid_dist() <= 0 && this->euclid_dist() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->euclid_dist(), target);
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->dir() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->dir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.NearestObject)
  return target;
}

size_t NearestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.NearestObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double euclid_dist = 2;
  if (!(this->euclid_dist() <= 0 && this->euclid_dist() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dir());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NearestObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.NearestObject)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NearestObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.NearestObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.NearestObject)
    MergeFrom(*source);
  }
}

void NearestObject::MergeFrom(const NearestObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.NearestObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.euclid_dist() <= 0 && from.euclid_dist() >= 0)) {
    set_euclid_dist(from.euclid_dist());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.dir() != 0) {
    set_dir(from.dir());
  }
}

void NearestObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.NearestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestObject::CopyFrom(const NearestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.NearestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestObject::IsInitialized() const {
  return true;
}

void NearestObject::InternalSwap(NearestObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(euclid_dist_, other->euclid_dist_);
  swap(id_, other->id_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardCollisionWarning::InitAsDefaultInstance() {
}
class ForwardCollisionWarning::_Internal {
 public:
};

ForwardCollisionWarning::ForwardCollisionWarning()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ForwardCollisionWarning)
}
ForwardCollisionWarning::ForwardCollisionWarning(const ForwardCollisionWarning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&euclidean_distance_, &from.euclidean_distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&euclidean_distance_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ForwardCollisionWarning)
}

void ForwardCollisionWarning::SharedCtor() {
  ::memset(&euclidean_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&euclidean_distance_)) + sizeof(state_));
}

ForwardCollisionWarning::~ForwardCollisionWarning() {
  // @@protoc_insertion_point(destructor:sim_msg.ForwardCollisionWarning)
  SharedDtor();
}

void ForwardCollisionWarning::SharedDtor() {
}

void ForwardCollisionWarning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardCollisionWarning& ForwardCollisionWarning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardCollisionWarning_traffic_2eproto.base);
  return *internal_default_instance();
}


void ForwardCollisionWarning::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ForwardCollisionWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&euclidean_distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&euclidean_distance_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ForwardCollisionWarning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.VehicleRelativePositionalRelationship state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::VehicleRelativePositionalRelationship>(val));
        } else goto handle_unusual;
        continue;
      // double euclidean_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          euclidean_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lane_proj_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          lane_proj_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ego_v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ego_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vehicle_v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          vehicle_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ttc_euclidean_distance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          ttc_euclidean_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ttc_lane_proj_distance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          ttc_lane_proj_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double thw_euclidean_distance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          thw_euclidean_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double thw_lane_proj_distance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          thw_lane_proj_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ForwardCollisionWarning::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ForwardCollisionWarning)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.VehicleRelativePositionalRelationship state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::VehicleRelativePositionalRelationship >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double euclidean_distance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &euclidean_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lane_proj_distance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lane_proj_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ego_v = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ego_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vehicle_v = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vehicle_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ttc_euclidean_distance = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ttc_euclidean_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ttc_lane_proj_distance = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ttc_lane_proj_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double thw_euclidean_distance = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thw_euclidean_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double thw_lane_proj_distance = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thw_lane_proj_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ForwardCollisionWarning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ForwardCollisionWarning)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ForwardCollisionWarning::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ForwardCollisionWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.VehicleRelativePositionalRelationship state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // double euclidean_distance = 2;
  if (!(this->euclidean_distance() <= 0 && this->euclidean_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->euclidean_distance(), output);
  }

  // double lane_proj_distance = 3;
  if (!(this->lane_proj_distance() <= 0 && this->lane_proj_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->lane_proj_distance(), output);
  }

  // double ego_v = 4;
  if (!(this->ego_v() <= 0 && this->ego_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->ego_v(), output);
  }

  // double vehicle_v = 5;
  if (!(this->vehicle_v() <= 0 && this->vehicle_v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->vehicle_v(), output);
  }

  // double ttc_euclidean_distance = 6;
  if (!(this->ttc_euclidean_distance() <= 0 && this->ttc_euclidean_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->ttc_euclidean_distance(), output);
  }

  // double ttc_lane_proj_distance = 7;
  if (!(this->ttc_lane_proj_distance() <= 0 && this->ttc_lane_proj_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->ttc_lane_proj_distance(), output);
  }

  // double thw_euclidean_distance = 8;
  if (!(this->thw_euclidean_distance() <= 0 && this->thw_euclidean_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->thw_euclidean_distance(), output);
  }

  // double thw_lane_proj_distance = 9;
  if (!(this->thw_lane_proj_distance() <= 0 && this->thw_lane_proj_distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->thw_lane_proj_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ForwardCollisionWarning)
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardCollisionWarning::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ForwardCollisionWarning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.VehicleRelativePositionalRelationship state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // double euclidean_distance = 2;
  if (!(this->euclidean_distance() <= 0 && this->euclidean_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->euclidean_distance(), target);
  }

  // double lane_proj_distance = 3;
  if (!(this->lane_proj_distance() <= 0 && this->lane_proj_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->lane_proj_distance(), target);
  }

  // double ego_v = 4;
  if (!(this->ego_v() <= 0 && this->ego_v() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->ego_v(), target);
  }

  // double vehicle_v = 5;
  if (!(this->vehicle_v() <= 0 && this->vehicle_v() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->vehicle_v(), target);
  }

  // double ttc_euclidean_distance = 6;
  if (!(this->ttc_euclidean_distance() <= 0 && this->ttc_euclidean_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->ttc_euclidean_distance(), target);
  }

  // double ttc_lane_proj_distance = 7;
  if (!(this->ttc_lane_proj_distance() <= 0 && this->ttc_lane_proj_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->ttc_lane_proj_distance(), target);
  }

  // double thw_euclidean_distance = 8;
  if (!(this->thw_euclidean_distance() <= 0 && this->thw_euclidean_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->thw_euclidean_distance(), target);
  }

  // double thw_lane_proj_distance = 9;
  if (!(this->thw_lane_proj_distance() <= 0 && this->thw_lane_proj_distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->thw_lane_proj_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ForwardCollisionWarning)
  return target;
}

size_t ForwardCollisionWarning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ForwardCollisionWarning)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double euclidean_distance = 2;
  if (!(this->euclidean_distance() <= 0 && this->euclidean_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double lane_proj_distance = 3;
  if (!(this->lane_proj_distance() <= 0 && this->lane_proj_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double ego_v = 4;
  if (!(this->ego_v() <= 0 && this->ego_v() >= 0)) {
    total_size += 1 + 8;
  }

  // double vehicle_v = 5;
  if (!(this->vehicle_v() <= 0 && this->vehicle_v() >= 0)) {
    total_size += 1 + 8;
  }

  // double ttc_euclidean_distance = 6;
  if (!(this->ttc_euclidean_distance() <= 0 && this->ttc_euclidean_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double ttc_lane_proj_distance = 7;
  if (!(this->ttc_lane_proj_distance() <= 0 && this->ttc_lane_proj_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double thw_euclidean_distance = 8;
  if (!(this->thw_euclidean_distance() <= 0 && this->thw_euclidean_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // double thw_lane_proj_distance = 9;
  if (!(this->thw_lane_proj_distance() <= 0 && this->thw_lane_proj_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.VehicleRelativePositionalRelationship state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardCollisionWarning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ForwardCollisionWarning)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardCollisionWarning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardCollisionWarning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ForwardCollisionWarning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ForwardCollisionWarning)
    MergeFrom(*source);
  }
}

void ForwardCollisionWarning::MergeFrom(const ForwardCollisionWarning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ForwardCollisionWarning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.euclidean_distance() <= 0 && from.euclidean_distance() >= 0)) {
    set_euclidean_distance(from.euclidean_distance());
  }
  if (!(from.lane_proj_distance() <= 0 && from.lane_proj_distance() >= 0)) {
    set_lane_proj_distance(from.lane_proj_distance());
  }
  if (!(from.ego_v() <= 0 && from.ego_v() >= 0)) {
    set_ego_v(from.ego_v());
  }
  if (!(from.vehicle_v() <= 0 && from.vehicle_v() >= 0)) {
    set_vehicle_v(from.vehicle_v());
  }
  if (!(from.ttc_euclidean_distance() <= 0 && from.ttc_euclidean_distance() >= 0)) {
    set_ttc_euclidean_distance(from.ttc_euclidean_distance());
  }
  if (!(from.ttc_lane_proj_distance() <= 0 && from.ttc_lane_proj_distance() >= 0)) {
    set_ttc_lane_proj_distance(from.ttc_lane_proj_distance());
  }
  if (!(from.thw_euclidean_distance() <= 0 && from.thw_euclidean_distance() >= 0)) {
    set_thw_euclidean_distance(from.thw_euclidean_distance());
  }
  if (!(from.thw_lane_proj_distance() <= 0 && from.thw_lane_proj_distance() >= 0)) {
    set_thw_lane_proj_distance(from.thw_lane_proj_distance());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ForwardCollisionWarning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ForwardCollisionWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardCollisionWarning::CopyFrom(const ForwardCollisionWarning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ForwardCollisionWarning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardCollisionWarning::IsInitialized() const {
  return true;
}

void ForwardCollisionWarning::InternalSwap(ForwardCollisionWarning* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(euclidean_distance_, other->euclidean_distance_);
  swap(lane_proj_distance_, other->lane_proj_distance_);
  swap(ego_v_, other->ego_v_);
  swap(vehicle_v_, other->vehicle_v_);
  swap(ttc_euclidean_distance_, other->ttc_euclidean_distance_);
  swap(ttc_lane_proj_distance_, other->ttc_lane_proj_distance_);
  swap(thw_euclidean_distance_, other->thw_euclidean_distance_);
  swap(thw_lane_proj_distance_, other->thw_lane_proj_distance_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardCollisionWarning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Extra_Info::InitAsDefaultInstance() {
  ::sim_msg::_Extra_Info_default_instance_._instance.get_mutable()->local_cartesian_point_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}
class Extra_Info::_Internal {
 public:
  static const ::sim_msg::Vec3& local_cartesian_point(const Extra_Info* msg);
};

const ::sim_msg::Vec3&
Extra_Info::_Internal::local_cartesian_point(const Extra_Info* msg) {
  return *msg->local_cartesian_point_;
}
void Extra_Info::clear_local_cartesian_point() {
  if (GetArenaNoVirtual() == nullptr && local_cartesian_point_ != nullptr) {
    delete local_cartesian_point_;
  }
  local_cartesian_point_ = nullptr;
}
Extra_Info::Extra_Info()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Extra_Info)
}
Extra_Info::Extra_Info(const Extra_Info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_local_cartesian_point()) {
    local_cartesian_point_ = new ::sim_msg::Vec3(*from.local_cartesian_point_);
  } else {
    local_cartesian_point_ = nullptr;
  }
  ::memcpy(&front_veh_, &from.front_veh_,
    static_cast<size_t>(reinterpret_cast<char*>(&dist_to_ego_m_) -
    reinterpret_cast<char*>(&front_veh_)) + sizeof(dist_to_ego_m_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Extra_Info)
}

void Extra_Info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Extra_Info_traffic_2eproto.base);
  ::memset(&local_cartesian_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_to_ego_m_) -
      reinterpret_cast<char*>(&local_cartesian_point_)) + sizeof(dist_to_ego_m_));
}

Extra_Info::~Extra_Info() {
  // @@protoc_insertion_point(destructor:sim_msg.Extra_Info)
  SharedDtor();
}

void Extra_Info::SharedDtor() {
  if (this != internal_default_instance()) delete local_cartesian_point_;
}

void Extra_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Extra_Info& Extra_Info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Extra_Info_traffic_2eproto.base);
  return *internal_default_instance();
}


void Extra_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Extra_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_cartesian_point_ != nullptr) {
    delete local_cartesian_point_;
  }
  local_cartesian_point_ = nullptr;
  ::memset(&front_veh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_to_ego_m_) -
      reinterpret_cast<char*>(&front_veh_)) + sizeof(dist_to_ego_m_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Extra_Info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Vec3 local_cartesian_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_local_cartesian_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool front_veh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          front_veh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rear_veh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rear_veh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float speed_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          speed_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dist_to_ego_m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dist_to_ego_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Extra_Info::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Extra_Info)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Vec3 local_cartesian_point = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_local_cartesian_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool front_veh = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &front_veh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool rear_veh = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rear_veh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float speed_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float dist_to_ego_m = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_to_ego_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Extra_Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Extra_Info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Extra_Info::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Extra_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Vec3 local_cartesian_point = 1;
  if (this->has_local_cartesian_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::local_cartesian_point(this), output);
  }

  // bool front_veh = 2;
  if (this->front_veh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->front_veh(), output);
  }

  // bool rear_veh = 3;
  if (this->rear_veh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->rear_veh(), output);
  }

  // float speed_ms = 4;
  if (!(this->speed_ms() <= 0 && this->speed_ms() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->speed_ms(), output);
  }

  // float dist_to_ego_m = 5;
  if (!(this->dist_to_ego_m() <= 0 && this->dist_to_ego_m() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(5, this->dist_to_ego_m(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Extra_Info)
}

::PROTOBUF_NAMESPACE_ID::uint8* Extra_Info::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Extra_Info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Vec3 local_cartesian_point = 1;
  if (this->has_local_cartesian_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::local_cartesian_point(this), target);
  }

  // bool front_veh = 2;
  if (this->front_veh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->front_veh(), target);
  }

  // bool rear_veh = 3;
  if (this->rear_veh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->rear_veh(), target);
  }

  // float speed_ms = 4;
  if (!(this->speed_ms() <= 0 && this->speed_ms() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->speed_ms(), target);
  }

  // float dist_to_ego_m = 5;
  if (!(this->dist_to_ego_m() <= 0 && this->dist_to_ego_m() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->dist_to_ego_m(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Extra_Info)
  return target;
}

size_t Extra_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Extra_Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 local_cartesian_point = 1;
  if (this->has_local_cartesian_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_cartesian_point_);
  }

  // bool front_veh = 2;
  if (this->front_veh() != 0) {
    total_size += 1 + 1;
  }

  // bool rear_veh = 3;
  if (this->rear_veh() != 0) {
    total_size += 1 + 1;
  }

  // float speed_ms = 4;
  if (!(this->speed_ms() <= 0 && this->speed_ms() >= 0)) {
    total_size += 1 + 4;
  }

  // float dist_to_ego_m = 5;
  if (!(this->dist_to_ego_m() <= 0 && this->dist_to_ego_m() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Extra_Info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Extra_Info)
  GOOGLE_DCHECK_NE(&from, this);
  const Extra_Info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Extra_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Extra_Info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Extra_Info)
    MergeFrom(*source);
  }
}

void Extra_Info::MergeFrom(const Extra_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Extra_Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_cartesian_point()) {
    mutable_local_cartesian_point()->::sim_msg::Vec3::MergeFrom(from.local_cartesian_point());
  }
  if (from.front_veh() != 0) {
    set_front_veh(from.front_veh());
  }
  if (from.rear_veh() != 0) {
    set_rear_veh(from.rear_veh());
  }
  if (!(from.speed_ms() <= 0 && from.speed_ms() >= 0)) {
    set_speed_ms(from.speed_ms());
  }
  if (!(from.dist_to_ego_m() <= 0 && from.dist_to_ego_m() >= 0)) {
    set_dist_to_ego_m(from.dist_to_ego_m());
  }
}

void Extra_Info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Extra_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Extra_Info::CopyFrom(const Extra_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Extra_Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Extra_Info::IsInitialized() const {
  return true;
}

void Extra_Info::InternalSwap(Extra_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_cartesian_point_, other->local_cartesian_point_);
  swap(front_veh_, other->front_veh_);
  swap(rear_veh_, other->rear_veh_);
  swap(speed_ms_, other->speed_ms_);
  swap(dist_to_ego_m_, other->dist_to_ego_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Extra_Info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Car::InitAsDefaultInstance() {
  ::sim_msg::_Car_default_instance_._instance.get_mutable()->planning_line_ = const_cast< ::sim_msg::Trajectory*>(
      ::sim_msg::Trajectory::internal_default_instance());
  ::sim_msg::_Car_default_instance_._instance.get_mutable()->twin_data_ = const_cast< ::sim_msg::TwinInfo*>(
      ::sim_msg::TwinInfo::internal_default_instance());
  ::sim_msg::_Car_default_instance_._instance.get_mutable()->fcw_ = const_cast< ::sim_msg::ForwardCollisionWarning*>(
      ::sim_msg::ForwardCollisionWarning::internal_default_instance());
  ::sim_msg::_Car_default_instance_._instance.get_mutable()->extra_info_ = const_cast< ::sim_msg::Extra_Info*>(
      ::sim_msg::Extra_Info::internal_default_instance());
}
class Car::_Internal {
 public:
  static const ::sim_msg::Trajectory& planning_line(const Car* msg);
  static const ::sim_msg::TwinInfo& twin_data(const Car* msg);
  static const ::sim_msg::ForwardCollisionWarning& fcw(const Car* msg);
  static const ::sim_msg::Extra_Info& extra_info(const Car* msg);
};

const ::sim_msg::Trajectory&
Car::_Internal::planning_line(const Car* msg) {
  return *msg->planning_line_;
}
const ::sim_msg::TwinInfo&
Car::_Internal::twin_data(const Car* msg) {
  return *msg->twin_data_;
}
const ::sim_msg::ForwardCollisionWarning&
Car::_Internal::fcw(const Car* msg) {
  return *msg->fcw_;
}
const ::sim_msg::Extra_Info&
Car::_Internal::extra_info(const Car* msg) {
  return *msg->extra_info_;
}
void Car::clear_planning_line() {
  if (GetArenaNoVirtual() == nullptr && planning_line_ != nullptr) {
    delete planning_line_;
  }
  planning_line_ = nullptr;
}
Car::Car()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Car)
}
Car::Car(const Car& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      show_nearestobjectinfo_(from.show_nearestobjectinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strid().empty()) {
    strid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  serialization_archive_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.serialization_archive().empty()) {
    serialization_archive_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialization_archive_);
  }
  if (from.has_planning_line()) {
    planning_line_ = new ::sim_msg::Trajectory(*from.planning_line_);
  } else {
    planning_line_ = nullptr;
  }
  if (from.has_twin_data()) {
    twin_data_ = new ::sim_msg::TwinInfo(*from.twin_data_);
  } else {
    twin_data_ = nullptr;
  }
  if (from.has_fcw()) {
    fcw_ = new ::sim_msg::ForwardCollisionWarning(*from.fcw_);
  } else {
    fcw_ = nullptr;
  }
  if (from.has_extra_info()) {
    extra_info_ = new ::sim_msg::Extra_Info(*from.extra_info_);
  } else {
    extra_info_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&acc_l_) -
    reinterpret_cast<char*>(&id_)) + sizeof(acc_l_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Car)
}

void Car::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Car_traffic_2eproto.base);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialization_archive_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&planning_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_l_) -
      reinterpret_cast<char*>(&planning_line_)) + sizeof(acc_l_));
}

Car::~Car() {
  // @@protoc_insertion_point(destructor:sim_msg.Car)
  SharedDtor();
}

void Car::SharedDtor() {
  strid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialization_archive_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete planning_line_;
  if (this != internal_default_instance()) delete twin_data_;
  if (this != internal_default_instance()) delete fcw_;
  if (this != internal_default_instance()) delete extra_info_;
}

void Car::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Car& Car::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Car_traffic_2eproto.base);
  return *internal_default_instance();
}


void Car::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_nearestobjectinfo_.Clear();
  strid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serialization_archive_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && planning_line_ != nullptr) {
    delete planning_line_;
  }
  planning_line_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && twin_data_ != nullptr) {
    delete twin_data_;
  }
  twin_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fcw_ != nullptr) {
    delete fcw_;
  }
  fcw_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extra_info_ != nullptr) {
    delete extra_info_;
  }
  extra_info_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&acc_l_) -
      reinterpret_cast<char*>(&id_)) + sizeof(acc_l_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Car::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double v = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          vl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 laneId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double acc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 age = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 tx_road_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          tx_road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_section_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          tx_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tx_lane_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          tx_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_lanelink_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          tx_lanelink_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Trajectory planning_line = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_planning_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double show_abs_velocity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          show_abs_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_abs_acc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          show_abs_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_velocity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          show_relative_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_acc = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          show_relative_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_velocity_horizontal = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          show_relative_velocity_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_acc_horizontal = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          show_relative_acc_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_dist_vertical = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          show_relative_dist_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_dist_horizontal = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          show_relative_dist_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ControlState control_state = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_control_state(static_cast<::sim_msg::ControlState>(val));
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_show_nearestobjectinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 506);
        } else goto handle_unusual;
        continue;
      // double angle_along_centerline_degree = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 1)) {
          angle_along_centerline_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string strid = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_strid(), ptr, ctx, "sim_msg.Car.strid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.TwinInfo twin_data = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_twin_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ForwardCollisionWarning fcw = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_fcw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lOffset = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          loffset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 to_tx_road_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          to_tx_road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 to_tx_section_id = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          to_tx_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to_tx_lane_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          to_tx_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes serialization_archive = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_serialization_archive(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Extra_Info extra_info = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_extra_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float acc_l = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          acc_l_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Car::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Car)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vl = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 laneId = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &laneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_road_id = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_section_id = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tx_lane_id = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_lanelink_id = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_lanelink_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Trajectory planning_line = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_planning_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_abs_velocity = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (177 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_abs_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_abs_acc = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (185 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_abs_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_velocity = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (193 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_acc = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (201 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_velocity_horizontal = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (209 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_velocity_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_acc_horizontal = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (217 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_acc_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_dist_vertical = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (225 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_dist_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_dist_horizontal = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (233 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_dist_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ControlState control_state = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (240 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control_state(static_cast< ::sim_msg::ControlState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_show_nearestobjectinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle_along_centerline_degree = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (257 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_along_centerline_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strid = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_strid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->strid().data(), static_cast<int>(this->strid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Car.strid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.TwinInfo twin_data = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_twin_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ForwardCollisionWarning fcw = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fcw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lOffset = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (289 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loffset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 to_tx_road_id = 37;
      case 37: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (296 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_tx_road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 to_tx_section_id = 38;
      case 38: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (304 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_tx_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 to_tx_lane_id = 39;
      case 39: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (312 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_tx_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes serialization_archive = 40;
      case 40: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (322 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_serialization_archive()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Extra_Info extra_info = 41;
      case 41: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (330 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_extra_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float acc_l = 42;
      case 42: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (341 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Car)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Car)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Car::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // double v = 6;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->v(), output);
  }

  // double vl = 7;
  if (!(this->vl() <= 0 && this->vl() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->vl(), output);
  }

  // double theta = 8;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->theta(), output);
  }

  // double length = 9;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->length(), output);
  }

  // double width = 10;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->width(), output);
  }

  // double height = 11;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->height(), output);
  }

  // int32 type = 12;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(12, this->type(), output);
  }

  // int32 laneId = 13;
  if (this->laneid() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->laneid(), output);
  }

  // double acc = 14;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->acc(), output);
  }

  // int32 age = 15;
  if (this->age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(15, this->age(), output);
  }

  // double z = 16;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->z(), output);
  }

  // uint64 tx_road_id = 17;
  if (this->tx_road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(17, this->tx_road_id(), output);
  }

  // uint64 tx_section_id = 18;
  if (this->tx_section_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(18, this->tx_section_id(), output);
  }

  // int64 tx_lane_id = 19;
  if (this->tx_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(19, this->tx_lane_id(), output);
  }

  // uint64 tx_lanelink_id = 20;
  if (this->tx_lanelink_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(20, this->tx_lanelink_id(), output);
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->has_planning_line()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::planning_line(this), output);
  }

  // double show_abs_velocity = 22;
  if (!(this->show_abs_velocity() <= 0 && this->show_abs_velocity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(22, this->show_abs_velocity(), output);
  }

  // double show_abs_acc = 23;
  if (!(this->show_abs_acc() <= 0 && this->show_abs_acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(23, this->show_abs_acc(), output);
  }

  // double show_relative_velocity = 24;
  if (!(this->show_relative_velocity() <= 0 && this->show_relative_velocity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(24, this->show_relative_velocity(), output);
  }

  // double show_relative_acc = 25;
  if (!(this->show_relative_acc() <= 0 && this->show_relative_acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(25, this->show_relative_acc(), output);
  }

  // double show_relative_velocity_horizontal = 26;
  if (!(this->show_relative_velocity_horizontal() <= 0 && this->show_relative_velocity_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(26, this->show_relative_velocity_horizontal(), output);
  }

  // double show_relative_acc_horizontal = 27;
  if (!(this->show_relative_acc_horizontal() <= 0 && this->show_relative_acc_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(27, this->show_relative_acc_horizontal(), output);
  }

  // double show_relative_dist_vertical = 28;
  if (!(this->show_relative_dist_vertical() <= 0 && this->show_relative_dist_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(28, this->show_relative_dist_vertical(), output);
  }

  // double show_relative_dist_horizontal = 29;
  if (!(this->show_relative_dist_horizontal() <= 0 && this->show_relative_dist_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(29, this->show_relative_dist_horizontal(), output);
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->control_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      30, this->control_state(), output);
  }

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->show_nearestobjectinfo_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31,
      this->show_nearestobjectinfo(static_cast<int>(i)),
      output);
  }

  // double angle_along_centerline_degree = 32;
  if (!(this->angle_along_centerline_degree() <= 0 && this->angle_along_centerline_degree() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(32, this->angle_along_centerline_degree(), output);
  }

  // string strid = 33;
  if (this->strid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), static_cast<int>(this->strid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Car.strid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      33, this->strid(), output);
  }

  // .sim_msg.TwinInfo twin_data = 34;
  if (this->has_twin_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, _Internal::twin_data(this), output);
  }

  // .sim_msg.ForwardCollisionWarning fcw = 35;
  if (this->has_fcw()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, _Internal::fcw(this), output);
  }

  // double lOffset = 36;
  if (!(this->loffset() <= 0 && this->loffset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(36, this->loffset(), output);
  }

  // uint64 to_tx_road_id = 37;
  if (this->to_tx_road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(37, this->to_tx_road_id(), output);
  }

  // uint64 to_tx_section_id = 38;
  if (this->to_tx_section_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(38, this->to_tx_section_id(), output);
  }

  // int64 to_tx_lane_id = 39;
  if (this->to_tx_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(39, this->to_tx_lane_id(), output);
  }

  // bytes serialization_archive = 40;
  if (this->serialization_archive().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      40, this->serialization_archive(), output);
  }

  // .sim_msg.Extra_Info extra_info = 41;
  if (this->has_extra_info()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, _Internal::extra_info(this), output);
  }

  // float acc_l = 42;
  if (!(this->acc_l() <= 0 && this->acc_l() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(42, this->acc_l(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Car)
}

::PROTOBUF_NAMESPACE_ID::uint8* Car::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // double v = 6;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->v(), target);
  }

  // double vl = 7;
  if (!(this->vl() <= 0 && this->vl() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->vl(), target);
  }

  // double theta = 8;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->theta(), target);
  }

  // double length = 9;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->length(), target);
  }

  // double width = 10;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->width(), target);
  }

  // double height = 11;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->height(), target);
  }

  // int32 type = 12;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->type(), target);
  }

  // int32 laneId = 13;
  if (this->laneid() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->laneid(), target);
  }

  // double acc = 14;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->acc(), target);
  }

  // int32 age = 15;
  if (this->age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->age(), target);
  }

  // double z = 16;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->z(), target);
  }

  // uint64 tx_road_id = 17;
  if (this->tx_road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->tx_road_id(), target);
  }

  // uint64 tx_section_id = 18;
  if (this->tx_section_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->tx_section_id(), target);
  }

  // int64 tx_lane_id = 19;
  if (this->tx_lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->tx_lane_id(), target);
  }

  // uint64 tx_lanelink_id = 20;
  if (this->tx_lanelink_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->tx_lanelink_id(), target);
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->has_planning_line()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::planning_line(this), target);
  }

  // double show_abs_velocity = 22;
  if (!(this->show_abs_velocity() <= 0 && this->show_abs_velocity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->show_abs_velocity(), target);
  }

  // double show_abs_acc = 23;
  if (!(this->show_abs_acc() <= 0 && this->show_abs_acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->show_abs_acc(), target);
  }

  // double show_relative_velocity = 24;
  if (!(this->show_relative_velocity() <= 0 && this->show_relative_velocity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->show_relative_velocity(), target);
  }

  // double show_relative_acc = 25;
  if (!(this->show_relative_acc() <= 0 && this->show_relative_acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->show_relative_acc(), target);
  }

  // double show_relative_velocity_horizontal = 26;
  if (!(this->show_relative_velocity_horizontal() <= 0 && this->show_relative_velocity_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->show_relative_velocity_horizontal(), target);
  }

  // double show_relative_acc_horizontal = 27;
  if (!(this->show_relative_acc_horizontal() <= 0 && this->show_relative_acc_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->show_relative_acc_horizontal(), target);
  }

  // double show_relative_dist_vertical = 28;
  if (!(this->show_relative_dist_vertical() <= 0 && this->show_relative_dist_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->show_relative_dist_vertical(), target);
  }

  // double show_relative_dist_horizontal = 29;
  if (!(this->show_relative_dist_horizontal() <= 0 && this->show_relative_dist_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->show_relative_dist_horizontal(), target);
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->control_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->control_state(), target);
  }

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->show_nearestobjectinfo_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, this->show_nearestobjectinfo(static_cast<int>(i)), target);
  }

  // double angle_along_centerline_degree = 32;
  if (!(this->angle_along_centerline_degree() <= 0 && this->angle_along_centerline_degree() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(32, this->angle_along_centerline_degree(), target);
  }

  // string strid = 33;
  if (this->strid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), static_cast<int>(this->strid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Car.strid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        33, this->strid(), target);
  }

  // .sim_msg.TwinInfo twin_data = 34;
  if (this->has_twin_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        34, _Internal::twin_data(this), target);
  }

  // .sim_msg.ForwardCollisionWarning fcw = 35;
  if (this->has_fcw()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        35, _Internal::fcw(this), target);
  }

  // double lOffset = 36;
  if (!(this->loffset() <= 0 && this->loffset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(36, this->loffset(), target);
  }

  // uint64 to_tx_road_id = 37;
  if (this->to_tx_road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(37, this->to_tx_road_id(), target);
  }

  // uint64 to_tx_section_id = 38;
  if (this->to_tx_section_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(38, this->to_tx_section_id(), target);
  }

  // int64 to_tx_lane_id = 39;
  if (this->to_tx_lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(39, this->to_tx_lane_id(), target);
  }

  // bytes serialization_archive = 40;
  if (this->serialization_archive().size() > 0) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        40, this->serialization_archive(), target);
  }

  // .sim_msg.Extra_Info extra_info = 41;
  if (this->has_extra_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        41, _Internal::extra_info(this), target);
  }

  // float acc_l = 42;
  if (!(this->acc_l() <= 0 && this->acc_l() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(42, this->acc_l(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Car)
  return target;
}

size_t Car::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Car)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  {
    unsigned int count = static_cast<unsigned int>(this->show_nearestobjectinfo_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->show_nearestobjectinfo(static_cast<int>(i)));
    }
  }

  // string strid = 33;
  if (this->strid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->strid());
  }

  // bytes serialization_archive = 40;
  if (this->serialization_archive().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->serialization_archive());
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->has_planning_line()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planning_line_);
  }

  // .sim_msg.TwinInfo twin_data = 34;
  if (this->has_twin_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twin_data_);
  }

  // .sim_msg.ForwardCollisionWarning fcw = 35;
  if (this->has_fcw()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fcw_);
  }

  // .sim_msg.Extra_Info extra_info = 41;
  if (this->has_extra_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extra_info_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // double v = 6;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 8;
  }

  // double vl = 7;
  if (!(this->vl() <= 0 && this->vl() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 8;
  if (!(this->theta() <= 0 && this->theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double length = 9;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 10;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 11;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 laneId = 13;
  if (this->laneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->laneid());
  }

  // double acc = 14;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 16;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 2 + 8;
  }

  // uint64 tx_road_id = 17;
  if (this->tx_road_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->tx_road_id());
  }

  // uint64 tx_section_id = 18;
  if (this->tx_section_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->tx_section_id());
  }

  // int64 tx_lane_id = 19;
  if (this->tx_lane_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tx_lane_id());
  }

  // uint64 tx_lanelink_id = 20;
  if (this->tx_lanelink_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->tx_lanelink_id());
  }

  // double show_abs_velocity = 22;
  if (!(this->show_abs_velocity() <= 0 && this->show_abs_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 age = 15;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->control_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->control_state());
  }

  // double show_abs_acc = 23;
  if (!(this->show_abs_acc() <= 0 && this->show_abs_acc() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity = 24;
  if (!(this->show_relative_velocity() <= 0 && this->show_relative_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_acc = 25;
  if (!(this->show_relative_acc() <= 0 && this->show_relative_acc() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity_horizontal = 26;
  if (!(this->show_relative_velocity_horizontal() <= 0 && this->show_relative_velocity_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_acc_horizontal = 27;
  if (!(this->show_relative_acc_horizontal() <= 0 && this->show_relative_acc_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_vertical = 28;
  if (!(this->show_relative_dist_vertical() <= 0 && this->show_relative_dist_vertical() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_horizontal = 29;
  if (!(this->show_relative_dist_horizontal() <= 0 && this->show_relative_dist_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // double angle_along_centerline_degree = 32;
  if (!(this->angle_along_centerline_degree() <= 0 && this->angle_along_centerline_degree() >= 0)) {
    total_size += 2 + 8;
  }

  // double lOffset = 36;
  if (!(this->loffset() <= 0 && this->loffset() >= 0)) {
    total_size += 2 + 8;
  }

  // uint64 to_tx_road_id = 37;
  if (this->to_tx_road_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->to_tx_road_id());
  }

  // uint64 to_tx_section_id = 38;
  if (this->to_tx_section_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->to_tx_section_id());
  }

  // int64 to_tx_lane_id = 39;
  if (this->to_tx_lane_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->to_tx_lane_id());
  }

  // float acc_l = 42;
  if (!(this->acc_l() <= 0 && this->acc_l() >= 0)) {
    total_size += 2 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Car::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Car)
  GOOGLE_DCHECK_NE(&from, this);
  const Car* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Car>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Car)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Car)
    MergeFrom(*source);
  }
}

void Car::MergeFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Car)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  show_nearestobjectinfo_.MergeFrom(from.show_nearestobjectinfo_);
  if (from.strid().size() > 0) {

    strid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  if (from.serialization_archive().size() > 0) {

    serialization_archive_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.serialization_archive_);
  }
  if (from.has_planning_line()) {
    mutable_planning_line()->::sim_msg::Trajectory::MergeFrom(from.planning_line());
  }
  if (from.has_twin_data()) {
    mutable_twin_data()->::sim_msg::TwinInfo::MergeFrom(from.twin_data());
  }
  if (from.has_fcw()) {
    mutable_fcw()->::sim_msg::ForwardCollisionWarning::MergeFrom(from.fcw());
  }
  if (from.has_extra_info()) {
    mutable_extra_info()->::sim_msg::Extra_Info::MergeFrom(from.extra_info());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    set_t(from.t());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    set_v(from.v());
  }
  if (!(from.vl() <= 0 && from.vl() >= 0)) {
    set_vl(from.vl());
  }
  if (!(from.theta() <= 0 && from.theta() >= 0)) {
    set_theta(from.theta());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.laneid() != 0) {
    set_laneid(from.laneid());
  }
  if (!(from.acc() <= 0 && from.acc() >= 0)) {
    set_acc(from.acc());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (from.tx_road_id() != 0) {
    set_tx_road_id(from.tx_road_id());
  }
  if (from.tx_section_id() != 0) {
    set_tx_section_id(from.tx_section_id());
  }
  if (from.tx_lane_id() != 0) {
    set_tx_lane_id(from.tx_lane_id());
  }
  if (from.tx_lanelink_id() != 0) {
    set_tx_lanelink_id(from.tx_lanelink_id());
  }
  if (!(from.show_abs_velocity() <= 0 && from.show_abs_velocity() >= 0)) {
    set_show_abs_velocity(from.show_abs_velocity());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.control_state() != 0) {
    set_control_state(from.control_state());
  }
  if (!(from.show_abs_acc() <= 0 && from.show_abs_acc() >= 0)) {
    set_show_abs_acc(from.show_abs_acc());
  }
  if (!(from.show_relative_velocity() <= 0 && from.show_relative_velocity() >= 0)) {
    set_show_relative_velocity(from.show_relative_velocity());
  }
  if (!(from.show_relative_acc() <= 0 && from.show_relative_acc() >= 0)) {
    set_show_relative_acc(from.show_relative_acc());
  }
  if (!(from.show_relative_velocity_horizontal() <= 0 && from.show_relative_velocity_horizontal() >= 0)) {
    set_show_relative_velocity_horizontal(from.show_relative_velocity_horizontal());
  }
  if (!(from.show_relative_acc_horizontal() <= 0 && from.show_relative_acc_horizontal() >= 0)) {
    set_show_relative_acc_horizontal(from.show_relative_acc_horizontal());
  }
  if (!(from.show_relative_dist_vertical() <= 0 && from.show_relative_dist_vertical() >= 0)) {
    set_show_relative_dist_vertical(from.show_relative_dist_vertical());
  }
  if (!(from.show_relative_dist_horizontal() <= 0 && from.show_relative_dist_horizontal() >= 0)) {
    set_show_relative_dist_horizontal(from.show_relative_dist_horizontal());
  }
  if (!(from.angle_along_centerline_degree() <= 0 && from.angle_along_centerline_degree() >= 0)) {
    set_angle_along_centerline_degree(from.angle_along_centerline_degree());
  }
  if (!(from.loffset() <= 0 && from.loffset() >= 0)) {
    set_loffset(from.loffset());
  }
  if (from.to_tx_road_id() != 0) {
    set_to_tx_road_id(from.to_tx_road_id());
  }
  if (from.to_tx_section_id() != 0) {
    set_to_tx_section_id(from.to_tx_section_id());
  }
  if (from.to_tx_lane_id() != 0) {
    set_to_tx_lane_id(from.to_tx_lane_id());
  }
  if (!(from.acc_l() <= 0 && from.acc_l() >= 0)) {
    set_acc_l(from.acc_l());
  }
}

void Car::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Car::CopyFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Car::IsInitialized() const {
  return true;
}

void Car::InternalSwap(Car* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&show_nearestobjectinfo_)->InternalSwap(CastToBase(&other->show_nearestobjectinfo_));
  strid_.Swap(&other->strid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  serialization_archive_.Swap(&other->serialization_archive_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(planning_line_, other->planning_line_);
  swap(twin_data_, other->twin_data_);
  swap(fcw_, other->fcw_);
  swap(extra_info_, other->extra_info_);
  swap(id_, other->id_);
  swap(t_, other->t_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(v_, other->v_);
  swap(vl_, other->vl_);
  swap(theta_, other->theta_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(type_, other->type_);
  swap(laneid_, other->laneid_);
  swap(acc_, other->acc_);
  swap(z_, other->z_);
  swap(tx_road_id_, other->tx_road_id_);
  swap(tx_section_id_, other->tx_section_id_);
  swap(tx_lane_id_, other->tx_lane_id_);
  swap(tx_lanelink_id_, other->tx_lanelink_id_);
  swap(show_abs_velocity_, other->show_abs_velocity_);
  swap(age_, other->age_);
  swap(control_state_, other->control_state_);
  swap(show_abs_acc_, other->show_abs_acc_);
  swap(show_relative_velocity_, other->show_relative_velocity_);
  swap(show_relative_acc_, other->show_relative_acc_);
  swap(show_relative_velocity_horizontal_, other->show_relative_velocity_horizontal_);
  swap(show_relative_acc_horizontal_, other->show_relative_acc_horizontal_);
  swap(show_relative_dist_vertical_, other->show_relative_dist_vertical_);
  swap(show_relative_dist_horizontal_, other->show_relative_dist_horizontal_);
  swap(angle_along_centerline_degree_, other->angle_along_centerline_degree_);
  swap(loffset_, other->loffset_);
  swap(to_tx_road_id_, other->to_tx_road_id_);
  swap(to_tx_section_id_, other->to_tx_section_id_);
  swap(to_tx_lane_id_, other->to_tx_lane_id_);
  swap(acc_l_, other->acc_l_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Car::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticObstacle::InitAsDefaultInstance() {
  ::sim_msg::_StaticObstacle_default_instance_._instance.get_mutable()->twin_data_ = const_cast< ::sim_msg::TwinInfo*>(
      ::sim_msg::TwinInfo::internal_default_instance());
}
class StaticObstacle::_Internal {
 public:
  static const ::sim_msg::TwinInfo& twin_data(const StaticObstacle* msg);
};

const ::sim_msg::TwinInfo&
StaticObstacle::_Internal::twin_data(const StaticObstacle* msg) {
  return *msg->twin_data_;
}
StaticObstacle::StaticObstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.StaticObstacle)
}
StaticObstacle::StaticObstacle(const StaticObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strid().empty()) {
    strid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  if (from.has_twin_data()) {
    twin_data_ = new ::sim_msg::TwinInfo(*from.twin_data_);
  } else {
    twin_data_ = nullptr;
  }
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.StaticObstacle)
}

void StaticObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StaticObstacle_traffic_2eproto.base);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&twin_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&twin_data_)) + sizeof(age_));
}

StaticObstacle::~StaticObstacle() {
  // @@protoc_insertion_point(destructor:sim_msg.StaticObstacle)
  SharedDtor();
}

void StaticObstacle::SharedDtor() {
  strid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete twin_data_;
}

void StaticObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticObstacle& StaticObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticObstacle_traffic_2eproto.base);
  return *internal_default_instance();
}


void StaticObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.StaticObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && twin_data_ != nullptr) {
    delete twin_data_;
  }
  twin_data_ = nullptr;
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&t_)) + sizeof(age_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StaticObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string strid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_strid(), ptr, ctx, "sim_msg.StaticObstacle.strid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.TwinInfo twin_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_twin_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StaticObstacle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.StaticObstacle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strid = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_strid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->strid().data(), static_cast<int>(this->strid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.StaticObstacle.strid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.TwinInfo twin_data = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_twin_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.StaticObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.StaticObstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void StaticObstacle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.StaticObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // int32 age = 10;
  if (this->age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(10, this->age(), output);
  }

  // double z = 11;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->z(), output);
  }

  // string strid = 12;
  if (this->strid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), static_cast<int>(this->strid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.StaticObstacle.strid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->strid(), output);
  }

  // .sim_msg.TwinInfo twin_data = 13;
  if (this->has_twin_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::twin_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.StaticObstacle)
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticObstacle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.StaticObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // int32 age = 10;
  if (this->age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->age(), target);
  }

  // double z = 11;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->z(), target);
  }

  // string strid = 12;
  if (this->strid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), static_cast<int>(this->strid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.StaticObstacle.strid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->strid(), target);
  }

  // .sim_msg.TwinInfo twin_data = 13;
  if (this->has_twin_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::twin_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.StaticObstacle)
  return target;
}

size_t StaticObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.StaticObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strid = 12;
  if (this->strid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->strid());
  }

  // .sim_msg.TwinInfo twin_data = 13;
  if (this->has_twin_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twin_data_);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 11;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 age = 10;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->age());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.StaticObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.StaticObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.StaticObstacle)
    MergeFrom(*source);
  }
}

void StaticObstacle::MergeFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.StaticObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strid().size() > 0) {

    strid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  if (from.has_twin_data()) {
    mutable_twin_data()->::sim_msg::TwinInfo::MergeFrom(from.twin_data());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    set_t(from.t());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void StaticObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.StaticObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObstacle::CopyFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.StaticObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObstacle::IsInitialized() const {
  return true;
}

void StaticObstacle::InternalSwap(StaticObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  strid_.Swap(&other->strid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(twin_data_, other->twin_data_);
  swap(t_, other->t_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(z_, other->z_);
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicObstacle::InitAsDefaultInstance() {
  ::sim_msg::_DynamicObstacle_default_instance_._instance.get_mutable()->twin_data_ = const_cast< ::sim_msg::TwinInfo*>(
      ::sim_msg::TwinInfo::internal_default_instance());
}
class DynamicObstacle::_Internal {
 public:
  static const ::sim_msg::TwinInfo& twin_data(const DynamicObstacle* msg);
};

const ::sim_msg::TwinInfo&
DynamicObstacle::_Internal::twin_data(const DynamicObstacle* msg) {
  return *msg->twin_data_;
}
DynamicObstacle::DynamicObstacle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.DynamicObstacle)
}
DynamicObstacle::DynamicObstacle(const DynamicObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.strid().empty()) {
    strid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  if (from.has_twin_data()) {
    twin_data_ = new ::sim_msg::TwinInfo(*from.twin_data_);
  } else {
    twin_data_ = nullptr;
  }
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.DynamicObstacle)
}

void DynamicObstacle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DynamicObstacle_traffic_2eproto.base);
  strid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&twin_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&twin_data_)) + sizeof(age_));
}

DynamicObstacle::~DynamicObstacle() {
  // @@protoc_insertion_point(destructor:sim_msg.DynamicObstacle)
  SharedDtor();
}

void DynamicObstacle::SharedDtor() {
  strid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete twin_data_;
}

void DynamicObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicObstacle& DynamicObstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicObstacle_traffic_2eproto.base);
  return *internal_default_instance();
}


void DynamicObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.DynamicObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && twin_data_ != nullptr) {
    delete twin_data_;
  }
  twin_data_ = nullptr;
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&t_)) + sizeof(age_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DynamicObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double v = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          vl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 age = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_abs_velocity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          show_abs_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_abs_acc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          show_abs_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_velocity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          show_relative_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_acc = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          show_relative_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_velocity_horizontal = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          show_relative_velocity_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_acc_horizontal = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          show_relative_acc_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_dist_vertical = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          show_relative_dist_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_dist_horizontal = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          show_relative_dist_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string strid = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_strid(), ptr, ctx, "sim_msg.DynamicObstacle.strid");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.TwinInfo twin_data = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_twin_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DynamicObstacle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.DynamicObstacle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vl = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (97 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (113 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_abs_velocity = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (121 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_abs_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_abs_acc = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_abs_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_velocity = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (137 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_acc = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (145 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_velocity_horizontal = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (153 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_velocity_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_acc_horizontal = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (161 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_acc_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_dist_vertical = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (169 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_dist_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_dist_horizontal = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (177 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_dist_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strid = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_strid()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->strid().data(), static_cast<int>(this->strid().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.DynamicObstacle.strid"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.TwinInfo twin_data = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_twin_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.DynamicObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.DynamicObstacle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DynamicObstacle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.DynamicObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // double v = 10;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->v(), output);
  }

  // double vl = 11;
  if (!(this->vl() <= 0 && this->vl() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->vl(), output);
  }

  // double acc = 12;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(12, this->acc(), output);
  }

  // int32 age = 13;
  if (this->age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->age(), output);
  }

  // double z = 14;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(14, this->z(), output);
  }

  // double show_abs_velocity = 15;
  if (!(this->show_abs_velocity() <= 0 && this->show_abs_velocity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(15, this->show_abs_velocity(), output);
  }

  // double show_abs_acc = 16;
  if (!(this->show_abs_acc() <= 0 && this->show_abs_acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(16, this->show_abs_acc(), output);
  }

  // double show_relative_velocity = 17;
  if (!(this->show_relative_velocity() <= 0 && this->show_relative_velocity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(17, this->show_relative_velocity(), output);
  }

  // double show_relative_acc = 18;
  if (!(this->show_relative_acc() <= 0 && this->show_relative_acc() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(18, this->show_relative_acc(), output);
  }

  // double show_relative_velocity_horizontal = 19;
  if (!(this->show_relative_velocity_horizontal() <= 0 && this->show_relative_velocity_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(19, this->show_relative_velocity_horizontal(), output);
  }

  // double show_relative_acc_horizontal = 20;
  if (!(this->show_relative_acc_horizontal() <= 0 && this->show_relative_acc_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(20, this->show_relative_acc_horizontal(), output);
  }

  // double show_relative_dist_vertical = 21;
  if (!(this->show_relative_dist_vertical() <= 0 && this->show_relative_dist_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(21, this->show_relative_dist_vertical(), output);
  }

  // double show_relative_dist_horizontal = 22;
  if (!(this->show_relative_dist_horizontal() <= 0 && this->show_relative_dist_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(22, this->show_relative_dist_horizontal(), output);
  }

  // string strid = 23;
  if (this->strid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), static_cast<int>(this->strid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.DynamicObstacle.strid");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->strid(), output);
  }

  // .sim_msg.TwinInfo twin_data = 24;
  if (this->has_twin_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, _Internal::twin_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.DynamicObstacle)
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicObstacle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.DynamicObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // double v = 10;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->v(), target);
  }

  // double vl = 11;
  if (!(this->vl() <= 0 && this->vl() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->vl(), target);
  }

  // double acc = 12;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->acc(), target);
  }

  // int32 age = 13;
  if (this->age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->age(), target);
  }

  // double z = 14;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->z(), target);
  }

  // double show_abs_velocity = 15;
  if (!(this->show_abs_velocity() <= 0 && this->show_abs_velocity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->show_abs_velocity(), target);
  }

  // double show_abs_acc = 16;
  if (!(this->show_abs_acc() <= 0 && this->show_abs_acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->show_abs_acc(), target);
  }

  // double show_relative_velocity = 17;
  if (!(this->show_relative_velocity() <= 0 && this->show_relative_velocity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->show_relative_velocity(), target);
  }

  // double show_relative_acc = 18;
  if (!(this->show_relative_acc() <= 0 && this->show_relative_acc() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->show_relative_acc(), target);
  }

  // double show_relative_velocity_horizontal = 19;
  if (!(this->show_relative_velocity_horizontal() <= 0 && this->show_relative_velocity_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->show_relative_velocity_horizontal(), target);
  }

  // double show_relative_acc_horizontal = 20;
  if (!(this->show_relative_acc_horizontal() <= 0 && this->show_relative_acc_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->show_relative_acc_horizontal(), target);
  }

  // double show_relative_dist_vertical = 21;
  if (!(this->show_relative_dist_vertical() <= 0 && this->show_relative_dist_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->show_relative_dist_vertical(), target);
  }

  // double show_relative_dist_horizontal = 22;
  if (!(this->show_relative_dist_horizontal() <= 0 && this->show_relative_dist_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->show_relative_dist_horizontal(), target);
  }

  // string strid = 23;
  if (this->strid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->strid().data(), static_cast<int>(this->strid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.DynamicObstacle.strid");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        23, this->strid(), target);
  }

  // .sim_msg.TwinInfo twin_data = 24;
  if (this->has_twin_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::twin_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.DynamicObstacle)
  return target;
}

size_t DynamicObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.DynamicObstacle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strid = 23;
  if (this->strid().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->strid());
  }

  // .sim_msg.TwinInfo twin_data = 24;
  if (this->has_twin_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twin_data_);
  }

  // double t = 2;
  if (!(this->t() <= 0 && this->t() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double length = 6;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double v = 10;
  if (!(this->v() <= 0 && this->v() >= 0)) {
    total_size += 1 + 8;
  }

  // double vl = 11;
  if (!(this->vl() <= 0 && this->vl() >= 0)) {
    total_size += 1 + 8;
  }

  // double acc = 12;
  if (!(this->acc() <= 0 && this->acc() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 14;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double show_abs_velocity = 15;
  if (!(this->show_abs_velocity() <= 0 && this->show_abs_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double show_abs_acc = 16;
  if (!(this->show_abs_acc() <= 0 && this->show_abs_acc() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity = 17;
  if (!(this->show_relative_velocity() <= 0 && this->show_relative_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_acc = 18;
  if (!(this->show_relative_acc() <= 0 && this->show_relative_acc() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity_horizontal = 19;
  if (!(this->show_relative_velocity_horizontal() <= 0 && this->show_relative_velocity_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_acc_horizontal = 20;
  if (!(this->show_relative_acc_horizontal() <= 0 && this->show_relative_acc_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_vertical = 21;
  if (!(this->show_relative_dist_vertical() <= 0 && this->show_relative_dist_vertical() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_horizontal = 22;
  if (!(this->show_relative_dist_horizontal() <= 0 && this->show_relative_dist_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // int32 age = 13;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->age());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.DynamicObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.DynamicObstacle)
    MergeFrom(*source);
  }
}

void DynamicObstacle::MergeFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strid().size() > 0) {

    strid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.strid_);
  }
  if (from.has_twin_data()) {
    mutable_twin_data()->::sim_msg::TwinInfo::MergeFrom(from.twin_data());
  }
  if (!(from.t() <= 0 && from.t() >= 0)) {
    set_t(from.t());
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.v() <= 0 && from.v() >= 0)) {
    set_v(from.v());
  }
  if (!(from.vl() <= 0 && from.vl() >= 0)) {
    set_vl(from.vl());
  }
  if (!(from.acc() <= 0 && from.acc() >= 0)) {
    set_acc(from.acc());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (!(from.show_abs_velocity() <= 0 && from.show_abs_velocity() >= 0)) {
    set_show_abs_velocity(from.show_abs_velocity());
  }
  if (!(from.show_abs_acc() <= 0 && from.show_abs_acc() >= 0)) {
    set_show_abs_acc(from.show_abs_acc());
  }
  if (!(from.show_relative_velocity() <= 0 && from.show_relative_velocity() >= 0)) {
    set_show_relative_velocity(from.show_relative_velocity());
  }
  if (!(from.show_relative_acc() <= 0 && from.show_relative_acc() >= 0)) {
    set_show_relative_acc(from.show_relative_acc());
  }
  if (!(from.show_relative_velocity_horizontal() <= 0 && from.show_relative_velocity_horizontal() >= 0)) {
    set_show_relative_velocity_horizontal(from.show_relative_velocity_horizontal());
  }
  if (!(from.show_relative_acc_horizontal() <= 0 && from.show_relative_acc_horizontal() >= 0)) {
    set_show_relative_acc_horizontal(from.show_relative_acc_horizontal());
  }
  if (!(from.show_relative_dist_vertical() <= 0 && from.show_relative_dist_vertical() >= 0)) {
    set_show_relative_dist_vertical(from.show_relative_dist_vertical());
  }
  if (!(from.show_relative_dist_horizontal() <= 0 && from.show_relative_dist_horizontal() >= 0)) {
    set_show_relative_dist_horizontal(from.show_relative_dist_horizontal());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void DynamicObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacle::CopyFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacle::IsInitialized() const {
  return true;
}

void DynamicObstacle::InternalSwap(DynamicObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  strid_.Swap(&other->strid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(twin_data_, other->twin_data_);
  swap(t_, other->t_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(heading_, other->heading_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(v_, other->v_);
  swap(vl_, other->vl_);
  swap(acc_, other->acc_);
  swap(z_, other->z_);
  swap(show_abs_velocity_, other->show_abs_velocity_);
  swap(show_abs_acc_, other->show_abs_acc_);
  swap(show_relative_velocity_, other->show_relative_velocity_);
  swap(show_relative_acc_, other->show_relative_acc_);
  swap(show_relative_velocity_horizontal_, other->show_relative_velocity_horizontal_);
  swap(show_relative_acc_horizontal_, other->show_relative_acc_horizontal_);
  swap(show_relative_dist_vertical_, other->show_relative_dist_vertical_);
  swap(show_relative_dist_horizontal_, other->show_relative_dist_horizontal_);
  swap(age_, other->age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicObstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneUid::InitAsDefaultInstance() {
}
class LaneUid::_Internal {
 public:
};

LaneUid::LaneUid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LaneUid)
}
LaneUid::LaneUid(const LaneUid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tx_road_id_, &from.tx_road_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_lane_id_) -
    reinterpret_cast<char*>(&tx_road_id_)) + sizeof(tx_lane_id_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LaneUid)
}

void LaneUid::SharedCtor() {
  ::memset(&tx_road_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_lane_id_) -
      reinterpret_cast<char*>(&tx_road_id_)) + sizeof(tx_lane_id_));
}

LaneUid::~LaneUid() {
  // @@protoc_insertion_point(destructor:sim_msg.LaneUid)
  SharedDtor();
}

void LaneUid::SharedDtor() {
}

void LaneUid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneUid& LaneUid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneUid_traffic_2eproto.base);
  return *internal_default_instance();
}


void LaneUid::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LaneUid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tx_road_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_lane_id_) -
      reinterpret_cast<char*>(&tx_road_id_)) + sizeof(tx_lane_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneUid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 tx_road_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_section_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tx_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tx_lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tx_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneUid::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LaneUid)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 tx_road_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_section_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tx_lane_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LaneUid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LaneUid)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneUid::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LaneUid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_road_id = 1;
  if (this->tx_road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->tx_road_id(), output);
  }

  // uint64 tx_section_id = 2;
  if (this->tx_section_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->tx_section_id(), output);
  }

  // int64 tx_lane_id = 3;
  if (this->tx_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->tx_lane_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.LaneUid)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneUid::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LaneUid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_road_id = 1;
  if (this->tx_road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->tx_road_id(), target);
  }

  // uint64 tx_section_id = 2;
  if (this->tx_section_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->tx_section_id(), target);
  }

  // int64 tx_lane_id = 3;
  if (this->tx_lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->tx_lane_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LaneUid)
  return target;
}

size_t LaneUid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LaneUid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_road_id = 1;
  if (this->tx_road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->tx_road_id());
  }

  // uint64 tx_section_id = 2;
  if (this->tx_section_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->tx_section_id());
  }

  // int64 tx_lane_id = 3;
  if (this->tx_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tx_lane_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneUid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LaneUid)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneUid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneUid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LaneUid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LaneUid)
    MergeFrom(*source);
  }
}

void LaneUid::MergeFrom(const LaneUid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LaneUid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tx_road_id() != 0) {
    set_tx_road_id(from.tx_road_id());
  }
  if (from.tx_section_id() != 0) {
    set_tx_section_id(from.tx_section_id());
  }
  if (from.tx_lane_id() != 0) {
    set_tx_lane_id(from.tx_lane_id());
  }
}

void LaneUid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LaneUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneUid::CopyFrom(const LaneUid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LaneUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneUid::IsInitialized() const {
  return true;
}

void LaneUid::InternalSwap(LaneUid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(tx_road_id_, other->tx_road_id_);
  swap(tx_section_id_, other->tx_section_id_);
  swap(tx_lane_id_, other->tx_lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneUid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficLight::InitAsDefaultInstance() {
}
class TrafficLight::_Internal {
 public:
};

TrafficLight::TrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      control_lanes_(from.control_lanes_),
      control_phases_(from.control_phases_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  plan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.plan().empty()) {
    plan_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plan_);
  }
  junction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.junction().empty()) {
    junction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.junction_);
  }
  phasenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.phasenumber().empty()) {
    phasenumber_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phasenumber_);
  }
  signalhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.signalhead().empty()) {
    signalhead_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signalhead_);
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_age_) -
    reinterpret_cast<char*>(&x_)) + sizeof(next_age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficLight_traffic_2eproto.base);
  plan_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  junction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phasenumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signalhead_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_age_) -
      reinterpret_cast<char*>(&x_)) + sizeof(next_age_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:sim_msg.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
  plan_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  junction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phasenumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signalhead_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficLight& TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficLight_traffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_lanes_.Clear();
  control_phases_.Clear();
  plan_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  junction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  phasenumber_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signalhead_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_age_) -
      reinterpret_cast<char*>(&x_)) + sizeof(next_age_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 tx_road_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tx_road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_section_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tx_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tx_lane_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          tx_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.LaneUid control_lanes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_control_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Phase control_phases = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_control_phases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_control_phases(static_cast<::sim_msg::Phase>(val));
        } else goto handle_unusual;
        continue;
      // int32 next_color = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          next_color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 next_age = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          next_age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string plan = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_plan(), ptr, ctx, "sim_msg.TrafficLight.plan");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string junction = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_junction(), ptr, ctx, "sim_msg.TrafficLight.junction");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string phaseNumber = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_phasenumber(), ptr, ctx, "sim_msg.TrafficLight.phaseNumber");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signalHead = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_signalhead(), ptr, ctx, "sim_msg.TrafficLight.signalHead");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficLight::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TrafficLight)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 color = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_road_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_section_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tx_lane_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.LaneUid control_lanes = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_control_lanes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Phase control_phases = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_control_phases(static_cast< ::sim_msg::Phase >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_control_phases(static_cast< ::sim_msg::Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 next_color = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 next_age = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string plan = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_plan()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->plan().data(), static_cast<int>(this->plan().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.TrafficLight.plan"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string junction = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_junction()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->junction().data(), static_cast<int>(this->junction().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.TrafficLight.junction"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string phaseNumber = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_phasenumber()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->phasenumber().data(), static_cast<int>(this->phasenumber().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.TrafficLight.phaseNumber"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signalHead = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_signalhead()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->signalhead().data(), static_cast<int>(this->signalhead().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.TrafficLight.signalHead"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TrafficLight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficLight::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // double heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->heading(), output);
  }

  // int32 color = 5;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }

  // int32 age = 6;
  if (this->age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->age(), output);
  }

  // double z = 7;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->z(), output);
  }

  // uint64 tx_road_id = 8;
  if (this->tx_road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->tx_road_id(), output);
  }

  // uint64 tx_section_id = 9;
  if (this->tx_section_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->tx_section_id(), output);
  }

  // int64 tx_lane_id = 10;
  if (this->tx_lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(10, this->tx_lane_id(), output);
  }

  // repeated .sim_msg.LaneUid control_lanes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->control_lanes_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->control_lanes(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Phase control_phases = 12;
  if (this->control_phases_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_control_phases_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->control_phases_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->control_phases(i), output);
  }

  // int32 next_color = 13;
  if (this->next_color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(13, this->next_color(), output);
  }

  // int32 next_age = 14;
  if (this->next_age() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(14, this->next_age(), output);
  }

  // string plan = 15;
  if (this->plan().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->plan().data(), static_cast<int>(this->plan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.plan");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->plan(), output);
  }

  // string junction = 16;
  if (this->junction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->junction().data(), static_cast<int>(this->junction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.junction");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->junction(), output);
  }

  // string phaseNumber = 17;
  if (this->phasenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phasenumber().data(), static_cast<int>(this->phasenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.phaseNumber");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->phasenumber(), output);
  }

  // string signalHead = 18;
  if (this->signalhead().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->signalhead().data(), static_cast<int>(this->signalhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.signalHead");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->signalhead(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TrafficLight)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // double heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->heading(), target);
  }

  // int32 color = 5;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }

  // int32 age = 6;
  if (this->age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->age(), target);
  }

  // double z = 7;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->z(), target);
  }

  // uint64 tx_road_id = 8;
  if (this->tx_road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->tx_road_id(), target);
  }

  // uint64 tx_section_id = 9;
  if (this->tx_section_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->tx_section_id(), target);
  }

  // int64 tx_lane_id = 10;
  if (this->tx_lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->tx_lane_id(), target);
  }

  // repeated .sim_msg.LaneUid control_lanes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->control_lanes_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->control_lanes(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Phase control_phases = 12;
  if (this->control_phases_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _control_phases_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->control_phases_, target);
  }

  // int32 next_color = 13;
  if (this->next_color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->next_color(), target);
  }

  // int32 next_age = 14;
  if (this->next_age() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->next_age(), target);
  }

  // string plan = 15;
  if (this->plan().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->plan().data(), static_cast<int>(this->plan().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.plan");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->plan(), target);
  }

  // string junction = 16;
  if (this->junction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->junction().data(), static_cast<int>(this->junction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.junction");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->junction(), target);
  }

  // string phaseNumber = 17;
  if (this->phasenumber().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->phasenumber().data(), static_cast<int>(this->phasenumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.phaseNumber");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        17, this->phasenumber(), target);
  }

  // string signalHead = 18;
  if (this->signalhead().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->signalhead().data(), static_cast<int>(this->signalhead().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.TrafficLight.signalHead");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        18, this->signalhead(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.LaneUid control_lanes = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->control_lanes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->control_lanes(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Phase control_phases = 12;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->control_phases_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->control_phases(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _control_phases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string plan = 15;
  if (this->plan().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->plan());
  }

  // string junction = 16;
  if (this->junction().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->junction());
  }

  // string phaseNumber = 17;
  if (this->phasenumber().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->phasenumber());
  }

  // string signalHead = 18;
  if (this->signalhead().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->signalhead());
  }

  // double x = 2;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 color = 5;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // double heading = 4;
  if (!(this->heading() <= 0 && this->heading() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 7;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 tx_road_id = 8;
  if (this->tx_road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->tx_road_id());
  }

  // uint64 tx_section_id = 9;
  if (this->tx_section_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->tx_section_id());
  }

  // int32 age = 6;
  if (this->age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // int32 next_color = 13;
  if (this->next_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->next_color());
  }

  // int64 tx_lane_id = 10;
  if (this->tx_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->tx_lane_id());
  }

  // int32 next_age = 14;
  if (this->next_age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->next_age());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_lanes_.MergeFrom(from.control_lanes_);
  control_phases_.MergeFrom(from.control_phases_);
  if (from.plan().size() > 0) {

    plan_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.plan_);
  }
  if (from.junction().size() > 0) {

    junction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.junction_);
  }
  if (from.phasenumber().size() > 0) {

    phasenumber_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.phasenumber_);
  }
  if (from.signalhead().size() > 0) {

    signalhead_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signalhead_);
  }
  if (!(from.x() <= 0 && from.x() >= 0)) {
    set_x(from.x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    set_y(from.y());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (!(from.heading() <= 0 && from.heading() >= 0)) {
    set_heading(from.heading());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    set_z(from.z());
  }
  if (from.tx_road_id() != 0) {
    set_tx_road_id(from.tx_road_id());
  }
  if (from.tx_section_id() != 0) {
    set_tx_section_id(from.tx_section_id());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.next_color() != 0) {
    set_next_color(from.next_color());
  }
  if (from.tx_lane_id() != 0) {
    set_tx_lane_id(from.tx_lane_id());
  }
  if (from.next_age() != 0) {
    set_next_age(from.next_age());
  }
}

void TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&control_lanes_)->InternalSwap(CastToBase(&other->control_lanes_));
  control_phases_.InternalSwap(&other->control_phases_);
  plan_.Swap(&other->plan_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  junction_.Swap(&other->junction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  phasenumber_.Swap(&other->phasenumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signalhead_.Swap(&other->signalhead_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(id_, other->id_);
  swap(color_, other->color_);
  swap(heading_, other->heading_);
  swap(z_, other->z_);
  swap(tx_road_id_, other->tx_road_id_);
  swap(tx_section_id_, other->tx_section_id_);
  swap(age_, other->age_);
  swap(next_color_, other->next_color_);
  swap(tx_lane_id_, other->tx_lane_id_);
  swap(next_age_, other->next_age_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EgoInfo::InitAsDefaultInstance() {
}
class EgoInfo::_Internal {
 public:
};

EgoInfo::EgoInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EgoInfo)
}
EgoInfo::EgoInfo(const EgoInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&slope_) -
    reinterpret_cast<char*>(&id_)) + sizeof(slope_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.EgoInfo)
}

void EgoInfo::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slope_) -
      reinterpret_cast<char*>(&id_)) + sizeof(slope_));
}

EgoInfo::~EgoInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.EgoInfo)
  SharedDtor();
}

void EgoInfo::SharedDtor() {
}

void EgoInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EgoInfo& EgoInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EgoInfo_traffic_2eproto.base);
  return *internal_default_instance();
}


void EgoInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EgoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slope_) -
      reinterpret_cast<char*>(&id_)) + sizeof(slope_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EgoInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angle_along_centerline_degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          angle_along_centerline_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float slope = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          slope_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EgoInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EgoInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float angle_along_centerline_degree = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (21 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_along_centerline_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float slope = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slope_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EgoInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EgoInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EgoInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EgoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // float angle_along_centerline_degree = 2;
  if (!(this->angle_along_centerline_degree() <= 0 && this->angle_along_centerline_degree() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(2, this->angle_along_centerline_degree(), output);
  }

  // float slope = 3;
  if (!(this->slope() <= 0 && this->slope() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->slope(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EgoInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* EgoInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EgoInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // float angle_along_centerline_degree = 2;
  if (!(this->angle_along_centerline_degree() <= 0 && this->angle_along_centerline_degree() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->angle_along_centerline_degree(), target);
  }

  // float slope = 3;
  if (!(this->slope() <= 0 && this->slope() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->slope(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EgoInfo)
  return target;
}

size_t EgoInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EgoInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // float angle_along_centerline_degree = 2;
  if (!(this->angle_along_centerline_degree() <= 0 && this->angle_along_centerline_degree() >= 0)) {
    total_size += 1 + 4;
  }

  // float slope = 3;
  if (!(this->slope() <= 0 && this->slope() >= 0)) {
    total_size += 1 + 4;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EgoInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EgoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EgoInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EgoInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EgoInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EgoInfo)
    MergeFrom(*source);
  }
}

void EgoInfo::MergeFrom(const EgoInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EgoInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (!(from.angle_along_centerline_degree() <= 0 && from.angle_along_centerline_degree() >= 0)) {
    set_angle_along_centerline_degree(from.angle_along_centerline_degree());
  }
  if (!(from.slope() <= 0 && from.slope() >= 0)) {
    set_slope(from.slope());
  }
}

void EgoInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EgoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EgoInfo::CopyFrom(const EgoInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EgoInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EgoInfo::IsInitialized() const {
  return true;
}

void EgoInfo::InternalSwap(EgoInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(angle_along_centerline_degree_, other->angle_along_centerline_degree_);
  swap(slope_, other->slope_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EgoInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Traffic::InitAsDefaultInstance() {
}
class Traffic::_Internal {
 public:
};

Traffic::Traffic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Traffic)
}
Traffic::Traffic(const Traffic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      cars_(from.cars_),
      staticobstacles_(from.staticobstacles_),
      dynamicobstacles_(from.dynamicobstacles_),
      trafficlights_(from.trafficlights_),
      egos_(from.egos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&road_network_aver_velocity_, &from.road_network_aver_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&road_network_total_vehicle_count_) -
    reinterpret_cast<char*>(&road_network_aver_velocity_)) + sizeof(road_network_total_vehicle_count_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Traffic)
}

void Traffic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Traffic_traffic_2eproto.base);
  ::memset(&road_network_aver_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_network_total_vehicle_count_) -
      reinterpret_cast<char*>(&road_network_aver_velocity_)) + sizeof(road_network_total_vehicle_count_));
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:sim_msg.Traffic)
  SharedDtor();
}

void Traffic::SharedDtor() {
}

void Traffic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Traffic& Traffic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Traffic_traffic_2eproto.base);
  return *internal_default_instance();
}


void Traffic::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cars_.Clear();
  staticobstacles_.Clear();
  dynamicobstacles_.Clear();
  trafficlights_.Clear();
  egos_.Clear();
  ::memset(&road_network_aver_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&road_network_total_vehicle_count_) -
      reinterpret_cast<char*>(&road_network_aver_velocity_)) + sizeof(road_network_total_vehicle_count_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Traffic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.Car cars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_cars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.StaticObstacle staticObstacles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_staticobstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dynamicobstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.TrafficLight trafficLights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_trafficlights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // double road_network_aver_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          road_network_aver_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 road_network_total_vehicle_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          road_network_total_vehicle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.EgoInfo egos = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_egos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Traffic::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Traffic)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Car cars = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_cars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.StaticObstacle staticObstacles = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_staticobstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dynamicobstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.TrafficLight trafficLights = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_trafficlights()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double road_network_aver_velocity = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &road_network_aver_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 road_network_total_vehicle_count = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &road_network_total_vehicle_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 time = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.EgoInfo egos = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_egos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Traffic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Traffic)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Traffic::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Car cars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cars_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->cars(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->staticobstacles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->staticobstacles(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamicobstacles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->dynamicobstacles(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trafficlights_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->trafficlights(static_cast<int>(i)),
      output);
  }

  // double road_network_aver_velocity = 5;
  if (!(this->road_network_aver_velocity() <= 0 && this->road_network_aver_velocity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->road_network_aver_velocity(), output);
  }

  // int32 road_network_total_vehicle_count = 6;
  if (this->road_network_total_vehicle_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(6, this->road_network_total_vehicle_count(), output);
  }

  // uint64 time = 7;
  if (this->time() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->time(), output);
  }

  // repeated .sim_msg.EgoInfo egos = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->egos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->egos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Traffic)
}

::PROTOBUF_NAMESPACE_ID::uint8* Traffic::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Car cars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cars_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->cars(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->staticobstacles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->staticobstacles(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dynamicobstacles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->dynamicobstacles(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trafficlights_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->trafficlights(static_cast<int>(i)), target);
  }

  // double road_network_aver_velocity = 5;
  if (!(this->road_network_aver_velocity() <= 0 && this->road_network_aver_velocity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->road_network_aver_velocity(), target);
  }

  // int32 road_network_total_vehicle_count = 6;
  if (this->road_network_total_vehicle_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->road_network_total_vehicle_count(), target);
  }

  // uint64 time = 7;
  if (this->time() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->time(), target);
  }

  // repeated .sim_msg.EgoInfo egos = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->egos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->egos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Traffic)
  return target;
}

size_t Traffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Traffic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Car cars = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->cars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->cars(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->staticobstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->staticobstacles(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->dynamicobstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dynamicobstacles(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->trafficlights_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->trafficlights(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.EgoInfo egos = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->egos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->egos(static_cast<int>(i)));
    }
  }

  // double road_network_aver_velocity = 5;
  if (!(this->road_network_aver_velocity() <= 0 && this->road_network_aver_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 time = 7;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  // int32 road_network_total_vehicle_count = 6;
  if (this->road_network_total_vehicle_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->road_network_total_vehicle_count());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Traffic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  const Traffic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Traffic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Traffic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Traffic)
    MergeFrom(*source);
  }
}

void Traffic::MergeFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cars_.MergeFrom(from.cars_);
  staticobstacles_.MergeFrom(from.staticobstacles_);
  dynamicobstacles_.MergeFrom(from.dynamicobstacles_);
  trafficlights_.MergeFrom(from.trafficlights_);
  egos_.MergeFrom(from.egos_);
  if (!(from.road_network_aver_velocity() <= 0 && from.road_network_aver_velocity() >= 0)) {
    set_road_network_aver_velocity(from.road_network_aver_velocity());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.road_network_total_vehicle_count() != 0) {
    set_road_network_total_vehicle_count(from.road_network_total_vehicle_count());
  }
}

void Traffic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traffic::CopyFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {
  return true;
}

void Traffic::InternalSwap(Traffic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&cars_)->InternalSwap(CastToBase(&other->cars_));
  CastToBase(&staticobstacles_)->InternalSwap(CastToBase(&other->staticobstacles_));
  CastToBase(&dynamicobstacles_)->InternalSwap(CastToBase(&other->dynamicobstacles_));
  CastToBase(&trafficlights_)->InternalSwap(CastToBase(&other->trafficlights_));
  CastToBase(&egos_)->InternalSwap(CastToBase(&other->egos_));
  swap(road_network_aver_velocity_, other->road_network_aver_velocity_);
  swap(time_, other->time_);
  swap(road_network_total_vehicle_count_, other->road_network_total_vehicle_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Traffic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRecords::InitAsDefaultInstance() {
}
class TrafficRecords::_Internal {
 public:
};

TrafficRecords::TrafficRecords()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TrafficRecords)
}
TrafficRecords::TrafficRecords(const TrafficRecords& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      traffic_record_(from.traffic_record_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrafficRecords)
}

void TrafficRecords::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficRecords_traffic_2eproto.base);
}

TrafficRecords::~TrafficRecords() {
  // @@protoc_insertion_point(destructor:sim_msg.TrafficRecords)
  SharedDtor();
}

void TrafficRecords::SharedDtor() {
}

void TrafficRecords::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRecords& TrafficRecords::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRecords_traffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficRecords::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrafficRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traffic_record_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficRecords::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.Traffic traffic_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_traffic_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficRecords::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TrafficRecords)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Traffic traffic_record = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TrafficRecords)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TrafficRecords)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficRecords::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TrafficRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Traffic traffic_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_record_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->traffic_record(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TrafficRecords)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRecords::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrafficRecords)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Traffic traffic_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_record_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->traffic_record(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrafficRecords)
  return target;
}

size_t TrafficRecords::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrafficRecords)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Traffic traffic_record = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->traffic_record(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRecords::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TrafficRecords)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRecords* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRecords>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TrafficRecords)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TrafficRecords)
    MergeFrom(*source);
  }
}

void TrafficRecords::MergeFrom(const TrafficRecords& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrafficRecords)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traffic_record_.MergeFrom(from.traffic_record_);
}

void TrafficRecords::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TrafficRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRecords::CopyFrom(const TrafficRecords& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrafficRecords)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRecords::IsInitialized() const {
  return true;
}

void TrafficRecords::InternalSwap(TrafficRecords* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&traffic_record_)->InternalSwap(CastToBase(&other->traffic_record_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRecords::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryInfo::InitAsDefaultInstance() {
  ::sim_msg::_TrajectoryInfo_default_instance_._instance.get_mutable()->trajectory_line_ = const_cast< ::sim_msg::Trajectory*>(
      ::sim_msg::Trajectory::internal_default_instance());
}
class TrajectoryInfo::_Internal {
 public:
  static const ::sim_msg::Trajectory& trajectory_line(const TrajectoryInfo* msg);
};

const ::sim_msg::Trajectory&
TrajectoryInfo::_Internal::trajectory_line(const TrajectoryInfo* msg) {
  return *msg->trajectory_line_;
}
void TrajectoryInfo::clear_trajectory_line() {
  if (GetArenaNoVirtual() == nullptr && trajectory_line_ != nullptr) {
    delete trajectory_line_;
  }
  trajectory_line_ = nullptr;
}
TrajectoryInfo::TrajectoryInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TrajectoryInfo)
}
TrajectoryInfo::TrajectoryInfo(const TrajectoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trajectory_line()) {
    trajectory_line_ = new ::sim_msg::Trajectory(*from.trajectory_line_);
  } else {
    trajectory_line_ = nullptr;
  }
  time_stamp_ = from.time_stamp_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrajectoryInfo)
}

void TrajectoryInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryInfo_traffic_2eproto.base);
  ::memset(&trajectory_line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_stamp_) -
      reinterpret_cast<char*>(&trajectory_line_)) + sizeof(time_stamp_));
}

TrajectoryInfo::~TrajectoryInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.TrajectoryInfo)
  SharedDtor();
}

void TrajectoryInfo::SharedDtor() {
  if (this != internal_default_instance()) delete trajectory_line_;
}

void TrajectoryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryInfo& TrajectoryInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryInfo_traffic_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrajectoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trajectory_line_ != nullptr) {
    delete trajectory_line_;
  }
  trajectory_line_ = nullptr;
  time_stamp_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrajectoryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double time_stamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Trajectory trajectory_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_trajectory_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrajectoryInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TrajectoryInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double time_stamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_stamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Trajectory trajectory_line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trajectory_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TrajectoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TrajectoryInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrajectoryInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TrajectoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (!(this->time_stamp() <= 0 && this->time_stamp() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->time_stamp(), output);
  }

  // .sim_msg.Trajectory trajectory_line = 2;
  if (this->has_trajectory_line()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::trajectory_line(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TrajectoryInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrajectoryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double time_stamp = 1;
  if (!(this->time_stamp() <= 0 && this->time_stamp() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->time_stamp(), target);
  }

  // .sim_msg.Trajectory trajectory_line = 2;
  if (this->has_trajectory_line()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::trajectory_line(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrajectoryInfo)
  return target;
}

size_t TrajectoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrajectoryInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Trajectory trajectory_line = 2;
  if (this->has_trajectory_line()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trajectory_line_);
  }

  // double time_stamp = 1;
  if (!(this->time_stamp() <= 0 && this->time_stamp() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TrajectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TrajectoryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TrajectoryInfo)
    MergeFrom(*source);
  }
}

void TrajectoryInfo::MergeFrom(const TrajectoryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrajectoryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trajectory_line()) {
    mutable_trajectory_line()->::sim_msg::Trajectory::MergeFrom(from.trajectory_line());
  }
  if (!(from.time_stamp() <= 0 && from.time_stamp() >= 0)) {
    set_time_stamp(from.time_stamp());
  }
}

void TrajectoryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TrajectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryInfo::CopyFrom(const TrajectoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrajectoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryInfo::IsInitialized() const {
  return true;
}

void TrajectoryInfo::InternalSwap(TrajectoryInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trajectory_line_, other->trajectory_line_);
  swap(time_stamp_, other->time_stamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRecords4Logsim_DisengageEventInfo::InitAsDefaultInstance() {
}
class TrafficRecords4Logsim_DisengageEventInfo::_Internal {
 public:
};

TrafficRecords4Logsim_DisengageEventInfo::TrafficRecords4Logsim_DisengageEventInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
}
TrafficRecords4Logsim_DisengageEventInfo::TrafficRecords4Logsim_DisengageEventInfo(const TrafficRecords4Logsim_DisengageEventInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_ms_, &from.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
}

void TrafficRecords4Logsim_DisengageEventInfo::SharedCtor() {
  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(type_));
}

TrafficRecords4Logsim_DisengageEventInfo::~TrafficRecords4Logsim_DisengageEventInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  SharedDtor();
}

void TrafficRecords4Logsim_DisengageEventInfo::SharedDtor() {
}

void TrafficRecords4Logsim_DisengageEventInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRecords4Logsim_DisengageEventInfo& TrafficRecords4Logsim_DisengageEventInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRecords4Logsim_DisengageEventInfo_traffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficRecords4Logsim_DisengageEventInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&timestamp_ms_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficRecords4Logsim_DisengageEventInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.DisengageEventType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::sim_msg::DisengageEventType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficRecords4Logsim_DisengageEventInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 timestamp_ms = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.DisengageEventType type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sim_msg::DisengageEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficRecords4Logsim_DisengageEventInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->timestamp_ms(), output);
  }

  // .sim_msg.DisengageEventType type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRecords4Logsim_DisengageEventInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->timestamp_ms(), target);
  }

  // .sim_msg.DisengageEventType type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  return target;
}

size_t TrafficRecords4Logsim_DisengageEventInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp_ms = 1;
  if (this->timestamp_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->timestamp_ms());
  }

  // .sim_msg.DisengageEventType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRecords4Logsim_DisengageEventInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRecords4Logsim_DisengageEventInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRecords4Logsim_DisengageEventInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
    MergeFrom(*source);
  }
}

void TrafficRecords4Logsim_DisengageEventInfo::MergeFrom(const TrafficRecords4Logsim_DisengageEventInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp_ms() != 0) {
    set_timestamp_ms(from.timestamp_ms());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void TrafficRecords4Logsim_DisengageEventInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRecords4Logsim_DisengageEventInfo::CopyFrom(const TrafficRecords4Logsim_DisengageEventInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrafficRecords4Logsim.DisengageEventInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRecords4Logsim_DisengageEventInfo::IsInitialized() const {
  return true;
}

void TrafficRecords4Logsim_DisengageEventInfo::InternalSwap(TrafficRecords4Logsim_DisengageEventInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_ms_, other->timestamp_ms_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRecords4Logsim_DisengageEventInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrafficRecords4Logsim::InitAsDefaultInstance() {
}
class TrafficRecords4Logsim::_Internal {
 public:
};

void TrafficRecords4Logsim::clear_ego_location() {
  ego_location_.Clear();
}
TrafficRecords4Logsim::TrafficRecords4Logsim()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TrafficRecords4Logsim)
}
TrafficRecords4Logsim::TrafficRecords4Logsim(const TrafficRecords4Logsim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ego_location_(from.ego_location_),
      traffic_record_(from.traffic_record_),
      disengage_events_(from.disengage_events_),
      ego_trajectory_(from.ego_trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ms_ = from.duration_ms_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrafficRecords4Logsim)
}

void TrafficRecords4Logsim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrafficRecords4Logsim_traffic_2eproto.base);
  duration_ms_ = PROTOBUF_ULONGLONG(0);
}

TrafficRecords4Logsim::~TrafficRecords4Logsim() {
  // @@protoc_insertion_point(destructor:sim_msg.TrafficRecords4Logsim)
  SharedDtor();
}

void TrafficRecords4Logsim::SharedDtor() {
}

void TrafficRecords4Logsim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrafficRecords4Logsim& TrafficRecords4Logsim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrafficRecords4Logsim_traffic_2eproto.base);
  return *internal_default_instance();
}


void TrafficRecords4Logsim::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrafficRecords4Logsim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ego_location_.Clear();
  traffic_record_.Clear();
  disengage_events_.Clear();
  ego_trajectory_.Clear();
  duration_ms_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrafficRecords4Logsim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.Location ego_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ego_location(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Traffic traffic_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_traffic_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.TrafficRecords4Logsim.DisengageEventInfo disengage_events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_disengage_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // uint64 duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.TrajectoryInfo ego_trajectory = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ego_trajectory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrafficRecords4Logsim::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TrafficRecords4Logsim)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Location ego_location = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ego_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Traffic traffic_record = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_record()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.TrafficRecords4Logsim.DisengageEventInfo disengage_events = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_disengage_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 duration_ms = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.TrajectoryInfo ego_trajectory = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ego_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TrafficRecords4Logsim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TrafficRecords4Logsim)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrafficRecords4Logsim::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TrafficRecords4Logsim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Location ego_location = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_location_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->ego_location(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Traffic traffic_record = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_record_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->traffic_record(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.TrafficRecords4Logsim.DisengageEventInfo disengage_events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disengage_events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->disengage_events(static_cast<int>(i)),
      output);
  }

  // uint64 duration_ms = 4;
  if (this->duration_ms() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->duration_ms(), output);
  }

  // repeated .sim_msg.TrajectoryInfo ego_trajectory = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_trajectory_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->ego_trajectory(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.TrafficRecords4Logsim)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficRecords4Logsim::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrafficRecords4Logsim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Location ego_location = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_location_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->ego_location(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Traffic traffic_record = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_record_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->traffic_record(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.TrafficRecords4Logsim.DisengageEventInfo disengage_events = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->disengage_events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->disengage_events(static_cast<int>(i)), target);
  }

  // uint64 duration_ms = 4;
  if (this->duration_ms() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->duration_ms(), target);
  }

  // repeated .sim_msg.TrajectoryInfo ego_trajectory = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ego_trajectory_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->ego_trajectory(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrafficRecords4Logsim)
  return target;
}

size_t TrafficRecords4Logsim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrafficRecords4Logsim)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Location ego_location = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->ego_location_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ego_location(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Traffic traffic_record = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_record_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->traffic_record(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.TrafficRecords4Logsim.DisengageEventInfo disengage_events = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->disengage_events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->disengage_events(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.TrajectoryInfo ego_trajectory = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->ego_trajectory_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ego_trajectory(static_cast<int>(i)));
    }
  }

  // uint64 duration_ms = 4;
  if (this->duration_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->duration_ms());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrafficRecords4Logsim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TrafficRecords4Logsim)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficRecords4Logsim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrafficRecords4Logsim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TrafficRecords4Logsim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TrafficRecords4Logsim)
    MergeFrom(*source);
  }
}

void TrafficRecords4Logsim::MergeFrom(const TrafficRecords4Logsim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrafficRecords4Logsim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ego_location_.MergeFrom(from.ego_location_);
  traffic_record_.MergeFrom(from.traffic_record_);
  disengage_events_.MergeFrom(from.disengage_events_);
  ego_trajectory_.MergeFrom(from.ego_trajectory_);
  if (from.duration_ms() != 0) {
    set_duration_ms(from.duration_ms());
  }
}

void TrafficRecords4Logsim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TrafficRecords4Logsim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficRecords4Logsim::CopyFrom(const TrafficRecords4Logsim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrafficRecords4Logsim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficRecords4Logsim::IsInitialized() const {
  return true;
}

void TrafficRecords4Logsim::InternalSwap(TrafficRecords4Logsim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ego_location_)->InternalSwap(CastToBase(&other->ego_location_));
  CastToBase(&traffic_record_)->InternalSwap(CastToBase(&other->traffic_record_));
  CastToBase(&disengage_events_)->InternalSwap(CastToBase(&other->disengage_events_));
  CastToBase(&ego_trajectory_)->InternalSwap(CastToBase(&other->ego_trajectory_));
  swap(duration_ms_, other->duration_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficRecords4Logsim::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::TwinInfo* Arena::CreateMaybeMessage< ::sim_msg::TwinInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TwinInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ManualVehicleControlInfo* Arena::CreateMaybeMessage< ::sim_msg::ManualVehicleControlInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ManualVehicleControlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ManualVehicleControlInfoArray* Arena::CreateMaybeMessage< ::sim_msg::ManualVehicleControlInfoArray >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ManualVehicleControlInfoArray >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::NearestObject* Arena::CreateMaybeMessage< ::sim_msg::NearestObject >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::NearestObject >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ForwardCollisionWarning* Arena::CreateMaybeMessage< ::sim_msg::ForwardCollisionWarning >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ForwardCollisionWarning >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Extra_Info* Arena::CreateMaybeMessage< ::sim_msg::Extra_Info >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Extra_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Car* Arena::CreateMaybeMessage< ::sim_msg::Car >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Car >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::StaticObstacle* Arena::CreateMaybeMessage< ::sim_msg::StaticObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::StaticObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::DynamicObstacle* Arena::CreateMaybeMessage< ::sim_msg::DynamicObstacle >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::DynamicObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::LaneUid* Arena::CreateMaybeMessage< ::sim_msg::LaneUid >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::LaneUid >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TrafficLight* Arena::CreateMaybeMessage< ::sim_msg::TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::EgoInfo* Arena::CreateMaybeMessage< ::sim_msg::EgoInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EgoInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Traffic* Arena::CreateMaybeMessage< ::sim_msg::Traffic >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Traffic >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TrafficRecords* Arena::CreateMaybeMessage< ::sim_msg::TrafficRecords >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TrafficRecords >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TrajectoryInfo* Arena::CreateMaybeMessage< ::sim_msg::TrajectoryInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TrajectoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo* Arena::CreateMaybeMessage< ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TrafficRecords4Logsim_DisengageEventInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TrafficRecords4Logsim* Arena::CreateMaybeMessage< ::sim_msg::TrafficRecords4Logsim >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::TrafficRecords4Logsim >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
