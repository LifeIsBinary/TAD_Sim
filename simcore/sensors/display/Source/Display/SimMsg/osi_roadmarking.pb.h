// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_roadmarking.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5froadmarking_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5froadmarking_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
#include "osi_trafficsign.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5froadmarking_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5froadmarking_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5froadmarking_2eproto;
namespace osi3 {
class RoadMarking;
class RoadMarkingDefaultTypeInternal;
extern RoadMarkingDefaultTypeInternal _RoadMarking_default_instance_;
class RoadMarking_Classification;
class RoadMarking_ClassificationDefaultTypeInternal;
extern RoadMarking_ClassificationDefaultTypeInternal _RoadMarking_Classification_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::RoadMarking* Arena::CreateMaybeMessage<::osi3::RoadMarking>(Arena*);
template<> ::osi3::RoadMarking_Classification* Arena::CreateMaybeMessage<::osi3::RoadMarking_Classification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum RoadMarking_Classification_Type : int {
  RoadMarking_Classification_Type_TYPE_UNKNOWN = 0,
  RoadMarking_Classification_Type_TYPE_OTHER = 1,
  RoadMarking_Classification_Type_TYPE_PAINTED_TRAFFIC_SIGN = 2,
  RoadMarking_Classification_Type_TYPE_SYMBOLIC_TRAFFIC_SIGN = 3,
  RoadMarking_Classification_Type_TYPE_TEXTUAL_TRAFFIC_SIGN = 4,
  RoadMarking_Classification_Type_TYPE_GENERIC_SYMBOL = 5,
  RoadMarking_Classification_Type_TYPE_GENERIC_LINE = 6,
  RoadMarking_Classification_Type_TYPE_GENERIC_TEXT = 7,
  RoadMarking_Classification_Type_RoadMarking_Classification_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoadMarking_Classification_Type_RoadMarking_Classification_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoadMarking_Classification_Type_IsValid(int value);
constexpr RoadMarking_Classification_Type RoadMarking_Classification_Type_Type_MIN = RoadMarking_Classification_Type_TYPE_UNKNOWN;
constexpr RoadMarking_Classification_Type RoadMarking_Classification_Type_Type_MAX = RoadMarking_Classification_Type_TYPE_GENERIC_TEXT;
constexpr int RoadMarking_Classification_Type_Type_ARRAYSIZE = RoadMarking_Classification_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarking_Classification_Type_descriptor();
template<typename T>
inline const std::string& RoadMarking_Classification_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoadMarking_Classification_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoadMarking_Classification_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoadMarking_Classification_Type_descriptor(), enum_t_value);
}
inline bool RoadMarking_Classification_Type_Parse(
    const std::string& name, RoadMarking_Classification_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoadMarking_Classification_Type>(
    RoadMarking_Classification_Type_descriptor(), name, value);
}
enum RoadMarking_Classification_Color : int {
  RoadMarking_Classification_Color_COLOR_UNKNOWN = 0,
  RoadMarking_Classification_Color_COLOR_OTHER = 1,
  RoadMarking_Classification_Color_COLOR_WHITE = 2,
  RoadMarking_Classification_Color_COLOR_YELLOW = 3,
  RoadMarking_Classification_Color_COLOR_BLUE = 5,
  RoadMarking_Classification_Color_COLOR_RED = 6,
  RoadMarking_Classification_Color_COLOR_GREEN = 7,
  RoadMarking_Classification_Color_COLOR_VIOLET = 8,
  RoadMarking_Classification_Color_COLOR_ORANGE = 9,
  RoadMarking_Classification_Color_RoadMarking_Classification_Color_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RoadMarking_Classification_Color_RoadMarking_Classification_Color_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RoadMarking_Classification_Color_IsValid(int value);
constexpr RoadMarking_Classification_Color RoadMarking_Classification_Color_Color_MIN = RoadMarking_Classification_Color_COLOR_UNKNOWN;
constexpr RoadMarking_Classification_Color RoadMarking_Classification_Color_Color_MAX = RoadMarking_Classification_Color_COLOR_ORANGE;
constexpr int RoadMarking_Classification_Color_Color_ARRAYSIZE = RoadMarking_Classification_Color_Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RoadMarking_Classification_Color_descriptor();
template<typename T>
inline const std::string& RoadMarking_Classification_Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RoadMarking_Classification_Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RoadMarking_Classification_Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RoadMarking_Classification_Color_descriptor(), enum_t_value);
}
inline bool RoadMarking_Classification_Color_Parse(
    const std::string& name, RoadMarking_Classification_Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RoadMarking_Classification_Color>(
    RoadMarking_Classification_Color_descriptor(), name, value);
}
// ===================================================================

class RoadMarking_Classification :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.RoadMarking.Classification) */ {
 public:
  RoadMarking_Classification();
  virtual ~RoadMarking_Classification();

  RoadMarking_Classification(const RoadMarking_Classification& from);
  RoadMarking_Classification(RoadMarking_Classification&& from) noexcept
    : RoadMarking_Classification() {
    *this = ::std::move(from);
  }

  inline RoadMarking_Classification& operator=(const RoadMarking_Classification& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadMarking_Classification& operator=(RoadMarking_Classification&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadMarking_Classification& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadMarking_Classification* internal_default_instance() {
    return reinterpret_cast<const RoadMarking_Classification*>(
               &_RoadMarking_Classification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoadMarking_Classification& a, RoadMarking_Classification& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadMarking_Classification* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadMarking_Classification* New() const final {
    return CreateMaybeMessage<RoadMarking_Classification>(nullptr);
  }

  RoadMarking_Classification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadMarking_Classification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadMarking_Classification& from);
  void MergeFrom(const RoadMarking_Classification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadMarking_Classification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.RoadMarking.Classification";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5froadmarking_2eproto);
    return ::descriptor_table_osi_5froadmarking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoadMarking_Classification_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    RoadMarking_Classification_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_OTHER =
    RoadMarking_Classification_Type_TYPE_OTHER;
  static constexpr Type TYPE_PAINTED_TRAFFIC_SIGN =
    RoadMarking_Classification_Type_TYPE_PAINTED_TRAFFIC_SIGN;
  static constexpr Type TYPE_SYMBOLIC_TRAFFIC_SIGN =
    RoadMarking_Classification_Type_TYPE_SYMBOLIC_TRAFFIC_SIGN;
  static constexpr Type TYPE_TEXTUAL_TRAFFIC_SIGN =
    RoadMarking_Classification_Type_TYPE_TEXTUAL_TRAFFIC_SIGN;
  static constexpr Type TYPE_GENERIC_SYMBOL =
    RoadMarking_Classification_Type_TYPE_GENERIC_SYMBOL;
  static constexpr Type TYPE_GENERIC_LINE =
    RoadMarking_Classification_Type_TYPE_GENERIC_LINE;
  static constexpr Type TYPE_GENERIC_TEXT =
    RoadMarking_Classification_Type_TYPE_GENERIC_TEXT;
  static inline bool Type_IsValid(int value) {
    return RoadMarking_Classification_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RoadMarking_Classification_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RoadMarking_Classification_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RoadMarking_Classification_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RoadMarking_Classification_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RoadMarking_Classification_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return RoadMarking_Classification_Type_Parse(name, value);
  }

  typedef RoadMarking_Classification_Color Color;
  static constexpr Color COLOR_UNKNOWN =
    RoadMarking_Classification_Color_COLOR_UNKNOWN;
  static constexpr Color COLOR_OTHER =
    RoadMarking_Classification_Color_COLOR_OTHER;
  static constexpr Color COLOR_WHITE =
    RoadMarking_Classification_Color_COLOR_WHITE;
  static constexpr Color COLOR_YELLOW =
    RoadMarking_Classification_Color_COLOR_YELLOW;
  static constexpr Color COLOR_BLUE =
    RoadMarking_Classification_Color_COLOR_BLUE;
  static constexpr Color COLOR_RED =
    RoadMarking_Classification_Color_COLOR_RED;
  static constexpr Color COLOR_GREEN =
    RoadMarking_Classification_Color_COLOR_GREEN;
  static constexpr Color COLOR_VIOLET =
    RoadMarking_Classification_Color_COLOR_VIOLET;
  static constexpr Color COLOR_ORANGE =
    RoadMarking_Classification_Color_COLOR_ORANGE;
  static inline bool Color_IsValid(int value) {
    return RoadMarking_Classification_Color_IsValid(value);
  }
  static constexpr Color Color_MIN =
    RoadMarking_Classification_Color_Color_MIN;
  static constexpr Color Color_MAX =
    RoadMarking_Classification_Color_Color_MAX;
  static constexpr int Color_ARRAYSIZE =
    RoadMarking_Classification_Color_Color_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Color_descriptor() {
    return RoadMarking_Classification_Color_descriptor();
  }
  template<typename T>
  static inline const std::string& Color_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Color>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Color_Name.");
    return RoadMarking_Classification_Color_Name(enum_t_value);
  }
  static inline bool Color_Parse(const std::string& name,
      Color* value) {
    return RoadMarking_Classification_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAssignedLaneIdFieldNumber = 6,
    kLogicalLaneAssignmentFieldNumber = 12,
    kValueTextFieldNumber = 5,
    kCountryFieldNumber = 8,
    kCountryRevisionFieldNumber = 9,
    kCodeFieldNumber = 10,
    kSubCodeFieldNumber = 11,
    kValueFieldNumber = 4,
    kTypeFieldNumber = 1,
    kTrafficMainSignTypeFieldNumber = 2,
    kMonochromeColorFieldNumber = 3,
    kIsOutOfServiceFieldNumber = 7,
  };
  // repeated .osi3.Identifier assigned_lane_id = 6;
  int assigned_lane_id_size() const;
  void clear_assigned_lane_id();
  ::osi3::Identifier* mutable_assigned_lane_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_assigned_lane_id();
  const ::osi3::Identifier& assigned_lane_id(int index) const;
  ::osi3::Identifier* add_assigned_lane_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      assigned_lane_id() const;

  // repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
  int logical_lane_assignment_size() const;
  void clear_logical_lane_assignment();
  ::osi3::LogicalLaneAssignment* mutable_logical_lane_assignment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneAssignment >*
      mutable_logical_lane_assignment();
  const ::osi3::LogicalLaneAssignment& logical_lane_assignment(int index) const;
  ::osi3::LogicalLaneAssignment* add_logical_lane_assignment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneAssignment >&
      logical_lane_assignment() const;

  // string value_text = 5;
  void clear_value_text();
  const std::string& value_text() const;
  void set_value_text(const std::string& value);
  void set_value_text(std::string&& value);
  void set_value_text(const char* value);
  void set_value_text(const char* value, size_t size);
  std::string* mutable_value_text();
  std::string* release_value_text();
  void set_allocated_value_text(std::string* value_text);

  // string country = 8;
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);

  // string country_revision = 9;
  void clear_country_revision();
  const std::string& country_revision() const;
  void set_country_revision(const std::string& value);
  void set_country_revision(std::string&& value);
  void set_country_revision(const char* value);
  void set_country_revision(const char* value, size_t size);
  std::string* mutable_country_revision();
  std::string* release_country_revision();
  void set_allocated_country_revision(std::string* country_revision);

  // string code = 10;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);

  // string sub_code = 11;
  void clear_sub_code();
  const std::string& sub_code() const;
  void set_sub_code(const std::string& value);
  void set_sub_code(std::string&& value);
  void set_sub_code(const char* value);
  void set_sub_code(const char* value, size_t size);
  std::string* mutable_sub_code();
  std::string* release_sub_code();
  void set_allocated_sub_code(std::string* sub_code);

  // .osi3.TrafficSignValue value = 4;
  bool has_value() const;
  void clear_value();
  const ::osi3::TrafficSignValue& value() const;
  ::osi3::TrafficSignValue* release_value();
  ::osi3::TrafficSignValue* mutable_value();
  void set_allocated_value(::osi3::TrafficSignValue* value);

  // .osi3.RoadMarking.Classification.Type type = 1;
  void clear_type();
  ::osi3::RoadMarking_Classification_Type type() const;
  void set_type(::osi3::RoadMarking_Classification_Type value);

  // .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
  void clear_traffic_main_sign_type();
  ::osi3::TrafficSign_MainSign_Classification_Type traffic_main_sign_type() const;
  void set_traffic_main_sign_type(::osi3::TrafficSign_MainSign_Classification_Type value);

  // .osi3.RoadMarking.Classification.Color monochrome_color = 3;
  void clear_monochrome_color();
  ::osi3::RoadMarking_Classification_Color monochrome_color() const;
  void set_monochrome_color(::osi3::RoadMarking_Classification_Color value);

  // bool is_out_of_service = 7;
  void clear_is_out_of_service();
  bool is_out_of_service() const;
  void set_is_out_of_service(bool value);

  // @@protoc_insertion_point(class_scope:osi3.RoadMarking.Classification)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > assigned_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneAssignment > logical_lane_assignment_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_revision_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_code_;
  ::osi3::TrafficSignValue* value_;
  int type_;
  int traffic_main_sign_type_;
  int monochrome_color_;
  bool is_out_of_service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5froadmarking_2eproto;
};
// -------------------------------------------------------------------

class RoadMarking :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.RoadMarking) */ {
 public:
  RoadMarking();
  virtual ~RoadMarking();

  RoadMarking(const RoadMarking& from);
  RoadMarking(RoadMarking&& from) noexcept
    : RoadMarking() {
    *this = ::std::move(from);
  }

  inline RoadMarking& operator=(const RoadMarking& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoadMarking& operator=(RoadMarking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoadMarking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoadMarking* internal_default_instance() {
    return reinterpret_cast<const RoadMarking*>(
               &_RoadMarking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoadMarking& a, RoadMarking& b) {
    a.Swap(&b);
  }
  inline void Swap(RoadMarking* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoadMarking* New() const final {
    return CreateMaybeMessage<RoadMarking>(nullptr);
  }

  RoadMarking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoadMarking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoadMarking& from);
  void MergeFrom(const RoadMarking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoadMarking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.RoadMarking";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5froadmarking_2eproto);
    return ::descriptor_table_osi_5froadmarking_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RoadMarking_Classification Classification;

  // accessors -------------------------------------------------------

  enum : int {
    kSourceReferenceFieldNumber = 4,
    kIdFieldNumber = 1,
    kBaseFieldNumber = 2,
    kClassificationFieldNumber = 3,
    kColorDescriptionFieldNumber = 5,
  };
  // repeated .osi3.ExternalReference source_reference = 4;
  int source_reference_size() const;
  void clear_source_reference();
  ::osi3::ExternalReference* mutable_source_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
      mutable_source_reference();
  const ::osi3::ExternalReference& source_reference(int index) const;
  ::osi3::ExternalReference* add_source_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
      source_reference() const;

  // .osi3.Identifier id = 1;
  bool has_id() const;
  void clear_id();
  const ::osi3::Identifier& id() const;
  ::osi3::Identifier* release_id();
  ::osi3::Identifier* mutable_id();
  void set_allocated_id(::osi3::Identifier* id);

  // .osi3.BaseStationary base = 2;
  bool has_base() const;
  void clear_base();
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* release_base();
  ::osi3::BaseStationary* mutable_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // .osi3.RoadMarking.Classification classification = 3;
  bool has_classification() const;
  void clear_classification();
  const ::osi3::RoadMarking_Classification& classification() const;
  ::osi3::RoadMarking_Classification* release_classification();
  ::osi3::RoadMarking_Classification* mutable_classification();
  void set_allocated_classification(::osi3::RoadMarking_Classification* classification);

  // .osi3.ColorDescription color_description = 5;
  bool has_color_description() const;
  void clear_color_description();
  const ::osi3::ColorDescription& color_description() const;
  ::osi3::ColorDescription* release_color_description();
  ::osi3::ColorDescription* mutable_color_description();
  void set_allocated_color_description(::osi3::ColorDescription* color_description);

  // @@protoc_insertion_point(class_scope:osi3.RoadMarking)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference > source_reference_;
  ::osi3::Identifier* id_;
  ::osi3::BaseStationary* base_;
  ::osi3::RoadMarking_Classification* classification_;
  ::osi3::ColorDescription* color_description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5froadmarking_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoadMarking_Classification

// .osi3.RoadMarking.Classification.Type type = 1;
inline void RoadMarking_Classification::clear_type() {
  type_ = 0;
}
inline ::osi3::RoadMarking_Classification_Type RoadMarking_Classification::type() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.type)
  return static_cast< ::osi3::RoadMarking_Classification_Type >(type_);
}
inline void RoadMarking_Classification::set_type(::osi3::RoadMarking_Classification_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.type)
}

// .osi3.TrafficSign.MainSign.Classification.Type traffic_main_sign_type = 2;
inline void RoadMarking_Classification::clear_traffic_main_sign_type() {
  traffic_main_sign_type_ = 0;
}
inline ::osi3::TrafficSign_MainSign_Classification_Type RoadMarking_Classification::traffic_main_sign_type() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.traffic_main_sign_type)
  return static_cast< ::osi3::TrafficSign_MainSign_Classification_Type >(traffic_main_sign_type_);
}
inline void RoadMarking_Classification::set_traffic_main_sign_type(::osi3::TrafficSign_MainSign_Classification_Type value) {
  
  traffic_main_sign_type_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.traffic_main_sign_type)
}

// .osi3.RoadMarking.Classification.Color monochrome_color = 3;
inline void RoadMarking_Classification::clear_monochrome_color() {
  monochrome_color_ = 0;
}
inline ::osi3::RoadMarking_Classification_Color RoadMarking_Classification::monochrome_color() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.monochrome_color)
  return static_cast< ::osi3::RoadMarking_Classification_Color >(monochrome_color_);
}
inline void RoadMarking_Classification::set_monochrome_color(::osi3::RoadMarking_Classification_Color value) {
  
  monochrome_color_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.monochrome_color)
}

// .osi3.TrafficSignValue value = 4;
inline bool RoadMarking_Classification::has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline const ::osi3::TrafficSignValue& RoadMarking_Classification::value() const {
  const ::osi3::TrafficSignValue* p = value_;
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficSignValue*>(
      &::osi3::_TrafficSignValue_default_instance_);
}
inline ::osi3::TrafficSignValue* RoadMarking_Classification::release_value() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.value)
  
  ::osi3::TrafficSignValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::osi3::TrafficSignValue* RoadMarking_Classification::mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficSignValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.value)
  return value_;
}
inline void RoadMarking_Classification::set_allocated_value(::osi3::TrafficSignValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.value)
}

// string value_text = 5;
inline void RoadMarking_Classification::clear_value_text() {
  value_text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoadMarking_Classification::value_text() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.value_text)
  return value_text_.GetNoArena();
}
inline void RoadMarking_Classification::set_value_text(const std::string& value) {
  
  value_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.value_text)
}
inline void RoadMarking_Classification::set_value_text(std::string&& value) {
  
  value_text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.RoadMarking.Classification.value_text)
}
inline void RoadMarking_Classification::set_value_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.RoadMarking.Classification.value_text)
}
inline void RoadMarking_Classification::set_value_text(const char* value, size_t size) {
  
  value_text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.RoadMarking.Classification.value_text)
}
inline std::string* RoadMarking_Classification::mutable_value_text() {
  
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.value_text)
  return value_text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoadMarking_Classification::release_value_text() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.value_text)
  
  return value_text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoadMarking_Classification::set_allocated_value_text(std::string* value_text) {
  if (value_text != nullptr) {
    
  } else {
    
  }
  value_text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_text);
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.value_text)
}

// repeated .osi3.Identifier assigned_lane_id = 6;
inline int RoadMarking_Classification::assigned_lane_id_size() const {
  return assigned_lane_id_.size();
}
inline ::osi3::Identifier* RoadMarking_Classification::mutable_assigned_lane_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
RoadMarking_Classification::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RoadMarking.Classification.assigned_lane_id)
  return &assigned_lane_id_;
}
inline const ::osi3::Identifier& RoadMarking_Classification::assigned_lane_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Get(index);
}
inline ::osi3::Identifier* RoadMarking_Classification::add_assigned_lane_id() {
  // @@protoc_insertion_point(field_add:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
RoadMarking_Classification::assigned_lane_id() const {
  // @@protoc_insertion_point(field_list:osi3.RoadMarking.Classification.assigned_lane_id)
  return assigned_lane_id_;
}

// bool is_out_of_service = 7;
inline void RoadMarking_Classification::clear_is_out_of_service() {
  is_out_of_service_ = false;
}
inline bool RoadMarking_Classification::is_out_of_service() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.is_out_of_service)
  return is_out_of_service_;
}
inline void RoadMarking_Classification::set_is_out_of_service(bool value) {
  
  is_out_of_service_ = value;
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.is_out_of_service)
}

// string country = 8;
inline void RoadMarking_Classification::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoadMarking_Classification::country() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.country)
  return country_.GetNoArena();
}
inline void RoadMarking_Classification::set_country(const std::string& value) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.country)
}
inline void RoadMarking_Classification::set_country(std::string&& value) {
  
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.RoadMarking.Classification.country)
}
inline void RoadMarking_Classification::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.RoadMarking.Classification.country)
}
inline void RoadMarking_Classification::set_country(const char* value, size_t size) {
  
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.RoadMarking.Classification.country)
}
inline std::string* RoadMarking_Classification::mutable_country() {
  
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.country)
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoadMarking_Classification::release_country() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.country)
  
  return country_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoadMarking_Classification::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.country)
}

// string country_revision = 9;
inline void RoadMarking_Classification::clear_country_revision() {
  country_revision_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoadMarking_Classification::country_revision() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.country_revision)
  return country_revision_.GetNoArena();
}
inline void RoadMarking_Classification::set_country_revision(const std::string& value) {
  
  country_revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.country_revision)
}
inline void RoadMarking_Classification::set_country_revision(std::string&& value) {
  
  country_revision_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.RoadMarking.Classification.country_revision)
}
inline void RoadMarking_Classification::set_country_revision(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.RoadMarking.Classification.country_revision)
}
inline void RoadMarking_Classification::set_country_revision(const char* value, size_t size) {
  
  country_revision_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.RoadMarking.Classification.country_revision)
}
inline std::string* RoadMarking_Classification::mutable_country_revision() {
  
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.country_revision)
  return country_revision_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoadMarking_Classification::release_country_revision() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.country_revision)
  
  return country_revision_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoadMarking_Classification::set_allocated_country_revision(std::string* country_revision) {
  if (country_revision != nullptr) {
    
  } else {
    
  }
  country_revision_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_revision);
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.country_revision)
}

// string code = 10;
inline void RoadMarking_Classification::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoadMarking_Classification::code() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.code)
  return code_.GetNoArena();
}
inline void RoadMarking_Classification::set_code(const std::string& value) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.code)
}
inline void RoadMarking_Classification::set_code(std::string&& value) {
  
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.RoadMarking.Classification.code)
}
inline void RoadMarking_Classification::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.RoadMarking.Classification.code)
}
inline void RoadMarking_Classification::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.RoadMarking.Classification.code)
}
inline std::string* RoadMarking_Classification::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.code)
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoadMarking_Classification::release_code() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.code)
  
  return code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoadMarking_Classification::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.code)
}

// string sub_code = 11;
inline void RoadMarking_Classification::clear_sub_code() {
  sub_code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RoadMarking_Classification::sub_code() const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.sub_code)
  return sub_code_.GetNoArena();
}
inline void RoadMarking_Classification::set_sub_code(const std::string& value) {
  
  sub_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.RoadMarking.Classification.sub_code)
}
inline void RoadMarking_Classification::set_sub_code(std::string&& value) {
  
  sub_code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.RoadMarking.Classification.sub_code)
}
inline void RoadMarking_Classification::set_sub_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.RoadMarking.Classification.sub_code)
}
inline void RoadMarking_Classification::set_sub_code(const char* value, size_t size) {
  
  sub_code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.RoadMarking.Classification.sub_code)
}
inline std::string* RoadMarking_Classification::mutable_sub_code() {
  
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.sub_code)
  return sub_code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RoadMarking_Classification::release_sub_code() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.Classification.sub_code)
  
  return sub_code_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RoadMarking_Classification::set_allocated_sub_code(std::string* sub_code) {
  if (sub_code != nullptr) {
    
  } else {
    
  }
  sub_code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_code);
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.Classification.sub_code)
}

// repeated .osi3.LogicalLaneAssignment logical_lane_assignment = 12;
inline int RoadMarking_Classification::logical_lane_assignment_size() const {
  return logical_lane_assignment_.size();
}
inline ::osi3::LogicalLaneAssignment* RoadMarking_Classification::mutable_logical_lane_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.Classification.logical_lane_assignment)
  return logical_lane_assignment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneAssignment >*
RoadMarking_Classification::mutable_logical_lane_assignment() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RoadMarking.Classification.logical_lane_assignment)
  return &logical_lane_assignment_;
}
inline const ::osi3::LogicalLaneAssignment& RoadMarking_Classification::logical_lane_assignment(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.Classification.logical_lane_assignment)
  return logical_lane_assignment_.Get(index);
}
inline ::osi3::LogicalLaneAssignment* RoadMarking_Classification::add_logical_lane_assignment() {
  // @@protoc_insertion_point(field_add:osi3.RoadMarking.Classification.logical_lane_assignment)
  return logical_lane_assignment_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneAssignment >&
RoadMarking_Classification::logical_lane_assignment() const {
  // @@protoc_insertion_point(field_list:osi3.RoadMarking.Classification.logical_lane_assignment)
  return logical_lane_assignment_;
}

// -------------------------------------------------------------------

// RoadMarking

// .osi3.Identifier id = 1;
inline bool RoadMarking::has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline const ::osi3::Identifier& RoadMarking::id() const {
  const ::osi3::Identifier* p = id_;
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* RoadMarking::release_id() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.id)
  
  ::osi3::Identifier* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* RoadMarking::mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.id)
  return id_;
}
inline void RoadMarking::set_allocated_id(::osi3::Identifier* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.id)
}

// .osi3.BaseStationary base = 2;
inline bool RoadMarking::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::osi3::BaseStationary& RoadMarking::base() const {
  const ::osi3::BaseStationary* p = base_;
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseStationary*>(
      &::osi3::_BaseStationary_default_instance_);
}
inline ::osi3::BaseStationary* RoadMarking::release_base() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.base)
  
  ::osi3::BaseStationary* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::osi3::BaseStationary* RoadMarking::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseStationary>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.base)
  return base_;
}
inline void RoadMarking::set_allocated_base(::osi3::BaseStationary* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.base)
}

// .osi3.RoadMarking.Classification classification = 3;
inline bool RoadMarking::has_classification() const {
  return this != internal_default_instance() && classification_ != nullptr;
}
inline void RoadMarking::clear_classification() {
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
inline const ::osi3::RoadMarking_Classification& RoadMarking::classification() const {
  const ::osi3::RoadMarking_Classification* p = classification_;
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.classification)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::RoadMarking_Classification*>(
      &::osi3::_RoadMarking_Classification_default_instance_);
}
inline ::osi3::RoadMarking_Classification* RoadMarking::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.classification)
  
  ::osi3::RoadMarking_Classification* temp = classification_;
  classification_ = nullptr;
  return temp;
}
inline ::osi3::RoadMarking_Classification* RoadMarking::mutable_classification() {
  
  if (classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::RoadMarking_Classification>(GetArenaNoVirtual());
    classification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.classification)
  return classification_;
}
inline void RoadMarking::set_allocated_classification(::osi3::RoadMarking_Classification* classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete classification_;
  }
  if (classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    
  } else {
    
  }
  classification_ = classification;
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.classification)
}

// repeated .osi3.ExternalReference source_reference = 4;
inline int RoadMarking::source_reference_size() const {
  return source_reference_.size();
}
inline ::osi3::ExternalReference* RoadMarking::mutable_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.source_reference)
  return source_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
RoadMarking::mutable_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:osi3.RoadMarking.source_reference)
  return &source_reference_;
}
inline const ::osi3::ExternalReference& RoadMarking::source_reference(int index) const {
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.source_reference)
  return source_reference_.Get(index);
}
inline ::osi3::ExternalReference* RoadMarking::add_source_reference() {
  // @@protoc_insertion_point(field_add:osi3.RoadMarking.source_reference)
  return source_reference_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
RoadMarking::source_reference() const {
  // @@protoc_insertion_point(field_list:osi3.RoadMarking.source_reference)
  return source_reference_;
}

// .osi3.ColorDescription color_description = 5;
inline bool RoadMarking::has_color_description() const {
  return this != internal_default_instance() && color_description_ != nullptr;
}
inline const ::osi3::ColorDescription& RoadMarking::color_description() const {
  const ::osi3::ColorDescription* p = color_description_;
  // @@protoc_insertion_point(field_get:osi3.RoadMarking.color_description)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::ColorDescription*>(
      &::osi3::_ColorDescription_default_instance_);
}
inline ::osi3::ColorDescription* RoadMarking::release_color_description() {
  // @@protoc_insertion_point(field_release:osi3.RoadMarking.color_description)
  
  ::osi3::ColorDescription* temp = color_description_;
  color_description_ = nullptr;
  return temp;
}
inline ::osi3::ColorDescription* RoadMarking::mutable_color_description() {
  
  if (color_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorDescription>(GetArenaNoVirtual());
    color_description_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.RoadMarking.color_description)
  return color_description_;
}
inline void RoadMarking::set_allocated_color_description(::osi3::ColorDescription* color_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_description_);
  }
  if (color_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_description, submessage_arena);
    }
    
  } else {
    
  }
  color_description_ = color_description;
  // @@protoc_insertion_point(field_set_allocated:osi3.RoadMarking.color_description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::RoadMarking_Classification_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::RoadMarking_Classification_Type>() {
  return ::osi3::RoadMarking_Classification_Type_descriptor();
}
template <> struct is_proto_enum< ::osi3::RoadMarking_Classification_Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::RoadMarking_Classification_Color>() {
  return ::osi3::RoadMarking_Classification_Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5froadmarking_2eproto
