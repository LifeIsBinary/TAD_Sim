// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_featuredata.proto
#pragma warning (disable : 4125)

#include "osi_featuredata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraDetection_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CameraDetectionData_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraDetectionSpecificHeader_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraPoint_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LidarDetection_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LidarDetectionData_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MountingPosition_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RadarDetection_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RadarDetectionData_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Spherical3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UltrasonicDetectionSpecificHeader_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ffeaturedata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
namespace osi3 {
class FeatureDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureData> _instance;
} _FeatureData_default_instance_;
class SensorDetectionHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorDetectionHeader> _instance;
} _SensorDetectionHeader_default_instance_;
class RadarDetectionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarDetectionData> _instance;
} _RadarDetectionData_default_instance_;
class RadarDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarDetection> _instance;
} _RadarDetection_default_instance_;
class LidarDetectionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarDetectionData> _instance;
} _LidarDetectionData_default_instance_;
class LidarDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarDetection> _instance;
} _LidarDetection_default_instance_;
class UltrasonicDetectionSpecificHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicDetectionSpecificHeader> _instance;
} _UltrasonicDetectionSpecificHeader_default_instance_;
class UltrasonicDetectionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicDetectionData> _instance;
} _UltrasonicDetectionData_default_instance_;
class UltrasonicDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicDetection> _instance;
} _UltrasonicDetection_default_instance_;
class UltrasonicIndirectDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicIndirectDetection> _instance;
} _UltrasonicIndirectDetection_default_instance_;
class CameraDetectionSpecificHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraDetectionSpecificHeader> _instance;
} _CameraDetectionSpecificHeader_default_instance_;
class CameraDetectionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraDetectionData> _instance;
} _CameraDetectionData_default_instance_;
class CameraDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraDetection> _instance;
} _CameraDetection_default_instance_;
class CameraPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraPoint> _instance;
} _CameraPoint_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_CameraDetection_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_CameraDetection_default_instance_;
    new (ptr) ::osi3::CameraDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraDetection_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CameraDetection_osi_5ffeaturedata_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_CameraDetectionData_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_CameraDetectionData_default_instance_;
    new (ptr) ::osi3::CameraDetectionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraDetectionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CameraDetectionData_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_CameraDetectionData_osi_5ffeaturedata_2eproto}, {
      &scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto.base,
      &scc_info_CameraDetectionSpecificHeader_osi_5ffeaturedata_2eproto.base,
      &scc_info_CameraDetection_osi_5ffeaturedata_2eproto.base,
      &scc_info_CameraPoint_osi_5ffeaturedata_2eproto.base,}};

static void InitDefaultsscc_info_CameraDetectionSpecificHeader_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_CameraDetectionSpecificHeader_default_instance_;
    new (ptr) ::osi3::CameraDetectionSpecificHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraDetectionSpecificHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraDetectionSpecificHeader_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CameraDetectionSpecificHeader_osi_5ffeaturedata_2eproto}, {}};

static void InitDefaultsscc_info_CameraPoint_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_CameraPoint_default_instance_;
    new (ptr) ::osi3::CameraPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraPoint_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CameraPoint_osi_5ffeaturedata_2eproto}, {
      &scc_info_Spherical3d_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_FeatureData_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_FeatureData_default_instance_;
    new (ptr) ::osi3::FeatureData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::FeatureData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FeatureData_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_FeatureData_osi_5ffeaturedata_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_RadarDetectionData_osi_5ffeaturedata_2eproto.base,
      &scc_info_LidarDetectionData_osi_5ffeaturedata_2eproto.base,
      &scc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto.base,
      &scc_info_CameraDetectionData_osi_5ffeaturedata_2eproto.base,}};

static void InitDefaultsscc_info_LidarDetection_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LidarDetection_default_instance_;
    new (ptr) ::osi3::LidarDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LidarDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LidarDetection_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LidarDetection_osi_5ffeaturedata_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Spherical3d_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LidarDetectionData_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LidarDetectionData_default_instance_;
    new (ptr) ::osi3::LidarDetectionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LidarDetectionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LidarDetectionData_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LidarDetectionData_osi_5ffeaturedata_2eproto}, {
      &scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto.base,
      &scc_info_LidarDetection_osi_5ffeaturedata_2eproto.base,}};

static void InitDefaultsscc_info_RadarDetection_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_RadarDetection_default_instance_;
    new (ptr) ::osi3::RadarDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RadarDetection_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RadarDetection_osi_5ffeaturedata_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Spherical3d_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_RadarDetectionData_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_RadarDetectionData_default_instance_;
    new (ptr) ::osi3::RadarDetectionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarDetectionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RadarDetectionData_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_RadarDetectionData_osi_5ffeaturedata_2eproto}, {
      &scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto.base,
      &scc_info_RadarDetection_osi_5ffeaturedata_2eproto.base,}};

static void InitDefaultsscc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_SensorDetectionHeader_default_instance_;
    new (ptr) ::osi3::SensorDetectionHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::SensorDetectionHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto}, {
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_UltrasonicDetection_default_instance_;
    new (ptr) ::osi3::UltrasonicDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_UltrasonicDetectionData_default_instance_;
    new (ptr) ::osi3::UltrasonicDetectionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicDetectionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto}, {
      &scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto.base,
      &scc_info_UltrasonicDetectionSpecificHeader_osi_5ffeaturedata_2eproto.base,
      &scc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto.base,
      &scc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto.base,}};

static void InitDefaultsscc_info_UltrasonicDetectionSpecificHeader_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_UltrasonicDetectionSpecificHeader_default_instance_;
    new (ptr) ::osi3::UltrasonicDetectionSpecificHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicDetectionSpecificHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UltrasonicDetectionSpecificHeader_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UltrasonicDetectionSpecificHeader_osi_5ffeaturedata_2eproto}, {}};

static void InitDefaultsscc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_UltrasonicIndirectDetection_default_instance_;
    new (ptr) ::osi3::UltrasonicIndirectDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicIndirectDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5ffeaturedata_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5ffeaturedata_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5ffeaturedata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5ffeaturedata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::FeatureData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::FeatureData, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::FeatureData, radar_sensor_),
  PROTOBUF_FIELD_OFFSET(::osi3::FeatureData, lidar_sensor_),
  PROTOBUF_FIELD_OFFSET(::osi3::FeatureData, ultrasonic_sensor_),
  PROTOBUF_FIELD_OFFSET(::osi3::FeatureData, camera_sensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, measurement_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, cycle_counter_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, data_qualifier_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, number_of_valid_detections_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDetectionHeader, extended_qualifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetectionData, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetectionData, detection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, radial_velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, radial_velocity_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, rcs_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, snr_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, point_target_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, ambiguity_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarDetection, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetectionData, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetectionData, detection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, height_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, height_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, intensity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, free_space_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, reflectivity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarDetection, echo_pulse_width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionSpecificHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionSpecificHeader, max_range_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionSpecificHeader, number_of_valid_indirect_detections_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionData, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionData, specific_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionData, detection_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetectionData, indirect_detection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetection, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetection, object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicDetection, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, ellipsoid_radial_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, ellipsoid_axial_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, receiver_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicIndirectDetection, receiver_origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetectionSpecificHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetectionSpecificHeader, number_of_valid_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetectionData, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetectionData, specific_header_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetectionData, detection_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetectionData, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, time_difference_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, image_shape_type_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_background_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_foreground_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_flat_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_upright_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_ground_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_sky_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_vegetation_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_road_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_non_driving_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_non_road_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_stationary_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_moving_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_landmark_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_traffic_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_traffic_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_road_marking_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_vehicle_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_animal_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_front_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_side_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_pedestrian_rear_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, shape_classification_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, color_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, color_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, ambiguity_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, first_point_index_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, number_of_points_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraDetection, color_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraPoint, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraPoint, point_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraPoint, point_rmse_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::FeatureData)},
  { 10, -1, sizeof(::osi3::SensorDetectionHeader)},
  { 23, -1, sizeof(::osi3::RadarDetectionData)},
  { 30, -1, sizeof(::osi3::RadarDetection)},
  { 46, -1, sizeof(::osi3::LidarDetectionData)},
  { 53, -1, sizeof(::osi3::LidarDetection)},
  { 69, -1, sizeof(::osi3::UltrasonicDetectionSpecificHeader)},
  { 76, -1, sizeof(::osi3::UltrasonicDetectionData)},
  { 85, -1, sizeof(::osi3::UltrasonicDetection)},
  { 93, -1, sizeof(::osi3::UltrasonicIndirectDetection)},
  { 104, -1, sizeof(::osi3::CameraDetectionSpecificHeader)},
  { 110, -1, sizeof(::osi3::CameraDetectionData)},
  { 119, -1, sizeof(::osi3::CameraDetection)},
  { 157, -1, sizeof(::osi3::CameraPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_FeatureData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SensorDetectionHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RadarDetectionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RadarDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LidarDetectionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LidarDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicDetectionSpecificHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicDetectionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicIndirectDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_CameraDetectionSpecificHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_CameraDetectionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_CameraDetection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_CameraPoint_default_instance_),
};

const char descriptor_table_protodef_osi_5ffeaturedata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_featuredata.proto\022\004osi3\032\021osi_versi"
  "on.proto\032\020osi_common.proto\"\202\002\n\013FeatureDa"
  "ta\022\'\n\007version\030\001 \001(\0132\026.osi3.InterfaceVers"
  "ion\022.\n\014radar_sensor\030\002 \003(\0132\030.osi3.RadarDe"
  "tectionData\022.\n\014lidar_sensor\030\003 \003(\0132\030.osi3"
  ".LidarDetectionData\0228\n\021ultrasonic_sensor"
  "\030\004 \003(\0132\035.osi3.UltrasonicDetectionData\0220\n"
  "\rcamera_sensor\030\005 \003(\0132\031.osi3.CameraDetect"
  "ionData\"\352\t\n\025SensorDetectionHeader\022)\n\020mea"
  "surement_time\030\001 \001(\0132\017.osi3.Timestamp\022\025\n\r"
  "cycle_counter\030\002 \001(\004\0221\n\021mounting_position"
  "\030\003 \001(\0132\026.osi3.MountingPosition\0226\n\026mounti"
  "ng_position_rmse\030\004 \001(\0132\026.osi3.MountingPo"
  "sition\022A\n\016data_qualifier\030\005 \001(\0162).osi3.Se"
  "nsorDetectionHeader.DataQualifier\022\"\n\032num"
  "ber_of_valid_detections\030\006 \001(\r\022#\n\tsensor_"
  "id\030\007 \001(\0132\020.osi3.Identifier\022I\n\022extended_q"
  "ualifier\030\010 \001(\0162-.osi3.SensorDetectionHea"
  "der.ExtendedQualifier\"\215\002\n\rDataQualifier\022"
  "\032\n\026DATA_QUALIFIER_UNKNOWN\020\000\022\030\n\024DATA_QUAL"
  "IFIER_OTHER\020\001\022\034\n\030DATA_QUALIFIER_AVAILABL"
  "E\020\002\022$\n DATA_QUALIFIER_AVAILABLE_REDUCED\020"
  "\003\022 \n\034DATA_QUALIFIER_NOT_AVAILABLE\020\004\022\034\n\030D"
  "ATA_QUALIFIER_BLINDNESS\020\005\022&\n\"DATA_QUALIF"
  "IER_TEMPORARY_AVAILABLE\020\006\022\032\n\026DATA_QUALIF"
  "IER_INVALID\020\007\"\274\004\n\021ExtendedQualifier\022\036\n\032E"
  "XTENDED_QUALIFIER_UNKNOWN\020\000\022\034\n\030EXTENDED_"
  "QUALIFIER_OTHER\020\001\022,\n(EXTENDED_QUALIFIER_"
  "NORMAL_OPERATION_MODE\020\002\022\'\n#EXTENDED_QUAL"
  "IFIER_POWER_UP_OR_DOWN\020\003\022,\n(EXTENDED_QUA"
  "LIFIER_SENSOR_NOT_CALIBRATED\020\004\022%\n!EXTEND"
  "ED_QUALIFIER_SENSOR_BLOCKED\020\005\022(\n$EXTENDE"
  "D_QUALIFIER_SENSOR_MISALIGNED\020\006\0229\n5EXTEN"
  "DED_QUALIFIER_BAD_SENSOR_ENVIRONMENTAL_C"
  "ONDITION\020\007\022,\n(EXTENDED_QUALIFIER_REDUCED"
  "_FIELD_OF_VIEW\020\010\022*\n&EXTENDED_QUALIFIER_I"
  "NPUT_NOT_AVAILABLE\020\t\022&\n\"EXTENDED_QUALIFI"
  "ER_INTERNAL_REASON\020\n\022+\n\'EXTENDED_QUALIFI"
  "ER_EXTERNAL_DISTURBANCE\020\013\022)\n%EXTENDED_QU"
  "ALIFIER_BEGINNING_BLOCKAGE\020\014\"j\n\022RadarDet"
  "ectionData\022+\n\006header\030\001 \001(\0132\033.osi3.Sensor"
  "DetectionHeader\022\'\n\tdetection\030\002 \003(\0132\024.osi"
  "3.RadarDetection\"\365\002\n\016RadarDetection\022\035\n\025e"
  "xistence_probability\030\001 \001(\001\022#\n\tobject_id\030"
  "\002 \001(\0132\020.osi3.Identifier\022#\n\010position\030\003 \001("
  "\0132\021.osi3.Spherical3d\022(\n\rposition_rmse\030\004 "
  "\001(\0132\021.osi3.Spherical3d\022\027\n\017radial_velocit"
  "y\030\005 \001(\001\022\034\n\024radial_velocity_rmse\030\006 \001(\001\022\013\n"
  "\003rcs\030\007 \001(\001\022\013\n\003snr\030\010 \001(\001\022 \n\030point_target_"
  "probability\030\t \001(\001\022&\n\014ambiguity_id\030\n \001(\0132"
  "\020.osi3.Identifier\0225\n\016classification\030\013 \001("
  "\0162\035.osi3.DetectionClassification\"j\n\022Lida"
  "rDetectionData\022+\n\006header\030\001 \001(\0132\033.osi3.Se"
  "nsorDetectionHeader\022\'\n\tdetection\030\002 \003(\0132\024"
  ".osi3.LidarDetection\"\342\002\n\016LidarDetection\022"
  "\035\n\025existence_probability\030\001 \001(\001\022#\n\tobject"
  "_id\030\002 \001(\0132\020.osi3.Identifier\022#\n\010position\030"
  "\003 \001(\0132\021.osi3.Spherical3d\022(\n\rposition_rms"
  "e\030\004 \001(\0132\021.osi3.Spherical3d\022\016\n\006height\030\005 \001"
  "(\001\022\023\n\013height_rmse\030\006 \001(\001\022\021\n\tintensity\030\007 \001"
  "(\001\022\036\n\026free_space_probability\030\010 \001(\001\0225\n\016cl"
  "assification\030\t \001(\0162\035.osi3.DetectionClass"
  "ification\022\024\n\014reflectivity\030\n \001(\001\022\030\n\020echo_"
  "pulse_width\030\013 \001(\001\"c\n!UltrasonicDetection"
  "SpecificHeader\022\021\n\tmax_range\030\001 \001(\001\022+\n#num"
  "ber_of_valid_indirect_detections\030\002 \001(\r\"\365"
  "\001\n\027UltrasonicDetectionData\022+\n\006header\030\001 \001"
  "(\0132\033.osi3.SensorDetectionHeader\022@\n\017speci"
  "fic_header\030\003 \001(\0132\'.osi3.UltrasonicDetect"
  "ionSpecificHeader\022,\n\tdetection\030\002 \003(\0132\031.o"
  "si3.UltrasonicDetection\022=\n\022indirect_dete"
  "ction\030\004 \003(\0132!.osi3.UltrasonicIndirectDet"
  "ection\"k\n\023UltrasonicDetection\022\035\n\025existen"
  "ce_probability\030\001 \001(\001\022#\n\tobject_id\030\002 \001(\0132"
  "\020.osi3.Identifier\022\020\n\010distance\030\003 \001(\001\"\344\001\n\033"
  "UltrasonicIndirectDetection\022\035\n\025existence"
  "_probability\030\001 \001(\001\022#\n\tobject_id\030\002 \001(\0132\020."
  "osi3.Identifier\022\030\n\020ellipsoid_radial\030\003 \001("
  "\001\022\027\n\017ellipsoid_axial\030\004 \001(\001\022%\n\013receiver_i"
  "d\030\005 \001(\0132\020.osi3.Identifier\022\'\n\017receiver_or"
  "igin\030\006 \001(\0132\016.osi3.Vector3d\"\?\n\035CameraDete"
  "ctionSpecificHeader\022\036\n\026number_of_valid_p"
  "oints\030\001 \001(\r\"\314\001\n\023CameraDetectionData\022+\n\006h"
  "eader\030\001 \001(\0132\033.osi3.SensorDetectionHeader"
  "\022<\n\017specific_header\030\003 \001(\0132#.osi3.CameraD"
  "etectionSpecificHeader\022(\n\tdetection\030\002 \003("
  "\0132\025.osi3.CameraDetection\022 \n\005point\030\004 \003(\0132"
  "\021.osi3.CameraPoint\"\244\016\n\017CameraDetection\022\035"
  "\n\025existence_probability\030\001 \001(\001\022#\n\tobject_"
  "id\030\002 \001(\0132\020.osi3.Identifier\022(\n\017time_diffe"
  "rence\030\003 \001(\0132\017.osi3.Timestamp\022>\n\020image_sh"
  "ape_type\030\004 \001(\0162$.osi3.CameraDetection.Im"
  "ageShapeType\022\'\n\037shape_classification_bac"
  "kground\030\005 \001(\010\022\'\n\037shape_classification_fo"
  "reground\030\006 \001(\010\022!\n\031shape_classification_f"
  "lat\030\007 \001(\010\022$\n\034shape_classification_uprigh"
  "t\030\010 \001(\010\022#\n\033shape_classification_ground\030\t"
  " \001(\010\022 \n\030shape_classification_sky\030\n \001(\010\022\'"
  "\n\037shape_classification_vegetation\030\013 \001(\010\022"
  "!\n\031shape_classification_road\030\014 \001(\010\022-\n%sh"
  "ape_classification_non_driving_lane\030\r \001("
  "\010\022%\n\035shape_classification_non_road\030\016 \001(\010"
  "\022.\n&shape_classification_stationary_obje"
  "ct\030\017 \001(\010\022*\n\"shape_classification_moving_"
  "object\030\020 \001(\010\022%\n\035shape_classification_lan"
  "dmark\030\021 \001(\010\022)\n!shape_classification_traf"
  "fic_sign\030\022 \001(\010\022*\n\"shape_classification_t"
  "raffic_light\030\023 \001(\010\022)\n!shape_classificati"
  "on_road_marking\030\024 \001(\010\022$\n\034shape_classific"
  "ation_vehicle\030\025 \001(\010\022\'\n\037shape_classificat"
  "ion_pedestrian\030\026 \001(\010\022#\n\033shape_classifica"
  "tion_animal\030\027 \001(\010\022-\n%shape_classificatio"
  "n_pedestrian_front\030\030 \001(\010\022,\n$shape_classi"
  "fication_pedestrian_side\030\031 \001(\010\022,\n$shape_"
  "classification_pedestrian_rear\030\032 \001(\010\022(\n "
  "shape_classification_probability\030\033 \001(\001\022*"
  "\n\005color\030\034 \001(\0162\033.osi3.CameraDetection.Col"
  "or\022\031\n\021color_probability\030\035 \001(\001\022&\n\014ambigui"
  "ty_id\030\036 \001(\0132\020.osi3.Identifier\022\031\n\021first_p"
  "oint_index\030\037 \001(\r\022\030\n\020number_of_points\030  \001"
  "(\r\0221\n\021color_description\030! \001(\0132\026.osi3.Col"
  "orDescription\"\331\001\n\005Color\022\021\n\rCOLOR_UNKNOWN"
  "\020\000\022\017\n\013COLOR_OTHER\020\001\022\017\n\013COLOR_BLACK\020\002\022\016\n\n"
  "COLOR_GREY\020\003\022\017\n\013COLOR_WHITE\020\004\022\020\n\014COLOR_Y"
  "ELLOW\020\005\022\020\n\014COLOR_ORANGE\020\006\022\r\n\tCOLOR_RED\020\007"
  "\022\020\n\014COLOR_VIOLET\020\010\022\016\n\nCOLOR_BLUE\020\t\022\017\n\013CO"
  "LOR_GREEN\020\n\022\024\n\020COLOR_REFLECTIVE\020\013\"\375\001\n\016Im"
  "ageShapeType\022\034\n\030IMAGE_SHAPE_TYPE_UNKNOWN"
  "\020\000\022\032\n\026IMAGE_SHAPE_TYPE_OTHER\020\001\022\032\n\026IMAGE_"
  "SHAPE_TYPE_POINT\020\002\022\030\n\024IMAGE_SHAPE_TYPE_B"
  "OX\020\003\022\034\n\030IMAGE_SHAPE_TYPE_ELLIPSE\020\004\022\034\n\030IM"
  "AGE_SHAPE_TYPE_POLYGON\020\005\022\035\n\031IMAGE_SHAPE_"
  "TYPE_POLYLINE\020\006\022 \n\034IMAGE_SHAPE_TYPE_POIN"
  "T_CLOUD\020\007\"u\n\013CameraPoint\022\035\n\025existence_pr"
  "obability\030\001 \001(\001\022 \n\005point\030\002 \001(\0132\021.osi3.Sp"
  "herical3d\022%\n\npoint_rmse\030\003 \001(\0132\021.osi3.Sph"
  "erical3d*\206\002\n\027DetectionClassification\022$\n "
  "DETECTION_CLASSIFICATION_UNKNOWN\020\000\022\"\n\036DE"
  "TECTION_CLASSIFICATION_OTHER\020\001\022$\n DETECT"
  "ION_CLASSIFICATION_INVALID\020\002\022$\n DETECTIO"
  "N_CLASSIFICATION_CLUTTER\020\003\022)\n%DETECTION_"
  "CLASSIFICATION_OVERDRIVABLE\020\004\022*\n&DETECTI"
  "ON_CLASSIFICATION_UNDERDRIVABLE\020\005B\002H\001b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5ffeaturedata_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5ffeaturedata_2eproto_sccs[14] = {
  &scc_info_CameraDetection_osi_5ffeaturedata_2eproto.base,
  &scc_info_CameraDetectionData_osi_5ffeaturedata_2eproto.base,
  &scc_info_CameraDetectionSpecificHeader_osi_5ffeaturedata_2eproto.base,
  &scc_info_CameraPoint_osi_5ffeaturedata_2eproto.base,
  &scc_info_FeatureData_osi_5ffeaturedata_2eproto.base,
  &scc_info_LidarDetection_osi_5ffeaturedata_2eproto.base,
  &scc_info_LidarDetectionData_osi_5ffeaturedata_2eproto.base,
  &scc_info_RadarDetection_osi_5ffeaturedata_2eproto.base,
  &scc_info_RadarDetectionData_osi_5ffeaturedata_2eproto.base,
  &scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto.base,
  &scc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto.base,
  &scc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto.base,
  &scc_info_UltrasonicDetectionSpecificHeader_osi_5ffeaturedata_2eproto.base,
  &scc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5ffeaturedata_2eproto_once;
static bool descriptor_table_osi_5ffeaturedata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5ffeaturedata_2eproto = {
  &descriptor_table_osi_5ffeaturedata_2eproto_initialized, descriptor_table_protodef_osi_5ffeaturedata_2eproto, "osi_featuredata.proto", 5725,
  &descriptor_table_osi_5ffeaturedata_2eproto_once, descriptor_table_osi_5ffeaturedata_2eproto_sccs, descriptor_table_osi_5ffeaturedata_2eproto_deps, 14, 2,
  schemas, file_default_instances, TableStruct_osi_5ffeaturedata_2eproto::offsets,
  file_level_metadata_osi_5ffeaturedata_2eproto, 14, file_level_enum_descriptors_osi_5ffeaturedata_2eproto, file_level_service_descriptors_osi_5ffeaturedata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5ffeaturedata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5ffeaturedata_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorDetectionHeader_DataQualifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ffeaturedata_2eproto);
  return file_level_enum_descriptors_osi_5ffeaturedata_2eproto[0];
}
bool SensorDetectionHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_UNKNOWN;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_OTHER;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_AVAILABLE;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_NOT_AVAILABLE;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_BLINDNESS;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DATA_QUALIFIER_INVALID;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DataQualifier_MIN;
constexpr SensorDetectionHeader_DataQualifier SensorDetectionHeader::DataQualifier_MAX;
constexpr int SensorDetectionHeader::DataQualifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SensorDetectionHeader_ExtendedQualifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ffeaturedata_2eproto);
  return file_level_enum_descriptors_osi_5ffeaturedata_2eproto[1];
}
bool SensorDetectionHeader_ExtendedQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_UNKNOWN;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_OTHER;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_NORMAL_OPERATION_MODE;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_POWER_UP_OR_DOWN;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_SENSOR_NOT_CALIBRATED;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_SENSOR_BLOCKED;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_SENSOR_MISALIGNED;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_BAD_SENSOR_ENVIRONMENTAL_CONDITION;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_REDUCED_FIELD_OF_VIEW;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_INPUT_NOT_AVAILABLE;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_INTERNAL_REASON;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_EXTERNAL_DISTURBANCE;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::EXTENDED_QUALIFIER_BEGINNING_BLOCKAGE;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::ExtendedQualifier_MIN;
constexpr SensorDetectionHeader_ExtendedQualifier SensorDetectionHeader::ExtendedQualifier_MAX;
constexpr int SensorDetectionHeader::ExtendedQualifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraDetection_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ffeaturedata_2eproto);
  return file_level_enum_descriptors_osi_5ffeaturedata_2eproto[2];
}
bool CameraDetection_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraDetection_Color CameraDetection::COLOR_UNKNOWN;
constexpr CameraDetection_Color CameraDetection::COLOR_OTHER;
constexpr CameraDetection_Color CameraDetection::COLOR_BLACK;
constexpr CameraDetection_Color CameraDetection::COLOR_GREY;
constexpr CameraDetection_Color CameraDetection::COLOR_WHITE;
constexpr CameraDetection_Color CameraDetection::COLOR_YELLOW;
constexpr CameraDetection_Color CameraDetection::COLOR_ORANGE;
constexpr CameraDetection_Color CameraDetection::COLOR_RED;
constexpr CameraDetection_Color CameraDetection::COLOR_VIOLET;
constexpr CameraDetection_Color CameraDetection::COLOR_BLUE;
constexpr CameraDetection_Color CameraDetection::COLOR_GREEN;
constexpr CameraDetection_Color CameraDetection::COLOR_REFLECTIVE;
constexpr CameraDetection_Color CameraDetection::Color_MIN;
constexpr CameraDetection_Color CameraDetection::Color_MAX;
constexpr int CameraDetection::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraDetection_ImageShapeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ffeaturedata_2eproto);
  return file_level_enum_descriptors_osi_5ffeaturedata_2eproto[3];
}
bool CameraDetection_ImageShapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_UNKNOWN;
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_OTHER;
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POINT;
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_BOX;
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_ELLIPSE;
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POLYGON;
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POLYLINE;
constexpr CameraDetection_ImageShapeType CameraDetection::IMAGE_SHAPE_TYPE_POINT_CLOUD;
constexpr CameraDetection_ImageShapeType CameraDetection::ImageShapeType_MIN;
constexpr CameraDetection_ImageShapeType CameraDetection::ImageShapeType_MAX;
constexpr int CameraDetection::ImageShapeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectionClassification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5ffeaturedata_2eproto);
  return file_level_enum_descriptors_osi_5ffeaturedata_2eproto[4];
}
bool DetectionClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FeatureData::InitAsDefaultInstance() {
  ::osi3::_FeatureData_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
}
class FeatureData::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const FeatureData* msg);
};

const ::osi3::InterfaceVersion&
FeatureData::_Internal::version(const FeatureData* msg) {
  return *msg->version_;
}
void FeatureData::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
FeatureData::FeatureData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.FeatureData)
}
FeatureData::FeatureData(const FeatureData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      radar_sensor_(from.radar_sensor_),
      lidar_sensor_(from.lidar_sensor_),
      ultrasonic_sensor_(from.ultrasonic_sensor_),
      camera_sensor_(from.camera_sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.FeatureData)
}

void FeatureData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureData_osi_5ffeaturedata_2eproto.base);
  version_ = nullptr;
}

FeatureData::~FeatureData() {
  // @@protoc_insertion_point(destructor:osi3.FeatureData)
  SharedDtor();
}

void FeatureData::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
}

void FeatureData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureData& FeatureData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureData_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void FeatureData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.FeatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radar_sensor_.Clear();
  lidar_sensor_.Clear();
  ultrasonic_sensor_.Clear();
  camera_sensor_.Clear();
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FeatureData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.RadarDetectionData radar_sensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_radar_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LidarDetectionData lidar_sensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lidar_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ultrasonic_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.CameraDetectionData camera_sensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_camera_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FeatureData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.FeatureData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RadarDetectionData radar_sensor = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_radar_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LidarDetectionData lidar_sensor = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lidar_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ultrasonic_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraDetectionData camera_sensor = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_camera_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.FeatureData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.FeatureData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FeatureData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.FeatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // repeated .osi3.RadarDetectionData radar_sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radar_sensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->radar_sensor(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LidarDetectionData lidar_sensor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_sensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lidar_sensor(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ultrasonic_sensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->ultrasonic_sensor(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.CameraDetectionData camera_sensor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_sensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->camera_sensor(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.FeatureData)
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.FeatureData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // repeated .osi3.RadarDetectionData radar_sensor = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radar_sensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->radar_sensor(static_cast<int>(i)), target);
  }

  // repeated .osi3.LidarDetectionData lidar_sensor = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_sensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lidar_sensor(static_cast<int>(i)), target);
  }

  // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ultrasonic_sensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->ultrasonic_sensor(static_cast<int>(i)), target);
  }

  // repeated .osi3.CameraDetectionData camera_sensor = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_sensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->camera_sensor(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.FeatureData)
  return target;
}

size_t FeatureData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.FeatureData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.RadarDetectionData radar_sensor = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->radar_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->radar_sensor(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LidarDetectionData lidar_sensor = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lidar_sensor(static_cast<int>(i)));
    }
  }

  // repeated .osi3.UltrasonicDetectionData ultrasonic_sensor = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->ultrasonic_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ultrasonic_sensor(static_cast<int>(i)));
    }
  }

  // repeated .osi3.CameraDetectionData camera_sensor = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->camera_sensor(static_cast<int>(i)));
    }
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.FeatureData)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.FeatureData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.FeatureData)
    MergeFrom(*source);
  }
}

void FeatureData::MergeFrom(const FeatureData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.FeatureData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  radar_sensor_.MergeFrom(from.radar_sensor_);
  lidar_sensor_.MergeFrom(from.lidar_sensor_);
  ultrasonic_sensor_.MergeFrom(from.ultrasonic_sensor_);
  camera_sensor_.MergeFrom(from.camera_sensor_);
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
}

void FeatureData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.FeatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureData::CopyFrom(const FeatureData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.FeatureData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureData::IsInitialized() const {
  return true;
}

void FeatureData::InternalSwap(FeatureData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&radar_sensor_)->InternalSwap(CastToBase(&other->radar_sensor_));
  CastToBase(&lidar_sensor_)->InternalSwap(CastToBase(&other->lidar_sensor_));
  CastToBase(&ultrasonic_sensor_)->InternalSwap(CastToBase(&other->ultrasonic_sensor_));
  CastToBase(&camera_sensor_)->InternalSwap(CastToBase(&other->camera_sensor_));
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorDetectionHeader::InitAsDefaultInstance() {
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->measurement_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorDetectionHeader_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class SensorDetectionHeader::_Internal {
 public:
  static const ::osi3::Timestamp& measurement_time(const SensorDetectionHeader* msg);
  static const ::osi3::MountingPosition& mounting_position(const SensorDetectionHeader* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const SensorDetectionHeader* msg);
  static const ::osi3::Identifier& sensor_id(const SensorDetectionHeader* msg);
};

const ::osi3::Timestamp&
SensorDetectionHeader::_Internal::measurement_time(const SensorDetectionHeader* msg) {
  return *msg->measurement_time_;
}
const ::osi3::MountingPosition&
SensorDetectionHeader::_Internal::mounting_position(const SensorDetectionHeader* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
SensorDetectionHeader::_Internal::mounting_position_rmse(const SensorDetectionHeader* msg) {
  return *msg->mounting_position_rmse_;
}
const ::osi3::Identifier&
SensorDetectionHeader::_Internal::sensor_id(const SensorDetectionHeader* msg) {
  return *msg->sensor_id_;
}
void SensorDetectionHeader::clear_measurement_time() {
  if (GetArenaNoVirtual() == nullptr && measurement_time_ != nullptr) {
    delete measurement_time_;
  }
  measurement_time_ = nullptr;
}
void SensorDetectionHeader::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void SensorDetectionHeader::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
void SensorDetectionHeader::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
SensorDetectionHeader::SensorDetectionHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorDetectionHeader)
}
SensorDetectionHeader::SensorDetectionHeader(const SensorDetectionHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_measurement_time()) {
    measurement_time_ = new ::osi3::Timestamp(*from.measurement_time_);
  } else {
    measurement_time_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  ::memcpy(&cycle_counter_, &from.cycle_counter_,
    static_cast<size_t>(reinterpret_cast<char*>(&extended_qualifier_) -
    reinterpret_cast<char*>(&cycle_counter_)) + sizeof(extended_qualifier_));
  // @@protoc_insertion_point(copy_constructor:osi3.SensorDetectionHeader)
}

void SensorDetectionHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto.base);
  ::memset(&measurement_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extended_qualifier_) -
      reinterpret_cast<char*>(&measurement_time_)) + sizeof(extended_qualifier_));
}

SensorDetectionHeader::~SensorDetectionHeader() {
  // @@protoc_insertion_point(destructor:osi3.SensorDetectionHeader)
  SharedDtor();
}

void SensorDetectionHeader::SharedDtor() {
  if (this != internal_default_instance()) delete measurement_time_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
  if (this != internal_default_instance()) delete sensor_id_;
}

void SensorDetectionHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorDetectionHeader& SensorDetectionHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorDetectionHeader_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void SensorDetectionHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorDetectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && measurement_time_ != nullptr) {
    delete measurement_time_;
  }
  measurement_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  ::memset(&cycle_counter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extended_qualifier_) -
      reinterpret_cast<char*>(&cycle_counter_)) + sizeof(extended_qualifier_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorDetectionHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Timestamp measurement_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_measurement_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cycle_counter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          cycle_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_qualifier(static_cast<::osi3::SensorDetectionHeader_DataQualifier>(val));
        } else goto handle_unusual;
        continue;
      // uint32 number_of_valid_detections = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_of_valid_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier sensor_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_extended_qualifier(static_cast<::osi3::SensorDetectionHeader_ExtendedQualifier>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorDetectionHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorDetectionHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Timestamp measurement_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_measurement_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 cycle_counter = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cycle_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_qualifier(static_cast< ::osi3::SensorDetectionHeader_DataQualifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_valid_detections = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_valid_detections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier sensor_id = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_extended_qualifier(static_cast< ::osi3::SensorDetectionHeader_ExtendedQualifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorDetectionHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorDetectionHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorDetectionHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorDetectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::measurement_time(this), output);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->cycle_counter(), output);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::mounting_position_rmse(this), output);
  }

  // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
  if (this->data_qualifier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->data_qualifier(), output);
  }

  // uint32 number_of_valid_detections = 6;
  if (this->number_of_valid_detections() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->number_of_valid_detections(), output);
  }

  // .osi3.Identifier sensor_id = 7;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::sensor_id(this), output);
  }

  // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
  if (this->extended_qualifier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->extended_qualifier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorDetectionHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorDetectionHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorDetectionHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::measurement_time(this), target);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->cycle_counter(), target);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::mounting_position_rmse(this), target);
  }

  // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
  if (this->data_qualifier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->data_qualifier(), target);
  }

  // uint32 number_of_valid_detections = 6;
  if (this->number_of_valid_detections() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_valid_detections(), target);
  }

  // .osi3.Identifier sensor_id = 7;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::sensor_id(this), target);
  }

  // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
  if (this->extended_qualifier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->extended_qualifier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorDetectionHeader)
  return target;
}

size_t SensorDetectionHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorDetectionHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Timestamp measurement_time = 1;
  if (this->has_measurement_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measurement_time_);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // .osi3.Identifier sensor_id = 7;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // uint64 cycle_counter = 2;
  if (this->cycle_counter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->cycle_counter());
  }

  // .osi3.SensorDetectionHeader.DataQualifier data_qualifier = 5;
  if (this->data_qualifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_qualifier());
  }

  // uint32 number_of_valid_detections = 6;
  if (this->number_of_valid_detections() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_valid_detections());
  }

  // .osi3.SensorDetectionHeader.ExtendedQualifier extended_qualifier = 8;
  if (this->extended_qualifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->extended_qualifier());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorDetectionHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorDetectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorDetectionHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorDetectionHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorDetectionHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorDetectionHeader)
    MergeFrom(*source);
  }
}

void SensorDetectionHeader::MergeFrom(const SensorDetectionHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorDetectionHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_measurement_time()) {
    mutable_measurement_time()->::osi3::Timestamp::MergeFrom(from.measurement_time());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.cycle_counter() != 0) {
    set_cycle_counter(from.cycle_counter());
  }
  if (from.data_qualifier() != 0) {
    set_data_qualifier(from.data_qualifier());
  }
  if (from.number_of_valid_detections() != 0) {
    set_number_of_valid_detections(from.number_of_valid_detections());
  }
  if (from.extended_qualifier() != 0) {
    set_extended_qualifier(from.extended_qualifier());
  }
}

void SensorDetectionHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorDetectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDetectionHeader::CopyFrom(const SensorDetectionHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorDetectionHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDetectionHeader::IsInitialized() const {
  return true;
}

void SensorDetectionHeader::InternalSwap(SensorDetectionHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(measurement_time_, other->measurement_time_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(sensor_id_, other->sensor_id_);
  swap(cycle_counter_, other->cycle_counter_);
  swap(data_qualifier_, other->data_qualifier_);
  swap(number_of_valid_detections_, other->number_of_valid_detections_);
  swap(extended_qualifier_, other->extended_qualifier_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorDetectionHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarDetectionData::InitAsDefaultInstance() {
  ::osi3::_RadarDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
}
class RadarDetectionData::_Internal {
 public:
  static const ::osi3::SensorDetectionHeader& header(const RadarDetectionData* msg);
};

const ::osi3::SensorDetectionHeader&
RadarDetectionData::_Internal::header(const RadarDetectionData* msg) {
  return *msg->header_;
}
RadarDetectionData::RadarDetectionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarDetectionData)
}
RadarDetectionData::RadarDetectionData(const RadarDetectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detection_(from.detection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.RadarDetectionData)
}

void RadarDetectionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarDetectionData_osi_5ffeaturedata_2eproto.base);
  header_ = nullptr;
}

RadarDetectionData::~RadarDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.RadarDetectionData)
  SharedDtor();
}

void RadarDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void RadarDetectionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarDetectionData& RadarDetectionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarDetectionData_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void RadarDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RadarDetectionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.RadarDetection detection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RadarDetectionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarDetectionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RadarDetection detection = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarDetectionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RadarDetectionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .osi3.RadarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detection(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarDetectionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarDetectionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .osi3.RadarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarDetectionData)
  return target;
}

size_t RadarDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarDetectionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.RadarDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarDetectionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarDetectionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarDetectionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarDetectionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarDetectionData)
    MergeFrom(*source);
  }
}

void RadarDetectionData::MergeFrom(const RadarDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
}

void RadarDetectionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarDetectionData::CopyFrom(const RadarDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarDetectionData::IsInitialized() const {
  return true;
}

void RadarDetectionData::InternalSwap(RadarDetectionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detection_)->InternalSwap(CastToBase(&other->detection_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarDetectionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarDetection::InitAsDefaultInstance() {
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->position_rmse_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_RadarDetection_default_instance_._instance.get_mutable()->ambiguity_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class RadarDetection::_Internal {
 public:
  static const ::osi3::Identifier& object_id(const RadarDetection* msg);
  static const ::osi3::Spherical3d& position(const RadarDetection* msg);
  static const ::osi3::Spherical3d& position_rmse(const RadarDetection* msg);
  static const ::osi3::Identifier& ambiguity_id(const RadarDetection* msg);
};

const ::osi3::Identifier&
RadarDetection::_Internal::object_id(const RadarDetection* msg) {
  return *msg->object_id_;
}
const ::osi3::Spherical3d&
RadarDetection::_Internal::position(const RadarDetection* msg) {
  return *msg->position_;
}
const ::osi3::Spherical3d&
RadarDetection::_Internal::position_rmse(const RadarDetection* msg) {
  return *msg->position_rmse_;
}
const ::osi3::Identifier&
RadarDetection::_Internal::ambiguity_id(const RadarDetection* msg) {
  return *msg->ambiguity_id_;
}
void RadarDetection::clear_object_id() {
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
}
void RadarDetection::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void RadarDetection::clear_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && position_rmse_ != nullptr) {
    delete position_rmse_;
  }
  position_rmse_ = nullptr;
}
void RadarDetection::clear_ambiguity_id() {
  if (GetArenaNoVirtual() == nullptr && ambiguity_id_ != nullptr) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = nullptr;
}
RadarDetection::RadarDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarDetection)
}
RadarDetection::RadarDetection(const RadarDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  if (from.has_position()) {
    position_ = new ::osi3::Spherical3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_position_rmse()) {
    position_rmse_ = new ::osi3::Spherical3d(*from.position_rmse_);
  } else {
    position_rmse_ = nullptr;
  }
  if (from.has_ambiguity_id()) {
    ambiguity_id_ = new ::osi3::Identifier(*from.ambiguity_id_);
  } else {
    ambiguity_id_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:osi3.RadarDetection)
}

void RadarDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarDetection_osi_5ffeaturedata_2eproto.base);
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(classification_));
}

RadarDetection::~RadarDetection() {
  // @@protoc_insertion_point(destructor:osi3.RadarDetection)
  SharedDtor();
}

void RadarDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_rmse_;
  if (this != internal_default_instance()) delete ambiguity_id_;
}

void RadarDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarDetection& RadarDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarDetection_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void RadarDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_rmse_ != nullptr) {
    delete position_rmse_;
  }
  position_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ambiguity_id_ != nullptr) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = nullptr;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RadarDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_object_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Spherical3d position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Spherical3d position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radial_velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          radial_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double radial_velocity_rmse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          radial_velocity_rmse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double rcs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          rcs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double snr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double point_target_probability = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          point_target_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier ambiguity_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_ambiguity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectionClassification classification = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_classification(static_cast<::osi3::DetectionClassification>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RadarDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position_rmse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radial_velocity = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radial_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radial_velocity_rmse = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radial_velocity_rmse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double rcs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rcs_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double snr = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double point_target_probability = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_target_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier ambiguity_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ambiguity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectionClassification classification = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification(static_cast< ::osi3::DetectionClassification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RadarDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::object_id(this), output);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::position(this), output);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::position_rmse(this), output);
  }

  // double radial_velocity = 5;
  if (!(this->radial_velocity() <= 0 && this->radial_velocity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->radial_velocity(), output);
  }

  // double radial_velocity_rmse = 6;
  if (!(this->radial_velocity_rmse() <= 0 && this->radial_velocity_rmse() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->radial_velocity_rmse(), output);
  }

  // double rcs = 7;
  if (!(this->rcs() <= 0 && this->rcs() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->rcs(), output);
  }

  // double snr = 8;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->snr(), output);
  }

  // double point_target_probability = 9;
  if (!(this->point_target_probability() <= 0 && this->point_target_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->point_target_probability(), output);
  }

  // .osi3.Identifier ambiguity_id = 10;
  if (this->has_ambiguity_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::ambiguity_id(this), output);
  }

  // .osi3.DetectionClassification classification = 11;
  if (this->classification() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->classification(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarDetection)
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarDetection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::object_id(this), target);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::position(this), target);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::position_rmse(this), target);
  }

  // double radial_velocity = 5;
  if (!(this->radial_velocity() <= 0 && this->radial_velocity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->radial_velocity(), target);
  }

  // double radial_velocity_rmse = 6;
  if (!(this->radial_velocity_rmse() <= 0 && this->radial_velocity_rmse() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->radial_velocity_rmse(), target);
  }

  // double rcs = 7;
  if (!(this->rcs() <= 0 && this->rcs() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->rcs(), target);
  }

  // double snr = 8;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->snr(), target);
  }

  // double point_target_probability = 9;
  if (!(this->point_target_probability() <= 0 && this->point_target_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->point_target_probability(), target);
  }

  // .osi3.Identifier ambiguity_id = 10;
  if (this->has_ambiguity_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::ambiguity_id(this), target);
  }

  // .osi3.DetectionClassification classification = 11;
  if (this->classification() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->classification(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarDetection)
  return target;
}

size_t RadarDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_rmse_);
  }

  // .osi3.Identifier ambiguity_id = 10;
  if (this->has_ambiguity_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambiguity_id_);
  }

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double radial_velocity = 5;
  if (!(this->radial_velocity() <= 0 && this->radial_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double radial_velocity_rmse = 6;
  if (!(this->radial_velocity_rmse() <= 0 && this->radial_velocity_rmse() >= 0)) {
    total_size += 1 + 8;
  }

  // double rcs = 7;
  if (!(this->rcs() <= 0 && this->rcs() >= 0)) {
    total_size += 1 + 8;
  }

  // double snr = 8;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    total_size += 1 + 8;
  }

  // double point_target_probability = 9;
  if (!(this->point_target_probability() <= 0 && this->point_target_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.DetectionClassification classification = 11;
  if (this->classification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->classification());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarDetection)
    MergeFrom(*source);
  }
}

void RadarDetection::MergeFrom(const RadarDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_position()) {
    mutable_position()->::osi3::Spherical3d::MergeFrom(from.position());
  }
  if (from.has_position_rmse()) {
    mutable_position_rmse()->::osi3::Spherical3d::MergeFrom(from.position_rmse());
  }
  if (from.has_ambiguity_id()) {
    mutable_ambiguity_id()->::osi3::Identifier::MergeFrom(from.ambiguity_id());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
  if (!(from.radial_velocity() <= 0 && from.radial_velocity() >= 0)) {
    set_radial_velocity(from.radial_velocity());
  }
  if (!(from.radial_velocity_rmse() <= 0 && from.radial_velocity_rmse() >= 0)) {
    set_radial_velocity_rmse(from.radial_velocity_rmse());
  }
  if (!(from.rcs() <= 0 && from.rcs() >= 0)) {
    set_rcs(from.rcs());
  }
  if (!(from.snr() <= 0 && from.snr() >= 0)) {
    set_snr(from.snr());
  }
  if (!(from.point_target_probability() <= 0 && from.point_target_probability() >= 0)) {
    set_point_target_probability(from.point_target_probability());
  }
  if (from.classification() != 0) {
    set_classification(from.classification());
  }
}

void RadarDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarDetection::CopyFrom(const RadarDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarDetection::IsInitialized() const {
  return true;
}

void RadarDetection::InternalSwap(RadarDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
  swap(position_, other->position_);
  swap(position_rmse_, other->position_rmse_);
  swap(ambiguity_id_, other->ambiguity_id_);
  swap(existence_probability_, other->existence_probability_);
  swap(radial_velocity_, other->radial_velocity_);
  swap(radial_velocity_rmse_, other->radial_velocity_rmse_);
  swap(rcs_, other->rcs_);
  swap(snr_, other->snr_);
  swap(point_target_probability_, other->point_target_probability_);
  swap(classification_, other->classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LidarDetectionData::InitAsDefaultInstance() {
  ::osi3::_LidarDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
}
class LidarDetectionData::_Internal {
 public:
  static const ::osi3::SensorDetectionHeader& header(const LidarDetectionData* msg);
};

const ::osi3::SensorDetectionHeader&
LidarDetectionData::_Internal::header(const LidarDetectionData* msg) {
  return *msg->header_;
}
LidarDetectionData::LidarDetectionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarDetectionData)
}
LidarDetectionData::LidarDetectionData(const LidarDetectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detection_(from.detection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LidarDetectionData)
}

void LidarDetectionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarDetectionData_osi_5ffeaturedata_2eproto.base);
  header_ = nullptr;
}

LidarDetectionData::~LidarDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.LidarDetectionData)
  SharedDtor();
}

void LidarDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void LidarDetectionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarDetectionData& LidarDetectionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarDetectionData_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void LidarDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LidarDetectionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LidarDetection detection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LidarDetectionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarDetectionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LidarDetection detection = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarDetectionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LidarDetectionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .osi3.LidarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detection(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarDetectionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarDetectionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .osi3.LidarDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarDetectionData)
  return target;
}

size_t LidarDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarDetectionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LidarDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarDetectionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarDetectionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarDetectionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarDetectionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarDetectionData)
    MergeFrom(*source);
  }
}

void LidarDetectionData::MergeFrom(const LidarDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
}

void LidarDetectionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarDetectionData::CopyFrom(const LidarDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarDetectionData::IsInitialized() const {
  return true;
}

void LidarDetectionData::InternalSwap(LidarDetectionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detection_)->InternalSwap(CastToBase(&other->detection_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarDetectionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LidarDetection::InitAsDefaultInstance() {
  ::osi3::_LidarDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LidarDetection_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_LidarDetection_default_instance_._instance.get_mutable()->position_rmse_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
}
class LidarDetection::_Internal {
 public:
  static const ::osi3::Identifier& object_id(const LidarDetection* msg);
  static const ::osi3::Spherical3d& position(const LidarDetection* msg);
  static const ::osi3::Spherical3d& position_rmse(const LidarDetection* msg);
};

const ::osi3::Identifier&
LidarDetection::_Internal::object_id(const LidarDetection* msg) {
  return *msg->object_id_;
}
const ::osi3::Spherical3d&
LidarDetection::_Internal::position(const LidarDetection* msg) {
  return *msg->position_;
}
const ::osi3::Spherical3d&
LidarDetection::_Internal::position_rmse(const LidarDetection* msg) {
  return *msg->position_rmse_;
}
void LidarDetection::clear_object_id() {
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
}
void LidarDetection::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void LidarDetection::clear_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && position_rmse_ != nullptr) {
    delete position_rmse_;
  }
  position_rmse_ = nullptr;
}
LidarDetection::LidarDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarDetection)
}
LidarDetection::LidarDetection(const LidarDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  if (from.has_position()) {
    position_ = new ::osi3::Spherical3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_position_rmse()) {
    position_rmse_ = new ::osi3::Spherical3d(*from.position_rmse_);
  } else {
    position_rmse_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:osi3.LidarDetection)
}

void LidarDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarDetection_osi_5ffeaturedata_2eproto.base);
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(classification_));
}

LidarDetection::~LidarDetection() {
  // @@protoc_insertion_point(destructor:osi3.LidarDetection)
  SharedDtor();
}

void LidarDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_rmse_;
}

void LidarDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarDetection& LidarDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarDetection_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void LidarDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_rmse_ != nullptr) {
    delete position_rmse_;
  }
  position_rmse_ = nullptr;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LidarDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_object_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Spherical3d position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Spherical3d position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height_rmse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          height_rmse_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double intensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double free_space_probability = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          free_space_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectionClassification classification = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_classification(static_cast<::osi3::DetectionClassification>(val));
        } else goto handle_unusual;
        continue;
      // double reflectivity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          reflectivity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double echo_pulse_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          echo_pulse_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LidarDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d position_rmse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height_rmse = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_rmse_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double intensity = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double free_space_probability = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &free_space_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectionClassification classification = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification(static_cast< ::osi3::DetectionClassification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reflectivity = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reflectivity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double echo_pulse_width = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (89 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &echo_pulse_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LidarDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::object_id(this), output);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::position(this), output);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::position_rmse(this), output);
  }

  // double height = 5;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // double height_rmse = 6;
  if (!(this->height_rmse() <= 0 && this->height_rmse() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->height_rmse(), output);
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->intensity(), output);
  }

  // double free_space_probability = 8;
  if (!(this->free_space_probability() <= 0 && this->free_space_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->free_space_probability(), output);
  }

  // .osi3.DetectionClassification classification = 9;
  if (this->classification() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->classification(), output);
  }

  // double reflectivity = 10;
  if (!(this->reflectivity() <= 0 && this->reflectivity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->reflectivity(), output);
  }

  // double echo_pulse_width = 11;
  if (!(this->echo_pulse_width() <= 0 && this->echo_pulse_width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(11, this->echo_pulse_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarDetection)
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarDetection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::object_id(this), target);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::position(this), target);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::position_rmse(this), target);
  }

  // double height = 5;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // double height_rmse = 6;
  if (!(this->height_rmse() <= 0 && this->height_rmse() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->height_rmse(), target);
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->intensity(), target);
  }

  // double free_space_probability = 8;
  if (!(this->free_space_probability() <= 0 && this->free_space_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->free_space_probability(), target);
  }

  // .osi3.DetectionClassification classification = 9;
  if (this->classification() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->classification(), target);
  }

  // double reflectivity = 10;
  if (!(this->reflectivity() <= 0 && this->reflectivity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->reflectivity(), target);
  }

  // double echo_pulse_width = 11;
  if (!(this->echo_pulse_width() <= 0 && this->echo_pulse_width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->echo_pulse_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarDetection)
  return target;
}

size_t LidarDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // .osi3.Spherical3d position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .osi3.Spherical3d position_rmse = 4;
  if (this->has_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_rmse_);
  }

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 5;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double height_rmse = 6;
  if (!(this->height_rmse() <= 0 && this->height_rmse() >= 0)) {
    total_size += 1 + 8;
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 8;
  }

  // double free_space_probability = 8;
  if (!(this->free_space_probability() <= 0 && this->free_space_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double reflectivity = 10;
  if (!(this->reflectivity() <= 0 && this->reflectivity() >= 0)) {
    total_size += 1 + 8;
  }

  // double echo_pulse_width = 11;
  if (!(this->echo_pulse_width() <= 0 && this->echo_pulse_width() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.DetectionClassification classification = 9;
  if (this->classification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->classification());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarDetection)
    MergeFrom(*source);
  }
}

void LidarDetection::MergeFrom(const LidarDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_position()) {
    mutable_position()->::osi3::Spherical3d::MergeFrom(from.position());
  }
  if (from.has_position_rmse()) {
    mutable_position_rmse()->::osi3::Spherical3d::MergeFrom(from.position_rmse());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (!(from.height_rmse() <= 0 && from.height_rmse() >= 0)) {
    set_height_rmse(from.height_rmse());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    set_intensity(from.intensity());
  }
  if (!(from.free_space_probability() <= 0 && from.free_space_probability() >= 0)) {
    set_free_space_probability(from.free_space_probability());
  }
  if (!(from.reflectivity() <= 0 && from.reflectivity() >= 0)) {
    set_reflectivity(from.reflectivity());
  }
  if (!(from.echo_pulse_width() <= 0 && from.echo_pulse_width() >= 0)) {
    set_echo_pulse_width(from.echo_pulse_width());
  }
  if (from.classification() != 0) {
    set_classification(from.classification());
  }
}

void LidarDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarDetection::CopyFrom(const LidarDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarDetection::IsInitialized() const {
  return true;
}

void LidarDetection::InternalSwap(LidarDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
  swap(position_, other->position_);
  swap(position_rmse_, other->position_rmse_);
  swap(existence_probability_, other->existence_probability_);
  swap(height_, other->height_);
  swap(height_rmse_, other->height_rmse_);
  swap(intensity_, other->intensity_);
  swap(free_space_probability_, other->free_space_probability_);
  swap(reflectivity_, other->reflectivity_);
  swap(echo_pulse_width_, other->echo_pulse_width_);
  swap(classification_, other->classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicDetectionSpecificHeader::InitAsDefaultInstance() {
}
class UltrasonicDetectionSpecificHeader::_Internal {
 public:
};

UltrasonicDetectionSpecificHeader::UltrasonicDetectionSpecificHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicDetectionSpecificHeader)
}
UltrasonicDetectionSpecificHeader::UltrasonicDetectionSpecificHeader(const UltrasonicDetectionSpecificHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_range_, &from.max_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_valid_indirect_detections_) -
    reinterpret_cast<char*>(&max_range_)) + sizeof(number_of_valid_indirect_detections_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicDetectionSpecificHeader)
}

void UltrasonicDetectionSpecificHeader::SharedCtor() {
  ::memset(&max_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_valid_indirect_detections_) -
      reinterpret_cast<char*>(&max_range_)) + sizeof(number_of_valid_indirect_detections_));
}

UltrasonicDetectionSpecificHeader::~UltrasonicDetectionSpecificHeader() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicDetectionSpecificHeader)
  SharedDtor();
}

void UltrasonicDetectionSpecificHeader::SharedDtor() {
}

void UltrasonicDetectionSpecificHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicDetectionSpecificHeader& UltrasonicDetectionSpecificHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicDetectionSpecificHeader_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicDetectionSpecificHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicDetectionSpecificHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_valid_indirect_detections_) -
      reinterpret_cast<char*>(&max_range_)) + sizeof(number_of_valid_indirect_detections_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UltrasonicDetectionSpecificHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_valid_indirect_detections = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          number_of_valid_indirect_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UltrasonicDetectionSpecificHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicDetectionSpecificHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_range = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_valid_indirect_detections = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_valid_indirect_detections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicDetectionSpecificHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicDetectionSpecificHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UltrasonicDetectionSpecificHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicDetectionSpecificHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_range = 1;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->max_range(), output);
  }

  // uint32 number_of_valid_indirect_detections = 2;
  if (this->number_of_valid_indirect_detections() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->number_of_valid_indirect_detections(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicDetectionSpecificHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDetectionSpecificHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicDetectionSpecificHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_range = 1;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->max_range(), target);
  }

  // uint32 number_of_valid_indirect_detections = 2;
  if (this->number_of_valid_indirect_detections() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->number_of_valid_indirect_detections(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicDetectionSpecificHeader)
  return target;
}

size_t UltrasonicDetectionSpecificHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicDetectionSpecificHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_range = 1;
  if (!(this->max_range() <= 0 && this->max_range() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 number_of_valid_indirect_detections = 2;
  if (this->number_of_valid_indirect_detections() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_valid_indirect_detections());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicDetectionSpecificHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDetectionSpecificHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicDetectionSpecificHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicDetectionSpecificHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicDetectionSpecificHeader)
    MergeFrom(*source);
  }
}

void UltrasonicDetectionSpecificHeader::MergeFrom(const UltrasonicDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_range() <= 0 && from.max_range() >= 0)) {
    set_max_range(from.max_range());
  }
  if (from.number_of_valid_indirect_detections() != 0) {
    set_number_of_valid_indirect_detections(from.number_of_valid_indirect_detections());
  }
}

void UltrasonicDetectionSpecificHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDetectionSpecificHeader::CopyFrom(const UltrasonicDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDetectionSpecificHeader::IsInitialized() const {
  return true;
}

void UltrasonicDetectionSpecificHeader::InternalSwap(UltrasonicDetectionSpecificHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_range_, other->max_range_);
  swap(number_of_valid_indirect_detections_, other->number_of_valid_indirect_detections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDetectionSpecificHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicDetectionData::InitAsDefaultInstance() {
  ::osi3::_UltrasonicDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
  ::osi3::_UltrasonicDetectionData_default_instance_._instance.get_mutable()->specific_header_ = const_cast< ::osi3::UltrasonicDetectionSpecificHeader*>(
      ::osi3::UltrasonicDetectionSpecificHeader::internal_default_instance());
}
class UltrasonicDetectionData::_Internal {
 public:
  static const ::osi3::SensorDetectionHeader& header(const UltrasonicDetectionData* msg);
  static const ::osi3::UltrasonicDetectionSpecificHeader& specific_header(const UltrasonicDetectionData* msg);
};

const ::osi3::SensorDetectionHeader&
UltrasonicDetectionData::_Internal::header(const UltrasonicDetectionData* msg) {
  return *msg->header_;
}
const ::osi3::UltrasonicDetectionSpecificHeader&
UltrasonicDetectionData::_Internal::specific_header(const UltrasonicDetectionData* msg) {
  return *msg->specific_header_;
}
UltrasonicDetectionData::UltrasonicDetectionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicDetectionData)
}
UltrasonicDetectionData::UltrasonicDetectionData(const UltrasonicDetectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detection_(from.detection_),
      indirect_detection_(from.indirect_detection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_specific_header()) {
    specific_header_ = new ::osi3::UltrasonicDetectionSpecificHeader(*from.specific_header_);
  } else {
    specific_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicDetectionData)
}

void UltrasonicDetectionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specific_header_) -
      reinterpret_cast<char*>(&header_)) + sizeof(specific_header_));
}

UltrasonicDetectionData::~UltrasonicDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicDetectionData)
  SharedDtor();
}

void UltrasonicDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete specific_header_;
}

void UltrasonicDetectionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicDetectionData& UltrasonicDetectionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicDetectionData_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  indirect_detection_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && specific_header_ != nullptr) {
    delete specific_header_;
  }
  specific_header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UltrasonicDetectionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.UltrasonicDetection detection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_specific_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_indirect_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UltrasonicDetectionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicDetectionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicDetection detection = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_specific_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_indirect_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicDetectionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UltrasonicDetectionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .osi3.UltrasonicDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detection(static_cast<int>(i)),
      output);
  }

  // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::specific_header(this), output);
  }

  // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indirect_detection_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->indirect_detection(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicDetectionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDetectionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .osi3.UltrasonicDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), target);
  }

  // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::specific_header(this), target);
  }

  // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indirect_detection_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->indirect_detection(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicDetectionData)
  return target;
}

size_t UltrasonicDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicDetectionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.UltrasonicDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // repeated .osi3.UltrasonicIndirectDetection indirect_detection = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->indirect_detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->indirect_detection(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .osi3.UltrasonicDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specific_header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicDetectionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDetectionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicDetectionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicDetectionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicDetectionData)
    MergeFrom(*source);
  }
}

void UltrasonicDetectionData::MergeFrom(const UltrasonicDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  indirect_detection_.MergeFrom(from.indirect_detection_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
  if (from.has_specific_header()) {
    mutable_specific_header()->::osi3::UltrasonicDetectionSpecificHeader::MergeFrom(from.specific_header());
  }
}

void UltrasonicDetectionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDetectionData::CopyFrom(const UltrasonicDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDetectionData::IsInitialized() const {
  return true;
}

void UltrasonicDetectionData::InternalSwap(UltrasonicDetectionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detection_)->InternalSwap(CastToBase(&other->detection_));
  CastToBase(&indirect_detection_)->InternalSwap(CastToBase(&other->indirect_detection_));
  swap(header_, other->header_);
  swap(specific_header_, other->specific_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDetectionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicDetection::InitAsDefaultInstance() {
  ::osi3::_UltrasonicDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class UltrasonicDetection::_Internal {
 public:
  static const ::osi3::Identifier& object_id(const UltrasonicDetection* msg);
};

const ::osi3::Identifier&
UltrasonicDetection::_Internal::object_id(const UltrasonicDetection* msg) {
  return *msg->object_id_;
}
void UltrasonicDetection::clear_object_id() {
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
}
UltrasonicDetection::UltrasonicDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicDetection)
}
UltrasonicDetection::UltrasonicDetection(const UltrasonicDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&distance_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(distance_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicDetection)
}

void UltrasonicDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto.base);
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(distance_));
}

UltrasonicDetection::~UltrasonicDetection() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicDetection)
  SharedDtor();
}

void UltrasonicDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
}

void UltrasonicDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicDetection& UltrasonicDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicDetection_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&distance_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(distance_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UltrasonicDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_object_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UltrasonicDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double distance = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UltrasonicDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::object_id(this), output);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicDetection)
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDetection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::object_id(this), target);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicDetection)
  return target;
}

size_t UltrasonicDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicDetection)
    MergeFrom(*source);
  }
}

void UltrasonicDetection::MergeFrom(const UltrasonicDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    set_distance(from.distance());
  }
}

void UltrasonicDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicDetection::CopyFrom(const UltrasonicDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDetection::IsInitialized() const {
  return true;
}

void UltrasonicDetection::InternalSwap(UltrasonicDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
  swap(existence_probability_, other->existence_probability_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicIndirectDetection::InitAsDefaultInstance() {
  ::osi3::_UltrasonicIndirectDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_UltrasonicIndirectDetection_default_instance_._instance.get_mutable()->receiver_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_UltrasonicIndirectDetection_default_instance_._instance.get_mutable()->receiver_origin_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
class UltrasonicIndirectDetection::_Internal {
 public:
  static const ::osi3::Identifier& object_id(const UltrasonicIndirectDetection* msg);
  static const ::osi3::Identifier& receiver_id(const UltrasonicIndirectDetection* msg);
  static const ::osi3::Vector3d& receiver_origin(const UltrasonicIndirectDetection* msg);
};

const ::osi3::Identifier&
UltrasonicIndirectDetection::_Internal::object_id(const UltrasonicIndirectDetection* msg) {
  return *msg->object_id_;
}
const ::osi3::Identifier&
UltrasonicIndirectDetection::_Internal::receiver_id(const UltrasonicIndirectDetection* msg) {
  return *msg->receiver_id_;
}
const ::osi3::Vector3d&
UltrasonicIndirectDetection::_Internal::receiver_origin(const UltrasonicIndirectDetection* msg) {
  return *msg->receiver_origin_;
}
void UltrasonicIndirectDetection::clear_object_id() {
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
}
void UltrasonicIndirectDetection::clear_receiver_id() {
  if (GetArenaNoVirtual() == nullptr && receiver_id_ != nullptr) {
    delete receiver_id_;
  }
  receiver_id_ = nullptr;
}
void UltrasonicIndirectDetection::clear_receiver_origin() {
  if (GetArenaNoVirtual() == nullptr && receiver_origin_ != nullptr) {
    delete receiver_origin_;
  }
  receiver_origin_ = nullptr;
}
UltrasonicIndirectDetection::UltrasonicIndirectDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicIndirectDetection)
}
UltrasonicIndirectDetection::UltrasonicIndirectDetection(const UltrasonicIndirectDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  if (from.has_receiver_id()) {
    receiver_id_ = new ::osi3::Identifier(*from.receiver_id_);
  } else {
    receiver_id_ = nullptr;
  }
  if (from.has_receiver_origin()) {
    receiver_origin_ = new ::osi3::Vector3d(*from.receiver_origin_);
  } else {
    receiver_origin_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&ellipsoid_axial_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(ellipsoid_axial_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicIndirectDetection)
}

void UltrasonicIndirectDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto.base);
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ellipsoid_axial_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(ellipsoid_axial_));
}

UltrasonicIndirectDetection::~UltrasonicIndirectDetection() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicIndirectDetection)
  SharedDtor();
}

void UltrasonicIndirectDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete receiver_id_;
  if (this != internal_default_instance()) delete receiver_origin_;
}

void UltrasonicIndirectDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicIndirectDetection& UltrasonicIndirectDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicIndirectDetection_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicIndirectDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicIndirectDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && receiver_id_ != nullptr) {
    delete receiver_id_;
  }
  receiver_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && receiver_origin_ != nullptr) {
    delete receiver_origin_;
  }
  receiver_origin_ = nullptr;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ellipsoid_axial_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(ellipsoid_axial_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UltrasonicIndirectDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_object_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double ellipsoid_radial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ellipsoid_radial_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double ellipsoid_axial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          ellipsoid_axial_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier receiver_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_receiver_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d receiver_origin = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_receiver_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UltrasonicIndirectDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicIndirectDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ellipsoid_radial = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipsoid_radial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double ellipsoid_axial = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ellipsoid_axial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier receiver_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d receiver_origin = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_receiver_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicIndirectDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicIndirectDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UltrasonicIndirectDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicIndirectDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::object_id(this), output);
  }

  // double ellipsoid_radial = 3;
  if (!(this->ellipsoid_radial() <= 0 && this->ellipsoid_radial() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->ellipsoid_radial(), output);
  }

  // double ellipsoid_axial = 4;
  if (!(this->ellipsoid_axial() <= 0 && this->ellipsoid_axial() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->ellipsoid_axial(), output);
  }

  // .osi3.Identifier receiver_id = 5;
  if (this->has_receiver_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::receiver_id(this), output);
  }

  // .osi3.Vector3d receiver_origin = 6;
  if (this->has_receiver_origin()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::receiver_origin(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicIndirectDetection)
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicIndirectDetection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicIndirectDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::object_id(this), target);
  }

  // double ellipsoid_radial = 3;
  if (!(this->ellipsoid_radial() <= 0 && this->ellipsoid_radial() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->ellipsoid_radial(), target);
  }

  // double ellipsoid_axial = 4;
  if (!(this->ellipsoid_axial() <= 0 && this->ellipsoid_axial() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->ellipsoid_axial(), target);
  }

  // .osi3.Identifier receiver_id = 5;
  if (this->has_receiver_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::receiver_id(this), target);
  }

  // .osi3.Vector3d receiver_origin = 6;
  if (this->has_receiver_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::receiver_origin(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicIndirectDetection)
  return target;
}

size_t UltrasonicIndirectDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicIndirectDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // .osi3.Identifier receiver_id = 5;
  if (this->has_receiver_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_id_);
  }

  // .osi3.Vector3d receiver_origin = 6;
  if (this->has_receiver_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receiver_origin_);
  }

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double ellipsoid_radial = 3;
  if (!(this->ellipsoid_radial() <= 0 && this->ellipsoid_radial() >= 0)) {
    total_size += 1 + 8;
  }

  // double ellipsoid_axial = 4;
  if (!(this->ellipsoid_axial() <= 0 && this->ellipsoid_axial() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicIndirectDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicIndirectDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicIndirectDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicIndirectDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicIndirectDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicIndirectDetection)
    MergeFrom(*source);
  }
}

void UltrasonicIndirectDetection::MergeFrom(const UltrasonicIndirectDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicIndirectDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_receiver_id()) {
    mutable_receiver_id()->::osi3::Identifier::MergeFrom(from.receiver_id());
  }
  if (from.has_receiver_origin()) {
    mutable_receiver_origin()->::osi3::Vector3d::MergeFrom(from.receiver_origin());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
  if (!(from.ellipsoid_radial() <= 0 && from.ellipsoid_radial() >= 0)) {
    set_ellipsoid_radial(from.ellipsoid_radial());
  }
  if (!(from.ellipsoid_axial() <= 0 && from.ellipsoid_axial() >= 0)) {
    set_ellipsoid_axial(from.ellipsoid_axial());
  }
}

void UltrasonicIndirectDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicIndirectDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicIndirectDetection::CopyFrom(const UltrasonicIndirectDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicIndirectDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicIndirectDetection::IsInitialized() const {
  return true;
}

void UltrasonicIndirectDetection::InternalSwap(UltrasonicIndirectDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
  swap(receiver_id_, other->receiver_id_);
  swap(receiver_origin_, other->receiver_origin_);
  swap(existence_probability_, other->existence_probability_);
  swap(ellipsoid_radial_, other->ellipsoid_radial_);
  swap(ellipsoid_axial_, other->ellipsoid_axial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicIndirectDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraDetectionSpecificHeader::InitAsDefaultInstance() {
}
class CameraDetectionSpecificHeader::_Internal {
 public:
};

CameraDetectionSpecificHeader::CameraDetectionSpecificHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraDetectionSpecificHeader)
}
CameraDetectionSpecificHeader::CameraDetectionSpecificHeader(const CameraDetectionSpecificHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_of_valid_points_ = from.number_of_valid_points_;
  // @@protoc_insertion_point(copy_constructor:osi3.CameraDetectionSpecificHeader)
}

void CameraDetectionSpecificHeader::SharedCtor() {
  number_of_valid_points_ = 0u;
}

CameraDetectionSpecificHeader::~CameraDetectionSpecificHeader() {
  // @@protoc_insertion_point(destructor:osi3.CameraDetectionSpecificHeader)
  SharedDtor();
}

void CameraDetectionSpecificHeader::SharedDtor() {
}

void CameraDetectionSpecificHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraDetectionSpecificHeader& CameraDetectionSpecificHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraDetectionSpecificHeader_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void CameraDetectionSpecificHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraDetectionSpecificHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  number_of_valid_points_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraDetectionSpecificHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 number_of_valid_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          number_of_valid_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraDetectionSpecificHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraDetectionSpecificHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 number_of_valid_points = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_valid_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraDetectionSpecificHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraDetectionSpecificHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraDetectionSpecificHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraDetectionSpecificHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_valid_points = 1;
  if (this->number_of_valid_points() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->number_of_valid_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraDetectionSpecificHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDetectionSpecificHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraDetectionSpecificHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 number_of_valid_points = 1;
  if (this->number_of_valid_points() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->number_of_valid_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraDetectionSpecificHeader)
  return target;
}

size_t CameraDetectionSpecificHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraDetectionSpecificHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 number_of_valid_points = 1;
  if (this->number_of_valid_points() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_valid_points());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDetectionSpecificHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDetectionSpecificHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDetectionSpecificHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraDetectionSpecificHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraDetectionSpecificHeader)
    MergeFrom(*source);
  }
}

void CameraDetectionSpecificHeader::MergeFrom(const CameraDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraDetectionSpecificHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.number_of_valid_points() != 0) {
    set_number_of_valid_points(from.number_of_valid_points());
  }
}

void CameraDetectionSpecificHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDetectionSpecificHeader::CopyFrom(const CameraDetectionSpecificHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraDetectionSpecificHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetectionSpecificHeader::IsInitialized() const {
  return true;
}

void CameraDetectionSpecificHeader::InternalSwap(CameraDetectionSpecificHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(number_of_valid_points_, other->number_of_valid_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDetectionSpecificHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraDetectionData::InitAsDefaultInstance() {
  ::osi3::_CameraDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::SensorDetectionHeader*>(
      ::osi3::SensorDetectionHeader::internal_default_instance());
  ::osi3::_CameraDetectionData_default_instance_._instance.get_mutable()->specific_header_ = const_cast< ::osi3::CameraDetectionSpecificHeader*>(
      ::osi3::CameraDetectionSpecificHeader::internal_default_instance());
}
class CameraDetectionData::_Internal {
 public:
  static const ::osi3::SensorDetectionHeader& header(const CameraDetectionData* msg);
  static const ::osi3::CameraDetectionSpecificHeader& specific_header(const CameraDetectionData* msg);
};

const ::osi3::SensorDetectionHeader&
CameraDetectionData::_Internal::header(const CameraDetectionData* msg) {
  return *msg->header_;
}
const ::osi3::CameraDetectionSpecificHeader&
CameraDetectionData::_Internal::specific_header(const CameraDetectionData* msg) {
  return *msg->specific_header_;
}
CameraDetectionData::CameraDetectionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraDetectionData)
}
CameraDetectionData::CameraDetectionData(const CameraDetectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      detection_(from.detection_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::SensorDetectionHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_specific_header()) {
    specific_header_ = new ::osi3::CameraDetectionSpecificHeader(*from.specific_header_);
  } else {
    specific_header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.CameraDetectionData)
}

void CameraDetectionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraDetectionData_osi_5ffeaturedata_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specific_header_) -
      reinterpret_cast<char*>(&header_)) + sizeof(specific_header_));
}

CameraDetectionData::~CameraDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.CameraDetectionData)
  SharedDtor();
}

void CameraDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete specific_header_;
}

void CameraDetectionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraDetectionData& CameraDetectionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraDetectionData_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void CameraDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detection_.Clear();
  point_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && specific_header_ != nullptr) {
    delete specific_header_;
  }
  specific_header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraDetectionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.CameraDetection detection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .osi3.CameraDetectionSpecificHeader specific_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_specific_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.CameraPoint point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraDetectionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraDetectionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.SensorDetectionHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraDetection detection = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.CameraDetectionSpecificHeader specific_header = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_specific_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraPoint point = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraDetectionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraDetectionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .osi3.CameraDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->detection(static_cast<int>(i)),
      output);
  }

  // .osi3.CameraDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::specific_header(this), output);
  }

  // repeated .osi3.CameraPoint point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraDetectionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDetectionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .osi3.CameraDetection detection = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->detection_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->detection(static_cast<int>(i)), target);
  }

  // .osi3.CameraDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::specific_header(this), target);
  }

  // repeated .osi3.CameraPoint point = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->point(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraDetectionData)
  return target;
}

size_t CameraDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraDetectionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.CameraDetection detection = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->detection(static_cast<int>(i)));
    }
  }

  // repeated .osi3.CameraPoint point = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  // .osi3.SensorDetectionHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .osi3.CameraDetectionSpecificHeader specific_header = 3;
  if (this->has_specific_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specific_header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDetectionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDetectionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDetectionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraDetectionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraDetectionData)
    MergeFrom(*source);
  }
}

void CameraDetectionData::MergeFrom(const CameraDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detection_.MergeFrom(from.detection_);
  point_.MergeFrom(from.point_);
  if (from.has_header()) {
    mutable_header()->::osi3::SensorDetectionHeader::MergeFrom(from.header());
  }
  if (from.has_specific_header()) {
    mutable_specific_header()->::osi3::CameraDetectionSpecificHeader::MergeFrom(from.specific_header());
  }
}

void CameraDetectionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDetectionData::CopyFrom(const CameraDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetectionData::IsInitialized() const {
  return true;
}

void CameraDetectionData::InternalSwap(CameraDetectionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&detection_)->InternalSwap(CastToBase(&other->detection_));
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(header_, other->header_);
  swap(specific_header_, other->specific_header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDetectionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraDetection::InitAsDefaultInstance() {
  ::osi3::_CameraDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_CameraDetection_default_instance_._instance.get_mutable()->time_difference_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_CameraDetection_default_instance_._instance.get_mutable()->ambiguity_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_CameraDetection_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class CameraDetection::_Internal {
 public:
  static const ::osi3::Identifier& object_id(const CameraDetection* msg);
  static const ::osi3::Timestamp& time_difference(const CameraDetection* msg);
  static const ::osi3::Identifier& ambiguity_id(const CameraDetection* msg);
  static const ::osi3::ColorDescription& color_description(const CameraDetection* msg);
};

const ::osi3::Identifier&
CameraDetection::_Internal::object_id(const CameraDetection* msg) {
  return *msg->object_id_;
}
const ::osi3::Timestamp&
CameraDetection::_Internal::time_difference(const CameraDetection* msg) {
  return *msg->time_difference_;
}
const ::osi3::Identifier&
CameraDetection::_Internal::ambiguity_id(const CameraDetection* msg) {
  return *msg->ambiguity_id_;
}
const ::osi3::ColorDescription&
CameraDetection::_Internal::color_description(const CameraDetection* msg) {
  return *msg->color_description_;
}
void CameraDetection::clear_object_id() {
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
}
void CameraDetection::clear_time_difference() {
  if (GetArenaNoVirtual() == nullptr && time_difference_ != nullptr) {
    delete time_difference_;
  }
  time_difference_ = nullptr;
}
void CameraDetection::clear_ambiguity_id() {
  if (GetArenaNoVirtual() == nullptr && ambiguity_id_ != nullptr) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = nullptr;
}
void CameraDetection::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
CameraDetection::CameraDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraDetection)
}
CameraDetection::CameraDetection(const CameraDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  if (from.has_time_difference()) {
    time_difference_ = new ::osi3::Timestamp(*from.time_difference_);
  } else {
    time_difference_ = nullptr;
  }
  if (from.has_ambiguity_id()) {
    ambiguity_id_ = new ::osi3::Identifier(*from.ambiguity_id_);
  } else {
    ambiguity_id_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_points_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(number_of_points_));
  // @@protoc_insertion_point(copy_constructor:osi3.CameraDetection)
}

void CameraDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraDetection_osi_5ffeaturedata_2eproto.base);
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_points_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(number_of_points_));
}

CameraDetection::~CameraDetection() {
  // @@protoc_insertion_point(destructor:osi3.CameraDetection)
  SharedDtor();
}

void CameraDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete time_difference_;
  if (this != internal_default_instance()) delete ambiguity_id_;
  if (this != internal_default_instance()) delete color_description_;
}

void CameraDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraDetection& CameraDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraDetection_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void CameraDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_difference_ != nullptr) {
    delete time_difference_;
  }
  time_difference_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ambiguity_id_ != nullptr) {
    delete ambiguity_id_;
  }
  ambiguity_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_points_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(number_of_points_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_object_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp time_difference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_time_difference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_image_shape_type(static_cast<::osi3::CameraDetection_ImageShapeType>(val));
        } else goto handle_unusual;
        continue;
      // bool shape_classification_background = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          shape_classification_background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_foreground = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          shape_classification_foreground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_flat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          shape_classification_flat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_upright = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          shape_classification_upright_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_ground = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          shape_classification_ground_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_sky = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          shape_classification_sky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_vegetation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          shape_classification_vegetation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_road = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          shape_classification_road_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_non_driving_lane = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          shape_classification_non_driving_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_non_road = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          shape_classification_non_road_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_stationary_object = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          shape_classification_stationary_object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_moving_object = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          shape_classification_moving_object_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_landmark = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          shape_classification_landmark_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_traffic_sign = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          shape_classification_traffic_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_traffic_light = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          shape_classification_traffic_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_road_marking = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          shape_classification_road_marking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_vehicle = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          shape_classification_vehicle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_pedestrian = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          shape_classification_pedestrian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_animal = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          shape_classification_animal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_pedestrian_front = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          shape_classification_pedestrian_front_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_pedestrian_side = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          shape_classification_pedestrian_side_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool shape_classification_pedestrian_rear = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          shape_classification_pedestrian_rear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double shape_classification_probability = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          shape_classification_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.CameraDetection.Color color = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_color(static_cast<::osi3::CameraDetection_Color>(val));
        } else goto handle_unusual;
        continue;
      // double color_probability = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          color_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier ambiguity_id = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_ambiguity_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 first_point_index = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          first_point_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_points = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          number_of_points_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp time_difference = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_difference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_image_shape_type(static_cast< ::osi3::CameraDetection_ImageShapeType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_background = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_background_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_foreground = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_foreground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_flat = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_flat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_upright = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_upright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_ground = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_ground_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_sky = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_sky_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_vegetation = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_vegetation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_road = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_road_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_non_driving_lane = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_non_driving_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_non_road = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_non_road_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_stationary_object = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_stationary_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_moving_object = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_moving_object_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_landmark = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_landmark_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_traffic_sign = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_traffic_sign_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_traffic_light = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_traffic_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_road_marking = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_road_marking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_vehicle = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_vehicle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_animal = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_animal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian_front = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_front_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian_side = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shape_classification_pedestrian_rear = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shape_classification_pedestrian_rear_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double shape_classification_probability = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (217 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shape_classification_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.CameraDetection.Color color = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (224 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::CameraDetection_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double color_probability = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (233 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &color_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier ambiguity_id = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ambiguity_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 first_point_index = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (248 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_point_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_points = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (256 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::object_id(this), output);
  }

  // .osi3.Timestamp time_difference = 3;
  if (this->has_time_difference()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::time_difference(this), output);
  }

  // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
  if (this->image_shape_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->image_shape_type(), output);
  }

  // bool shape_classification_background = 5;
  if (this->shape_classification_background() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->shape_classification_background(), output);
  }

  // bool shape_classification_foreground = 6;
  if (this->shape_classification_foreground() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->shape_classification_foreground(), output);
  }

  // bool shape_classification_flat = 7;
  if (this->shape_classification_flat() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->shape_classification_flat(), output);
  }

  // bool shape_classification_upright = 8;
  if (this->shape_classification_upright() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->shape_classification_upright(), output);
  }

  // bool shape_classification_ground = 9;
  if (this->shape_classification_ground() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(9, this->shape_classification_ground(), output);
  }

  // bool shape_classification_sky = 10;
  if (this->shape_classification_sky() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(10, this->shape_classification_sky(), output);
  }

  // bool shape_classification_vegetation = 11;
  if (this->shape_classification_vegetation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->shape_classification_vegetation(), output);
  }

  // bool shape_classification_road = 12;
  if (this->shape_classification_road() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(12, this->shape_classification_road(), output);
  }

  // bool shape_classification_non_driving_lane = 13;
  if (this->shape_classification_non_driving_lane() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(13, this->shape_classification_non_driving_lane(), output);
  }

  // bool shape_classification_non_road = 14;
  if (this->shape_classification_non_road() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(14, this->shape_classification_non_road(), output);
  }

  // bool shape_classification_stationary_object = 15;
  if (this->shape_classification_stationary_object() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(15, this->shape_classification_stationary_object(), output);
  }

  // bool shape_classification_moving_object = 16;
  if (this->shape_classification_moving_object() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(16, this->shape_classification_moving_object(), output);
  }

  // bool shape_classification_landmark = 17;
  if (this->shape_classification_landmark() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->shape_classification_landmark(), output);
  }

  // bool shape_classification_traffic_sign = 18;
  if (this->shape_classification_traffic_sign() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(18, this->shape_classification_traffic_sign(), output);
  }

  // bool shape_classification_traffic_light = 19;
  if (this->shape_classification_traffic_light() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->shape_classification_traffic_light(), output);
  }

  // bool shape_classification_road_marking = 20;
  if (this->shape_classification_road_marking() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->shape_classification_road_marking(), output);
  }

  // bool shape_classification_vehicle = 21;
  if (this->shape_classification_vehicle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->shape_classification_vehicle(), output);
  }

  // bool shape_classification_pedestrian = 22;
  if (this->shape_classification_pedestrian() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(22, this->shape_classification_pedestrian(), output);
  }

  // bool shape_classification_animal = 23;
  if (this->shape_classification_animal() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(23, this->shape_classification_animal(), output);
  }

  // bool shape_classification_pedestrian_front = 24;
  if (this->shape_classification_pedestrian_front() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(24, this->shape_classification_pedestrian_front(), output);
  }

  // bool shape_classification_pedestrian_side = 25;
  if (this->shape_classification_pedestrian_side() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(25, this->shape_classification_pedestrian_side(), output);
  }

  // bool shape_classification_pedestrian_rear = 26;
  if (this->shape_classification_pedestrian_rear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->shape_classification_pedestrian_rear(), output);
  }

  // double shape_classification_probability = 27;
  if (!(this->shape_classification_probability() <= 0 && this->shape_classification_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(27, this->shape_classification_probability(), output);
  }

  // .osi3.CameraDetection.Color color = 28;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      28, this->color(), output);
  }

  // double color_probability = 29;
  if (!(this->color_probability() <= 0 && this->color_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(29, this->color_probability(), output);
  }

  // .osi3.Identifier ambiguity_id = 30;
  if (this->has_ambiguity_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, _Internal::ambiguity_id(this), output);
  }

  // uint32 first_point_index = 31;
  if (this->first_point_index() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(31, this->first_point_index(), output);
  }

  // uint32 number_of_points = 32;
  if (this->number_of_points() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(32, this->number_of_points(), output);
  }

  // .osi3.ColorDescription color_description = 33;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraDetection)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDetection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::object_id(this), target);
  }

  // .osi3.Timestamp time_difference = 3;
  if (this->has_time_difference()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::time_difference(this), target);
  }

  // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
  if (this->image_shape_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->image_shape_type(), target);
  }

  // bool shape_classification_background = 5;
  if (this->shape_classification_background() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->shape_classification_background(), target);
  }

  // bool shape_classification_foreground = 6;
  if (this->shape_classification_foreground() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->shape_classification_foreground(), target);
  }

  // bool shape_classification_flat = 7;
  if (this->shape_classification_flat() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->shape_classification_flat(), target);
  }

  // bool shape_classification_upright = 8;
  if (this->shape_classification_upright() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->shape_classification_upright(), target);
  }

  // bool shape_classification_ground = 9;
  if (this->shape_classification_ground() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->shape_classification_ground(), target);
  }

  // bool shape_classification_sky = 10;
  if (this->shape_classification_sky() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->shape_classification_sky(), target);
  }

  // bool shape_classification_vegetation = 11;
  if (this->shape_classification_vegetation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->shape_classification_vegetation(), target);
  }

  // bool shape_classification_road = 12;
  if (this->shape_classification_road() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->shape_classification_road(), target);
  }

  // bool shape_classification_non_driving_lane = 13;
  if (this->shape_classification_non_driving_lane() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->shape_classification_non_driving_lane(), target);
  }

  // bool shape_classification_non_road = 14;
  if (this->shape_classification_non_road() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->shape_classification_non_road(), target);
  }

  // bool shape_classification_stationary_object = 15;
  if (this->shape_classification_stationary_object() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->shape_classification_stationary_object(), target);
  }

  // bool shape_classification_moving_object = 16;
  if (this->shape_classification_moving_object() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->shape_classification_moving_object(), target);
  }

  // bool shape_classification_landmark = 17;
  if (this->shape_classification_landmark() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->shape_classification_landmark(), target);
  }

  // bool shape_classification_traffic_sign = 18;
  if (this->shape_classification_traffic_sign() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->shape_classification_traffic_sign(), target);
  }

  // bool shape_classification_traffic_light = 19;
  if (this->shape_classification_traffic_light() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->shape_classification_traffic_light(), target);
  }

  // bool shape_classification_road_marking = 20;
  if (this->shape_classification_road_marking() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->shape_classification_road_marking(), target);
  }

  // bool shape_classification_vehicle = 21;
  if (this->shape_classification_vehicle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->shape_classification_vehicle(), target);
  }

  // bool shape_classification_pedestrian = 22;
  if (this->shape_classification_pedestrian() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->shape_classification_pedestrian(), target);
  }

  // bool shape_classification_animal = 23;
  if (this->shape_classification_animal() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->shape_classification_animal(), target);
  }

  // bool shape_classification_pedestrian_front = 24;
  if (this->shape_classification_pedestrian_front() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->shape_classification_pedestrian_front(), target);
  }

  // bool shape_classification_pedestrian_side = 25;
  if (this->shape_classification_pedestrian_side() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->shape_classification_pedestrian_side(), target);
  }

  // bool shape_classification_pedestrian_rear = 26;
  if (this->shape_classification_pedestrian_rear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->shape_classification_pedestrian_rear(), target);
  }

  // double shape_classification_probability = 27;
  if (!(this->shape_classification_probability() <= 0 && this->shape_classification_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->shape_classification_probability(), target);
  }

  // .osi3.CameraDetection.Color color = 28;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->color(), target);
  }

  // double color_probability = 29;
  if (!(this->color_probability() <= 0 && this->color_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->color_probability(), target);
  }

  // .osi3.Identifier ambiguity_id = 30;
  if (this->has_ambiguity_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, _Internal::ambiguity_id(this), target);
  }

  // uint32 first_point_index = 31;
  if (this->first_point_index() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->first_point_index(), target);
  }

  // uint32 number_of_points = 32;
  if (this->number_of_points() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->number_of_points(), target);
  }

  // .osi3.ColorDescription color_description = 33;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        33, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraDetection)
  return target;
}

size_t CameraDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // .osi3.Timestamp time_difference = 3;
  if (this->has_time_difference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_difference_);
  }

  // .osi3.Identifier ambiguity_id = 30;
  if (this->has_ambiguity_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ambiguity_id_);
  }

  // .osi3.ColorDescription color_description = 33;
  if (this->has_color_description()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.CameraDetection.ImageShapeType image_shape_type = 4;
  if (this->image_shape_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->image_shape_type());
  }

  // bool shape_classification_background = 5;
  if (this->shape_classification_background() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_foreground = 6;
  if (this->shape_classification_foreground() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_flat = 7;
  if (this->shape_classification_flat() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_upright = 8;
  if (this->shape_classification_upright() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_ground = 9;
  if (this->shape_classification_ground() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_sky = 10;
  if (this->shape_classification_sky() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_vegetation = 11;
  if (this->shape_classification_vegetation() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_road = 12;
  if (this->shape_classification_road() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_non_driving_lane = 13;
  if (this->shape_classification_non_driving_lane() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_non_road = 14;
  if (this->shape_classification_non_road() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_stationary_object = 15;
  if (this->shape_classification_stationary_object() != 0) {
    total_size += 1 + 1;
  }

  // bool shape_classification_moving_object = 16;
  if (this->shape_classification_moving_object() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_landmark = 17;
  if (this->shape_classification_landmark() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_traffic_sign = 18;
  if (this->shape_classification_traffic_sign() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_traffic_light = 19;
  if (this->shape_classification_traffic_light() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_road_marking = 20;
  if (this->shape_classification_road_marking() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_vehicle = 21;
  if (this->shape_classification_vehicle() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian = 22;
  if (this->shape_classification_pedestrian() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_animal = 23;
  if (this->shape_classification_animal() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian_front = 24;
  if (this->shape_classification_pedestrian_front() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian_side = 25;
  if (this->shape_classification_pedestrian_side() != 0) {
    total_size += 2 + 1;
  }

  // bool shape_classification_pedestrian_rear = 26;
  if (this->shape_classification_pedestrian_rear() != 0) {
    total_size += 2 + 1;
  }

  // .osi3.CameraDetection.Color color = 28;
  if (this->color() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color());
  }

  // double shape_classification_probability = 27;
  if (!(this->shape_classification_probability() <= 0 && this->shape_classification_probability() >= 0)) {
    total_size += 2 + 8;
  }

  // double color_probability = 29;
  if (!(this->color_probability() <= 0 && this->color_probability() >= 0)) {
    total_size += 2 + 8;
  }

  // uint32 first_point_index = 31;
  if (this->first_point_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->first_point_index());
  }

  // uint32 number_of_points = 32;
  if (this->number_of_points() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_points());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraDetection)
    MergeFrom(*source);
  }
}

void CameraDetection::MergeFrom(const CameraDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_time_difference()) {
    mutable_time_difference()->::osi3::Timestamp::MergeFrom(from.time_difference());
  }
  if (from.has_ambiguity_id()) {
    mutable_ambiguity_id()->::osi3::Identifier::MergeFrom(from.ambiguity_id());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
  if (from.image_shape_type() != 0) {
    set_image_shape_type(from.image_shape_type());
  }
  if (from.shape_classification_background() != 0) {
    set_shape_classification_background(from.shape_classification_background());
  }
  if (from.shape_classification_foreground() != 0) {
    set_shape_classification_foreground(from.shape_classification_foreground());
  }
  if (from.shape_classification_flat() != 0) {
    set_shape_classification_flat(from.shape_classification_flat());
  }
  if (from.shape_classification_upright() != 0) {
    set_shape_classification_upright(from.shape_classification_upright());
  }
  if (from.shape_classification_ground() != 0) {
    set_shape_classification_ground(from.shape_classification_ground());
  }
  if (from.shape_classification_sky() != 0) {
    set_shape_classification_sky(from.shape_classification_sky());
  }
  if (from.shape_classification_vegetation() != 0) {
    set_shape_classification_vegetation(from.shape_classification_vegetation());
  }
  if (from.shape_classification_road() != 0) {
    set_shape_classification_road(from.shape_classification_road());
  }
  if (from.shape_classification_non_driving_lane() != 0) {
    set_shape_classification_non_driving_lane(from.shape_classification_non_driving_lane());
  }
  if (from.shape_classification_non_road() != 0) {
    set_shape_classification_non_road(from.shape_classification_non_road());
  }
  if (from.shape_classification_stationary_object() != 0) {
    set_shape_classification_stationary_object(from.shape_classification_stationary_object());
  }
  if (from.shape_classification_moving_object() != 0) {
    set_shape_classification_moving_object(from.shape_classification_moving_object());
  }
  if (from.shape_classification_landmark() != 0) {
    set_shape_classification_landmark(from.shape_classification_landmark());
  }
  if (from.shape_classification_traffic_sign() != 0) {
    set_shape_classification_traffic_sign(from.shape_classification_traffic_sign());
  }
  if (from.shape_classification_traffic_light() != 0) {
    set_shape_classification_traffic_light(from.shape_classification_traffic_light());
  }
  if (from.shape_classification_road_marking() != 0) {
    set_shape_classification_road_marking(from.shape_classification_road_marking());
  }
  if (from.shape_classification_vehicle() != 0) {
    set_shape_classification_vehicle(from.shape_classification_vehicle());
  }
  if (from.shape_classification_pedestrian() != 0) {
    set_shape_classification_pedestrian(from.shape_classification_pedestrian());
  }
  if (from.shape_classification_animal() != 0) {
    set_shape_classification_animal(from.shape_classification_animal());
  }
  if (from.shape_classification_pedestrian_front() != 0) {
    set_shape_classification_pedestrian_front(from.shape_classification_pedestrian_front());
  }
  if (from.shape_classification_pedestrian_side() != 0) {
    set_shape_classification_pedestrian_side(from.shape_classification_pedestrian_side());
  }
  if (from.shape_classification_pedestrian_rear() != 0) {
    set_shape_classification_pedestrian_rear(from.shape_classification_pedestrian_rear());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (!(from.shape_classification_probability() <= 0 && from.shape_classification_probability() >= 0)) {
    set_shape_classification_probability(from.shape_classification_probability());
  }
  if (!(from.color_probability() <= 0 && from.color_probability() >= 0)) {
    set_color_probability(from.color_probability());
  }
  if (from.first_point_index() != 0) {
    set_first_point_index(from.first_point_index());
  }
  if (from.number_of_points() != 0) {
    set_number_of_points(from.number_of_points());
  }
}

void CameraDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDetection::CopyFrom(const CameraDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDetection::IsInitialized() const {
  return true;
}

void CameraDetection::InternalSwap(CameraDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(object_id_, other->object_id_);
  swap(time_difference_, other->time_difference_);
  swap(ambiguity_id_, other->ambiguity_id_);
  swap(color_description_, other->color_description_);
  swap(existence_probability_, other->existence_probability_);
  swap(image_shape_type_, other->image_shape_type_);
  swap(shape_classification_background_, other->shape_classification_background_);
  swap(shape_classification_foreground_, other->shape_classification_foreground_);
  swap(shape_classification_flat_, other->shape_classification_flat_);
  swap(shape_classification_upright_, other->shape_classification_upright_);
  swap(shape_classification_ground_, other->shape_classification_ground_);
  swap(shape_classification_sky_, other->shape_classification_sky_);
  swap(shape_classification_vegetation_, other->shape_classification_vegetation_);
  swap(shape_classification_road_, other->shape_classification_road_);
  swap(shape_classification_non_driving_lane_, other->shape_classification_non_driving_lane_);
  swap(shape_classification_non_road_, other->shape_classification_non_road_);
  swap(shape_classification_stationary_object_, other->shape_classification_stationary_object_);
  swap(shape_classification_moving_object_, other->shape_classification_moving_object_);
  swap(shape_classification_landmark_, other->shape_classification_landmark_);
  swap(shape_classification_traffic_sign_, other->shape_classification_traffic_sign_);
  swap(shape_classification_traffic_light_, other->shape_classification_traffic_light_);
  swap(shape_classification_road_marking_, other->shape_classification_road_marking_);
  swap(shape_classification_vehicle_, other->shape_classification_vehicle_);
  swap(shape_classification_pedestrian_, other->shape_classification_pedestrian_);
  swap(shape_classification_animal_, other->shape_classification_animal_);
  swap(shape_classification_pedestrian_front_, other->shape_classification_pedestrian_front_);
  swap(shape_classification_pedestrian_side_, other->shape_classification_pedestrian_side_);
  swap(shape_classification_pedestrian_rear_, other->shape_classification_pedestrian_rear_);
  swap(color_, other->color_);
  swap(shape_classification_probability_, other->shape_classification_probability_);
  swap(color_probability_, other->color_probability_);
  swap(first_point_index_, other->first_point_index_);
  swap(number_of_points_, other->number_of_points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraPoint::InitAsDefaultInstance() {
  ::osi3::_CameraPoint_default_instance_._instance.get_mutable()->point_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
  ::osi3::_CameraPoint_default_instance_._instance.get_mutable()->point_rmse_ = const_cast< ::osi3::Spherical3d*>(
      ::osi3::Spherical3d::internal_default_instance());
}
class CameraPoint::_Internal {
 public:
  static const ::osi3::Spherical3d& point(const CameraPoint* msg);
  static const ::osi3::Spherical3d& point_rmse(const CameraPoint* msg);
};

const ::osi3::Spherical3d&
CameraPoint::_Internal::point(const CameraPoint* msg) {
  return *msg->point_;
}
const ::osi3::Spherical3d&
CameraPoint::_Internal::point_rmse(const CameraPoint* msg) {
  return *msg->point_rmse_;
}
void CameraPoint::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
void CameraPoint::clear_point_rmse() {
  if (GetArenaNoVirtual() == nullptr && point_rmse_ != nullptr) {
    delete point_rmse_;
  }
  point_rmse_ = nullptr;
}
CameraPoint::CameraPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraPoint)
}
CameraPoint::CameraPoint(const CameraPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point()) {
    point_ = new ::osi3::Spherical3d(*from.point_);
  } else {
    point_ = nullptr;
  }
  if (from.has_point_rmse()) {
    point_rmse_ = new ::osi3::Spherical3d(*from.point_rmse_);
  } else {
    point_rmse_ = nullptr;
  }
  existence_probability_ = from.existence_probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.CameraPoint)
}

void CameraPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraPoint_osi_5ffeaturedata_2eproto.base);
  ::memset(&point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&existence_probability_) -
      reinterpret_cast<char*>(&point_)) + sizeof(existence_probability_));
}

CameraPoint::~CameraPoint() {
  // @@protoc_insertion_point(destructor:osi3.CameraPoint)
  SharedDtor();
}

void CameraPoint::SharedDtor() {
  if (this != internal_default_instance()) delete point_;
  if (this != internal_default_instance()) delete point_rmse_;
}

void CameraPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraPoint& CameraPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraPoint_osi_5ffeaturedata_2eproto.base);
  return *internal_default_instance();
}


void CameraPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_rmse_ != nullptr) {
    delete point_rmse_;
  }
  point_rmse_ = nullptr;
  existence_probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Spherical3d point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Spherical3d point_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_point_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Spherical3d point_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_point_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Spherical3d point = 2;
  if (this->has_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::point(this), output);
  }

  // .osi3.Spherical3d point_rmse = 3;
  if (this->has_point_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::point_rmse(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Spherical3d point = 2;
  if (this->has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::point(this), target);
  }

  // .osi3.Spherical3d point_rmse = 3;
  if (this->has_point_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::point_rmse(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraPoint)
  return target;
}

size_t CameraPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Spherical3d point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  // .osi3.Spherical3d point_rmse = 3;
  if (this->has_point_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_rmse_);
  }

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraPoint)
    MergeFrom(*source);
  }
}

void CameraPoint::MergeFrom(const CameraPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    mutable_point()->::osi3::Spherical3d::MergeFrom(from.point());
  }
  if (from.has_point_rmse()) {
    mutable_point_rmse()->::osi3::Spherical3d::MergeFrom(from.point_rmse());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
}

void CameraPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraPoint::CopyFrom(const CameraPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPoint::IsInitialized() const {
  return true;
}

void CameraPoint::InternalSwap(CameraPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(point_, other->point_);
  swap(point_rmse_, other->point_rmse_);
  swap(existence_probability_, other->existence_probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::FeatureData* Arena::CreateMaybeMessage< ::osi3::FeatureData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::FeatureData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::SensorDetectionHeader* Arena::CreateMaybeMessage< ::osi3::SensorDetectionHeader >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::SensorDetectionHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarDetectionData* Arena::CreateMaybeMessage< ::osi3::RadarDetectionData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::RadarDetectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarDetection* Arena::CreateMaybeMessage< ::osi3::RadarDetection >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::RadarDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LidarDetectionData* Arena::CreateMaybeMessage< ::osi3::LidarDetectionData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LidarDetectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LidarDetection* Arena::CreateMaybeMessage< ::osi3::LidarDetection >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LidarDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicDetectionSpecificHeader* Arena::CreateMaybeMessage< ::osi3::UltrasonicDetectionSpecificHeader >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::UltrasonicDetectionSpecificHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicDetectionData* Arena::CreateMaybeMessage< ::osi3::UltrasonicDetectionData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::UltrasonicDetectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicDetection* Arena::CreateMaybeMessage< ::osi3::UltrasonicDetection >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::UltrasonicDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicIndirectDetection* Arena::CreateMaybeMessage< ::osi3::UltrasonicIndirectDetection >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::UltrasonicIndirectDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraDetectionSpecificHeader* Arena::CreateMaybeMessage< ::osi3::CameraDetectionSpecificHeader >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::CameraDetectionSpecificHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraDetectionData* Arena::CreateMaybeMessage< ::osi3::CameraDetectionData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::CameraDetectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraDetection* Arena::CreateMaybeMessage< ::osi3::CameraDetection >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::CameraDetection >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraPoint* Arena::CreateMaybeMessage< ::osi3::CameraPoint >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::CameraPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
