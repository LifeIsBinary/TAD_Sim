// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedtrafficsign.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedtrafficsign_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedtrafficsign_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
#include "osi_trafficsign.pb.h"
#include "osi_detectedobject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficsign_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fdetectedtrafficsign_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedtrafficsign_2eproto;
namespace osi3 {
class DetectedTrafficSign;
class DetectedTrafficSignDefaultTypeInternal;
extern DetectedTrafficSignDefaultTypeInternal _DetectedTrafficSign_default_instance_;
class DetectedTrafficSign_DetectedMainSign;
class DetectedTrafficSign_DetectedMainSignDefaultTypeInternal;
extern DetectedTrafficSign_DetectedMainSignDefaultTypeInternal _DetectedTrafficSign_DetectedMainSign_default_instance_;
class DetectedTrafficSign_DetectedMainSign_CandidateMainSign;
class DetectedTrafficSign_DetectedMainSign_CandidateMainSignDefaultTypeInternal;
extern DetectedTrafficSign_DetectedMainSign_CandidateMainSignDefaultTypeInternal _DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_;
class DetectedTrafficSign_DetectedSupplementarySign;
class DetectedTrafficSign_DetectedSupplementarySignDefaultTypeInternal;
extern DetectedTrafficSign_DetectedSupplementarySignDefaultTypeInternal _DetectedTrafficSign_DetectedSupplementarySign_default_instance_;
class DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign;
class DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySignDefaultTypeInternal;
extern DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySignDefaultTypeInternal _DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::DetectedTrafficSign* Arena::CreateMaybeMessage<::osi3::DetectedTrafficSign>(Arena*);
template<> ::osi3::DetectedTrafficSign_DetectedMainSign* Arena::CreateMaybeMessage<::osi3::DetectedTrafficSign_DetectedMainSign>(Arena*);
template<> ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign* Arena::CreateMaybeMessage<::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign>(Arena*);
template<> ::osi3::DetectedTrafficSign_DetectedSupplementarySign* Arena::CreateMaybeMessage<::osi3::DetectedTrafficSign_DetectedSupplementarySign>(Arena*);
template<> ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* Arena::CreateMaybeMessage<::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum DetectedTrafficSign_DetectedMainSign_Geometry : int {
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_UNKNOWN = 0,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_OTHER = 1,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_CIRCLE = 2,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_TRIANGLE_TOP = 3,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_TRIANGLE_DOWN = 4,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_SQUARE = 5,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_POLE = 6,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_RECTANGLE = 7,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_PLATE = 8,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_DIAMOND = 9,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_ARROW_LEFT = 10,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_ARROW_RIGHT = 11,
  DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_OCTAGON = 12,
  DetectedTrafficSign_DetectedMainSign_Geometry_DetectedTrafficSign_DetectedMainSign_Geometry_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DetectedTrafficSign_DetectedMainSign_Geometry_DetectedTrafficSign_DetectedMainSign_Geometry_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DetectedTrafficSign_DetectedMainSign_Geometry_IsValid(int value);
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign_Geometry_Geometry_MIN = DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_UNKNOWN;
constexpr DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign_Geometry_Geometry_MAX = DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_OCTAGON;
constexpr int DetectedTrafficSign_DetectedMainSign_Geometry_Geometry_ARRAYSIZE = DetectedTrafficSign_DetectedMainSign_Geometry_Geometry_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedTrafficSign_DetectedMainSign_Geometry_descriptor();
template<typename T>
inline const std::string& DetectedTrafficSign_DetectedMainSign_Geometry_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DetectedTrafficSign_DetectedMainSign_Geometry>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DetectedTrafficSign_DetectedMainSign_Geometry_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DetectedTrafficSign_DetectedMainSign_Geometry_descriptor(), enum_t_value);
}
inline bool DetectedTrafficSign_DetectedMainSign_Geometry_Parse(
    const std::string& name, DetectedTrafficSign_DetectedMainSign_Geometry* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DetectedTrafficSign_DetectedMainSign_Geometry>(
    DetectedTrafficSign_DetectedMainSign_Geometry_descriptor(), name, value);
}
// ===================================================================

class DetectedTrafficSign_DetectedMainSign_CandidateMainSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign) */ {
 public:
  DetectedTrafficSign_DetectedMainSign_CandidateMainSign();
  virtual ~DetectedTrafficSign_DetectedMainSign_CandidateMainSign();

  DetectedTrafficSign_DetectedMainSign_CandidateMainSign(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from);
  DetectedTrafficSign_DetectedMainSign_CandidateMainSign(DetectedTrafficSign_DetectedMainSign_CandidateMainSign&& from) noexcept
    : DetectedTrafficSign_DetectedMainSign_CandidateMainSign() {
    *this = ::std::move(from);
  }

  inline DetectedTrafficSign_DetectedMainSign_CandidateMainSign& operator=(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedTrafficSign_DetectedMainSign_CandidateMainSign& operator=(DetectedTrafficSign_DetectedMainSign_CandidateMainSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedTrafficSign_DetectedMainSign_CandidateMainSign* internal_default_instance() {
    return reinterpret_cast<const DetectedTrafficSign_DetectedMainSign_CandidateMainSign*>(
               &_DetectedTrafficSign_DetectedMainSign_CandidateMainSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectedTrafficSign_DetectedMainSign_CandidateMainSign& a, DetectedTrafficSign_DetectedMainSign_CandidateMainSign& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedTrafficSign_DetectedMainSign_CandidateMainSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedTrafficSign_DetectedMainSign_CandidateMainSign* New() const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedMainSign_CandidateMainSign>(nullptr);
  }

  DetectedTrafficSign_DetectedMainSign_CandidateMainSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedMainSign_CandidateMainSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from);
  void MergeFrom(const DetectedTrafficSign_DetectedMainSign_CandidateMainSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedTrafficSign_DetectedMainSign_CandidateMainSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdetectedtrafficsign_2eproto);
    return ::descriptor_table_osi_5fdetectedtrafficsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationFieldNumber = 2,
    kProbabilityFieldNumber = 1,
  };
  // .osi3.TrafficSign.MainSign.Classification classification = 2;
  bool has_classification() const;
  void clear_classification();
  const ::osi3::TrafficSign_MainSign_Classification& classification() const;
  ::osi3::TrafficSign_MainSign_Classification* release_classification();
  ::osi3::TrafficSign_MainSign_Classification* mutable_classification();
  void set_allocated_classification(::osi3::TrafficSign_MainSign_Classification* classification);

  // double probability = 1;
  void clear_probability();
  double probability() const;
  void set_probability(double value);

  // @@protoc_insertion_point(class_scope:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::TrafficSign_MainSign_Classification* classification_;
  double probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fdetectedtrafficsign_2eproto;
};
// -------------------------------------------------------------------

class DetectedTrafficSign_DetectedMainSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedTrafficSign.DetectedMainSign) */ {
 public:
  DetectedTrafficSign_DetectedMainSign();
  virtual ~DetectedTrafficSign_DetectedMainSign();

  DetectedTrafficSign_DetectedMainSign(const DetectedTrafficSign_DetectedMainSign& from);
  DetectedTrafficSign_DetectedMainSign(DetectedTrafficSign_DetectedMainSign&& from) noexcept
    : DetectedTrafficSign_DetectedMainSign() {
    *this = ::std::move(from);
  }

  inline DetectedTrafficSign_DetectedMainSign& operator=(const DetectedTrafficSign_DetectedMainSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedTrafficSign_DetectedMainSign& operator=(DetectedTrafficSign_DetectedMainSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedTrafficSign_DetectedMainSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedTrafficSign_DetectedMainSign* internal_default_instance() {
    return reinterpret_cast<const DetectedTrafficSign_DetectedMainSign*>(
               &_DetectedTrafficSign_DetectedMainSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectedTrafficSign_DetectedMainSign& a, DetectedTrafficSign_DetectedMainSign& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedTrafficSign_DetectedMainSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedTrafficSign_DetectedMainSign* New() const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedMainSign>(nullptr);
  }

  DetectedTrafficSign_DetectedMainSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedMainSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedTrafficSign_DetectedMainSign& from);
  void MergeFrom(const DetectedTrafficSign_DetectedMainSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedTrafficSign_DetectedMainSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedTrafficSign.DetectedMainSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdetectedtrafficsign_2eproto);
    return ::descriptor_table_osi_5fdetectedtrafficsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetectedTrafficSign_DetectedMainSign_CandidateMainSign CandidateMainSign;

  typedef DetectedTrafficSign_DetectedMainSign_Geometry Geometry;
  static constexpr Geometry GEOMETRY_UNKNOWN =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_UNKNOWN;
  static constexpr Geometry GEOMETRY_OTHER =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_OTHER;
  static constexpr Geometry GEOMETRY_CIRCLE =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_CIRCLE;
  static constexpr Geometry GEOMETRY_TRIANGLE_TOP =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_TRIANGLE_TOP;
  static constexpr Geometry GEOMETRY_TRIANGLE_DOWN =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_TRIANGLE_DOWN;
  static constexpr Geometry GEOMETRY_SQUARE =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_SQUARE;
  static constexpr Geometry GEOMETRY_POLE =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_POLE;
  static constexpr Geometry GEOMETRY_RECTANGLE =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_RECTANGLE;
  static constexpr Geometry GEOMETRY_PLATE =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_PLATE;
  static constexpr Geometry GEOMETRY_DIAMOND =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_DIAMOND;
  static constexpr Geometry GEOMETRY_ARROW_LEFT =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_ARROW_LEFT;
  static constexpr Geometry GEOMETRY_ARROW_RIGHT =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_ARROW_RIGHT;
  static constexpr Geometry GEOMETRY_OCTAGON =
    DetectedTrafficSign_DetectedMainSign_Geometry_GEOMETRY_OCTAGON;
  static inline bool Geometry_IsValid(int value) {
    return DetectedTrafficSign_DetectedMainSign_Geometry_IsValid(value);
  }
  static constexpr Geometry Geometry_MIN =
    DetectedTrafficSign_DetectedMainSign_Geometry_Geometry_MIN;
  static constexpr Geometry Geometry_MAX =
    DetectedTrafficSign_DetectedMainSign_Geometry_Geometry_MAX;
  static constexpr int Geometry_ARRAYSIZE =
    DetectedTrafficSign_DetectedMainSign_Geometry_Geometry_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Geometry_descriptor() {
    return DetectedTrafficSign_DetectedMainSign_Geometry_descriptor();
  }
  template<typename T>
  static inline const std::string& Geometry_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Geometry>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Geometry_Name.");
    return DetectedTrafficSign_DetectedMainSign_Geometry_Name(enum_t_value);
  }
  static inline bool Geometry_Parse(const std::string& name,
      Geometry* value) {
    return DetectedTrafficSign_DetectedMainSign_Geometry_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 1,
    kBaseFieldNumber = 2,
    kBaseRmseFieldNumber = 3,
    kGeometryFieldNumber = 4,
  };
  // repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
  int candidate_size() const;
  void clear_candidate();
  ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign* mutable_candidate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >*
      mutable_candidate();
  const ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign& candidate(int index) const;
  ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign* add_candidate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >&
      candidate() const;

  // .osi3.BaseStationary base = 2;
  bool has_base() const;
  void clear_base();
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* release_base();
  ::osi3::BaseStationary* mutable_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // .osi3.BaseStationary base_rmse = 3;
  bool has_base_rmse() const;
  void clear_base_rmse();
  const ::osi3::BaseStationary& base_rmse() const;
  ::osi3::BaseStationary* release_base_rmse();
  ::osi3::BaseStationary* mutable_base_rmse();
  void set_allocated_base_rmse(::osi3::BaseStationary* base_rmse);

  // .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
  void clear_geometry();
  ::osi3::DetectedTrafficSign_DetectedMainSign_Geometry geometry() const;
  void set_geometry(::osi3::DetectedTrafficSign_DetectedMainSign_Geometry value);

  // @@protoc_insertion_point(class_scope:osi3.DetectedTrafficSign.DetectedMainSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign > candidate_;
  ::osi3::BaseStationary* base_;
  ::osi3::BaseStationary* base_rmse_;
  int geometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fdetectedtrafficsign_2eproto;
};
// -------------------------------------------------------------------

class DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign) */ {
 public:
  DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign();
  virtual ~DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign();

  DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from);
  DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign&& from) noexcept
    : DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign() {
    *this = ::std::move(from);
  }

  inline DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& operator=(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& operator=(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* internal_default_instance() {
    return reinterpret_cast<const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign*>(
               &_DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& a, DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* New() const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign>(nullptr);
  }

  DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from);
  void MergeFrom(const DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdetectedtrafficsign_2eproto);
    return ::descriptor_table_osi_5fdetectedtrafficsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationFieldNumber = 2,
    kProbabilityFieldNumber = 1,
  };
  // .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
  bool has_classification() const;
  void clear_classification();
  const ::osi3::TrafficSign_SupplementarySign_Classification& classification() const;
  ::osi3::TrafficSign_SupplementarySign_Classification* release_classification();
  ::osi3::TrafficSign_SupplementarySign_Classification* mutable_classification();
  void set_allocated_classification(::osi3::TrafficSign_SupplementarySign_Classification* classification);

  // double probability = 1;
  void clear_probability();
  double probability() const;
  void set_probability(double value);

  // @@protoc_insertion_point(class_scope:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::TrafficSign_SupplementarySign_Classification* classification_;
  double probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fdetectedtrafficsign_2eproto;
};
// -------------------------------------------------------------------

class DetectedTrafficSign_DetectedSupplementarySign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedTrafficSign.DetectedSupplementarySign) */ {
 public:
  DetectedTrafficSign_DetectedSupplementarySign();
  virtual ~DetectedTrafficSign_DetectedSupplementarySign();

  DetectedTrafficSign_DetectedSupplementarySign(const DetectedTrafficSign_DetectedSupplementarySign& from);
  DetectedTrafficSign_DetectedSupplementarySign(DetectedTrafficSign_DetectedSupplementarySign&& from) noexcept
    : DetectedTrafficSign_DetectedSupplementarySign() {
    *this = ::std::move(from);
  }

  inline DetectedTrafficSign_DetectedSupplementarySign& operator=(const DetectedTrafficSign_DetectedSupplementarySign& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedTrafficSign_DetectedSupplementarySign& operator=(DetectedTrafficSign_DetectedSupplementarySign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedTrafficSign_DetectedSupplementarySign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedTrafficSign_DetectedSupplementarySign* internal_default_instance() {
    return reinterpret_cast<const DetectedTrafficSign_DetectedSupplementarySign*>(
               &_DetectedTrafficSign_DetectedSupplementarySign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DetectedTrafficSign_DetectedSupplementarySign& a, DetectedTrafficSign_DetectedSupplementarySign& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedTrafficSign_DetectedSupplementarySign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedTrafficSign_DetectedSupplementarySign* New() const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedSupplementarySign>(nullptr);
  }

  DetectedTrafficSign_DetectedSupplementarySign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedTrafficSign_DetectedSupplementarySign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedTrafficSign_DetectedSupplementarySign& from);
  void MergeFrom(const DetectedTrafficSign_DetectedSupplementarySign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedTrafficSign_DetectedSupplementarySign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedTrafficSign.DetectedSupplementarySign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdetectedtrafficsign_2eproto);
    return ::descriptor_table_osi_5fdetectedtrafficsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign CandidateSupplementarySign;

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 1,
    kBaseFieldNumber = 2,
    kBaseRmseFieldNumber = 3,
  };
  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
  int candidate_size() const;
  void clear_candidate();
  ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* mutable_candidate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >*
      mutable_candidate();
  const ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& candidate(int index) const;
  ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* add_candidate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >&
      candidate() const;

  // .osi3.BaseStationary base = 2;
  bool has_base() const;
  void clear_base();
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* release_base();
  ::osi3::BaseStationary* mutable_base();
  void set_allocated_base(::osi3::BaseStationary* base);

  // .osi3.BaseStationary base_rmse = 3;
  bool has_base_rmse() const;
  void clear_base_rmse();
  const ::osi3::BaseStationary& base_rmse() const;
  ::osi3::BaseStationary* release_base_rmse();
  ::osi3::BaseStationary* mutable_base_rmse();
  void set_allocated_base_rmse(::osi3::BaseStationary* base_rmse);

  // @@protoc_insertion_point(class_scope:osi3.DetectedTrafficSign.DetectedSupplementarySign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign > candidate_;
  ::osi3::BaseStationary* base_;
  ::osi3::BaseStationary* base_rmse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fdetectedtrafficsign_2eproto;
};
// -------------------------------------------------------------------

class DetectedTrafficSign :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedTrafficSign) */ {
 public:
  DetectedTrafficSign();
  virtual ~DetectedTrafficSign();

  DetectedTrafficSign(const DetectedTrafficSign& from);
  DetectedTrafficSign(DetectedTrafficSign&& from) noexcept
    : DetectedTrafficSign() {
    *this = ::std::move(from);
  }

  inline DetectedTrafficSign& operator=(const DetectedTrafficSign& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedTrafficSign& operator=(DetectedTrafficSign&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedTrafficSign& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedTrafficSign* internal_default_instance() {
    return reinterpret_cast<const DetectedTrafficSign*>(
               &_DetectedTrafficSign_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DetectedTrafficSign& a, DetectedTrafficSign& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedTrafficSign* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedTrafficSign* New() const final {
    return CreateMaybeMessage<DetectedTrafficSign>(nullptr);
  }

  DetectedTrafficSign* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedTrafficSign>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedTrafficSign& from);
  void MergeFrom(const DetectedTrafficSign& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedTrafficSign* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedTrafficSign";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdetectedtrafficsign_2eproto);
    return ::descriptor_table_osi_5fdetectedtrafficsign_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetectedTrafficSign_DetectedMainSign DetectedMainSign;
  typedef DetectedTrafficSign_DetectedSupplementarySign DetectedSupplementarySign;

  // accessors -------------------------------------------------------

  enum : int {
    kSupplementarySignFieldNumber = 3,
    kHeaderFieldNumber = 1,
    kMainSignFieldNumber = 2,
  };
  // repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
  int supplementary_sign_size() const;
  void clear_supplementary_sign();
  ::osi3::DetectedTrafficSign_DetectedSupplementarySign* mutable_supplementary_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >*
      mutable_supplementary_sign();
  const ::osi3::DetectedTrafficSign_DetectedSupplementarySign& supplementary_sign(int index) const;
  ::osi3::DetectedTrafficSign_DetectedSupplementarySign* add_supplementary_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >&
      supplementary_sign() const;

  // .osi3.DetectedItemHeader header = 1;
  bool has_header() const;
  void clear_header();
  const ::osi3::DetectedItemHeader& header() const;
  ::osi3::DetectedItemHeader* release_header();
  ::osi3::DetectedItemHeader* mutable_header();
  void set_allocated_header(::osi3::DetectedItemHeader* header);

  // .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
  bool has_main_sign() const;
  void clear_main_sign();
  const ::osi3::DetectedTrafficSign_DetectedMainSign& main_sign() const;
  ::osi3::DetectedTrafficSign_DetectedMainSign* release_main_sign();
  ::osi3::DetectedTrafficSign_DetectedMainSign* mutable_main_sign();
  void set_allocated_main_sign(::osi3::DetectedTrafficSign_DetectedMainSign* main_sign);

  // @@protoc_insertion_point(class_scope:osi3.DetectedTrafficSign)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign > supplementary_sign_;
  ::osi3::DetectedItemHeader* header_;
  ::osi3::DetectedTrafficSign_DetectedMainSign* main_sign_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fdetectedtrafficsign_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectedTrafficSign_DetectedMainSign_CandidateMainSign

// double probability = 1;
inline void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::clear_probability() {
  probability_ = 0;
}
inline double DetectedTrafficSign_DetectedMainSign_CandidateMainSign::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign.probability)
  return probability_;
}
inline void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::set_probability(double value) {
  
  probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign.probability)
}

// .osi3.TrafficSign.MainSign.Classification classification = 2;
inline bool DetectedTrafficSign_DetectedMainSign_CandidateMainSign::has_classification() const {
  return this != internal_default_instance() && classification_ != nullptr;
}
inline const ::osi3::TrafficSign_MainSign_Classification& DetectedTrafficSign_DetectedMainSign_CandidateMainSign::classification() const {
  const ::osi3::TrafficSign_MainSign_Classification* p = classification_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign.classification)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficSign_MainSign_Classification*>(
      &::osi3::_TrafficSign_MainSign_Classification_default_instance_);
}
inline ::osi3::TrafficSign_MainSign_Classification* DetectedTrafficSign_DetectedMainSign_CandidateMainSign::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign.classification)
  
  ::osi3::TrafficSign_MainSign_Classification* temp = classification_;
  classification_ = nullptr;
  return temp;
}
inline ::osi3::TrafficSign_MainSign_Classification* DetectedTrafficSign_DetectedMainSign_CandidateMainSign::mutable_classification() {
  
  if (classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficSign_MainSign_Classification>(GetArenaNoVirtual());
    classification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign.classification)
  return classification_;
}
inline void DetectedTrafficSign_DetectedMainSign_CandidateMainSign::set_allocated_classification(::osi3::TrafficSign_MainSign_Classification* classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification_);
  }
  if (classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    
  } else {
    
  }
  classification_ = classification;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign.classification)
}

// -------------------------------------------------------------------

// DetectedTrafficSign_DetectedMainSign

// repeated .osi3.DetectedTrafficSign.DetectedMainSign.CandidateMainSign candidate = 1;
inline int DetectedTrafficSign_DetectedMainSign::candidate_size() const {
  return candidate_.size();
}
inline void DetectedTrafficSign_DetectedMainSign::clear_candidate() {
  candidate_.Clear();
}
inline ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign* DetectedTrafficSign_DetectedMainSign::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedMainSign.candidate)
  return candidate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >*
DetectedTrafficSign_DetectedMainSign::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedTrafficSign.DetectedMainSign.candidate)
  return &candidate_;
}
inline const ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign& DetectedTrafficSign_DetectedMainSign::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedMainSign.candidate)
  return candidate_.Get(index);
}
inline ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign* DetectedTrafficSign_DetectedMainSign::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedTrafficSign.DetectedMainSign.candidate)
  return candidate_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedMainSign_CandidateMainSign >&
DetectedTrafficSign_DetectedMainSign::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedTrafficSign.DetectedMainSign.candidate)
  return candidate_;
}

// .osi3.BaseStationary base = 2;
inline bool DetectedTrafficSign_DetectedMainSign::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::osi3::BaseStationary& DetectedTrafficSign_DetectedMainSign::base() const {
  const ::osi3::BaseStationary* p = base_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedMainSign.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseStationary*>(
      &::osi3::_BaseStationary_default_instance_);
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedMainSign::release_base() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.DetectedMainSign.base)
  
  ::osi3::BaseStationary* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedMainSign::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseStationary>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedMainSign.base)
  return base_;
}
inline void DetectedTrafficSign_DetectedMainSign::set_allocated_base(::osi3::BaseStationary* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.DetectedMainSign.base)
}

// .osi3.BaseStationary base_rmse = 3;
inline bool DetectedTrafficSign_DetectedMainSign::has_base_rmse() const {
  return this != internal_default_instance() && base_rmse_ != nullptr;
}
inline const ::osi3::BaseStationary& DetectedTrafficSign_DetectedMainSign::base_rmse() const {
  const ::osi3::BaseStationary* p = base_rmse_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedMainSign.base_rmse)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseStationary*>(
      &::osi3::_BaseStationary_default_instance_);
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedMainSign::release_base_rmse() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.DetectedMainSign.base_rmse)
  
  ::osi3::BaseStationary* temp = base_rmse_;
  base_rmse_ = nullptr;
  return temp;
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedMainSign::mutable_base_rmse() {
  
  if (base_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseStationary>(GetArenaNoVirtual());
    base_rmse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedMainSign.base_rmse)
  return base_rmse_;
}
inline void DetectedTrafficSign_DetectedMainSign::set_allocated_base_rmse(::osi3::BaseStationary* base_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_rmse_);
  }
  if (base_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_rmse, submessage_arena);
    }
    
  } else {
    
  }
  base_rmse_ = base_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.DetectedMainSign.base_rmse)
}

// .osi3.DetectedTrafficSign.DetectedMainSign.Geometry geometry = 4;
inline void DetectedTrafficSign_DetectedMainSign::clear_geometry() {
  geometry_ = 0;
}
inline ::osi3::DetectedTrafficSign_DetectedMainSign_Geometry DetectedTrafficSign_DetectedMainSign::geometry() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedMainSign.geometry)
  return static_cast< ::osi3::DetectedTrafficSign_DetectedMainSign_Geometry >(geometry_);
}
inline void DetectedTrafficSign_DetectedMainSign::set_geometry(::osi3::DetectedTrafficSign_DetectedMainSign_Geometry value) {
  
  geometry_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedTrafficSign.DetectedMainSign.geometry)
}

// -------------------------------------------------------------------

// DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign

// double probability = 1;
inline void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::clear_probability() {
  probability_ = 0;
}
inline double DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign.probability)
  return probability_;
}
inline void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::set_probability(double value) {
  
  probability_ = value;
  // @@protoc_insertion_point(field_set:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign.probability)
}

// .osi3.TrafficSign.SupplementarySign.Classification classification = 2;
inline bool DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::has_classification() const {
  return this != internal_default_instance() && classification_ != nullptr;
}
inline const ::osi3::TrafficSign_SupplementarySign_Classification& DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::classification() const {
  const ::osi3::TrafficSign_SupplementarySign_Classification* p = classification_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign.classification)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficSign_SupplementarySign_Classification*>(
      &::osi3::_TrafficSign_SupplementarySign_Classification_default_instance_);
}
inline ::osi3::TrafficSign_SupplementarySign_Classification* DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign.classification)
  
  ::osi3::TrafficSign_SupplementarySign_Classification* temp = classification_;
  classification_ = nullptr;
  return temp;
}
inline ::osi3::TrafficSign_SupplementarySign_Classification* DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::mutable_classification() {
  
  if (classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficSign_SupplementarySign_Classification>(GetArenaNoVirtual());
    classification_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign.classification)
  return classification_;
}
inline void DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign::set_allocated_classification(::osi3::TrafficSign_SupplementarySign_Classification* classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification_);
  }
  if (classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    
  } else {
    
  }
  classification_ = classification;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign.classification)
}

// -------------------------------------------------------------------

// DetectedTrafficSign_DetectedSupplementarySign

// repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign.CandidateSupplementarySign candidate = 1;
inline int DetectedTrafficSign_DetectedSupplementarySign::candidate_size() const {
  return candidate_.size();
}
inline void DetectedTrafficSign_DetectedSupplementarySign::clear_candidate() {
  candidate_.Clear();
}
inline ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* DetectedTrafficSign_DetectedSupplementarySign::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedSupplementarySign.candidate)
  return candidate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >*
DetectedTrafficSign_DetectedSupplementarySign::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedTrafficSign.DetectedSupplementarySign.candidate)
  return &candidate_;
}
inline const ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign& DetectedTrafficSign_DetectedSupplementarySign::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedSupplementarySign.candidate)
  return candidate_.Get(index);
}
inline ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign* DetectedTrafficSign_DetectedSupplementarySign::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedTrafficSign.DetectedSupplementarySign.candidate)
  return candidate_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign_CandidateSupplementarySign >&
DetectedTrafficSign_DetectedSupplementarySign::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedTrafficSign.DetectedSupplementarySign.candidate)
  return candidate_;
}

// .osi3.BaseStationary base = 2;
inline bool DetectedTrafficSign_DetectedSupplementarySign::has_base() const {
  return this != internal_default_instance() && base_ != nullptr;
}
inline const ::osi3::BaseStationary& DetectedTrafficSign_DetectedSupplementarySign::base() const {
  const ::osi3::BaseStationary* p = base_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedSupplementarySign.base)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseStationary*>(
      &::osi3::_BaseStationary_default_instance_);
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedSupplementarySign::release_base() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.DetectedSupplementarySign.base)
  
  ::osi3::BaseStationary* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedSupplementarySign::mutable_base() {
  
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseStationary>(GetArenaNoVirtual());
    base_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedSupplementarySign.base)
  return base_;
}
inline void DetectedTrafficSign_DetectedSupplementarySign::set_allocated_base(::osi3::BaseStationary* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    
  } else {
    
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.DetectedSupplementarySign.base)
}

// .osi3.BaseStationary base_rmse = 3;
inline bool DetectedTrafficSign_DetectedSupplementarySign::has_base_rmse() const {
  return this != internal_default_instance() && base_rmse_ != nullptr;
}
inline const ::osi3::BaseStationary& DetectedTrafficSign_DetectedSupplementarySign::base_rmse() const {
  const ::osi3::BaseStationary* p = base_rmse_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.DetectedSupplementarySign.base_rmse)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseStationary*>(
      &::osi3::_BaseStationary_default_instance_);
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedSupplementarySign::release_base_rmse() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.DetectedSupplementarySign.base_rmse)
  
  ::osi3::BaseStationary* temp = base_rmse_;
  base_rmse_ = nullptr;
  return temp;
}
inline ::osi3::BaseStationary* DetectedTrafficSign_DetectedSupplementarySign::mutable_base_rmse() {
  
  if (base_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseStationary>(GetArenaNoVirtual());
    base_rmse_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.DetectedSupplementarySign.base_rmse)
  return base_rmse_;
}
inline void DetectedTrafficSign_DetectedSupplementarySign::set_allocated_base_rmse(::osi3::BaseStationary* base_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_rmse_);
  }
  if (base_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_rmse, submessage_arena);
    }
    
  } else {
    
  }
  base_rmse_ = base_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.DetectedSupplementarySign.base_rmse)
}

// -------------------------------------------------------------------

// DetectedTrafficSign

// .osi3.DetectedItemHeader header = 1;
inline bool DetectedTrafficSign::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::osi3::DetectedItemHeader& DetectedTrafficSign::header() const {
  const ::osi3::DetectedItemHeader* p = header_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::DetectedItemHeader*>(
      &::osi3::_DetectedItemHeader_default_instance_);
}
inline ::osi3::DetectedItemHeader* DetectedTrafficSign::release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.header)
  
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::osi3::DetectedItemHeader* DetectedTrafficSign::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::DetectedItemHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.header)
  return header_;
}
inline void DetectedTrafficSign::set_allocated_header(::osi3::DetectedItemHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.header)
}

// .osi3.DetectedTrafficSign.DetectedMainSign main_sign = 2;
inline bool DetectedTrafficSign::has_main_sign() const {
  return this != internal_default_instance() && main_sign_ != nullptr;
}
inline void DetectedTrafficSign::clear_main_sign() {
  if (GetArenaNoVirtual() == nullptr && main_sign_ != nullptr) {
    delete main_sign_;
  }
  main_sign_ = nullptr;
}
inline const ::osi3::DetectedTrafficSign_DetectedMainSign& DetectedTrafficSign::main_sign() const {
  const ::osi3::DetectedTrafficSign_DetectedMainSign* p = main_sign_;
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.main_sign)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::DetectedTrafficSign_DetectedMainSign*>(
      &::osi3::_DetectedTrafficSign_DetectedMainSign_default_instance_);
}
inline ::osi3::DetectedTrafficSign_DetectedMainSign* DetectedTrafficSign::release_main_sign() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficSign.main_sign)
  
  ::osi3::DetectedTrafficSign_DetectedMainSign* temp = main_sign_;
  main_sign_ = nullptr;
  return temp;
}
inline ::osi3::DetectedTrafficSign_DetectedMainSign* DetectedTrafficSign::mutable_main_sign() {
  
  if (main_sign_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::DetectedTrafficSign_DetectedMainSign>(GetArenaNoVirtual());
    main_sign_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.main_sign)
  return main_sign_;
}
inline void DetectedTrafficSign::set_allocated_main_sign(::osi3::DetectedTrafficSign_DetectedMainSign* main_sign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete main_sign_;
  }
  if (main_sign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      main_sign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, main_sign, submessage_arena);
    }
    
  } else {
    
  }
  main_sign_ = main_sign;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficSign.main_sign)
}

// repeated .osi3.DetectedTrafficSign.DetectedSupplementarySign supplementary_sign = 3;
inline int DetectedTrafficSign::supplementary_sign_size() const {
  return supplementary_sign_.size();
}
inline void DetectedTrafficSign::clear_supplementary_sign() {
  supplementary_sign_.Clear();
}
inline ::osi3::DetectedTrafficSign_DetectedSupplementarySign* DetectedTrafficSign::mutable_supplementary_sign(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficSign.supplementary_sign)
  return supplementary_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >*
DetectedTrafficSign::mutable_supplementary_sign() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedTrafficSign.supplementary_sign)
  return &supplementary_sign_;
}
inline const ::osi3::DetectedTrafficSign_DetectedSupplementarySign& DetectedTrafficSign::supplementary_sign(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficSign.supplementary_sign)
  return supplementary_sign_.Get(index);
}
inline ::osi3::DetectedTrafficSign_DetectedSupplementarySign* DetectedTrafficSign::add_supplementary_sign() {
  // @@protoc_insertion_point(field_add:osi3.DetectedTrafficSign.supplementary_sign)
  return supplementary_sign_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficSign_DetectedSupplementarySign >&
DetectedTrafficSign::supplementary_sign() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedTrafficSign.supplementary_sign)
  return supplementary_sign_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::DetectedTrafficSign_DetectedMainSign_Geometry> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::DetectedTrafficSign_DetectedMainSign_Geometry>() {
  return ::osi3::DetectedTrafficSign_DetectedMainSign_Geometry_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedtrafficsign_2eproto
