// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_imu.proto
#pragma warning (disable : 4125)

#include "osi_imu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_EulerAngle_osi_5fimu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_GNSSData_osi_5fimu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_imu_IMUCfg_osi_5fimu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_imu_IMUGroundTruth_osi_5fimu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_imu_IMUSensorData_osi_5fimu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_Quaternion_osi_5fimu_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fimu_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_WheelSpd_osi_5fimu_2eproto;
namespace osi3 {
class imu_QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_Quaternion> _instance;
} _imu_Quaternion_default_instance_;
class imu_EulerAngleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_EulerAngle> _instance;
} _imu_EulerAngle_default_instance_;
class imu_IMUCfgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_IMUCfg> _instance;
} _imu_IMUCfg_default_instance_;
class imu_WheelSpdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_WheelSpd> _instance;
} _imu_WheelSpd_default_instance_;
class imu_GNSSDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_GNSSData> _instance;
} _imu_GNSSData_default_instance_;
class imu_IMUSensorDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_IMUSensorData> _instance;
} _imu_IMUSensorData_default_instance_;
class imu_IMUGroundTruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_IMUGroundTruth> _instance;
} _imu_IMUGroundTruth_default_instance_;
class imu_IMURigidENUGNSSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu_IMURigidENUGNSS> _instance;
} _imu_IMURigidENUGNSS_default_instance_;
class imuDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<imu> _instance;
} _imu_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_imu_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_default_instance_;
    new (ptr) ::osi3::imu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_imu_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_imu_osi_5fimu_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_imu_IMUCfg_osi_5fimu_2eproto.base,
      &scc_info_imu_IMUSensorData_osi_5fimu_2eproto.base,
      &scc_info_imu_IMUGroundTruth_osi_5fimu_2eproto.base,
      &scc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto.base,}};

static void InitDefaultsscc_info_imu_EulerAngle_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_EulerAngle_default_instance_;
    new (ptr) ::osi3::imu_EulerAngle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_EulerAngle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_EulerAngle_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_imu_EulerAngle_osi_5fimu_2eproto}, {}};

static void InitDefaultsscc_info_imu_GNSSData_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_GNSSData_default_instance_;
    new (ptr) ::osi3::imu_GNSSData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_GNSSData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_GNSSData_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_imu_GNSSData_osi_5fimu_2eproto}, {}};

static void InitDefaultsscc_info_imu_IMUCfg_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_IMUCfg_default_instance_;
    new (ptr) ::osi3::imu_IMUCfg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_IMUCfg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_imu_IMUCfg_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_imu_IMUCfg_osi_5fimu_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_imu_Quaternion_osi_5fimu_2eproto.base,
      &scc_info_imu_EulerAngle_osi_5fimu_2eproto.base,}};

static void InitDefaultsscc_info_imu_IMUGroundTruth_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_IMUGroundTruth_default_instance_;
    new (ptr) ::osi3::imu_IMUGroundTruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_IMUGroundTruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_imu_IMUGroundTruth_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_imu_IMUGroundTruth_osi_5fimu_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_imu_GNSSData_osi_5fimu_2eproto.base,
      &scc_info_imu_Quaternion_osi_5fimu_2eproto.base,}};

static void InitDefaultsscc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_IMURigidENUGNSS_default_instance_;
    new (ptr) ::osi3::imu_IMURigidENUGNSS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_IMURigidENUGNSS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_imu_GNSSData_osi_5fimu_2eproto.base,
      &scc_info_imu_EulerAngle_osi_5fimu_2eproto.base,
      &scc_info_imu_Quaternion_osi_5fimu_2eproto.base,}};

static void InitDefaultsscc_info_imu_IMUSensorData_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_IMUSensorData_default_instance_;
    new (ptr) ::osi3::imu_IMUSensorData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_IMUSensorData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_imu_IMUSensorData_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_imu_IMUSensorData_osi_5fimu_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_imu_WheelSpd_osi_5fimu_2eproto.base,}};

static void InitDefaultsscc_info_imu_Quaternion_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_Quaternion_default_instance_;
    new (ptr) ::osi3::imu_Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_Quaternion_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_imu_Quaternion_osi_5fimu_2eproto}, {}};

static void InitDefaultsscc_info_imu_WheelSpd_osi_5fimu_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_imu_WheelSpd_default_instance_;
    new (ptr) ::osi3::imu_WheelSpd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::imu_WheelSpd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_imu_WheelSpd_osi_5fimu_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_imu_WheelSpd_osi_5fimu_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fimu_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fimu_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fimu_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fimu_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_Quaternion, qx_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_Quaternion, qy_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_Quaternion, qz_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_Quaternion, qw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_EulerAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_EulerAngle, roll_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_EulerAngle, pitch_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_EulerAngle, yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUCfg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUCfg, name_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUCfg, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUCfg, orientation_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUCfg, euler_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_WheelSpd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_WheelSpd, wheelspdrl_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_WheelSpd, wheelspdrr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_GNSSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_GNSSData, longti_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_GNSSData, lat_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_GNSSData, alt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUSensorData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUSensorData, accel_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUSensorData, angular_v_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUSensorData, wheelspd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, gnss_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, velocity_truth_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, acc_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, acc_truth_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, quatrot_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, quatrot_truth_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMUGroundTruth, dist_2_gps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMURigidENUGNSS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMURigidENUGNSS, posenu_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMURigidENUGNSS, gnss_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMURigidENUGNSS, velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMURigidENUGNSS, eulerangle_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu_IMURigidENUGNSS, quatrot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::imu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::imu, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu, mount_pos_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu, imu_data_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu, imu_truth_),
  PROTOBUF_FIELD_OFFSET(::osi3::imu, imu_rigid_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::imu_Quaternion)},
  { 9, -1, sizeof(::osi3::imu_EulerAngle)},
  { 17, -1, sizeof(::osi3::imu_IMUCfg)},
  { 26, -1, sizeof(::osi3::imu_WheelSpd)},
  { 33, -1, sizeof(::osi3::imu_GNSSData)},
  { 41, -1, sizeof(::osi3::imu_IMUSensorData)},
  { 49, -1, sizeof(::osi3::imu_IMUGroundTruth)},
  { 63, -1, sizeof(::osi3::imu_IMURigidENUGNSS)},
  { 73, -1, sizeof(::osi3::imu)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_EulerAngle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_IMUCfg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_WheelSpd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_GNSSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_IMUSensorData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_IMUGroundTruth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_IMURigidENUGNSS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_imu_default_instance_),
};

const char descriptor_table_protodef_osi_5fimu_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rosi_imu.proto\022\004osi3\032\021osi_version.proto"
  "\032\020osi_common.proto\"\363\t\n\003imu\022\'\n\007version\030\001 "
  "\001(\0132\026.osi3.InterfaceVersion\022\"\n\ttimestamp"
  "\030\002 \001(\0132\017.osi3.Timestamp\022#\n\tmount_pos\030\003 \001"
  "(\0132\020.osi3.imu.IMUCfg\022)\n\010imu_data\030\004 \001(\0132\027"
  ".osi3.imu.IMUSensorData\022+\n\timu_truth\030\005 \001"
  "(\0132\030.osi3.imu.IMUGroundTruth\022,\n\timu_rigi"
  "d\030\006 \001(\0132\031.osi3.imu.IMURigidENUGNSS\032<\n\nQu"
  "aternion\022\n\n\002qx\030\001 \001(\001\022\n\n\002qy\030\002 \001(\001\022\n\n\002qz\030\003"
  " \001(\001\022\n\n\002qw\030\004 \001(\001\0326\n\nEulerAngle\022\014\n\004roll\030\001"
  " \001(\001\022\r\n\005pitch\030\002 \001(\001\022\013\n\003yaw\030\003 \001(\001\032\210\001\n\006IMU"
  "Cfg\022\014\n\004name\030\001 \001(\t\022 \n\010position\030\002 \001(\0132\016.os"
  "i3.Vector3d\022)\n\013orientation\030\003 \001(\0132\024.osi3."
  "imu.Quaternion\022#\n\005euler\030\004 \001(\0132\024.osi3.imu"
  ".EulerAngle\0322\n\010WheelSpd\022\022\n\nwheelSpdRL\030\001 "
  "\001(\001\022\022\n\nwheelSpdRR\030\002 \001(\001\0324\n\010GNSSData\022\016\n\006l"
  "ongti\030\001 \001(\001\022\013\n\003lat\030\002 \001(\001\022\013\n\003alt\030\003 \001(\001\032w\n"
  "\rIMUSensorData\022\035\n\005accel\030\001 \001(\0132\016.osi3.Vec"
  "tor3d\022!\n\tangular_v\030\002 \001(\0132\016.osi3.Vector3d"
  "\022$\n\010wheelspd\030\003 \001(\0132\022.osi3.imu.WheelSpd\032\306"
  "\002\n\016IMUGroundTruth\022 \n\010position\030\001 \001(\0132\016.os"
  "i3.Vector3d\022 \n\004gnss\030\002 \001(\0132\022.osi3.imu.GNS"
  "SData\022 \n\010velocity\030\003 \001(\0132\016.osi3.Vector3d\022"
  "&\n\016velocity_truth\030\004 \001(\0132\016.osi3.Vector3d\022"
  "\033\n\003acc\030\005 \001(\0132\016.osi3.Vector3d\022!\n\tacc_trut"
  "h\030\006 \001(\0132\016.osi3.Vector3d\022%\n\007quatRot\030\007 \001(\013"
  "2\024.osi3.imu.Quaternion\022+\n\rquatRot_truth\030"
  "\010 \001(\0132\024.osi3.imu.Quaternion\022\022\n\ndist_2_gp"
  "s\030\t \001(\001\032\306\001\n\017IMURigidENUGNSS\022\036\n\006posENU\030\001 "
  "\001(\0132\016.osi3.Vector3d\022 \n\004gnss\030\002 \001(\0132\022.osi3"
  ".imu.GNSSData\022 \n\010velocity\030\003 \001(\0132\016.osi3.V"
  "ector3d\022(\n\neulerAngle\030\004 \001(\0132\024.osi3.imu.E"
  "ulerAngle\022%\n\007quatRot\030\005 \001(\0132\024.osi3.imu.Qu"
  "aternionB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fimu_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fimu_2eproto_sccs[9] = {
  &scc_info_imu_osi_5fimu_2eproto.base,
  &scc_info_imu_EulerAngle_osi_5fimu_2eproto.base,
  &scc_info_imu_GNSSData_osi_5fimu_2eproto.base,
  &scc_info_imu_IMUCfg_osi_5fimu_2eproto.base,
  &scc_info_imu_IMUGroundTruth_osi_5fimu_2eproto.base,
  &scc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto.base,
  &scc_info_imu_IMUSensorData_osi_5fimu_2eproto.base,
  &scc_info_imu_Quaternion_osi_5fimu_2eproto.base,
  &scc_info_imu_WheelSpd_osi_5fimu_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fimu_2eproto_once;
static bool descriptor_table_osi_5fimu_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fimu_2eproto = {
  &descriptor_table_osi_5fimu_2eproto_initialized, descriptor_table_protodef_osi_5fimu_2eproto, "osi_imu.proto", 1340,
  &descriptor_table_osi_5fimu_2eproto_once, descriptor_table_osi_5fimu_2eproto_sccs, descriptor_table_osi_5fimu_2eproto_deps, 9, 2,
  schemas, file_default_instances, TableStruct_osi_5fimu_2eproto::offsets,
  file_level_metadata_osi_5fimu_2eproto, 9, file_level_enum_descriptors_osi_5fimu_2eproto, file_level_service_descriptors_osi_5fimu_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fimu_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fimu_2eproto), true);
namespace osi3 {

// ===================================================================

void imu_Quaternion::InitAsDefaultInstance() {
}
class imu_Quaternion::_Internal {
 public:
};

imu_Quaternion::imu_Quaternion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.Quaternion)
}
imu_Quaternion::imu_Quaternion(const imu_Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qx_, &from.qx_,
    static_cast<size_t>(reinterpret_cast<char*>(&qw_) -
    reinterpret_cast<char*>(&qx_)) + sizeof(qw_));
  // @@protoc_insertion_point(copy_constructor:osi3.imu.Quaternion)
}

void imu_Quaternion::SharedCtor() {
  ::memset(&qx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_) -
      reinterpret_cast<char*>(&qx_)) + sizeof(qw_));
}

imu_Quaternion::~imu_Quaternion() {
  // @@protoc_insertion_point(destructor:osi3.imu.Quaternion)
  SharedDtor();
}

void imu_Quaternion::SharedDtor() {
}

void imu_Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_Quaternion& imu_Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_Quaternion_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&qx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qw_) -
      reinterpret_cast<char*>(&qx_)) + sizeof(qw_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double qx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          qx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          qy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          qz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double qw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          qw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_Quaternion::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.Quaternion)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double qx = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double qy = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double qz = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double qw = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.Quaternion)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_Quaternion::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double qx = 1;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->qx(), output);
  }

  // double qy = 2;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->qy(), output);
  }

  // double qz = 3;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->qz(), output);
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->qw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.Quaternion)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_Quaternion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double qx = 1;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->qx(), target);
  }

  // double qy = 2;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->qy(), target);
  }

  // double qz = 3;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->qz(), target);
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->qw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.Quaternion)
  return target;
}

size_t imu_Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double qx = 1;
  if (!(this->qx() <= 0 && this->qx() >= 0)) {
    total_size += 1 + 8;
  }

  // double qy = 2;
  if (!(this->qy() <= 0 && this->qy() >= 0)) {
    total_size += 1 + 8;
  }

  // double qz = 3;
  if (!(this->qz() <= 0 && this->qz() >= 0)) {
    total_size += 1 + 8;
  }

  // double qw = 4;
  if (!(this->qw() <= 0 && this->qw() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.Quaternion)
    MergeFrom(*source);
  }
}

void imu_Quaternion::MergeFrom(const imu_Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.qx() <= 0 && from.qx() >= 0)) {
    set_qx(from.qx());
  }
  if (!(from.qy() <= 0 && from.qy() >= 0)) {
    set_qy(from.qy());
  }
  if (!(from.qz() <= 0 && from.qz() >= 0)) {
    set_qz(from.qz());
  }
  if (!(from.qw() <= 0 && from.qw() >= 0)) {
    set_qw(from.qw());
  }
}

void imu_Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_Quaternion::CopyFrom(const imu_Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_Quaternion::IsInitialized() const {
  return true;
}

void imu_Quaternion::InternalSwap(imu_Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(qx_, other->qx_);
  swap(qy_, other->qy_);
  swap(qz_, other->qz_);
  swap(qw_, other->qw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu_EulerAngle::InitAsDefaultInstance() {
}
class imu_EulerAngle::_Internal {
 public:
};

imu_EulerAngle::imu_EulerAngle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.EulerAngle)
}
imu_EulerAngle::imu_EulerAngle(const imu_EulerAngle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_, &from.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:osi3.imu.EulerAngle)
}

void imu_EulerAngle::SharedCtor() {
  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
}

imu_EulerAngle::~imu_EulerAngle() {
  // @@protoc_insertion_point(destructor:osi3.imu.EulerAngle)
  SharedDtor();
}

void imu_EulerAngle::SharedDtor() {
}

void imu_EulerAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_EulerAngle& imu_EulerAngle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_EulerAngle_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_EulerAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&yaw_) -
      reinterpret_cast<char*>(&roll_)) + sizeof(yaw_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_EulerAngle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_EulerAngle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.EulerAngle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double roll = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double pitch = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double yaw = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.EulerAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.EulerAngle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_EulerAngle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll = 1;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->roll(), output);
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->pitch(), output);
  }

  // double yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.EulerAngle)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_EulerAngle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.EulerAngle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double roll = 1;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->roll(), target);
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->pitch(), target);
  }

  // double yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.EulerAngle)
  return target;
}

size_t imu_EulerAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.EulerAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double roll = 1;
  if (!(this->roll() <= 0 && this->roll() >= 0)) {
    total_size += 1 + 8;
  }

  // double pitch = 2;
  if (!(this->pitch() <= 0 && this->pitch() >= 0)) {
    total_size += 1 + 8;
  }

  // double yaw = 3;
  if (!(this->yaw() <= 0 && this->yaw() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_EulerAngle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_EulerAngle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_EulerAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.EulerAngle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.EulerAngle)
    MergeFrom(*source);
  }
}

void imu_EulerAngle::MergeFrom(const imu_EulerAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.EulerAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.roll() <= 0 && from.roll() >= 0)) {
    set_roll(from.roll());
  }
  if (!(from.pitch() <= 0 && from.pitch() >= 0)) {
    set_pitch(from.pitch());
  }
  if (!(from.yaw() <= 0 && from.yaw() >= 0)) {
    set_yaw(from.yaw());
  }
}

void imu_EulerAngle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_EulerAngle::CopyFrom(const imu_EulerAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.EulerAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_EulerAngle::IsInitialized() const {
  return true;
}

void imu_EulerAngle::InternalSwap(imu_EulerAngle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(roll_, other->roll_);
  swap(pitch_, other->pitch_);
  swap(yaw_, other->yaw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_EulerAngle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu_IMUCfg::InitAsDefaultInstance() {
  ::osi3::_imu_IMUCfg_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUCfg_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::osi3::imu_Quaternion*>(
      ::osi3::imu_Quaternion::internal_default_instance());
  ::osi3::_imu_IMUCfg_default_instance_._instance.get_mutable()->euler_ = const_cast< ::osi3::imu_EulerAngle*>(
      ::osi3::imu_EulerAngle::internal_default_instance());
}
class imu_IMUCfg::_Internal {
 public:
  static const ::osi3::Vector3d& position(const imu_IMUCfg* msg);
  static const ::osi3::imu_Quaternion& orientation(const imu_IMUCfg* msg);
  static const ::osi3::imu_EulerAngle& euler(const imu_IMUCfg* msg);
};

const ::osi3::Vector3d&
imu_IMUCfg::_Internal::position(const imu_IMUCfg* msg) {
  return *msg->position_;
}
const ::osi3::imu_Quaternion&
imu_IMUCfg::_Internal::orientation(const imu_IMUCfg* msg) {
  return *msg->orientation_;
}
const ::osi3::imu_EulerAngle&
imu_IMUCfg::_Internal::euler(const imu_IMUCfg* msg) {
  return *msg->euler_;
}
void imu_IMUCfg::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
imu_IMUCfg::imu_IMUCfg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.IMUCfg)
}
imu_IMUCfg::imu_IMUCfg(const imu_IMUCfg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_orientation()) {
    orientation_ = new ::osi3::imu_Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from.has_euler()) {
    euler_ = new ::osi3::imu_EulerAngle(*from.euler_);
  } else {
    euler_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.imu.IMUCfg)
}

void imu_IMUCfg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_imu_IMUCfg_osi_5fimu_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&euler_) -
      reinterpret_cast<char*>(&position_)) + sizeof(euler_));
}

imu_IMUCfg::~imu_IMUCfg() {
  // @@protoc_insertion_point(destructor:osi3.imu.IMUCfg)
  SharedDtor();
}

void imu_IMUCfg::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete euler_;
}

void imu_IMUCfg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_IMUCfg& imu_IMUCfg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_IMUCfg_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_IMUCfg::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.IMUCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && euler_ != nullptr) {
    delete euler_;
  }
  euler_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_IMUCfg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "osi3.imu.IMUCfg.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.Quaternion orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.EulerAngle euler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_euler(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_IMUCfg::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.IMUCfg)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.imu.IMUCfg.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.Quaternion orientation = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.EulerAngle euler = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_euler()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.IMUCfg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.IMUCfg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_IMUCfg::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.IMUCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.imu.IMUCfg.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .osi3.Vector3d position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::position(this), output);
  }

  // .osi3.imu.Quaternion orientation = 3;
  if (this->has_orientation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::orientation(this), output);
  }

  // .osi3.imu.EulerAngle euler = 4;
  if (this->has_euler()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::euler(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.IMUCfg)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_IMUCfg::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.IMUCfg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.imu.IMUCfg.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .osi3.Vector3d position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::position(this), target);
  }

  // .osi3.imu.Quaternion orientation = 3;
  if (this->has_orientation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::orientation(this), target);
  }

  // .osi3.imu.EulerAngle euler = 4;
  if (this->has_euler()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::euler(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.IMUCfg)
  return target;
}

size_t imu_IMUCfg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.IMUCfg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .osi3.Vector3d position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .osi3.imu.Quaternion orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .osi3.imu.EulerAngle euler = 4;
  if (this->has_euler()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *euler_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_IMUCfg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.IMUCfg)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_IMUCfg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_IMUCfg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.IMUCfg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.IMUCfg)
    MergeFrom(*source);
  }
}

void imu_IMUCfg::MergeFrom(const imu_IMUCfg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.IMUCfg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::osi3::imu_Quaternion::MergeFrom(from.orientation());
  }
  if (from.has_euler()) {
    mutable_euler()->::osi3::imu_EulerAngle::MergeFrom(from.euler());
  }
}

void imu_IMUCfg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.IMUCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_IMUCfg::CopyFrom(const imu_IMUCfg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.IMUCfg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_IMUCfg::IsInitialized() const {
  return true;
}

void imu_IMUCfg::InternalSwap(imu_IMUCfg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(euler_, other->euler_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_IMUCfg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu_WheelSpd::InitAsDefaultInstance() {
}
class imu_WheelSpd::_Internal {
 public:
};

imu_WheelSpd::imu_WheelSpd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.WheelSpd)
}
imu_WheelSpd::imu_WheelSpd(const imu_WheelSpd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&wheelspdrl_, &from.wheelspdrl_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheelspdrr_) -
    reinterpret_cast<char*>(&wheelspdrl_)) + sizeof(wheelspdrr_));
  // @@protoc_insertion_point(copy_constructor:osi3.imu.WheelSpd)
}

void imu_WheelSpd::SharedCtor() {
  ::memset(&wheelspdrl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheelspdrr_) -
      reinterpret_cast<char*>(&wheelspdrl_)) + sizeof(wheelspdrr_));
}

imu_WheelSpd::~imu_WheelSpd() {
  // @@protoc_insertion_point(destructor:osi3.imu.WheelSpd)
  SharedDtor();
}

void imu_WheelSpd::SharedDtor() {
}

void imu_WheelSpd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_WheelSpd& imu_WheelSpd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_WheelSpd_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_WheelSpd::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.WheelSpd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wheelspdrl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheelspdrr_) -
      reinterpret_cast<char*>(&wheelspdrl_)) + sizeof(wheelspdrr_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_WheelSpd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double wheelSpdRL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          wheelspdrl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double wheelSpdRR = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          wheelspdrr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_WheelSpd::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.WheelSpd)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double wheelSpdRL = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelspdrl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double wheelSpdRR = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wheelspdrr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.WheelSpd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.WheelSpd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_WheelSpd::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.WheelSpd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double wheelSpdRL = 1;
  if (!(this->wheelspdrl() <= 0 && this->wheelspdrl() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->wheelspdrl(), output);
  }

  // double wheelSpdRR = 2;
  if (!(this->wheelspdrr() <= 0 && this->wheelspdrr() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->wheelspdrr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.WheelSpd)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_WheelSpd::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.WheelSpd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double wheelSpdRL = 1;
  if (!(this->wheelspdrl() <= 0 && this->wheelspdrl() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->wheelspdrl(), target);
  }

  // double wheelSpdRR = 2;
  if (!(this->wheelspdrr() <= 0 && this->wheelspdrr() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->wheelspdrr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.WheelSpd)
  return target;
}

size_t imu_WheelSpd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.WheelSpd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double wheelSpdRL = 1;
  if (!(this->wheelspdrl() <= 0 && this->wheelspdrl() >= 0)) {
    total_size += 1 + 8;
  }

  // double wheelSpdRR = 2;
  if (!(this->wheelspdrr() <= 0 && this->wheelspdrr() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_WheelSpd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.WheelSpd)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_WheelSpd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_WheelSpd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.WheelSpd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.WheelSpd)
    MergeFrom(*source);
  }
}

void imu_WheelSpd::MergeFrom(const imu_WheelSpd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.WheelSpd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.wheelspdrl() <= 0 && from.wheelspdrl() >= 0)) {
    set_wheelspdrl(from.wheelspdrl());
  }
  if (!(from.wheelspdrr() <= 0 && from.wheelspdrr() >= 0)) {
    set_wheelspdrr(from.wheelspdrr());
  }
}

void imu_WheelSpd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.WheelSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_WheelSpd::CopyFrom(const imu_WheelSpd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.WheelSpd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_WheelSpd::IsInitialized() const {
  return true;
}

void imu_WheelSpd::InternalSwap(imu_WheelSpd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(wheelspdrl_, other->wheelspdrl_);
  swap(wheelspdrr_, other->wheelspdrr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_WheelSpd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu_GNSSData::InitAsDefaultInstance() {
}
class imu_GNSSData::_Internal {
 public:
};

imu_GNSSData::imu_GNSSData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.GNSSData)
}
imu_GNSSData::imu_GNSSData(const imu_GNSSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longti_, &from.longti_,
    static_cast<size_t>(reinterpret_cast<char*>(&alt_) -
    reinterpret_cast<char*>(&longti_)) + sizeof(alt_));
  // @@protoc_insertion_point(copy_constructor:osi3.imu.GNSSData)
}

void imu_GNSSData::SharedCtor() {
  ::memset(&longti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&longti_)) + sizeof(alt_));
}

imu_GNSSData::~imu_GNSSData() {
  // @@protoc_insertion_point(destructor:osi3.imu.GNSSData)
  SharedDtor();
}

void imu_GNSSData::SharedDtor() {
}

void imu_GNSSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_GNSSData& imu_GNSSData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_GNSSData_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_GNSSData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.GNSSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alt_) -
      reinterpret_cast<char*>(&longti_)) + sizeof(alt_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_GNSSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double longti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          longti_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double alt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_GNSSData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.GNSSData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double longti = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longti_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lat = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double alt = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.GNSSData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.GNSSData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_GNSSData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.GNSSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longti = 1;
  if (!(this->longti() <= 0 && this->longti() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->longti(), output);
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // double alt = 3;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->alt(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.GNSSData)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_GNSSData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.GNSSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double longti = 1;
  if (!(this->longti() <= 0 && this->longti() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->longti(), target);
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // double alt = 3;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->alt(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.GNSSData)
  return target;
}

size_t imu_GNSSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.GNSSData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double longti = 1;
  if (!(this->longti() <= 0 && this->longti() >= 0)) {
    total_size += 1 + 8;
  }

  // double lat = 2;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double alt = 3;
  if (!(this->alt() <= 0 && this->alt() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_GNSSData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.GNSSData)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_GNSSData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_GNSSData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.GNSSData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.GNSSData)
    MergeFrom(*source);
  }
}

void imu_GNSSData::MergeFrom(const imu_GNSSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.GNSSData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longti() <= 0 && from.longti() >= 0)) {
    set_longti(from.longti());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    set_lat(from.lat());
  }
  if (!(from.alt() <= 0 && from.alt() >= 0)) {
    set_alt(from.alt());
  }
}

void imu_GNSSData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.GNSSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_GNSSData::CopyFrom(const imu_GNSSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.GNSSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_GNSSData::IsInitialized() const {
  return true;
}

void imu_GNSSData::InternalSwap(imu_GNSSData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(longti_, other->longti_);
  swap(lat_, other->lat_);
  swap(alt_, other->alt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_GNSSData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu_IMUSensorData::InitAsDefaultInstance() {
  ::osi3::_imu_IMUSensorData_default_instance_._instance.get_mutable()->accel_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUSensorData_default_instance_._instance.get_mutable()->angular_v_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUSensorData_default_instance_._instance.get_mutable()->wheelspd_ = const_cast< ::osi3::imu_WheelSpd*>(
      ::osi3::imu_WheelSpd::internal_default_instance());
}
class imu_IMUSensorData::_Internal {
 public:
  static const ::osi3::Vector3d& accel(const imu_IMUSensorData* msg);
  static const ::osi3::Vector3d& angular_v(const imu_IMUSensorData* msg);
  static const ::osi3::imu_WheelSpd& wheelspd(const imu_IMUSensorData* msg);
};

const ::osi3::Vector3d&
imu_IMUSensorData::_Internal::accel(const imu_IMUSensorData* msg) {
  return *msg->accel_;
}
const ::osi3::Vector3d&
imu_IMUSensorData::_Internal::angular_v(const imu_IMUSensorData* msg) {
  return *msg->angular_v_;
}
const ::osi3::imu_WheelSpd&
imu_IMUSensorData::_Internal::wheelspd(const imu_IMUSensorData* msg) {
  return *msg->wheelspd_;
}
void imu_IMUSensorData::clear_accel() {
  if (GetArenaNoVirtual() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
}
void imu_IMUSensorData::clear_angular_v() {
  if (GetArenaNoVirtual() == nullptr && angular_v_ != nullptr) {
    delete angular_v_;
  }
  angular_v_ = nullptr;
}
imu_IMUSensorData::imu_IMUSensorData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.IMUSensorData)
}
imu_IMUSensorData::imu_IMUSensorData(const imu_IMUSensorData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_accel()) {
    accel_ = new ::osi3::Vector3d(*from.accel_);
  } else {
    accel_ = nullptr;
  }
  if (from.has_angular_v()) {
    angular_v_ = new ::osi3::Vector3d(*from.angular_v_);
  } else {
    angular_v_ = nullptr;
  }
  if (from.has_wheelspd()) {
    wheelspd_ = new ::osi3::imu_WheelSpd(*from.wheelspd_);
  } else {
    wheelspd_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.imu.IMUSensorData)
}

void imu_IMUSensorData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_imu_IMUSensorData_osi_5fimu_2eproto.base);
  ::memset(&accel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheelspd_) -
      reinterpret_cast<char*>(&accel_)) + sizeof(wheelspd_));
}

imu_IMUSensorData::~imu_IMUSensorData() {
  // @@protoc_insertion_point(destructor:osi3.imu.IMUSensorData)
  SharedDtor();
}

void imu_IMUSensorData::SharedDtor() {
  if (this != internal_default_instance()) delete accel_;
  if (this != internal_default_instance()) delete angular_v_;
  if (this != internal_default_instance()) delete wheelspd_;
}

void imu_IMUSensorData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_IMUSensorData& imu_IMUSensorData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_IMUSensorData_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_IMUSensorData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.IMUSensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && accel_ != nullptr) {
    delete accel_;
  }
  accel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && angular_v_ != nullptr) {
    delete angular_v_;
  }
  angular_v_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wheelspd_ != nullptr) {
    delete wheelspd_;
  }
  wheelspd_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_IMUSensorData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Vector3d accel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_accel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d angular_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_angular_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.WheelSpd wheelspd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_wheelspd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_IMUSensorData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.IMUSensorData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Vector3d accel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d angular_v = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_angular_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.WheelSpd wheelspd = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wheelspd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.IMUSensorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.IMUSensorData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_IMUSensorData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.IMUSensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d accel = 1;
  if (this->has_accel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::accel(this), output);
  }

  // .osi3.Vector3d angular_v = 2;
  if (this->has_angular_v()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::angular_v(this), output);
  }

  // .osi3.imu.WheelSpd wheelspd = 3;
  if (this->has_wheelspd()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::wheelspd(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.IMUSensorData)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_IMUSensorData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.IMUSensorData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d accel = 1;
  if (this->has_accel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::accel(this), target);
  }

  // .osi3.Vector3d angular_v = 2;
  if (this->has_angular_v()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::angular_v(this), target);
  }

  // .osi3.imu.WheelSpd wheelspd = 3;
  if (this->has_wheelspd()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::wheelspd(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.IMUSensorData)
  return target;
}

size_t imu_IMUSensorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.IMUSensorData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Vector3d accel = 1;
  if (this->has_accel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *accel_);
  }

  // .osi3.Vector3d angular_v = 2;
  if (this->has_angular_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_v_);
  }

  // .osi3.imu.WheelSpd wheelspd = 3;
  if (this->has_wheelspd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wheelspd_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_IMUSensorData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.IMUSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_IMUSensorData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_IMUSensorData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.IMUSensorData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.IMUSensorData)
    MergeFrom(*source);
  }
}

void imu_IMUSensorData::MergeFrom(const imu_IMUSensorData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.IMUSensorData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_accel()) {
    mutable_accel()->::osi3::Vector3d::MergeFrom(from.accel());
  }
  if (from.has_angular_v()) {
    mutable_angular_v()->::osi3::Vector3d::MergeFrom(from.angular_v());
  }
  if (from.has_wheelspd()) {
    mutable_wheelspd()->::osi3::imu_WheelSpd::MergeFrom(from.wheelspd());
  }
}

void imu_IMUSensorData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.IMUSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_IMUSensorData::CopyFrom(const imu_IMUSensorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.IMUSensorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_IMUSensorData::IsInitialized() const {
  return true;
}

void imu_IMUSensorData::InternalSwap(imu_IMUSensorData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(accel_, other->accel_);
  swap(angular_v_, other->angular_v_);
  swap(wheelspd_, other->wheelspd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_IMUSensorData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu_IMUGroundTruth::InitAsDefaultInstance() {
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->gnss_ = const_cast< ::osi3::imu_GNSSData*>(
      ::osi3::imu_GNSSData::internal_default_instance());
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->velocity_truth_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->acc_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->acc_truth_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->quatrot_ = const_cast< ::osi3::imu_Quaternion*>(
      ::osi3::imu_Quaternion::internal_default_instance());
  ::osi3::_imu_IMUGroundTruth_default_instance_._instance.get_mutable()->quatrot_truth_ = const_cast< ::osi3::imu_Quaternion*>(
      ::osi3::imu_Quaternion::internal_default_instance());
}
class imu_IMUGroundTruth::_Internal {
 public:
  static const ::osi3::Vector3d& position(const imu_IMUGroundTruth* msg);
  static const ::osi3::imu_GNSSData& gnss(const imu_IMUGroundTruth* msg);
  static const ::osi3::Vector3d& velocity(const imu_IMUGroundTruth* msg);
  static const ::osi3::Vector3d& velocity_truth(const imu_IMUGroundTruth* msg);
  static const ::osi3::Vector3d& acc(const imu_IMUGroundTruth* msg);
  static const ::osi3::Vector3d& acc_truth(const imu_IMUGroundTruth* msg);
  static const ::osi3::imu_Quaternion& quatrot(const imu_IMUGroundTruth* msg);
  static const ::osi3::imu_Quaternion& quatrot_truth(const imu_IMUGroundTruth* msg);
};

const ::osi3::Vector3d&
imu_IMUGroundTruth::_Internal::position(const imu_IMUGroundTruth* msg) {
  return *msg->position_;
}
const ::osi3::imu_GNSSData&
imu_IMUGroundTruth::_Internal::gnss(const imu_IMUGroundTruth* msg) {
  return *msg->gnss_;
}
const ::osi3::Vector3d&
imu_IMUGroundTruth::_Internal::velocity(const imu_IMUGroundTruth* msg) {
  return *msg->velocity_;
}
const ::osi3::Vector3d&
imu_IMUGroundTruth::_Internal::velocity_truth(const imu_IMUGroundTruth* msg) {
  return *msg->velocity_truth_;
}
const ::osi3::Vector3d&
imu_IMUGroundTruth::_Internal::acc(const imu_IMUGroundTruth* msg) {
  return *msg->acc_;
}
const ::osi3::Vector3d&
imu_IMUGroundTruth::_Internal::acc_truth(const imu_IMUGroundTruth* msg) {
  return *msg->acc_truth_;
}
const ::osi3::imu_Quaternion&
imu_IMUGroundTruth::_Internal::quatrot(const imu_IMUGroundTruth* msg) {
  return *msg->quatrot_;
}
const ::osi3::imu_Quaternion&
imu_IMUGroundTruth::_Internal::quatrot_truth(const imu_IMUGroundTruth* msg) {
  return *msg->quatrot_truth_;
}
void imu_IMUGroundTruth::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void imu_IMUGroundTruth::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void imu_IMUGroundTruth::clear_velocity_truth() {
  if (GetArenaNoVirtual() == nullptr && velocity_truth_ != nullptr) {
    delete velocity_truth_;
  }
  velocity_truth_ = nullptr;
}
void imu_IMUGroundTruth::clear_acc() {
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
void imu_IMUGroundTruth::clear_acc_truth() {
  if (GetArenaNoVirtual() == nullptr && acc_truth_ != nullptr) {
    delete acc_truth_;
  }
  acc_truth_ = nullptr;
}
imu_IMUGroundTruth::imu_IMUGroundTruth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.IMUGroundTruth)
}
imu_IMUGroundTruth::imu_IMUGroundTruth(const imu_IMUGroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_gnss()) {
    gnss_ = new ::osi3::imu_GNSSData(*from.gnss_);
  } else {
    gnss_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::osi3::Vector3d(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from.has_velocity_truth()) {
    velocity_truth_ = new ::osi3::Vector3d(*from.velocity_truth_);
  } else {
    velocity_truth_ = nullptr;
  }
  if (from.has_acc()) {
    acc_ = new ::osi3::Vector3d(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from.has_acc_truth()) {
    acc_truth_ = new ::osi3::Vector3d(*from.acc_truth_);
  } else {
    acc_truth_ = nullptr;
  }
  if (from.has_quatrot()) {
    quatrot_ = new ::osi3::imu_Quaternion(*from.quatrot_);
  } else {
    quatrot_ = nullptr;
  }
  if (from.has_quatrot_truth()) {
    quatrot_truth_ = new ::osi3::imu_Quaternion(*from.quatrot_truth_);
  } else {
    quatrot_truth_ = nullptr;
  }
  dist_2_gps_ = from.dist_2_gps_;
  // @@protoc_insertion_point(copy_constructor:osi3.imu.IMUGroundTruth)
}

void imu_IMUGroundTruth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_imu_IMUGroundTruth_osi_5fimu_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_2_gps_) -
      reinterpret_cast<char*>(&position_)) + sizeof(dist_2_gps_));
}

imu_IMUGroundTruth::~imu_IMUGroundTruth() {
  // @@protoc_insertion_point(destructor:osi3.imu.IMUGroundTruth)
  SharedDtor();
}

void imu_IMUGroundTruth::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete gnss_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete velocity_truth_;
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete acc_truth_;
  if (this != internal_default_instance()) delete quatrot_;
  if (this != internal_default_instance()) delete quatrot_truth_;
}

void imu_IMUGroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_IMUGroundTruth& imu_IMUGroundTruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_IMUGroundTruth_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_IMUGroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.IMUGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gnss_ != nullptr) {
    delete gnss_;
  }
  gnss_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_truth_ != nullptr) {
    delete velocity_truth_;
  }
  velocity_truth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acc_truth_ != nullptr) {
    delete acc_truth_;
  }
  acc_truth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quatrot_ != nullptr) {
    delete quatrot_;
  }
  quatrot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quatrot_truth_ != nullptr) {
    delete quatrot_truth_;
  }
  quatrot_truth_ = nullptr;
  dist_2_gps_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_IMUGroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.GNSSData gnss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_gnss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d velocity_truth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_velocity_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d acc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d acc_truth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_acc_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.Quaternion quatRot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_quatrot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.Quaternion quatRot_truth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_quatrot_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double dist_2_gps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dist_2_gps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_IMUGroundTruth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.IMUGroundTruth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Vector3d position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.GNSSData gnss = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gnss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d velocity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d velocity_truth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_truth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d acc = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d acc_truth = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acc_truth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.Quaternion quatRot = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quatrot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.Quaternion quatRot_truth = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quatrot_truth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dist_2_gps = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_2_gps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.IMUGroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.IMUGroundTruth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_IMUGroundTruth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.IMUGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // .osi3.imu.GNSSData gnss = 2;
  if (this->has_gnss()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::gnss(this), output);
  }

  // .osi3.Vector3d velocity = 3;
  if (this->has_velocity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::velocity(this), output);
  }

  // .osi3.Vector3d velocity_truth = 4;
  if (this->has_velocity_truth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::velocity_truth(this), output);
  }

  // .osi3.Vector3d acc = 5;
  if (this->has_acc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::acc(this), output);
  }

  // .osi3.Vector3d acc_truth = 6;
  if (this->has_acc_truth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::acc_truth(this), output);
  }

  // .osi3.imu.Quaternion quatRot = 7;
  if (this->has_quatrot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::quatrot(this), output);
  }

  // .osi3.imu.Quaternion quatRot_truth = 8;
  if (this->has_quatrot_truth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::quatrot_truth(this), output);
  }

  // double dist_2_gps = 9;
  if (!(this->dist_2_gps() <= 0 && this->dist_2_gps() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->dist_2_gps(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.IMUGroundTruth)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_IMUGroundTruth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.IMUGroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // .osi3.imu.GNSSData gnss = 2;
  if (this->has_gnss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::gnss(this), target);
  }

  // .osi3.Vector3d velocity = 3;
  if (this->has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::velocity(this), target);
  }

  // .osi3.Vector3d velocity_truth = 4;
  if (this->has_velocity_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::velocity_truth(this), target);
  }

  // .osi3.Vector3d acc = 5;
  if (this->has_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::acc(this), target);
  }

  // .osi3.Vector3d acc_truth = 6;
  if (this->has_acc_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::acc_truth(this), target);
  }

  // .osi3.imu.Quaternion quatRot = 7;
  if (this->has_quatrot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::quatrot(this), target);
  }

  // .osi3.imu.Quaternion quatRot_truth = 8;
  if (this->has_quatrot_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::quatrot_truth(this), target);
  }

  // double dist_2_gps = 9;
  if (!(this->dist_2_gps() <= 0 && this->dist_2_gps() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->dist_2_gps(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.IMUGroundTruth)
  return target;
}

size_t imu_IMUGroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.IMUGroundTruth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .osi3.imu.GNSSData gnss = 2;
  if (this->has_gnss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_);
  }

  // .osi3.Vector3d velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .osi3.Vector3d velocity_truth = 4;
  if (this->has_velocity_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_truth_);
  }

  // .osi3.Vector3d acc = 5;
  if (this->has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  // .osi3.Vector3d acc_truth = 6;
  if (this->has_acc_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_truth_);
  }

  // .osi3.imu.Quaternion quatRot = 7;
  if (this->has_quatrot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quatrot_);
  }

  // .osi3.imu.Quaternion quatRot_truth = 8;
  if (this->has_quatrot_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quatrot_truth_);
  }

  // double dist_2_gps = 9;
  if (!(this->dist_2_gps() <= 0 && this->dist_2_gps() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_IMUGroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.IMUGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_IMUGroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_IMUGroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.IMUGroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.IMUGroundTruth)
    MergeFrom(*source);
  }
}

void imu_IMUGroundTruth::MergeFrom(const imu_IMUGroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.IMUGroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (from.has_gnss()) {
    mutable_gnss()->::osi3::imu_GNSSData::MergeFrom(from.gnss());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::osi3::Vector3d::MergeFrom(from.velocity());
  }
  if (from.has_velocity_truth()) {
    mutable_velocity_truth()->::osi3::Vector3d::MergeFrom(from.velocity_truth());
  }
  if (from.has_acc()) {
    mutable_acc()->::osi3::Vector3d::MergeFrom(from.acc());
  }
  if (from.has_acc_truth()) {
    mutable_acc_truth()->::osi3::Vector3d::MergeFrom(from.acc_truth());
  }
  if (from.has_quatrot()) {
    mutable_quatrot()->::osi3::imu_Quaternion::MergeFrom(from.quatrot());
  }
  if (from.has_quatrot_truth()) {
    mutable_quatrot_truth()->::osi3::imu_Quaternion::MergeFrom(from.quatrot_truth());
  }
  if (!(from.dist_2_gps() <= 0 && from.dist_2_gps() >= 0)) {
    set_dist_2_gps(from.dist_2_gps());
  }
}

void imu_IMUGroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.IMUGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_IMUGroundTruth::CopyFrom(const imu_IMUGroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.IMUGroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_IMUGroundTruth::IsInitialized() const {
  return true;
}

void imu_IMUGroundTruth::InternalSwap(imu_IMUGroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(gnss_, other->gnss_);
  swap(velocity_, other->velocity_);
  swap(velocity_truth_, other->velocity_truth_);
  swap(acc_, other->acc_);
  swap(acc_truth_, other->acc_truth_);
  swap(quatrot_, other->quatrot_);
  swap(quatrot_truth_, other->quatrot_truth_);
  swap(dist_2_gps_, other->dist_2_gps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_IMUGroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu_IMURigidENUGNSS::InitAsDefaultInstance() {
  ::osi3::_imu_IMURigidENUGNSS_default_instance_._instance.get_mutable()->posenu_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMURigidENUGNSS_default_instance_._instance.get_mutable()->gnss_ = const_cast< ::osi3::imu_GNSSData*>(
      ::osi3::imu_GNSSData::internal_default_instance());
  ::osi3::_imu_IMURigidENUGNSS_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_imu_IMURigidENUGNSS_default_instance_._instance.get_mutable()->eulerangle_ = const_cast< ::osi3::imu_EulerAngle*>(
      ::osi3::imu_EulerAngle::internal_default_instance());
  ::osi3::_imu_IMURigidENUGNSS_default_instance_._instance.get_mutable()->quatrot_ = const_cast< ::osi3::imu_Quaternion*>(
      ::osi3::imu_Quaternion::internal_default_instance());
}
class imu_IMURigidENUGNSS::_Internal {
 public:
  static const ::osi3::Vector3d& posenu(const imu_IMURigidENUGNSS* msg);
  static const ::osi3::imu_GNSSData& gnss(const imu_IMURigidENUGNSS* msg);
  static const ::osi3::Vector3d& velocity(const imu_IMURigidENUGNSS* msg);
  static const ::osi3::imu_EulerAngle& eulerangle(const imu_IMURigidENUGNSS* msg);
  static const ::osi3::imu_Quaternion& quatrot(const imu_IMURigidENUGNSS* msg);
};

const ::osi3::Vector3d&
imu_IMURigidENUGNSS::_Internal::posenu(const imu_IMURigidENUGNSS* msg) {
  return *msg->posenu_;
}
const ::osi3::imu_GNSSData&
imu_IMURigidENUGNSS::_Internal::gnss(const imu_IMURigidENUGNSS* msg) {
  return *msg->gnss_;
}
const ::osi3::Vector3d&
imu_IMURigidENUGNSS::_Internal::velocity(const imu_IMURigidENUGNSS* msg) {
  return *msg->velocity_;
}
const ::osi3::imu_EulerAngle&
imu_IMURigidENUGNSS::_Internal::eulerangle(const imu_IMURigidENUGNSS* msg) {
  return *msg->eulerangle_;
}
const ::osi3::imu_Quaternion&
imu_IMURigidENUGNSS::_Internal::quatrot(const imu_IMURigidENUGNSS* msg) {
  return *msg->quatrot_;
}
void imu_IMURigidENUGNSS::clear_posenu() {
  if (GetArenaNoVirtual() == nullptr && posenu_ != nullptr) {
    delete posenu_;
  }
  posenu_ = nullptr;
}
void imu_IMURigidENUGNSS::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
imu_IMURigidENUGNSS::imu_IMURigidENUGNSS()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu.IMURigidENUGNSS)
}
imu_IMURigidENUGNSS::imu_IMURigidENUGNSS(const imu_IMURigidENUGNSS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_posenu()) {
    posenu_ = new ::osi3::Vector3d(*from.posenu_);
  } else {
    posenu_ = nullptr;
  }
  if (from.has_gnss()) {
    gnss_ = new ::osi3::imu_GNSSData(*from.gnss_);
  } else {
    gnss_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::osi3::Vector3d(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from.has_eulerangle()) {
    eulerangle_ = new ::osi3::imu_EulerAngle(*from.eulerangle_);
  } else {
    eulerangle_ = nullptr;
  }
  if (from.has_quatrot()) {
    quatrot_ = new ::osi3::imu_Quaternion(*from.quatrot_);
  } else {
    quatrot_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.imu.IMURigidENUGNSS)
}

void imu_IMURigidENUGNSS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto.base);
  ::memset(&posenu_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quatrot_) -
      reinterpret_cast<char*>(&posenu_)) + sizeof(quatrot_));
}

imu_IMURigidENUGNSS::~imu_IMURigidENUGNSS() {
  // @@protoc_insertion_point(destructor:osi3.imu.IMURigidENUGNSS)
  SharedDtor();
}

void imu_IMURigidENUGNSS::SharedDtor() {
  if (this != internal_default_instance()) delete posenu_;
  if (this != internal_default_instance()) delete gnss_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete eulerangle_;
  if (this != internal_default_instance()) delete quatrot_;
}

void imu_IMURigidENUGNSS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu_IMURigidENUGNSS& imu_IMURigidENUGNSS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_IMURigidENUGNSS_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu_IMURigidENUGNSS::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu.IMURigidENUGNSS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && posenu_ != nullptr) {
    delete posenu_;
  }
  posenu_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gnss_ != nullptr) {
    delete gnss_;
  }
  gnss_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && eulerangle_ != nullptr) {
    delete eulerangle_;
  }
  eulerangle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && quatrot_ != nullptr) {
    delete quatrot_;
  }
  quatrot_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu_IMURigidENUGNSS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Vector3d posENU = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_posenu(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.GNSSData gnss = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_gnss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.EulerAngle eulerAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_eulerangle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.Quaternion quatRot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_quatrot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu_IMURigidENUGNSS::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu.IMURigidENUGNSS)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Vector3d posENU = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_posenu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.GNSSData gnss = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gnss()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d velocity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.EulerAngle eulerAngle = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_eulerangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.Quaternion quatRot = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_quatrot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu.IMURigidENUGNSS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu.IMURigidENUGNSS)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu_IMURigidENUGNSS::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu.IMURigidENUGNSS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d posENU = 1;
  if (this->has_posenu()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::posenu(this), output);
  }

  // .osi3.imu.GNSSData gnss = 2;
  if (this->has_gnss()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::gnss(this), output);
  }

  // .osi3.Vector3d velocity = 3;
  if (this->has_velocity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::velocity(this), output);
  }

  // .osi3.imu.EulerAngle eulerAngle = 4;
  if (this->has_eulerangle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::eulerangle(this), output);
  }

  // .osi3.imu.Quaternion quatRot = 5;
  if (this->has_quatrot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::quatrot(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu.IMURigidENUGNSS)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu_IMURigidENUGNSS::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu.IMURigidENUGNSS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d posENU = 1;
  if (this->has_posenu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::posenu(this), target);
  }

  // .osi3.imu.GNSSData gnss = 2;
  if (this->has_gnss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::gnss(this), target);
  }

  // .osi3.Vector3d velocity = 3;
  if (this->has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::velocity(this), target);
  }

  // .osi3.imu.EulerAngle eulerAngle = 4;
  if (this->has_eulerangle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::eulerangle(this), target);
  }

  // .osi3.imu.Quaternion quatRot = 5;
  if (this->has_quatrot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::quatrot(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu.IMURigidENUGNSS)
  return target;
}

size_t imu_IMURigidENUGNSS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu.IMURigidENUGNSS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Vector3d posENU = 1;
  if (this->has_posenu()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *posenu_);
  }

  // .osi3.imu.GNSSData gnss = 2;
  if (this->has_gnss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gnss_);
  }

  // .osi3.Vector3d velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .osi3.imu.EulerAngle eulerAngle = 4;
  if (this->has_eulerangle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *eulerangle_);
  }

  // .osi3.imu.Quaternion quatRot = 5;
  if (this->has_quatrot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quatrot_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu_IMURigidENUGNSS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu.IMURigidENUGNSS)
  GOOGLE_DCHECK_NE(&from, this);
  const imu_IMURigidENUGNSS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu_IMURigidENUGNSS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu.IMURigidENUGNSS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu.IMURigidENUGNSS)
    MergeFrom(*source);
  }
}

void imu_IMURigidENUGNSS::MergeFrom(const imu_IMURigidENUGNSS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu.IMURigidENUGNSS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_posenu()) {
    mutable_posenu()->::osi3::Vector3d::MergeFrom(from.posenu());
  }
  if (from.has_gnss()) {
    mutable_gnss()->::osi3::imu_GNSSData::MergeFrom(from.gnss());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::osi3::Vector3d::MergeFrom(from.velocity());
  }
  if (from.has_eulerangle()) {
    mutable_eulerangle()->::osi3::imu_EulerAngle::MergeFrom(from.eulerangle());
  }
  if (from.has_quatrot()) {
    mutable_quatrot()->::osi3::imu_Quaternion::MergeFrom(from.quatrot());
  }
}

void imu_IMURigidENUGNSS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu.IMURigidENUGNSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu_IMURigidENUGNSS::CopyFrom(const imu_IMURigidENUGNSS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu.IMURigidENUGNSS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu_IMURigidENUGNSS::IsInitialized() const {
  return true;
}

void imu_IMURigidENUGNSS::InternalSwap(imu_IMURigidENUGNSS* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(posenu_, other->posenu_);
  swap(gnss_, other->gnss_);
  swap(velocity_, other->velocity_);
  swap(eulerangle_, other->eulerangle_);
  swap(quatrot_, other->quatrot_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu_IMURigidENUGNSS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void imu::InitAsDefaultInstance() {
  ::osi3::_imu_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_imu_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_imu_default_instance_._instance.get_mutable()->mount_pos_ = const_cast< ::osi3::imu_IMUCfg*>(
      ::osi3::imu_IMUCfg::internal_default_instance());
  ::osi3::_imu_default_instance_._instance.get_mutable()->imu_data_ = const_cast< ::osi3::imu_IMUSensorData*>(
      ::osi3::imu_IMUSensorData::internal_default_instance());
  ::osi3::_imu_default_instance_._instance.get_mutable()->imu_truth_ = const_cast< ::osi3::imu_IMUGroundTruth*>(
      ::osi3::imu_IMUGroundTruth::internal_default_instance());
  ::osi3::_imu_default_instance_._instance.get_mutable()->imu_rigid_ = const_cast< ::osi3::imu_IMURigidENUGNSS*>(
      ::osi3::imu_IMURigidENUGNSS::internal_default_instance());
}
class imu::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const imu* msg);
  static const ::osi3::Timestamp& timestamp(const imu* msg);
  static const ::osi3::imu_IMUCfg& mount_pos(const imu* msg);
  static const ::osi3::imu_IMUSensorData& imu_data(const imu* msg);
  static const ::osi3::imu_IMUGroundTruth& imu_truth(const imu* msg);
  static const ::osi3::imu_IMURigidENUGNSS& imu_rigid(const imu* msg);
};

const ::osi3::InterfaceVersion&
imu::_Internal::version(const imu* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
imu::_Internal::timestamp(const imu* msg) {
  return *msg->timestamp_;
}
const ::osi3::imu_IMUCfg&
imu::_Internal::mount_pos(const imu* msg) {
  return *msg->mount_pos_;
}
const ::osi3::imu_IMUSensorData&
imu::_Internal::imu_data(const imu* msg) {
  return *msg->imu_data_;
}
const ::osi3::imu_IMUGroundTruth&
imu::_Internal::imu_truth(const imu* msg) {
  return *msg->imu_truth_;
}
const ::osi3::imu_IMURigidENUGNSS&
imu::_Internal::imu_rigid(const imu* msg) {
  return *msg->imu_rigid_;
}
void imu::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void imu::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
imu::imu()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.imu)
}
imu::imu(const imu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_mount_pos()) {
    mount_pos_ = new ::osi3::imu_IMUCfg(*from.mount_pos_);
  } else {
    mount_pos_ = nullptr;
  }
  if (from.has_imu_data()) {
    imu_data_ = new ::osi3::imu_IMUSensorData(*from.imu_data_);
  } else {
    imu_data_ = nullptr;
  }
  if (from.has_imu_truth()) {
    imu_truth_ = new ::osi3::imu_IMUGroundTruth(*from.imu_truth_);
  } else {
    imu_truth_ = nullptr;
  }
  if (from.has_imu_rigid()) {
    imu_rigid_ = new ::osi3::imu_IMURigidENUGNSS(*from.imu_rigid_);
  } else {
    imu_rigid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.imu)
}

void imu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_imu_osi_5fimu_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_rigid_) -
      reinterpret_cast<char*>(&version_)) + sizeof(imu_rigid_));
}

imu::~imu() {
  // @@protoc_insertion_point(destructor:osi3.imu)
  SharedDtor();
}

void imu::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete mount_pos_;
  if (this != internal_default_instance()) delete imu_data_;
  if (this != internal_default_instance()) delete imu_truth_;
  if (this != internal_default_instance()) delete imu_rigid_;
}

void imu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const imu& imu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_imu_osi_5fimu_2eproto.base);
  return *internal_default_instance();
}


void imu::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mount_pos_ != nullptr) {
    delete mount_pos_;
  }
  mount_pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imu_data_ != nullptr) {
    delete imu_data_;
  }
  imu_data_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imu_truth_ != nullptr) {
    delete imu_truth_;
  }
  imu_truth_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && imu_rigid_ != nullptr) {
    delete imu_rigid_;
  }
  imu_rigid_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* imu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.IMUCfg mount_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mount_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.IMUSensorData imu_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_imu_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.IMUGroundTruth imu_truth = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_imu_truth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.imu.IMURigidENUGNSS imu_rigid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_imu_rigid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool imu::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.imu)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.IMUCfg mount_pos = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mount_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.IMUSensorData imu_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.IMUGroundTruth imu_truth = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_truth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.imu.IMURigidENUGNSS imu_rigid = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_imu_rigid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.imu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.imu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void imu::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::timestamp(this), output);
  }

  // .osi3.imu.IMUCfg mount_pos = 3;
  if (this->has_mount_pos()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mount_pos(this), output);
  }

  // .osi3.imu.IMUSensorData imu_data = 4;
  if (this->has_imu_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::imu_data(this), output);
  }

  // .osi3.imu.IMUGroundTruth imu_truth = 5;
  if (this->has_imu_truth()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::imu_truth(this), output);
  }

  // .osi3.imu.IMURigidENUGNSS imu_rigid = 6;
  if (this->has_imu_rigid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::imu_rigid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.imu)
}

::PROTOBUF_NAMESPACE_ID::uint8* imu::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.imu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::timestamp(this), target);
  }

  // .osi3.imu.IMUCfg mount_pos = 3;
  if (this->has_mount_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mount_pos(this), target);
  }

  // .osi3.imu.IMUSensorData imu_data = 4;
  if (this->has_imu_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::imu_data(this), target);
  }

  // .osi3.imu.IMUGroundTruth imu_truth = 5;
  if (this->has_imu_truth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::imu_truth(this), target);
  }

  // .osi3.imu.IMURigidENUGNSS imu_rigid = 6;
  if (this->has_imu_rigid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::imu_rigid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.imu)
  return target;
}

size_t imu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.imu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .osi3.imu.IMUCfg mount_pos = 3;
  if (this->has_mount_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mount_pos_);
  }

  // .osi3.imu.IMUSensorData imu_data = 4;
  if (this->has_imu_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_data_);
  }

  // .osi3.imu.IMUGroundTruth imu_truth = 5;
  if (this->has_imu_truth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_truth_);
  }

  // .osi3.imu.IMURigidENUGNSS imu_rigid = 6;
  if (this->has_imu_rigid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *imu_rigid_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void imu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.imu)
  GOOGLE_DCHECK_NE(&from, this);
  const imu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<imu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.imu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.imu)
    MergeFrom(*source);
  }
}

void imu::MergeFrom(const imu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.imu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_mount_pos()) {
    mutable_mount_pos()->::osi3::imu_IMUCfg::MergeFrom(from.mount_pos());
  }
  if (from.has_imu_data()) {
    mutable_imu_data()->::osi3::imu_IMUSensorData::MergeFrom(from.imu_data());
  }
  if (from.has_imu_truth()) {
    mutable_imu_truth()->::osi3::imu_IMUGroundTruth::MergeFrom(from.imu_truth());
  }
  if (from.has_imu_rigid()) {
    mutable_imu_rigid()->::osi3::imu_IMURigidENUGNSS::MergeFrom(from.imu_rigid());
  }
}

void imu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void imu::CopyFrom(const imu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.imu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool imu::IsInitialized() const {
  return true;
}

void imu::InternalSwap(imu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(mount_pos_, other->mount_pos_);
  swap(imu_data_, other->imu_data_);
  swap(imu_truth_, other->imu_truth_);
  swap(imu_rigid_, other->imu_rigid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata imu::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::imu_Quaternion* Arena::CreateMaybeMessage< ::osi3::imu_Quaternion >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu_EulerAngle* Arena::CreateMaybeMessage< ::osi3::imu_EulerAngle >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_EulerAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu_IMUCfg* Arena::CreateMaybeMessage< ::osi3::imu_IMUCfg >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_IMUCfg >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu_WheelSpd* Arena::CreateMaybeMessage< ::osi3::imu_WheelSpd >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_WheelSpd >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu_GNSSData* Arena::CreateMaybeMessage< ::osi3::imu_GNSSData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_GNSSData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu_IMUSensorData* Arena::CreateMaybeMessage< ::osi3::imu_IMUSensorData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_IMUSensorData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu_IMUGroundTruth* Arena::CreateMaybeMessage< ::osi3::imu_IMUGroundTruth >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_IMUGroundTruth >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu_IMURigidENUGNSS* Arena::CreateMaybeMessage< ::osi3::imu_IMURigidENUGNSS >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu_IMURigidENUGNSS >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::imu* Arena::CreateMaybeMessage< ::osi3::imu >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::imu >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
