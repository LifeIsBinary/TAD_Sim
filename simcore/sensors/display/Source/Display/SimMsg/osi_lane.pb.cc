// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_lane.proto
#pragma warning (disable : 4125)

#include "osi_lane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalReference_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Lane_Classification_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lane_Classification_LanePairing_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lane_Classification_RoadCondition_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneBoundary_Classification_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
namespace osi3 {
class Lane_Classification_RoadConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane_Classification_RoadCondition> _instance;
} _Lane_Classification_RoadCondition_default_instance_;
class Lane_Classification_LanePairingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane_Classification_LanePairing> _instance;
} _Lane_Classification_LanePairing_default_instance_;
class Lane_ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane_Classification> _instance;
} _Lane_Classification_default_instance_;
class LaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lane> _instance;
} _Lane_default_instance_;
class LaneBoundary_BoundaryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneBoundary_BoundaryPoint> _instance;
} _LaneBoundary_BoundaryPoint_default_instance_;
class LaneBoundary_ClassificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneBoundary_Classification> _instance;
} _LaneBoundary_Classification_default_instance_;
class LaneBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LaneBoundary> _instance;
} _LaneBoundary_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_Lane_osi_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_Lane_default_instance_;
    new (ptr) ::osi3::Lane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Lane_osi_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_Lane_osi_5flane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Lane_Classification_osi_5flane_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Lane_Classification_osi_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_Lane_Classification_default_instance_;
    new (ptr) ::osi3::Lane_Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane_Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Lane_Classification_osi_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Lane_Classification_osi_5flane_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Lane_Classification_LanePairing_osi_5flane_2eproto.base,
      &scc_info_Lane_Classification_RoadCondition_osi_5flane_2eproto.base,}};

static void InitDefaultsscc_info_Lane_Classification_LanePairing_osi_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_Lane_Classification_LanePairing_default_instance_;
    new (ptr) ::osi3::Lane_Classification_LanePairing();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane_Classification_LanePairing::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Lane_Classification_LanePairing_osi_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Lane_Classification_LanePairing_osi_5flane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_Lane_Classification_RoadCondition_osi_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_Lane_Classification_RoadCondition_default_instance_;
    new (ptr) ::osi3::Lane_Classification_RoadCondition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::Lane_Classification_RoadCondition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lane_Classification_RoadCondition_osi_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Lane_Classification_RoadCondition_osi_5flane_2eproto}, {}};

static void InitDefaultsscc_info_LaneBoundary_osi_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LaneBoundary_default_instance_;
    new (ptr) ::osi3::LaneBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LaneBoundary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LaneBoundary_osi_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_LaneBoundary_osi_5flane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto.base,
      &scc_info_LaneBoundary_Classification_osi_5flane_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LaneBoundary_BoundaryPoint_default_instance_;
    new (ptr) ::osi3::LaneBoundary_BoundaryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LaneBoundary_BoundaryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto}, {
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LaneBoundary_Classification_osi_5flane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LaneBoundary_Classification_default_instance_;
    new (ptr) ::osi3::LaneBoundary_Classification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LaneBoundary_Classification::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneBoundary_Classification_osi_5flane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_LaneBoundary_Classification_osi_5flane_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5flane_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5flane_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5flane_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5flane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_temperature_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_water_film_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_freezing_point_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_ice_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_roughness_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_RoadCondition, surface_texture_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, antecessor_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification_LanePairing, successor_lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, is_host_vehicle_lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, centerline_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, centerline_is_driving_direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, left_adjacent_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, right_adjacent_lane_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, lane_pairing_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, right_lane_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, left_lane_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, free_lane_boundary_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, road_condition_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane_Classification, subtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::Lane, source_reference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, width_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, height_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_BoundaryPoint, dash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, color_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary_Classification, limiting_structure_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, boundary_line_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::LaneBoundary, color_description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::Lane_Classification_RoadCondition)},
  { 11, -1, sizeof(::osi3::Lane_Classification_LanePairing)},
  { 18, -1, sizeof(::osi3::Lane_Classification)},
  { 35, -1, sizeof(::osi3::Lane)},
  { 43, -1, sizeof(::osi3::LaneBoundary_BoundaryPoint)},
  { 52, -1, sizeof(::osi3::LaneBoundary_Classification)},
  { 60, -1, sizeof(::osi3::LaneBoundary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_Classification_RoadCondition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_Classification_LanePairing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_Lane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LaneBoundary_BoundaryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LaneBoundary_Classification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LaneBoundary_default_instance_),
};

const char descriptor_table_protodef_osi_5flane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016osi_lane.proto\022\004osi3\032\020osi_common.proto"
  "\"\252\013\n\004Lane\022\034\n\002id\030\001 \001(\0132\020.osi3.Identifier\022"
  "1\n\016classification\030\002 \001(\0132\031.osi3.Lane.Clas"
  "sification\0221\n\020source_reference\030\003 \003(\0132\027.o"
  "si3.ExternalReference\032\235\n\n\016Classification"
  "\022,\n\004type\030\001 \001(\0162\036.osi3.Lane.Classificatio"
  "n.Type\022\034\n\024is_host_vehicle_lane\030\002 \001(\010\022\"\n\n"
  "centerline\030\003 \003(\0132\016.osi3.Vector3d\022\'\n\037cent"
  "erline_is_driving_direction\030\004 \001(\010\022/\n\025lef"
  "t_adjacent_lane_id\030\005 \003(\0132\020.osi3.Identifi"
  "er\0220\n\026right_adjacent_lane_id\030\006 \003(\0132\020.osi"
  "3.Identifier\022;\n\014lane_pairing\030\007 \003(\0132%.osi"
  "3.Lane.Classification.LanePairing\0220\n\026rig"
  "ht_lane_boundary_id\030\010 \003(\0132\020.osi3.Identif"
  "ier\022/\n\025left_lane_boundary_id\030\t \003(\0132\020.osi"
  "3.Identifier\022/\n\025free_lane_boundary_id\030\n "
  "\003(\0132\020.osi3.Identifier\022\?\n\016road_condition\030"
  "\013 \001(\0132\'.osi3.Lane.Classification.RoadCon"
  "dition\0222\n\007subtype\030\014 \001(\0162!.osi3.Lane.Clas"
  "sification.Subtype\032\261\001\n\rRoadCondition\022\033\n\023"
  "surface_temperature\030\001 \001(\001\022\032\n\022surface_wat"
  "er_film\030\002 \001(\001\022\036\n\026surface_freezing_point\030"
  "\003 \001(\001\022\023\n\013surface_ice\030\004 \001(\001\022\031\n\021surface_ro"
  "ughness\030\005 \001(\001\022\027\n\017surface_texture\030\006 \001(\001\032h"
  "\n\013LanePairing\022,\n\022antecessor_lane_id\030\001 \001("
  "\0132\020.osi3.Identifier\022+\n\021successor_lane_id"
  "\030\002 \001(\0132\020.osi3.Identifier\"f\n\004Type\022\020\n\014TYPE"
  "_UNKNOWN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE_DRIVI"
  "NG\020\002\022\023\n\017TYPE_NONDRIVING\020\003\022\025\n\021TYPE_INTERS"
  "ECTION\020\004\"\302\002\n\007Subtype\022\023\n\017SUBTYPE_UNKNOWN\020"
  "\000\022\021\n\rSUBTYPE_OTHER\020\001\022\022\n\016SUBTYPE_NORMAL\020\002"
  "\022\022\n\016SUBTYPE_BIKING\020\003\022\024\n\020SUBTYPE_SIDEWALK"
  "\020\004\022\023\n\017SUBTYPE_PARKING\020\005\022\020\n\014SUBTYPE_STOP\020"
  "\006\022\026\n\022SUBTYPE_RESTRICTED\020\007\022\022\n\016SUBTYPE_BOR"
  "DER\020\010\022\024\n\020SUBTYPE_SHOULDER\020\t\022\020\n\014SUBTYPE_E"
  "XIT\020\n\022\021\n\rSUBTYPE_ENTRY\020\013\022\022\n\016SUBTYPE_ONRA"
  "MP\020\014\022\023\n\017SUBTYPE_OFFRAMP\020\r\022\032\n\026SUBTYPE_CON"
  "NECTINGRAMP\020\016\"\244\t\n\014LaneBoundary\022\034\n\002id\030\001 \001"
  "(\0132\020.osi3.Identifier\0227\n\rboundary_line\030\002 "
  "\003(\0132 .osi3.LaneBoundary.BoundaryPoint\0229\n"
  "\016classification\030\003 \001(\0132!.osi3.LaneBoundar"
  "y.Classification\0221\n\020source_reference\030\004 \003"
  "(\0132\027.osi3.ExternalReference\0221\n\021color_des"
  "cription\030\005 \001(\0132\026.osi3.ColorDescription\032\356"
  "\001\n\rBoundaryPoint\022 \n\010position\030\001 \001(\0132\016.osi"
  "3.Vector3d\022\r\n\005width\030\002 \001(\001\022\016\n\006height\030\003 \001("
  "\001\0223\n\004dash\030\004 \001(\0162%.osi3.LaneBoundary.Boun"
  "daryPoint.Dash\"g\n\004Dash\022\020\n\014DASH_UNKNOWN\020\000"
  "\022\016\n\nDASH_OTHER\020\001\022\016\n\nDASH_START\020\002\022\021\n\rDASH"
  "_CONTINUE\020\003\022\014\n\010DASH_END\020\004\022\014\n\010DASH_GAP\020\005\032"
  "\252\005\n\016Classification\0224\n\004type\030\001 \001(\0162&.osi3."
  "LaneBoundary.Classification.Type\0226\n\005colo"
  "r\030\002 \001(\0162\'.osi3.LaneBoundary.Classificati"
  "on.Color\022/\n\025limiting_structure_id\030\003 \003(\0132"
  "\020.osi3.Identifier\"\303\002\n\004Type\022\020\n\014TYPE_UNKNO"
  "WN\020\000\022\016\n\nTYPE_OTHER\020\001\022\020\n\014TYPE_NO_LINE\020\002\022\023"
  "\n\017TYPE_SOLID_LINE\020\003\022\024\n\020TYPE_DASHED_LINE\020"
  "\004\022\023\n\017TYPE_BOTTS_DOTS\020\005\022\022\n\016TYPE_ROAD_EDGE"
  "\020\006\022\022\n\016TYPE_SNOW_EDGE\020\007\022\023\n\017TYPE_GRASS_EDG"
  "E\020\010\022\024\n\020TYPE_GRAVEL_EDGE\020\t\022\022\n\016TYPE_SOIL_E"
  "DGE\020\n\022\023\n\017TYPE_GUARD_RAIL\020\013\022\r\n\tTYPE_CURB\020"
  "\014\022\022\n\016TYPE_STRUCTURE\020\r\022\020\n\014TYPE_BARRIER\020\016\022"
  "\026\n\022TYPE_SOUND_BARRIER\020\017\"\262\001\n\005Color\022\021\n\rCOL"
  "OR_UNKNOWN\020\000\022\017\n\013COLOR_OTHER\020\001\022\016\n\nCOLOR_N"
  "ONE\020\002\022\017\n\013COLOR_WHITE\020\003\022\020\n\014COLOR_YELLOW\020\004"
  "\022\r\n\tCOLOR_RED\020\005\022\016\n\nCOLOR_BLUE\020\006\022\017\n\013COLOR"
  "_GREEN\020\007\022\020\n\014COLOR_VIOLET\020\010\022\020\n\014COLOR_ORAN"
  "GE\020\tB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5flane_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5flane_2eproto_sccs[7] = {
  &scc_info_Lane_osi_5flane_2eproto.base,
  &scc_info_Lane_Classification_osi_5flane_2eproto.base,
  &scc_info_Lane_Classification_LanePairing_osi_5flane_2eproto.base,
  &scc_info_Lane_Classification_RoadCondition_osi_5flane_2eproto.base,
  &scc_info_LaneBoundary_osi_5flane_2eproto.base,
  &scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto.base,
  &scc_info_LaneBoundary_Classification_osi_5flane_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5flane_2eproto_once;
static bool descriptor_table_osi_5flane_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5flane_2eproto = {
  &descriptor_table_osi_5flane_2eproto_initialized, descriptor_table_protodef_osi_5flane_2eproto, "osi_lane.proto", 2696,
  &descriptor_table_osi_5flane_2eproto_once, descriptor_table_osi_5flane_2eproto_sccs, descriptor_table_osi_5flane_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_osi_5flane_2eproto::offsets,
  file_level_metadata_osi_5flane_2eproto, 7, file_level_enum_descriptors_osi_5flane_2eproto, file_level_service_descriptors_osi_5flane_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5flane_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5flane_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[0];
}
bool Lane_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Lane_Classification_Type Lane_Classification::TYPE_UNKNOWN;
constexpr Lane_Classification_Type Lane_Classification::TYPE_OTHER;
constexpr Lane_Classification_Type Lane_Classification::TYPE_DRIVING;
constexpr Lane_Classification_Type Lane_Classification::TYPE_NONDRIVING;
constexpr Lane_Classification_Type Lane_Classification::TYPE_INTERSECTION;
constexpr Lane_Classification_Type Lane_Classification::Type_MIN;
constexpr Lane_Classification_Type Lane_Classification::Type_MAX;
constexpr int Lane_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Lane_Classification_Subtype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[1];
}
bool Lane_Classification_Subtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_UNKNOWN;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_OTHER;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_NORMAL;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_BIKING;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_SIDEWALK;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_PARKING;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_STOP;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_RESTRICTED;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_BORDER;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_SHOULDER;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_EXIT;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_ENTRY;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_ONRAMP;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_OFFRAMP;
constexpr Lane_Classification_Subtype Lane_Classification::SUBTYPE_CONNECTINGRAMP;
constexpr Lane_Classification_Subtype Lane_Classification::Subtype_MIN;
constexpr Lane_Classification_Subtype Lane_Classification::Subtype_MAX;
constexpr int Lane_Classification::Subtype_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundary_BoundaryPoint_Dash_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[2];
}
bool LaneBoundary_BoundaryPoint_Dash_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_UNKNOWN;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_OTHER;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_START;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_CONTINUE;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_END;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::DASH_GAP;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::Dash_MIN;
constexpr LaneBoundary_BoundaryPoint_Dash LaneBoundary_BoundaryPoint::Dash_MAX;
constexpr int LaneBoundary_BoundaryPoint::Dash_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundary_Classification_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[3];
}
bool LaneBoundary_Classification_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_UNKNOWN;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_OTHER;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_NO_LINE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOLID_LINE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_DASHED_LINE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_BOTTS_DOTS;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_ROAD_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SNOW_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GRASS_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GRAVEL_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOIL_EDGE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_GUARD_RAIL;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_CURB;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_STRUCTURE;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_BARRIER;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::TYPE_SOUND_BARRIER;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::Type_MIN;
constexpr LaneBoundary_Classification_Type LaneBoundary_Classification::Type_MAX;
constexpr int LaneBoundary_Classification::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneBoundary_Classification_Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flane_2eproto);
  return file_level_enum_descriptors_osi_5flane_2eproto[4];
}
bool LaneBoundary_Classification_Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_UNKNOWN;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_OTHER;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_NONE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_WHITE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_YELLOW;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_RED;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_BLUE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_GREEN;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_VIOLET;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::COLOR_ORANGE;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::Color_MIN;
constexpr LaneBoundary_Classification_Color LaneBoundary_Classification::Color_MAX;
constexpr int LaneBoundary_Classification::Color_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Lane_Classification_RoadCondition::InitAsDefaultInstance() {
}
class Lane_Classification_RoadCondition::_Internal {
 public:
};

Lane_Classification_RoadCondition::Lane_Classification_RoadCondition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane.Classification.RoadCondition)
}
Lane_Classification_RoadCondition::Lane_Classification_RoadCondition(const Lane_Classification_RoadCondition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&surface_temperature_, &from.surface_temperature_,
    static_cast<size_t>(reinterpret_cast<char*>(&surface_texture_) -
    reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification.RoadCondition)
}

void Lane_Classification_RoadCondition::SharedCtor() {
  ::memset(&surface_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&surface_texture_) -
      reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
}

Lane_Classification_RoadCondition::~Lane_Classification_RoadCondition() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification.RoadCondition)
  SharedDtor();
}

void Lane_Classification_RoadCondition::SharedDtor() {
}

void Lane_Classification_RoadCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane_Classification_RoadCondition& Lane_Classification_RoadCondition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_Classification_RoadCondition_osi_5flane_2eproto.base);
  return *internal_default_instance();
}


void Lane_Classification_RoadCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification.RoadCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&surface_temperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&surface_texture_) -
      reinterpret_cast<char*>(&surface_temperature_)) + sizeof(surface_texture_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lane_Classification_RoadCondition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double surface_temperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          surface_temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double surface_water_film = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          surface_water_film_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double surface_freezing_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          surface_freezing_point_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double surface_ice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          surface_ice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double surface_roughness = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          surface_roughness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double surface_texture = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          surface_texture_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lane_Classification_RoadCondition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane.Classification.RoadCondition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double surface_temperature = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_water_film = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_water_film_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_freezing_point = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_freezing_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_ice = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_ice_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_roughness = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_roughness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double surface_texture = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_texture_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane.Classification.RoadCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane.Classification.RoadCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lane_Classification_RoadCondition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane.Classification.RoadCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double surface_temperature = 1;
  if (!(this->surface_temperature() <= 0 && this->surface_temperature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->surface_temperature(), output);
  }

  // double surface_water_film = 2;
  if (!(this->surface_water_film() <= 0 && this->surface_water_film() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->surface_water_film(), output);
  }

  // double surface_freezing_point = 3;
  if (!(this->surface_freezing_point() <= 0 && this->surface_freezing_point() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->surface_freezing_point(), output);
  }

  // double surface_ice = 4;
  if (!(this->surface_ice() <= 0 && this->surface_ice() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->surface_ice(), output);
  }

  // double surface_roughness = 5;
  if (!(this->surface_roughness() <= 0 && this->surface_roughness() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->surface_roughness(), output);
  }

  // double surface_texture = 6;
  if (!(this->surface_texture() <= 0 && this->surface_texture() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->surface_texture(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane.Classification.RoadCondition)
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane_Classification_RoadCondition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification.RoadCondition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double surface_temperature = 1;
  if (!(this->surface_temperature() <= 0 && this->surface_temperature() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->surface_temperature(), target);
  }

  // double surface_water_film = 2;
  if (!(this->surface_water_film() <= 0 && this->surface_water_film() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->surface_water_film(), target);
  }

  // double surface_freezing_point = 3;
  if (!(this->surface_freezing_point() <= 0 && this->surface_freezing_point() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->surface_freezing_point(), target);
  }

  // double surface_ice = 4;
  if (!(this->surface_ice() <= 0 && this->surface_ice() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->surface_ice(), target);
  }

  // double surface_roughness = 5;
  if (!(this->surface_roughness() <= 0 && this->surface_roughness() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->surface_roughness(), target);
  }

  // double surface_texture = 6;
  if (!(this->surface_texture() <= 0 && this->surface_texture() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->surface_texture(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification.RoadCondition)
  return target;
}

size_t Lane_Classification_RoadCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification.RoadCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double surface_temperature = 1;
  if (!(this->surface_temperature() <= 0 && this->surface_temperature() >= 0)) {
    total_size += 1 + 8;
  }

  // double surface_water_film = 2;
  if (!(this->surface_water_film() <= 0 && this->surface_water_film() >= 0)) {
    total_size += 1 + 8;
  }

  // double surface_freezing_point = 3;
  if (!(this->surface_freezing_point() <= 0 && this->surface_freezing_point() >= 0)) {
    total_size += 1 + 8;
  }

  // double surface_ice = 4;
  if (!(this->surface_ice() <= 0 && this->surface_ice() >= 0)) {
    total_size += 1 + 8;
  }

  // double surface_roughness = 5;
  if (!(this->surface_roughness() <= 0 && this->surface_roughness() >= 0)) {
    total_size += 1 + 8;
  }

  // double surface_texture = 6;
  if (!(this->surface_texture() <= 0 && this->surface_texture() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane_Classification_RoadCondition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane.Classification.RoadCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane_Classification_RoadCondition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lane_Classification_RoadCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane.Classification.RoadCondition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane.Classification.RoadCondition)
    MergeFrom(*source);
  }
}

void Lane_Classification_RoadCondition::MergeFrom(const Lane_Classification_RoadCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification.RoadCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.surface_temperature() <= 0 && from.surface_temperature() >= 0)) {
    set_surface_temperature(from.surface_temperature());
  }
  if (!(from.surface_water_film() <= 0 && from.surface_water_film() >= 0)) {
    set_surface_water_film(from.surface_water_film());
  }
  if (!(from.surface_freezing_point() <= 0 && from.surface_freezing_point() >= 0)) {
    set_surface_freezing_point(from.surface_freezing_point());
  }
  if (!(from.surface_ice() <= 0 && from.surface_ice() >= 0)) {
    set_surface_ice(from.surface_ice());
  }
  if (!(from.surface_roughness() <= 0 && from.surface_roughness() >= 0)) {
    set_surface_roughness(from.surface_roughness());
  }
  if (!(from.surface_texture() <= 0 && from.surface_texture() >= 0)) {
    set_surface_texture(from.surface_texture());
  }
}

void Lane_Classification_RoadCondition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane.Classification.RoadCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane_Classification_RoadCondition::CopyFrom(const Lane_Classification_RoadCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification.RoadCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification_RoadCondition::IsInitialized() const {
  return true;
}

void Lane_Classification_RoadCondition::InternalSwap(Lane_Classification_RoadCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(surface_temperature_, other->surface_temperature_);
  swap(surface_water_film_, other->surface_water_film_);
  swap(surface_freezing_point_, other->surface_freezing_point_);
  swap(surface_ice_, other->surface_ice_);
  swap(surface_roughness_, other->surface_roughness_);
  swap(surface_texture_, other->surface_texture_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane_Classification_RoadCondition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lane_Classification_LanePairing::InitAsDefaultInstance() {
  ::osi3::_Lane_Classification_LanePairing_default_instance_._instance.get_mutable()->antecessor_lane_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_Lane_Classification_LanePairing_default_instance_._instance.get_mutable()->successor_lane_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class Lane_Classification_LanePairing::_Internal {
 public:
  static const ::osi3::Identifier& antecessor_lane_id(const Lane_Classification_LanePairing* msg);
  static const ::osi3::Identifier& successor_lane_id(const Lane_Classification_LanePairing* msg);
};

const ::osi3::Identifier&
Lane_Classification_LanePairing::_Internal::antecessor_lane_id(const Lane_Classification_LanePairing* msg) {
  return *msg->antecessor_lane_id_;
}
const ::osi3::Identifier&
Lane_Classification_LanePairing::_Internal::successor_lane_id(const Lane_Classification_LanePairing* msg) {
  return *msg->successor_lane_id_;
}
void Lane_Classification_LanePairing::clear_antecessor_lane_id() {
  if (GetArenaNoVirtual() == nullptr && antecessor_lane_id_ != nullptr) {
    delete antecessor_lane_id_;
  }
  antecessor_lane_id_ = nullptr;
}
void Lane_Classification_LanePairing::clear_successor_lane_id() {
  if (GetArenaNoVirtual() == nullptr && successor_lane_id_ != nullptr) {
    delete successor_lane_id_;
  }
  successor_lane_id_ = nullptr;
}
Lane_Classification_LanePairing::Lane_Classification_LanePairing()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane.Classification.LanePairing)
}
Lane_Classification_LanePairing::Lane_Classification_LanePairing(const Lane_Classification_LanePairing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_antecessor_lane_id()) {
    antecessor_lane_id_ = new ::osi3::Identifier(*from.antecessor_lane_id_);
  } else {
    antecessor_lane_id_ = nullptr;
  }
  if (from.has_successor_lane_id()) {
    successor_lane_id_ = new ::osi3::Identifier(*from.successor_lane_id_);
  } else {
    successor_lane_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification.LanePairing)
}

void Lane_Classification_LanePairing::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lane_Classification_LanePairing_osi_5flane_2eproto.base);
  ::memset(&antecessor_lane_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&successor_lane_id_) -
      reinterpret_cast<char*>(&antecessor_lane_id_)) + sizeof(successor_lane_id_));
}

Lane_Classification_LanePairing::~Lane_Classification_LanePairing() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification.LanePairing)
  SharedDtor();
}

void Lane_Classification_LanePairing::SharedDtor() {
  if (this != internal_default_instance()) delete antecessor_lane_id_;
  if (this != internal_default_instance()) delete successor_lane_id_;
}

void Lane_Classification_LanePairing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane_Classification_LanePairing& Lane_Classification_LanePairing::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_Classification_LanePairing_osi_5flane_2eproto.base);
  return *internal_default_instance();
}


void Lane_Classification_LanePairing::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification.LanePairing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && antecessor_lane_id_ != nullptr) {
    delete antecessor_lane_id_;
  }
  antecessor_lane_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && successor_lane_id_ != nullptr) {
    delete successor_lane_id_;
  }
  successor_lane_id_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lane_Classification_LanePairing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier antecessor_lane_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_antecessor_lane_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier successor_lane_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_successor_lane_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lane_Classification_LanePairing::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane.Classification.LanePairing)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier antecessor_lane_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_antecessor_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier successor_lane_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_successor_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane.Classification.LanePairing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane.Classification.LanePairing)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lane_Classification_LanePairing::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane.Classification.LanePairing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier antecessor_lane_id = 1;
  if (this->has_antecessor_lane_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::antecessor_lane_id(this), output);
  }

  // .osi3.Identifier successor_lane_id = 2;
  if (this->has_successor_lane_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::successor_lane_id(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane.Classification.LanePairing)
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane_Classification_LanePairing::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification.LanePairing)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier antecessor_lane_id = 1;
  if (this->has_antecessor_lane_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::antecessor_lane_id(this), target);
  }

  // .osi3.Identifier successor_lane_id = 2;
  if (this->has_successor_lane_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::successor_lane_id(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification.LanePairing)
  return target;
}

size_t Lane_Classification_LanePairing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification.LanePairing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier antecessor_lane_id = 1;
  if (this->has_antecessor_lane_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *antecessor_lane_id_);
  }

  // .osi3.Identifier successor_lane_id = 2;
  if (this->has_successor_lane_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *successor_lane_id_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane_Classification_LanePairing::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane.Classification.LanePairing)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane_Classification_LanePairing* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lane_Classification_LanePairing>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane.Classification.LanePairing)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane.Classification.LanePairing)
    MergeFrom(*source);
  }
}

void Lane_Classification_LanePairing::MergeFrom(const Lane_Classification_LanePairing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification.LanePairing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_antecessor_lane_id()) {
    mutable_antecessor_lane_id()->::osi3::Identifier::MergeFrom(from.antecessor_lane_id());
  }
  if (from.has_successor_lane_id()) {
    mutable_successor_lane_id()->::osi3::Identifier::MergeFrom(from.successor_lane_id());
  }
}

void Lane_Classification_LanePairing::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane.Classification.LanePairing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane_Classification_LanePairing::CopyFrom(const Lane_Classification_LanePairing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification.LanePairing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification_LanePairing::IsInitialized() const {
  return true;
}

void Lane_Classification_LanePairing::InternalSwap(Lane_Classification_LanePairing* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(antecessor_lane_id_, other->antecessor_lane_id_);
  swap(successor_lane_id_, other->successor_lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane_Classification_LanePairing::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lane_Classification::InitAsDefaultInstance() {
  ::osi3::_Lane_Classification_default_instance_._instance.get_mutable()->road_condition_ = const_cast< ::osi3::Lane_Classification_RoadCondition*>(
      ::osi3::Lane_Classification_RoadCondition::internal_default_instance());
}
class Lane_Classification::_Internal {
 public:
  static const ::osi3::Lane_Classification_RoadCondition& road_condition(const Lane_Classification* msg);
};

const ::osi3::Lane_Classification_RoadCondition&
Lane_Classification::_Internal::road_condition(const Lane_Classification* msg) {
  return *msg->road_condition_;
}
void Lane_Classification::clear_centerline() {
  centerline_.Clear();
}
void Lane_Classification::clear_left_adjacent_lane_id() {
  left_adjacent_lane_id_.Clear();
}
void Lane_Classification::clear_right_adjacent_lane_id() {
  right_adjacent_lane_id_.Clear();
}
void Lane_Classification::clear_right_lane_boundary_id() {
  right_lane_boundary_id_.Clear();
}
void Lane_Classification::clear_left_lane_boundary_id() {
  left_lane_boundary_id_.Clear();
}
void Lane_Classification::clear_free_lane_boundary_id() {
  free_lane_boundary_id_.Clear();
}
Lane_Classification::Lane_Classification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane.Classification)
}
Lane_Classification::Lane_Classification(const Lane_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      centerline_(from.centerline_),
      left_adjacent_lane_id_(from.left_adjacent_lane_id_),
      right_adjacent_lane_id_(from.right_adjacent_lane_id_),
      lane_pairing_(from.lane_pairing_),
      right_lane_boundary_id_(from.right_lane_boundary_id_),
      left_lane_boundary_id_(from.left_lane_boundary_id_),
      free_lane_boundary_id_(from.free_lane_boundary_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_road_condition()) {
    road_condition_ = new ::osi3::Lane_Classification_RoadCondition(*from.road_condition_);
  } else {
    road_condition_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtype_) -
    reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  // @@protoc_insertion_point(copy_constructor:osi3.Lane.Classification)
}

void Lane_Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lane_Classification_osi_5flane_2eproto.base);
  ::memset(&road_condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtype_) -
      reinterpret_cast<char*>(&road_condition_)) + sizeof(subtype_));
}

Lane_Classification::~Lane_Classification() {
  // @@protoc_insertion_point(destructor:osi3.Lane.Classification)
  SharedDtor();
}

void Lane_Classification::SharedDtor() {
  if (this != internal_default_instance()) delete road_condition_;
}

void Lane_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane_Classification& Lane_Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_Classification_osi_5flane_2eproto.base);
  return *internal_default_instance();
}


void Lane_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  centerline_.Clear();
  left_adjacent_lane_id_.Clear();
  right_adjacent_lane_id_.Clear();
  lane_pairing_.Clear();
  right_lane_boundary_id_.Clear();
  left_lane_boundary_id_.Clear();
  free_lane_boundary_id_.Clear();
  if (GetArenaNoVirtual() == nullptr && road_condition_ != nullptr) {
    delete road_condition_;
  }
  road_condition_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtype_) -
      reinterpret_cast<char*>(&type_)) + sizeof(subtype_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lane_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Lane.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::Lane_Classification_Type>(val));
        } else goto handle_unusual;
        continue;
      // bool is_host_vehicle_lane = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_host_vehicle_lane_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Vector3d centerline = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_centerline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // bool centerline_is_driving_direction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          centerline_is_driving_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier left_adjacent_lane_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_left_adjacent_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier right_adjacent_lane_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_right_adjacent_lane_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_pairing(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier right_lane_boundary_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_right_lane_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier left_lane_boundary_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_left_lane_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier free_lane_boundary_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_free_lane_boundary_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // .osi3.Lane.Classification.RoadCondition road_condition = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_road_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Lane.Classification.Subtype subtype = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_subtype(static_cast<::osi3::Lane_Classification_Subtype>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lane_Classification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane.Classification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Lane.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::Lane_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_host_vehicle_lane = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_host_vehicle_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Vector3d centerline = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_centerline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool centerline_is_driving_direction = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &centerline_is_driving_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier left_adjacent_lane_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left_adjacent_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier right_adjacent_lane_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right_adjacent_lane_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_pairing()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier right_lane_boundary_id = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_right_lane_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier left_lane_boundary_id = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_left_lane_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier free_lane_boundary_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_free_lane_boundary_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Lane.Classification.RoadCondition road_condition = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_road_condition()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Lane.Classification.Subtype subtype = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_subtype(static_cast< ::osi3::Lane_Classification_Subtype >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane.Classification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lane_Classification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Lane.Classification.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bool is_host_vehicle_lane = 2;
  if (this->is_host_vehicle_lane() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_host_vehicle_lane(), output);
  }

  // repeated .osi3.Vector3d centerline = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->centerline_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->centerline(static_cast<int>(i)),
      output);
  }

  // bool centerline_is_driving_direction = 4;
  if (this->centerline_is_driving_direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->centerline_is_driving_direction(), output);
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_adjacent_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->left_adjacent_lane_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_adjacent_lane_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->right_adjacent_lane_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_pairing_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->lane_pairing(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_lane_boundary_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->right_lane_boundary_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_lane_boundary_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->left_lane_boundary_id(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->free_lane_boundary_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->free_lane_boundary_id(static_cast<int>(i)),
      output);
  }

  // .osi3.Lane.Classification.RoadCondition road_condition = 11;
  if (this->has_road_condition()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::road_condition(this), output);
  }

  // .osi3.Lane.Classification.Subtype subtype = 12;
  if (this->subtype() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->subtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane.Classification)
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane_Classification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Lane.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // bool is_host_vehicle_lane = 2;
  if (this->is_host_vehicle_lane() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_host_vehicle_lane(), target);
  }

  // repeated .osi3.Vector3d centerline = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->centerline_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->centerline(static_cast<int>(i)), target);
  }

  // bool centerline_is_driving_direction = 4;
  if (this->centerline_is_driving_direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->centerline_is_driving_direction(), target);
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_adjacent_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->left_adjacent_lane_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_adjacent_lane_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->right_adjacent_lane_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_pairing_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->lane_pairing(static_cast<int>(i)), target);
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->right_lane_boundary_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->right_lane_boundary_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->left_lane_boundary_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->left_lane_boundary_id(static_cast<int>(i)), target);
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->free_lane_boundary_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->free_lane_boundary_id(static_cast<int>(i)), target);
  }

  // .osi3.Lane.Classification.RoadCondition road_condition = 11;
  if (this->has_road_condition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::road_condition(this), target);
  }

  // .osi3.Lane.Classification.Subtype subtype = 12;
  if (this->subtype() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->subtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane.Classification)
  return target;
}

size_t Lane_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane.Classification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Vector3d centerline = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->centerline_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->centerline(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier left_adjacent_lane_id = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->left_adjacent_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left_adjacent_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier right_adjacent_lane_id = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->right_adjacent_lane_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right_adjacent_lane_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Lane.Classification.LanePairing lane_pairing = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_pairing_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_pairing(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier right_lane_boundary_id = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->right_lane_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->right_lane_boundary_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier left_lane_boundary_id = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->left_lane_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->left_lane_boundary_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier free_lane_boundary_id = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->free_lane_boundary_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->free_lane_boundary_id(static_cast<int>(i)));
    }
  }

  // .osi3.Lane.Classification.RoadCondition road_condition = 11;
  if (this->has_road_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *road_condition_);
  }

  // .osi3.Lane.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // bool is_host_vehicle_lane = 2;
  if (this->is_host_vehicle_lane() != 0) {
    total_size += 1 + 1;
  }

  // bool centerline_is_driving_direction = 4;
  if (this->centerline_is_driving_direction() != 0) {
    total_size += 1 + 1;
  }

  // .osi3.Lane.Classification.Subtype subtype = 12;
  if (this->subtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->subtype());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane_Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane_Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lane_Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane.Classification)
    MergeFrom(*source);
  }
}

void Lane_Classification::MergeFrom(const Lane_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  centerline_.MergeFrom(from.centerline_);
  left_adjacent_lane_id_.MergeFrom(from.left_adjacent_lane_id_);
  right_adjacent_lane_id_.MergeFrom(from.right_adjacent_lane_id_);
  lane_pairing_.MergeFrom(from.lane_pairing_);
  right_lane_boundary_id_.MergeFrom(from.right_lane_boundary_id_);
  left_lane_boundary_id_.MergeFrom(from.left_lane_boundary_id_);
  free_lane_boundary_id_.MergeFrom(from.free_lane_boundary_id_);
  if (from.has_road_condition()) {
    mutable_road_condition()->::osi3::Lane_Classification_RoadCondition::MergeFrom(from.road_condition());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_host_vehicle_lane() != 0) {
    set_is_host_vehicle_lane(from.is_host_vehicle_lane());
  }
  if (from.centerline_is_driving_direction() != 0) {
    set_centerline_is_driving_direction(from.centerline_is_driving_direction());
  }
  if (from.subtype() != 0) {
    set_subtype(from.subtype());
  }
}

void Lane_Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane_Classification::CopyFrom(const Lane_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane_Classification::IsInitialized() const {
  return true;
}

void Lane_Classification::InternalSwap(Lane_Classification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&centerline_)->InternalSwap(CastToBase(&other->centerline_));
  CastToBase(&left_adjacent_lane_id_)->InternalSwap(CastToBase(&other->left_adjacent_lane_id_));
  CastToBase(&right_adjacent_lane_id_)->InternalSwap(CastToBase(&other->right_adjacent_lane_id_));
  CastToBase(&lane_pairing_)->InternalSwap(CastToBase(&other->lane_pairing_));
  CastToBase(&right_lane_boundary_id_)->InternalSwap(CastToBase(&other->right_lane_boundary_id_));
  CastToBase(&left_lane_boundary_id_)->InternalSwap(CastToBase(&other->left_lane_boundary_id_));
  CastToBase(&free_lane_boundary_id_)->InternalSwap(CastToBase(&other->free_lane_boundary_id_));
  swap(road_condition_, other->road_condition_);
  swap(type_, other->type_);
  swap(is_host_vehicle_lane_, other->is_host_vehicle_lane_);
  swap(centerline_is_driving_direction_, other->centerline_is_driving_direction_);
  swap(subtype_, other->subtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane_Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Lane::InitAsDefaultInstance() {
  ::osi3::_Lane_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_Lane_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::Lane_Classification*>(
      ::osi3::Lane_Classification::internal_default_instance());
}
class Lane::_Internal {
 public:
  static const ::osi3::Identifier& id(const Lane* msg);
  static const ::osi3::Lane_Classification& classification(const Lane* msg);
};

const ::osi3::Identifier&
Lane::_Internal::id(const Lane* msg) {
  return *msg->id_;
}
const ::osi3::Lane_Classification&
Lane::_Internal::classification(const Lane* msg) {
  return *msg->classification_;
}
void Lane::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void Lane::clear_source_reference() {
  source_reference_.Clear();
}
Lane::Lane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.Lane)
}
Lane::Lane(const Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::Lane_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.Lane)
}

void Lane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Lane_osi_5flane_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&id_)) + sizeof(classification_));
}

Lane::~Lane() {
  // @@protoc_insertion_point(destructor:osi3.Lane)
  SharedDtor();
}

void Lane::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete classification_;
}

void Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lane& Lane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lane_osi_5flane_2eproto.base);
  return *internal_default_instance();
}


void Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Lane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Lane.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Lane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.Lane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Lane.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.Lane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Lane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  // repeated .osi3.ExternalReference source_reference = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.Lane)
}

::PROTOBUF_NAMESPACE_ID::uint8* Lane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  // repeated .osi3.ExternalReference source_reference = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->source_reference(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.Lane)
  return target;
}

size_t Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Lane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.Lane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.Lane)
    MergeFrom(*source);
  }
}

void Lane::MergeFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::Lane_Classification::MergeFrom(from.classification());
  }
}

void Lane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lane::CopyFrom(const Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lane::IsInitialized() const {
  return true;
}

void Lane::InternalSwap(Lane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  swap(id_, other->id_);
  swap(classification_, other->classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneBoundary_BoundaryPoint::InitAsDefaultInstance() {
  ::osi3::_LaneBoundary_BoundaryPoint_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
class LaneBoundary_BoundaryPoint::_Internal {
 public:
  static const ::osi3::Vector3d& position(const LaneBoundary_BoundaryPoint* msg);
};

const ::osi3::Vector3d&
LaneBoundary_BoundaryPoint::_Internal::position(const LaneBoundary_BoundaryPoint* msg) {
  return *msg->position_;
}
void LaneBoundary_BoundaryPoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
LaneBoundary_BoundaryPoint::LaneBoundary_BoundaryPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LaneBoundary.BoundaryPoint)
}
LaneBoundary_BoundaryPoint::LaneBoundary_BoundaryPoint(const LaneBoundary_BoundaryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&dash_) -
    reinterpret_cast<char*>(&width_)) + sizeof(dash_));
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary.BoundaryPoint)
}

void LaneBoundary_BoundaryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dash_) -
      reinterpret_cast<char*>(&position_)) + sizeof(dash_));
}

LaneBoundary_BoundaryPoint::~LaneBoundary_BoundaryPoint() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary.BoundaryPoint)
  SharedDtor();
}

void LaneBoundary_BoundaryPoint::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void LaneBoundary_BoundaryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneBoundary_BoundaryPoint& LaneBoundary_BoundaryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto.base);
  return *internal_default_instance();
}


void LaneBoundary_BoundaryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary.BoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dash_) -
      reinterpret_cast<char*>(&width_)) + sizeof(dash_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneBoundary_BoundaryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Vector3d position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dash(static_cast<::osi3::LaneBoundary_BoundaryPoint_Dash>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneBoundary_BoundaryPoint::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LaneBoundary.BoundaryPoint)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Vector3d position = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dash(static_cast< ::osi3::LaneBoundary_BoundaryPoint_Dash >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LaneBoundary.BoundaryPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LaneBoundary.BoundaryPoint)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneBoundary_BoundaryPoint::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LaneBoundary.BoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::position(this), output);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->width(), output);
  }

  // double height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  // .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
  if (this->dash() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->dash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LaneBoundary.BoundaryPoint)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundary_BoundaryPoint::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary.BoundaryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::position(this), target);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->width(), target);
  }

  // double height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->height(), target);
  }

  // .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
  if (this->dash() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->dash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary.BoundaryPoint)
  return target;
}

size_t LaneBoundary_BoundaryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary.BoundaryPoint)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Vector3d position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.LaneBoundary.BoundaryPoint.Dash dash = 4;
  if (this->dash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dash());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary_BoundaryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LaneBoundary.BoundaryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_BoundaryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneBoundary_BoundaryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LaneBoundary.BoundaryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LaneBoundary.BoundaryPoint)
    MergeFrom(*source);
  }
}

void LaneBoundary_BoundaryPoint::MergeFrom(const LaneBoundary_BoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary.BoundaryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    set_height(from.height());
  }
  if (from.dash() != 0) {
    set_dash(from.dash());
  }
}

void LaneBoundary_BoundaryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LaneBoundary.BoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_BoundaryPoint::CopyFrom(const LaneBoundary_BoundaryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary.BoundaryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_BoundaryPoint::IsInitialized() const {
  return true;
}

void LaneBoundary_BoundaryPoint::InternalSwap(LaneBoundary_BoundaryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(dash_, other->dash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary_BoundaryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneBoundary_Classification::InitAsDefaultInstance() {
}
class LaneBoundary_Classification::_Internal {
 public:
};

void LaneBoundary_Classification::clear_limiting_structure_id() {
  limiting_structure_id_.Clear();
}
LaneBoundary_Classification::LaneBoundary_Classification()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LaneBoundary.Classification)
}
LaneBoundary_Classification::LaneBoundary_Classification(const LaneBoundary_Classification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      limiting_structure_id_(from.limiting_structure_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&type_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary.Classification)
}

void LaneBoundary_Classification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneBoundary_Classification_osi_5flane_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&type_)) + sizeof(color_));
}

LaneBoundary_Classification::~LaneBoundary_Classification() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary.Classification)
  SharedDtor();
}

void LaneBoundary_Classification::SharedDtor() {
}

void LaneBoundary_Classification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneBoundary_Classification& LaneBoundary_Classification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneBoundary_Classification_osi_5flane_2eproto.base);
  return *internal_default_instance();
}


void LaneBoundary_Classification::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limiting_structure_id_.Clear();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&type_)) + sizeof(color_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneBoundary_Classification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.LaneBoundary.Classification.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::LaneBoundary_Classification_Type>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.LaneBoundary.Classification.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_color(static_cast<::osi3::LaneBoundary_Classification_Color>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier limiting_structure_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_limiting_structure_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneBoundary_Classification::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LaneBoundary.Classification)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.LaneBoundary.Classification.Type type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::LaneBoundary_Classification_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LaneBoundary.Classification.Color color = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::osi3::LaneBoundary_Classification_Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier limiting_structure_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_limiting_structure_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LaneBoundary.Classification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LaneBoundary.Classification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneBoundary_Classification::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LaneBoundary.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.LaneBoundary.Classification.Type type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .osi3.LaneBoundary.Classification.Color color = 2;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // repeated .osi3.Identifier limiting_structure_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limiting_structure_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->limiting_structure_id(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LaneBoundary.Classification)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundary_Classification::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary.Classification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.LaneBoundary.Classification.Type type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // .osi3.LaneBoundary.Classification.Color color = 2;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // repeated .osi3.Identifier limiting_structure_id = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->limiting_structure_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->limiting_structure_id(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary.Classification)
  return target;
}

size_t LaneBoundary_Classification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary.Classification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier limiting_structure_id = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->limiting_structure_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->limiting_structure_id(static_cast<int>(i)));
    }
  }

  // .osi3.LaneBoundary.Classification.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .osi3.LaneBoundary.Classification.Color color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary_Classification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LaneBoundary.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary_Classification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneBoundary_Classification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LaneBoundary.Classification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LaneBoundary.Classification)
    MergeFrom(*source);
  }
}

void LaneBoundary_Classification::MergeFrom(const LaneBoundary_Classification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary.Classification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limiting_structure_id_.MergeFrom(from.limiting_structure_id_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void LaneBoundary_Classification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LaneBoundary.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary_Classification::CopyFrom(const LaneBoundary_Classification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary.Classification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary_Classification::IsInitialized() const {
  return true;
}

void LaneBoundary_Classification::InternalSwap(LaneBoundary_Classification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&limiting_structure_id_)->InternalSwap(CastToBase(&other->limiting_structure_id_));
  swap(type_, other->type_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary_Classification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LaneBoundary::InitAsDefaultInstance() {
  ::osi3::_LaneBoundary_default_instance_._instance.get_mutable()->id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LaneBoundary_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::LaneBoundary_Classification*>(
      ::osi3::LaneBoundary_Classification::internal_default_instance());
  ::osi3::_LaneBoundary_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class LaneBoundary::_Internal {
 public:
  static const ::osi3::Identifier& id(const LaneBoundary* msg);
  static const ::osi3::LaneBoundary_Classification& classification(const LaneBoundary* msg);
  static const ::osi3::ColorDescription& color_description(const LaneBoundary* msg);
};

const ::osi3::Identifier&
LaneBoundary::_Internal::id(const LaneBoundary* msg) {
  return *msg->id_;
}
const ::osi3::LaneBoundary_Classification&
LaneBoundary::_Internal::classification(const LaneBoundary* msg) {
  return *msg->classification_;
}
const ::osi3::ColorDescription&
LaneBoundary::_Internal::color_description(const LaneBoundary* msg) {
  return *msg->color_description_;
}
void LaneBoundary::clear_id() {
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
}
void LaneBoundary::clear_source_reference() {
  source_reference_.Clear();
}
void LaneBoundary::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
LaneBoundary::LaneBoundary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LaneBoundary)
}
LaneBoundary::LaneBoundary(const LaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      boundary_line_(from.boundary_line_),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::osi3::Identifier(*from.id_);
  } else {
    id_ = nullptr;
  }
  if (from.has_classification()) {
    classification_ = new ::osi3::LaneBoundary_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LaneBoundary)
}

void LaneBoundary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LaneBoundary_osi_5flane_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_description_) -
      reinterpret_cast<char*>(&id_)) + sizeof(color_description_));
}

LaneBoundary::~LaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.LaneBoundary)
  SharedDtor();
}

void LaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete classification_;
  if (this != internal_default_instance()) delete color_description_;
}

void LaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LaneBoundary& LaneBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LaneBoundary_osi_5flane_2eproto.base);
  return *internal_default_instance();
}


void LaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  boundary_line_.Clear();
  source_reference_.Clear();
  if (GetArenaNoVirtual() == nullptr && id_ != nullptr) {
    delete id_;
  }
  id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LaneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_boundary_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // .osi3.LaneBoundary.Classification classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LaneBoundary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LaneBoundary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_boundary_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LaneBoundary.Classification classification = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LaneBoundary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LaneBoundary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::id(this), output);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->boundary_line(static_cast<int>(i)),
      output);
  }

  // .osi3.LaneBoundary.Classification classification = 3;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::classification(this), output);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LaneBoundary)
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneBoundary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::id(this), target);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->boundary_line(static_cast<int>(i)), target);
  }

  // .osi3.LaneBoundary.Classification classification = 3;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::classification(this), target);
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->source_reference(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LaneBoundary)
  return target;
}

size_t LaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->boundary_line(static_cast<int>(i)));
    }
  }

  // repeated .osi3.ExternalReference source_reference = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier id = 1;
  if (this->has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *id_);
  }

  // .osi3.LaneBoundary.Classification classification = 3;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LaneBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LaneBoundary)
    MergeFrom(*source);
  }
}

void LaneBoundary::MergeFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  boundary_line_.MergeFrom(from.boundary_line_);
  source_reference_.MergeFrom(from.source_reference_);
  if (from.has_id()) {
    mutable_id()->::osi3::Identifier::MergeFrom(from.id());
  }
  if (from.has_classification()) {
    mutable_classification()->::osi3::LaneBoundary_Classification::MergeFrom(from.classification());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
}

void LaneBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneBoundary::CopyFrom(const LaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneBoundary::IsInitialized() const {
  return true;
}

void LaneBoundary::InternalSwap(LaneBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&boundary_line_)->InternalSwap(CastToBase(&other->boundary_line_));
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  swap(id_, other->id_);
  swap(classification_, other->classification_);
  swap(color_description_, other->color_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::Lane_Classification_RoadCondition* Arena::CreateMaybeMessage< ::osi3::Lane_Classification_RoadCondition >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::Lane_Classification_RoadCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Lane_Classification_LanePairing* Arena::CreateMaybeMessage< ::osi3::Lane_Classification_LanePairing >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::Lane_Classification_LanePairing >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Lane_Classification* Arena::CreateMaybeMessage< ::osi3::Lane_Classification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::Lane_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::Lane* Arena::CreateMaybeMessage< ::osi3::Lane >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LaneBoundary_BoundaryPoint* Arena::CreateMaybeMessage< ::osi3::LaneBoundary_BoundaryPoint >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LaneBoundary_BoundaryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LaneBoundary_Classification* Arena::CreateMaybeMessage< ::osi3::LaneBoundary_Classification >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LaneBoundary_Classification >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LaneBoundary* Arena::CreateMaybeMessage< ::osi3::LaneBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LaneBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
