// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_geometry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vehicle_5fgeometry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vehicle_5fgeometry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vehicle_5fgeometry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vehicle_5fgeometry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5fgeometry_2eproto;
namespace sim_msg {
class VehicleGeometory;
class VehicleGeometoryDefaultTypeInternal;
extern VehicleGeometoryDefaultTypeInternal _VehicleGeometory_default_instance_;
class VehicleGeometoryList;
class VehicleGeometoryListDefaultTypeInternal;
extern VehicleGeometoryListDefaultTypeInternal _VehicleGeometoryList_default_instance_;
class VehicleGeometory_PointInVehicleCoord;
class VehicleGeometory_PointInVehicleCoordDefaultTypeInternal;
extern VehicleGeometory_PointInVehicleCoordDefaultTypeInternal _VehicleGeometory_PointInVehicleCoord_default_instance_;
class VehicleGeometory_VehicleGeometoryScalar;
class VehicleGeometory_VehicleGeometoryScalarDefaultTypeInternal;
extern VehicleGeometory_VehicleGeometoryScalarDefaultTypeInternal _VehicleGeometory_VehicleGeometoryScalar_default_instance_;
class VehicleGeometory_WheelFour;
class VehicleGeometory_WheelFourDefaultTypeInternal;
extern VehicleGeometory_WheelFourDefaultTypeInternal _VehicleGeometory_WheelFour_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::VehicleGeometory* Arena::CreateMaybeMessage<::sim_msg::VehicleGeometory>(Arena*);
template<> ::sim_msg::VehicleGeometoryList* Arena::CreateMaybeMessage<::sim_msg::VehicleGeometoryList>(Arena*);
template<> ::sim_msg::VehicleGeometory_PointInVehicleCoord* Arena::CreateMaybeMessage<::sim_msg::VehicleGeometory_PointInVehicleCoord>(Arena*);
template<> ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* Arena::CreateMaybeMessage<::sim_msg::VehicleGeometory_VehicleGeometoryScalar>(Arena*);
template<> ::sim_msg::VehicleGeometory_WheelFour* Arena::CreateMaybeMessage<::sim_msg::VehicleGeometory_WheelFour>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum VehicleGeometory_VehicleCoordType : int {
  VehicleGeometory_VehicleCoordType_FrontAxle_SnappedToGround = 0,
  VehicleGeometory_VehicleCoordType_WheelBaseCenter_SnappedToGround = 1,
  VehicleGeometory_VehicleCoordType_RearAxle_SnappedToGround = 2,
  VehicleGeometory_VehicleCoordType_TrailerHitch_SnappedToGround = 3,
  VehicleGeometory_VehicleCoordType_VehicleGeometory_VehicleCoordType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VehicleGeometory_VehicleCoordType_VehicleGeometory_VehicleCoordType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VehicleGeometory_VehicleCoordType_IsValid(int value);
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory_VehicleCoordType_VehicleCoordType_MIN = VehicleGeometory_VehicleCoordType_FrontAxle_SnappedToGround;
constexpr VehicleGeometory_VehicleCoordType VehicleGeometory_VehicleCoordType_VehicleCoordType_MAX = VehicleGeometory_VehicleCoordType_TrailerHitch_SnappedToGround;
constexpr int VehicleGeometory_VehicleCoordType_VehicleCoordType_ARRAYSIZE = VehicleGeometory_VehicleCoordType_VehicleCoordType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehicleGeometory_VehicleCoordType_descriptor();
template<typename T>
inline const std::string& VehicleGeometory_VehicleCoordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VehicleGeometory_VehicleCoordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VehicleGeometory_VehicleCoordType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VehicleGeometory_VehicleCoordType_descriptor(), enum_t_value);
}
inline bool VehicleGeometory_VehicleCoordType_Parse(
    const std::string& name, VehicleGeometory_VehicleCoordType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VehicleGeometory_VehicleCoordType>(
    VehicleGeometory_VehicleCoordType_descriptor(), name, value);
}
// ===================================================================

class VehicleGeometory_VehicleGeometoryScalar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.VehicleGeometory.VehicleGeometoryScalar) */ {
 public:
  VehicleGeometory_VehicleGeometoryScalar();
  virtual ~VehicleGeometory_VehicleGeometoryScalar();

  VehicleGeometory_VehicleGeometoryScalar(const VehicleGeometory_VehicleGeometoryScalar& from);
  VehicleGeometory_VehicleGeometoryScalar(VehicleGeometory_VehicleGeometoryScalar&& from) noexcept
    : VehicleGeometory_VehicleGeometoryScalar() {
    *this = ::std::move(from);
  }

  inline VehicleGeometory_VehicleGeometoryScalar& operator=(const VehicleGeometory_VehicleGeometoryScalar& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleGeometory_VehicleGeometoryScalar& operator=(VehicleGeometory_VehicleGeometoryScalar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleGeometory_VehicleGeometoryScalar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleGeometory_VehicleGeometoryScalar* internal_default_instance() {
    return reinterpret_cast<const VehicleGeometory_VehicleGeometoryScalar*>(
               &_VehicleGeometory_VehicleGeometoryScalar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleGeometory_VehicleGeometoryScalar& a, VehicleGeometory_VehicleGeometoryScalar& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleGeometory_VehicleGeometoryScalar* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleGeometory_VehicleGeometoryScalar* New() const final {
    return CreateMaybeMessage<VehicleGeometory_VehicleGeometoryScalar>(nullptr);
  }

  VehicleGeometory_VehicleGeometoryScalar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleGeometory_VehicleGeometoryScalar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleGeometory_VehicleGeometoryScalar& from);
  void MergeFrom(const VehicleGeometory_VehicleGeometoryScalar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleGeometory_VehicleGeometoryScalar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.VehicleGeometory.VehicleGeometoryScalar";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fgeometry_2eproto);
    return ::descriptor_table_vehicle_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefToFrontAxleFieldNumber = 1,
    kRefToRearAxleFieldNumber = 2,
    kFrontAxleToFrontFieldNumber = 3,
    kRearAxleToRearFieldNumber = 4,
    kWheelBaseFieldNumber = 5,
    kLengthFieldNumber = 6,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kTrackWidthFrontFieldNumber = 9,
    kTrackWidthRearFieldNumber = 10,
  };
  // double ref_to_front_axle = 1;
  void clear_ref_to_front_axle();
  double ref_to_front_axle() const;
  void set_ref_to_front_axle(double value);

  // double ref_to_rear_axle = 2;
  void clear_ref_to_rear_axle();
  double ref_to_rear_axle() const;
  void set_ref_to_rear_axle(double value);

  // double front_axle_to_front = 3;
  void clear_front_axle_to_front();
  double front_axle_to_front() const;
  void set_front_axle_to_front(double value);

  // double rear_axle_to_rear = 4;
  void clear_rear_axle_to_rear();
  double rear_axle_to_rear() const;
  void set_rear_axle_to_rear(double value);

  // double wheel_base = 5;
  void clear_wheel_base();
  double wheel_base() const;
  void set_wheel_base(double value);

  // double length = 6;
  void clear_length();
  double length() const;
  void set_length(double value);

  // double width = 7;
  void clear_width();
  double width() const;
  void set_width(double value);

  // double height = 8;
  void clear_height();
  double height() const;
  void set_height(double value);

  // double track_width_front = 9;
  void clear_track_width_front();
  double track_width_front() const;
  void set_track_width_front(double value);

  // double track_width_rear = 10;
  void clear_track_width_rear();
  double track_width_rear() const;
  void set_track_width_rear(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.VehicleGeometory.VehicleGeometoryScalar)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double ref_to_front_axle_;
  double ref_to_rear_axle_;
  double front_axle_to_front_;
  double rear_axle_to_rear_;
  double wheel_base_;
  double length_;
  double width_;
  double height_;
  double track_width_front_;
  double track_width_rear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class VehicleGeometory_PointInVehicleCoord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.VehicleGeometory.PointInVehicleCoord) */ {
 public:
  VehicleGeometory_PointInVehicleCoord();
  virtual ~VehicleGeometory_PointInVehicleCoord();

  VehicleGeometory_PointInVehicleCoord(const VehicleGeometory_PointInVehicleCoord& from);
  VehicleGeometory_PointInVehicleCoord(VehicleGeometory_PointInVehicleCoord&& from) noexcept
    : VehicleGeometory_PointInVehicleCoord() {
    *this = ::std::move(from);
  }

  inline VehicleGeometory_PointInVehicleCoord& operator=(const VehicleGeometory_PointInVehicleCoord& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleGeometory_PointInVehicleCoord& operator=(VehicleGeometory_PointInVehicleCoord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleGeometory_PointInVehicleCoord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleGeometory_PointInVehicleCoord* internal_default_instance() {
    return reinterpret_cast<const VehicleGeometory_PointInVehicleCoord*>(
               &_VehicleGeometory_PointInVehicleCoord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VehicleGeometory_PointInVehicleCoord& a, VehicleGeometory_PointInVehicleCoord& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleGeometory_PointInVehicleCoord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleGeometory_PointInVehicleCoord* New() const final {
    return CreateMaybeMessage<VehicleGeometory_PointInVehicleCoord>(nullptr);
  }

  VehicleGeometory_PointInVehicleCoord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleGeometory_PointInVehicleCoord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleGeometory_PointInVehicleCoord& from);
  void MergeFrom(const VehicleGeometory_PointInVehicleCoord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleGeometory_PointInVehicleCoord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.VehicleGeometory.PointInVehicleCoord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fgeometry_2eproto);
    return ::descriptor_table_vehicle_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontAxleFieldNumber = 1,
    kRearAxleFieldNumber = 2,
    kWheelBaseCenterFieldNumber = 3,
    kFrontFieldNumber = 4,
    kRearFieldNumber = 5,
    kFrontLeftFieldNumber = 6,
    kFrontRightFieldNumber = 7,
    kRearLeftFieldNumber = 8,
    kRearRightFieldNumber = 9,
    kRefPointFieldNumber = 10,
    kBoundingBoxCenterFieldNumber = 11,
    kCombinationOffsetFieldNumber = 12,
  };
  // .sim_msg.Vec3 front_axle = 1;
  bool has_front_axle() const;
  void clear_front_axle();
  const ::sim_msg::Vec3& front_axle() const;
  ::sim_msg::Vec3* release_front_axle();
  ::sim_msg::Vec3* mutable_front_axle();
  void set_allocated_front_axle(::sim_msg::Vec3* front_axle);

  // .sim_msg.Vec3 rear_axle = 2;
  bool has_rear_axle() const;
  void clear_rear_axle();
  const ::sim_msg::Vec3& rear_axle() const;
  ::sim_msg::Vec3* release_rear_axle();
  ::sim_msg::Vec3* mutable_rear_axle();
  void set_allocated_rear_axle(::sim_msg::Vec3* rear_axle);

  // .sim_msg.Vec3 wheel_base_center = 3;
  bool has_wheel_base_center() const;
  void clear_wheel_base_center();
  const ::sim_msg::Vec3& wheel_base_center() const;
  ::sim_msg::Vec3* release_wheel_base_center();
  ::sim_msg::Vec3* mutable_wheel_base_center();
  void set_allocated_wheel_base_center(::sim_msg::Vec3* wheel_base_center);

  // .sim_msg.Vec3 front = 4;
  bool has_front() const;
  void clear_front();
  const ::sim_msg::Vec3& front() const;
  ::sim_msg::Vec3* release_front();
  ::sim_msg::Vec3* mutable_front();
  void set_allocated_front(::sim_msg::Vec3* front);

  // .sim_msg.Vec3 rear = 5;
  bool has_rear() const;
  void clear_rear();
  const ::sim_msg::Vec3& rear() const;
  ::sim_msg::Vec3* release_rear();
  ::sim_msg::Vec3* mutable_rear();
  void set_allocated_rear(::sim_msg::Vec3* rear);

  // .sim_msg.Vec3 front_left = 6;
  bool has_front_left() const;
  void clear_front_left();
  const ::sim_msg::Vec3& front_left() const;
  ::sim_msg::Vec3* release_front_left();
  ::sim_msg::Vec3* mutable_front_left();
  void set_allocated_front_left(::sim_msg::Vec3* front_left);

  // .sim_msg.Vec3 front_right = 7;
  bool has_front_right() const;
  void clear_front_right();
  const ::sim_msg::Vec3& front_right() const;
  ::sim_msg::Vec3* release_front_right();
  ::sim_msg::Vec3* mutable_front_right();
  void set_allocated_front_right(::sim_msg::Vec3* front_right);

  // .sim_msg.Vec3 rear_left = 8;
  bool has_rear_left() const;
  void clear_rear_left();
  const ::sim_msg::Vec3& rear_left() const;
  ::sim_msg::Vec3* release_rear_left();
  ::sim_msg::Vec3* mutable_rear_left();
  void set_allocated_rear_left(::sim_msg::Vec3* rear_left);

  // .sim_msg.Vec3 rear_right = 9;
  bool has_rear_right() const;
  void clear_rear_right();
  const ::sim_msg::Vec3& rear_right() const;
  ::sim_msg::Vec3* release_rear_right();
  ::sim_msg::Vec3* mutable_rear_right();
  void set_allocated_rear_right(::sim_msg::Vec3* rear_right);

  // .sim_msg.Vec3 ref_point = 10;
  bool has_ref_point() const;
  void clear_ref_point();
  const ::sim_msg::Vec3& ref_point() const;
  ::sim_msg::Vec3* release_ref_point();
  ::sim_msg::Vec3* mutable_ref_point();
  void set_allocated_ref_point(::sim_msg::Vec3* ref_point);

  // .sim_msg.Vec3 bounding_box_center = 11;
  bool has_bounding_box_center() const;
  void clear_bounding_box_center();
  const ::sim_msg::Vec3& bounding_box_center() const;
  ::sim_msg::Vec3* release_bounding_box_center();
  ::sim_msg::Vec3* mutable_bounding_box_center();
  void set_allocated_bounding_box_center(::sim_msg::Vec3* bounding_box_center);

  // .sim_msg.Vec3 combination_offset = 12;
  bool has_combination_offset() const;
  void clear_combination_offset();
  const ::sim_msg::Vec3& combination_offset() const;
  ::sim_msg::Vec3* release_combination_offset();
  ::sim_msg::Vec3* mutable_combination_offset();
  void set_allocated_combination_offset(::sim_msg::Vec3* combination_offset);

  // @@protoc_insertion_point(class_scope:sim_msg.VehicleGeometory.PointInVehicleCoord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Vec3* front_axle_;
  ::sim_msg::Vec3* rear_axle_;
  ::sim_msg::Vec3* wheel_base_center_;
  ::sim_msg::Vec3* front_;
  ::sim_msg::Vec3* rear_;
  ::sim_msg::Vec3* front_left_;
  ::sim_msg::Vec3* front_right_;
  ::sim_msg::Vec3* rear_left_;
  ::sim_msg::Vec3* rear_right_;
  ::sim_msg::Vec3* ref_point_;
  ::sim_msg::Vec3* bounding_box_center_;
  ::sim_msg::Vec3* combination_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class VehicleGeometory_WheelFour :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.VehicleGeometory.WheelFour) */ {
 public:
  VehicleGeometory_WheelFour();
  virtual ~VehicleGeometory_WheelFour();

  VehicleGeometory_WheelFour(const VehicleGeometory_WheelFour& from);
  VehicleGeometory_WheelFour(VehicleGeometory_WheelFour&& from) noexcept
    : VehicleGeometory_WheelFour() {
    *this = ::std::move(from);
  }

  inline VehicleGeometory_WheelFour& operator=(const VehicleGeometory_WheelFour& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleGeometory_WheelFour& operator=(VehicleGeometory_WheelFour&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleGeometory_WheelFour& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleGeometory_WheelFour* internal_default_instance() {
    return reinterpret_cast<const VehicleGeometory_WheelFour*>(
               &_VehicleGeometory_WheelFour_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VehicleGeometory_WheelFour& a, VehicleGeometory_WheelFour& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleGeometory_WheelFour* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleGeometory_WheelFour* New() const final {
    return CreateMaybeMessage<VehicleGeometory_WheelFour>(nullptr);
  }

  VehicleGeometory_WheelFour* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleGeometory_WheelFour>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleGeometory_WheelFour& from);
  void MergeFrom(const VehicleGeometory_WheelFour& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleGeometory_WheelFour* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.VehicleGeometory.WheelFour";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fgeometry_2eproto);
    return ::descriptor_table_vehicle_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontLeftFieldNumber = 1,
    kFrontRightFieldNumber = 2,
    kRearLeftFieldNumber = 3,
    kRearRightFieldNumber = 4,
  };
  // double front_left = 1;
  void clear_front_left();
  double front_left() const;
  void set_front_left(double value);

  // double front_right = 2;
  void clear_front_right();
  double front_right() const;
  void set_front_right(double value);

  // double rear_left = 3;
  void clear_rear_left();
  double rear_left() const;
  void set_rear_left(double value);

  // double rear_right = 4;
  void clear_rear_right();
  double rear_right() const;
  void set_rear_right(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.VehicleGeometory.WheelFour)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double front_left_;
  double front_right_;
  double rear_left_;
  double rear_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class VehicleGeometory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.VehicleGeometory) */ {
 public:
  VehicleGeometory();
  virtual ~VehicleGeometory();

  VehicleGeometory(const VehicleGeometory& from);
  VehicleGeometory(VehicleGeometory&& from) noexcept
    : VehicleGeometory() {
    *this = ::std::move(from);
  }

  inline VehicleGeometory& operator=(const VehicleGeometory& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleGeometory& operator=(VehicleGeometory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleGeometory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleGeometory* internal_default_instance() {
    return reinterpret_cast<const VehicleGeometory*>(
               &_VehicleGeometory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VehicleGeometory& a, VehicleGeometory& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleGeometory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleGeometory* New() const final {
    return CreateMaybeMessage<VehicleGeometory>(nullptr);
  }

  VehicleGeometory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleGeometory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleGeometory& from);
  void MergeFrom(const VehicleGeometory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleGeometory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.VehicleGeometory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fgeometry_2eproto);
    return ::descriptor_table_vehicle_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VehicleGeometory_VehicleGeometoryScalar VehicleGeometoryScalar;
  typedef VehicleGeometory_PointInVehicleCoord PointInVehicleCoord;
  typedef VehicleGeometory_WheelFour WheelFour;

  typedef VehicleGeometory_VehicleCoordType VehicleCoordType;
  static constexpr VehicleCoordType FrontAxle_SnappedToGround =
    VehicleGeometory_VehicleCoordType_FrontAxle_SnappedToGround;
  static constexpr VehicleCoordType WheelBaseCenter_SnappedToGround =
    VehicleGeometory_VehicleCoordType_WheelBaseCenter_SnappedToGround;
  static constexpr VehicleCoordType RearAxle_SnappedToGround =
    VehicleGeometory_VehicleCoordType_RearAxle_SnappedToGround;
  static constexpr VehicleCoordType TrailerHitch_SnappedToGround =
    VehicleGeometory_VehicleCoordType_TrailerHitch_SnappedToGround;
  static inline bool VehicleCoordType_IsValid(int value) {
    return VehicleGeometory_VehicleCoordType_IsValid(value);
  }
  static constexpr VehicleCoordType VehicleCoordType_MIN =
    VehicleGeometory_VehicleCoordType_VehicleCoordType_MIN;
  static constexpr VehicleCoordType VehicleCoordType_MAX =
    VehicleGeometory_VehicleCoordType_VehicleCoordType_MAX;
  static constexpr int VehicleCoordType_ARRAYSIZE =
    VehicleGeometory_VehicleCoordType_VehicleCoordType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VehicleCoordType_descriptor() {
    return VehicleGeometory_VehicleCoordType_descriptor();
  }
  template<typename T>
  static inline const std::string& VehicleCoordType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VehicleCoordType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VehicleCoordType_Name.");
    return VehicleGeometory_VehicleCoordType_Name(enum_t_value);
  }
  static inline bool VehicleCoordType_Parse(const std::string& name,
      VehicleCoordType* value) {
    return VehicleGeometory_VehicleCoordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleGeometoryFieldNumber = 2,
    kVehicleCoordFieldNumber = 3,
    kMaxSteeringRadiusFieldNumber = 4,
    kWheelDiameterFieldNumber = 5,
    kCoordTypeFieldNumber = 1,
  };
  // .sim_msg.VehicleGeometory.VehicleGeometoryScalar vehicle_geometory = 2;
  bool has_vehicle_geometory() const;
  void clear_vehicle_geometory();
  const ::sim_msg::VehicleGeometory_VehicleGeometoryScalar& vehicle_geometory() const;
  ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* release_vehicle_geometory();
  ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* mutable_vehicle_geometory();
  void set_allocated_vehicle_geometory(::sim_msg::VehicleGeometory_VehicleGeometoryScalar* vehicle_geometory);

  // .sim_msg.VehicleGeometory.PointInVehicleCoord vehicle_coord = 3;
  bool has_vehicle_coord() const;
  void clear_vehicle_coord();
  const ::sim_msg::VehicleGeometory_PointInVehicleCoord& vehicle_coord() const;
  ::sim_msg::VehicleGeometory_PointInVehicleCoord* release_vehicle_coord();
  ::sim_msg::VehicleGeometory_PointInVehicleCoord* mutable_vehicle_coord();
  void set_allocated_vehicle_coord(::sim_msg::VehicleGeometory_PointInVehicleCoord* vehicle_coord);

  // .sim_msg.VehicleGeometory.WheelFour max_steering_radius = 4;
  bool has_max_steering_radius() const;
  void clear_max_steering_radius();
  const ::sim_msg::VehicleGeometory_WheelFour& max_steering_radius() const;
  ::sim_msg::VehicleGeometory_WheelFour* release_max_steering_radius();
  ::sim_msg::VehicleGeometory_WheelFour* mutable_max_steering_radius();
  void set_allocated_max_steering_radius(::sim_msg::VehicleGeometory_WheelFour* max_steering_radius);

  // .sim_msg.VehicleGeometory.WheelFour wheel_diameter = 5;
  bool has_wheel_diameter() const;
  void clear_wheel_diameter();
  const ::sim_msg::VehicleGeometory_WheelFour& wheel_diameter() const;
  ::sim_msg::VehicleGeometory_WheelFour* release_wheel_diameter();
  ::sim_msg::VehicleGeometory_WheelFour* mutable_wheel_diameter();
  void set_allocated_wheel_diameter(::sim_msg::VehicleGeometory_WheelFour* wheel_diameter);

  // .sim_msg.VehicleGeometory.VehicleCoordType coord_type = 1;
  void clear_coord_type();
  ::sim_msg::VehicleGeometory_VehicleCoordType coord_type() const;
  void set_coord_type(::sim_msg::VehicleGeometory_VehicleCoordType value);

  // @@protoc_insertion_point(class_scope:sim_msg.VehicleGeometory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* vehicle_geometory_;
  ::sim_msg::VehicleGeometory_PointInVehicleCoord* vehicle_coord_;
  ::sim_msg::VehicleGeometory_WheelFour* max_steering_radius_;
  ::sim_msg::VehicleGeometory_WheelFour* wheel_diameter_;
  int coord_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fgeometry_2eproto;
};
// -------------------------------------------------------------------

class VehicleGeometoryList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.VehicleGeometoryList) */ {
 public:
  VehicleGeometoryList();
  virtual ~VehicleGeometoryList();

  VehicleGeometoryList(const VehicleGeometoryList& from);
  VehicleGeometoryList(VehicleGeometoryList&& from) noexcept
    : VehicleGeometoryList() {
    *this = ::std::move(from);
  }

  inline VehicleGeometoryList& operator=(const VehicleGeometoryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleGeometoryList& operator=(VehicleGeometoryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleGeometoryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehicleGeometoryList* internal_default_instance() {
    return reinterpret_cast<const VehicleGeometoryList*>(
               &_VehicleGeometoryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VehicleGeometoryList& a, VehicleGeometoryList& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleGeometoryList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleGeometoryList* New() const final {
    return CreateMaybeMessage<VehicleGeometoryList>(nullptr);
  }

  VehicleGeometoryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleGeometoryList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleGeometoryList& from);
  void MergeFrom(const VehicleGeometoryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleGeometoryList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.VehicleGeometoryList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vehicle_5fgeometry_2eproto);
    return ::descriptor_table_vehicle_5fgeometry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrailerFieldNumber = 2,
    kFrontFieldNumber = 1,
  };
  // repeated .sim_msg.VehicleGeometory trailer = 2;
  int trailer_size() const;
  void clear_trailer();
  ::sim_msg::VehicleGeometory* mutable_trailer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::VehicleGeometory >*
      mutable_trailer();
  const ::sim_msg::VehicleGeometory& trailer(int index) const;
  ::sim_msg::VehicleGeometory* add_trailer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::VehicleGeometory >&
      trailer() const;

  // .sim_msg.VehicleGeometory front = 1;
  bool has_front() const;
  void clear_front();
  const ::sim_msg::VehicleGeometory& front() const;
  ::sim_msg::VehicleGeometory* release_front();
  ::sim_msg::VehicleGeometory* mutable_front();
  void set_allocated_front(::sim_msg::VehicleGeometory* front);

  // @@protoc_insertion_point(class_scope:sim_msg.VehicleGeometoryList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::VehicleGeometory > trailer_;
  ::sim_msg::VehicleGeometory* front_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vehicle_5fgeometry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleGeometory_VehicleGeometoryScalar

// double ref_to_front_axle = 1;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_ref_to_front_axle() {
  ref_to_front_axle_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::ref_to_front_axle() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.ref_to_front_axle)
  return ref_to_front_axle_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_ref_to_front_axle(double value) {
  
  ref_to_front_axle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.ref_to_front_axle)
}

// double ref_to_rear_axle = 2;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_ref_to_rear_axle() {
  ref_to_rear_axle_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::ref_to_rear_axle() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.ref_to_rear_axle)
  return ref_to_rear_axle_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_ref_to_rear_axle(double value) {
  
  ref_to_rear_axle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.ref_to_rear_axle)
}

// double front_axle_to_front = 3;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_front_axle_to_front() {
  front_axle_to_front_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::front_axle_to_front() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.front_axle_to_front)
  return front_axle_to_front_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_front_axle_to_front(double value) {
  
  front_axle_to_front_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.front_axle_to_front)
}

// double rear_axle_to_rear = 4;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_rear_axle_to_rear() {
  rear_axle_to_rear_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::rear_axle_to_rear() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.rear_axle_to_rear)
  return rear_axle_to_rear_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_rear_axle_to_rear(double value) {
  
  rear_axle_to_rear_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.rear_axle_to_rear)
}

// double wheel_base = 5;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_wheel_base() {
  wheel_base_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::wheel_base() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.wheel_base)
  return wheel_base_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_wheel_base(double value) {
  
  wheel_base_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.wheel_base)
}

// double length = 6;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_length() {
  length_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.length)
  return length_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.length)
}

// double width = 7;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_width() {
  width_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.width)
  return width_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.width)
}

// double height = 8;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_height() {
  height_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.height)
  return height_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.height)
}

// double track_width_front = 9;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_track_width_front() {
  track_width_front_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::track_width_front() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.track_width_front)
  return track_width_front_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_track_width_front(double value) {
  
  track_width_front_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.track_width_front)
}

// double track_width_rear = 10;
inline void VehicleGeometory_VehicleGeometoryScalar::clear_track_width_rear() {
  track_width_rear_ = 0;
}
inline double VehicleGeometory_VehicleGeometoryScalar::track_width_rear() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.VehicleGeometoryScalar.track_width_rear)
  return track_width_rear_;
}
inline void VehicleGeometory_VehicleGeometoryScalar::set_track_width_rear(double value) {
  
  track_width_rear_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.VehicleGeometoryScalar.track_width_rear)
}

// -------------------------------------------------------------------

// VehicleGeometory_PointInVehicleCoord

// .sim_msg.Vec3 front_axle = 1;
inline bool VehicleGeometory_PointInVehicleCoord::has_front_axle() const {
  return this != internal_default_instance() && front_axle_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::front_axle() const {
  const ::sim_msg::Vec3* p = front_axle_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.front_axle)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_front_axle() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.front_axle)
  
  ::sim_msg::Vec3* temp = front_axle_;
  front_axle_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_front_axle() {
  
  if (front_axle_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    front_axle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.front_axle)
  return front_axle_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_front_axle(::sim_msg::Vec3* front_axle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_axle_);
  }
  if (front_axle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      front_axle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_axle, submessage_arena);
    }
    
  } else {
    
  }
  front_axle_ = front_axle;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.front_axle)
}

// .sim_msg.Vec3 rear_axle = 2;
inline bool VehicleGeometory_PointInVehicleCoord::has_rear_axle() const {
  return this != internal_default_instance() && rear_axle_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::rear_axle() const {
  const ::sim_msg::Vec3* p = rear_axle_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_axle)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_rear_axle() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_axle)
  
  ::sim_msg::Vec3* temp = rear_axle_;
  rear_axle_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_rear_axle() {
  
  if (rear_axle_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    rear_axle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_axle)
  return rear_axle_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_rear_axle(::sim_msg::Vec3* rear_axle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rear_axle_);
  }
  if (rear_axle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rear_axle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear_axle, submessage_arena);
    }
    
  } else {
    
  }
  rear_axle_ = rear_axle;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_axle)
}

// .sim_msg.Vec3 wheel_base_center = 3;
inline bool VehicleGeometory_PointInVehicleCoord::has_wheel_base_center() const {
  return this != internal_default_instance() && wheel_base_center_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::wheel_base_center() const {
  const ::sim_msg::Vec3* p = wheel_base_center_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.wheel_base_center)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_wheel_base_center() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.wheel_base_center)
  
  ::sim_msg::Vec3* temp = wheel_base_center_;
  wheel_base_center_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_wheel_base_center() {
  
  if (wheel_base_center_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    wheel_base_center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.wheel_base_center)
  return wheel_base_center_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_wheel_base_center(::sim_msg::Vec3* wheel_base_center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(wheel_base_center_);
  }
  if (wheel_base_center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wheel_base_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel_base_center, submessage_arena);
    }
    
  } else {
    
  }
  wheel_base_center_ = wheel_base_center;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.wheel_base_center)
}

// .sim_msg.Vec3 front = 4;
inline bool VehicleGeometory_PointInVehicleCoord::has_front() const {
  return this != internal_default_instance() && front_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::front() const {
  const ::sim_msg::Vec3* p = front_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.front)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_front() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.front)
  
  ::sim_msg::Vec3* temp = front_;
  front_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_front() {
  
  if (front_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    front_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.front)
  return front_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_front(::sim_msg::Vec3* front) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_);
  }
  if (front) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      front = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front, submessage_arena);
    }
    
  } else {
    
  }
  front_ = front;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.front)
}

// .sim_msg.Vec3 rear = 5;
inline bool VehicleGeometory_PointInVehicleCoord::has_rear() const {
  return this != internal_default_instance() && rear_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::rear() const {
  const ::sim_msg::Vec3* p = rear_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.rear)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_rear() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.rear)
  
  ::sim_msg::Vec3* temp = rear_;
  rear_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_rear() {
  
  if (rear_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    rear_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.rear)
  return rear_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_rear(::sim_msg::Vec3* rear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rear_);
  }
  if (rear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear, submessage_arena);
    }
    
  } else {
    
  }
  rear_ = rear;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.rear)
}

// .sim_msg.Vec3 front_left = 6;
inline bool VehicleGeometory_PointInVehicleCoord::has_front_left() const {
  return this != internal_default_instance() && front_left_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::front_left() const {
  const ::sim_msg::Vec3* p = front_left_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.front_left)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_front_left() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.front_left)
  
  ::sim_msg::Vec3* temp = front_left_;
  front_left_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_front_left() {
  
  if (front_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    front_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.front_left)
  return front_left_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_front_left(::sim_msg::Vec3* front_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_left_);
  }
  if (front_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      front_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_left, submessage_arena);
    }
    
  } else {
    
  }
  front_left_ = front_left;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.front_left)
}

// .sim_msg.Vec3 front_right = 7;
inline bool VehicleGeometory_PointInVehicleCoord::has_front_right() const {
  return this != internal_default_instance() && front_right_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::front_right() const {
  const ::sim_msg::Vec3* p = front_right_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.front_right)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_front_right() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.front_right)
  
  ::sim_msg::Vec3* temp = front_right_;
  front_right_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_front_right() {
  
  if (front_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    front_right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.front_right)
  return front_right_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_front_right(::sim_msg::Vec3* front_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_right_);
  }
  if (front_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      front_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_right, submessage_arena);
    }
    
  } else {
    
  }
  front_right_ = front_right;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.front_right)
}

// .sim_msg.Vec3 rear_left = 8;
inline bool VehicleGeometory_PointInVehicleCoord::has_rear_left() const {
  return this != internal_default_instance() && rear_left_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::rear_left() const {
  const ::sim_msg::Vec3* p = rear_left_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_left)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_rear_left() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_left)
  
  ::sim_msg::Vec3* temp = rear_left_;
  rear_left_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_rear_left() {
  
  if (rear_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    rear_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_left)
  return rear_left_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_rear_left(::sim_msg::Vec3* rear_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rear_left_);
  }
  if (rear_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rear_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear_left, submessage_arena);
    }
    
  } else {
    
  }
  rear_left_ = rear_left;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_left)
}

// .sim_msg.Vec3 rear_right = 9;
inline bool VehicleGeometory_PointInVehicleCoord::has_rear_right() const {
  return this != internal_default_instance() && rear_right_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::rear_right() const {
  const ::sim_msg::Vec3* p = rear_right_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_right)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_rear_right() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_right)
  
  ::sim_msg::Vec3* temp = rear_right_;
  rear_right_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_rear_right() {
  
  if (rear_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    rear_right_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_right)
  return rear_right_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_rear_right(::sim_msg::Vec3* rear_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rear_right_);
  }
  if (rear_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rear_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rear_right, submessage_arena);
    }
    
  } else {
    
  }
  rear_right_ = rear_right;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.rear_right)
}

// .sim_msg.Vec3 ref_point = 10;
inline bool VehicleGeometory_PointInVehicleCoord::has_ref_point() const {
  return this != internal_default_instance() && ref_point_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::ref_point() const {
  const ::sim_msg::Vec3* p = ref_point_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.ref_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_ref_point() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.ref_point)
  
  ::sim_msg::Vec3* temp = ref_point_;
  ref_point_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_ref_point() {
  
  if (ref_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    ref_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.ref_point)
  return ref_point_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_ref_point(::sim_msg::Vec3* ref_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ref_point_);
  }
  if (ref_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ref_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ref_point, submessage_arena);
    }
    
  } else {
    
  }
  ref_point_ = ref_point;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.ref_point)
}

// .sim_msg.Vec3 bounding_box_center = 11;
inline bool VehicleGeometory_PointInVehicleCoord::has_bounding_box_center() const {
  return this != internal_default_instance() && bounding_box_center_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::bounding_box_center() const {
  const ::sim_msg::Vec3* p = bounding_box_center_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.bounding_box_center)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_bounding_box_center() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.bounding_box_center)
  
  ::sim_msg::Vec3* temp = bounding_box_center_;
  bounding_box_center_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_bounding_box_center() {
  
  if (bounding_box_center_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    bounding_box_center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.bounding_box_center)
  return bounding_box_center_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_bounding_box_center(::sim_msg::Vec3* bounding_box_center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(bounding_box_center_);
  }
  if (bounding_box_center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bounding_box_center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounding_box_center, submessage_arena);
    }
    
  } else {
    
  }
  bounding_box_center_ = bounding_box_center;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.bounding_box_center)
}

// .sim_msg.Vec3 combination_offset = 12;
inline bool VehicleGeometory_PointInVehicleCoord::has_combination_offset() const {
  return this != internal_default_instance() && combination_offset_ != nullptr;
}
inline const ::sim_msg::Vec3& VehicleGeometory_PointInVehicleCoord::combination_offset() const {
  const ::sim_msg::Vec3* p = combination_offset_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.PointInVehicleCoord.combination_offset)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::release_combination_offset() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.PointInVehicleCoord.combination_offset)
  
  ::sim_msg::Vec3* temp = combination_offset_;
  combination_offset_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* VehicleGeometory_PointInVehicleCoord::mutable_combination_offset() {
  
  if (combination_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    combination_offset_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.PointInVehicleCoord.combination_offset)
  return combination_offset_;
}
inline void VehicleGeometory_PointInVehicleCoord::set_allocated_combination_offset(::sim_msg::Vec3* combination_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(combination_offset_);
  }
  if (combination_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      combination_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combination_offset, submessage_arena);
    }
    
  } else {
    
  }
  combination_offset_ = combination_offset;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.PointInVehicleCoord.combination_offset)
}

// -------------------------------------------------------------------

// VehicleGeometory_WheelFour

// double front_left = 1;
inline void VehicleGeometory_WheelFour::clear_front_left() {
  front_left_ = 0;
}
inline double VehicleGeometory_WheelFour::front_left() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.WheelFour.front_left)
  return front_left_;
}
inline void VehicleGeometory_WheelFour::set_front_left(double value) {
  
  front_left_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.WheelFour.front_left)
}

// double front_right = 2;
inline void VehicleGeometory_WheelFour::clear_front_right() {
  front_right_ = 0;
}
inline double VehicleGeometory_WheelFour::front_right() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.WheelFour.front_right)
  return front_right_;
}
inline void VehicleGeometory_WheelFour::set_front_right(double value) {
  
  front_right_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.WheelFour.front_right)
}

// double rear_left = 3;
inline void VehicleGeometory_WheelFour::clear_rear_left() {
  rear_left_ = 0;
}
inline double VehicleGeometory_WheelFour::rear_left() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.WheelFour.rear_left)
  return rear_left_;
}
inline void VehicleGeometory_WheelFour::set_rear_left(double value) {
  
  rear_left_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.WheelFour.rear_left)
}

// double rear_right = 4;
inline void VehicleGeometory_WheelFour::clear_rear_right() {
  rear_right_ = 0;
}
inline double VehicleGeometory_WheelFour::rear_right() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.WheelFour.rear_right)
  return rear_right_;
}
inline void VehicleGeometory_WheelFour::set_rear_right(double value) {
  
  rear_right_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.WheelFour.rear_right)
}

// -------------------------------------------------------------------

// VehicleGeometory

// .sim_msg.VehicleGeometory.VehicleCoordType coord_type = 1;
inline void VehicleGeometory::clear_coord_type() {
  coord_type_ = 0;
}
inline ::sim_msg::VehicleGeometory_VehicleCoordType VehicleGeometory::coord_type() const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.coord_type)
  return static_cast< ::sim_msg::VehicleGeometory_VehicleCoordType >(coord_type_);
}
inline void VehicleGeometory::set_coord_type(::sim_msg::VehicleGeometory_VehicleCoordType value) {
  
  coord_type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.VehicleGeometory.coord_type)
}

// .sim_msg.VehicleGeometory.VehicleGeometoryScalar vehicle_geometory = 2;
inline bool VehicleGeometory::has_vehicle_geometory() const {
  return this != internal_default_instance() && vehicle_geometory_ != nullptr;
}
inline void VehicleGeometory::clear_vehicle_geometory() {
  if (GetArenaNoVirtual() == nullptr && vehicle_geometory_ != nullptr) {
    delete vehicle_geometory_;
  }
  vehicle_geometory_ = nullptr;
}
inline const ::sim_msg::VehicleGeometory_VehicleGeometoryScalar& VehicleGeometory::vehicle_geometory() const {
  const ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* p = vehicle_geometory_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.vehicle_geometory)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::VehicleGeometory_VehicleGeometoryScalar*>(
      &::sim_msg::_VehicleGeometory_VehicleGeometoryScalar_default_instance_);
}
inline ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* VehicleGeometory::release_vehicle_geometory() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.vehicle_geometory)
  
  ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* temp = vehicle_geometory_;
  vehicle_geometory_ = nullptr;
  return temp;
}
inline ::sim_msg::VehicleGeometory_VehicleGeometoryScalar* VehicleGeometory::mutable_vehicle_geometory() {
  
  if (vehicle_geometory_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::VehicleGeometory_VehicleGeometoryScalar>(GetArenaNoVirtual());
    vehicle_geometory_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.vehicle_geometory)
  return vehicle_geometory_;
}
inline void VehicleGeometory::set_allocated_vehicle_geometory(::sim_msg::VehicleGeometory_VehicleGeometoryScalar* vehicle_geometory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_geometory_;
  }
  if (vehicle_geometory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_geometory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_geometory, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_geometory_ = vehicle_geometory;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.vehicle_geometory)
}

// .sim_msg.VehicleGeometory.PointInVehicleCoord vehicle_coord = 3;
inline bool VehicleGeometory::has_vehicle_coord() const {
  return this != internal_default_instance() && vehicle_coord_ != nullptr;
}
inline void VehicleGeometory::clear_vehicle_coord() {
  if (GetArenaNoVirtual() == nullptr && vehicle_coord_ != nullptr) {
    delete vehicle_coord_;
  }
  vehicle_coord_ = nullptr;
}
inline const ::sim_msg::VehicleGeometory_PointInVehicleCoord& VehicleGeometory::vehicle_coord() const {
  const ::sim_msg::VehicleGeometory_PointInVehicleCoord* p = vehicle_coord_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.vehicle_coord)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::VehicleGeometory_PointInVehicleCoord*>(
      &::sim_msg::_VehicleGeometory_PointInVehicleCoord_default_instance_);
}
inline ::sim_msg::VehicleGeometory_PointInVehicleCoord* VehicleGeometory::release_vehicle_coord() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.vehicle_coord)
  
  ::sim_msg::VehicleGeometory_PointInVehicleCoord* temp = vehicle_coord_;
  vehicle_coord_ = nullptr;
  return temp;
}
inline ::sim_msg::VehicleGeometory_PointInVehicleCoord* VehicleGeometory::mutable_vehicle_coord() {
  
  if (vehicle_coord_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::VehicleGeometory_PointInVehicleCoord>(GetArenaNoVirtual());
    vehicle_coord_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.vehicle_coord)
  return vehicle_coord_;
}
inline void VehicleGeometory::set_allocated_vehicle_coord(::sim_msg::VehicleGeometory_PointInVehicleCoord* vehicle_coord) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_coord_;
  }
  if (vehicle_coord) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_coord = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_coord, submessage_arena);
    }
    
  } else {
    
  }
  vehicle_coord_ = vehicle_coord;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.vehicle_coord)
}

// .sim_msg.VehicleGeometory.WheelFour max_steering_radius = 4;
inline bool VehicleGeometory::has_max_steering_radius() const {
  return this != internal_default_instance() && max_steering_radius_ != nullptr;
}
inline void VehicleGeometory::clear_max_steering_radius() {
  if (GetArenaNoVirtual() == nullptr && max_steering_radius_ != nullptr) {
    delete max_steering_radius_;
  }
  max_steering_radius_ = nullptr;
}
inline const ::sim_msg::VehicleGeometory_WheelFour& VehicleGeometory::max_steering_radius() const {
  const ::sim_msg::VehicleGeometory_WheelFour* p = max_steering_radius_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.max_steering_radius)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::VehicleGeometory_WheelFour*>(
      &::sim_msg::_VehicleGeometory_WheelFour_default_instance_);
}
inline ::sim_msg::VehicleGeometory_WheelFour* VehicleGeometory::release_max_steering_radius() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.max_steering_radius)
  
  ::sim_msg::VehicleGeometory_WheelFour* temp = max_steering_radius_;
  max_steering_radius_ = nullptr;
  return temp;
}
inline ::sim_msg::VehicleGeometory_WheelFour* VehicleGeometory::mutable_max_steering_radius() {
  
  if (max_steering_radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::VehicleGeometory_WheelFour>(GetArenaNoVirtual());
    max_steering_radius_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.max_steering_radius)
  return max_steering_radius_;
}
inline void VehicleGeometory::set_allocated_max_steering_radius(::sim_msg::VehicleGeometory_WheelFour* max_steering_radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete max_steering_radius_;
  }
  if (max_steering_radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_steering_radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_steering_radius, submessage_arena);
    }
    
  } else {
    
  }
  max_steering_radius_ = max_steering_radius;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.max_steering_radius)
}

// .sim_msg.VehicleGeometory.WheelFour wheel_diameter = 5;
inline bool VehicleGeometory::has_wheel_diameter() const {
  return this != internal_default_instance() && wheel_diameter_ != nullptr;
}
inline void VehicleGeometory::clear_wheel_diameter() {
  if (GetArenaNoVirtual() == nullptr && wheel_diameter_ != nullptr) {
    delete wheel_diameter_;
  }
  wheel_diameter_ = nullptr;
}
inline const ::sim_msg::VehicleGeometory_WheelFour& VehicleGeometory::wheel_diameter() const {
  const ::sim_msg::VehicleGeometory_WheelFour* p = wheel_diameter_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometory.wheel_diameter)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::VehicleGeometory_WheelFour*>(
      &::sim_msg::_VehicleGeometory_WheelFour_default_instance_);
}
inline ::sim_msg::VehicleGeometory_WheelFour* VehicleGeometory::release_wheel_diameter() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometory.wheel_diameter)
  
  ::sim_msg::VehicleGeometory_WheelFour* temp = wheel_diameter_;
  wheel_diameter_ = nullptr;
  return temp;
}
inline ::sim_msg::VehicleGeometory_WheelFour* VehicleGeometory::mutable_wheel_diameter() {
  
  if (wheel_diameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::VehicleGeometory_WheelFour>(GetArenaNoVirtual());
    wheel_diameter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometory.wheel_diameter)
  return wheel_diameter_;
}
inline void VehicleGeometory::set_allocated_wheel_diameter(::sim_msg::VehicleGeometory_WheelFour* wheel_diameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wheel_diameter_;
  }
  if (wheel_diameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wheel_diameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wheel_diameter, submessage_arena);
    }
    
  } else {
    
  }
  wheel_diameter_ = wheel_diameter;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometory.wheel_diameter)
}

// -------------------------------------------------------------------

// VehicleGeometoryList

// .sim_msg.VehicleGeometory front = 1;
inline bool VehicleGeometoryList::has_front() const {
  return this != internal_default_instance() && front_ != nullptr;
}
inline void VehicleGeometoryList::clear_front() {
  if (GetArenaNoVirtual() == nullptr && front_ != nullptr) {
    delete front_;
  }
  front_ = nullptr;
}
inline const ::sim_msg::VehicleGeometory& VehicleGeometoryList::front() const {
  const ::sim_msg::VehicleGeometory* p = front_;
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometoryList.front)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::VehicleGeometory*>(
      &::sim_msg::_VehicleGeometory_default_instance_);
}
inline ::sim_msg::VehicleGeometory* VehicleGeometoryList::release_front() {
  // @@protoc_insertion_point(field_release:sim_msg.VehicleGeometoryList.front)
  
  ::sim_msg::VehicleGeometory* temp = front_;
  front_ = nullptr;
  return temp;
}
inline ::sim_msg::VehicleGeometory* VehicleGeometoryList::mutable_front() {
  
  if (front_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::VehicleGeometory>(GetArenaNoVirtual());
    front_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometoryList.front)
  return front_;
}
inline void VehicleGeometoryList::set_allocated_front(::sim_msg::VehicleGeometory* front) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete front_;
  }
  if (front) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      front = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front, submessage_arena);
    }
    
  } else {
    
  }
  front_ = front;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.VehicleGeometoryList.front)
}

// repeated .sim_msg.VehicleGeometory trailer = 2;
inline int VehicleGeometoryList::trailer_size() const {
  return trailer_.size();
}
inline void VehicleGeometoryList::clear_trailer() {
  trailer_.Clear();
}
inline ::sim_msg::VehicleGeometory* VehicleGeometoryList::mutable_trailer(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.VehicleGeometoryList.trailer)
  return trailer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::VehicleGeometory >*
VehicleGeometoryList::mutable_trailer() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.VehicleGeometoryList.trailer)
  return &trailer_;
}
inline const ::sim_msg::VehicleGeometory& VehicleGeometoryList::trailer(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.VehicleGeometoryList.trailer)
  return trailer_.Get(index);
}
inline ::sim_msg::VehicleGeometory* VehicleGeometoryList::add_trailer() {
  // @@protoc_insertion_point(field_add:sim_msg.VehicleGeometoryList.trailer)
  return trailer_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::VehicleGeometory >&
VehicleGeometoryList::trailer() const {
  // @@protoc_insertion_point(field_list:sim_msg.VehicleGeometoryList.trailer)
  return trailer_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::VehicleGeometory_VehicleCoordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::VehicleGeometory_VehicleCoordType>() {
  return ::sim_msg::VehicleGeometory_VehicleCoordType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vehicle_5fgeometry_2eproto
