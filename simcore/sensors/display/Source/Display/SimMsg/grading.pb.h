// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grading.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_grading_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_grading_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_grading_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_grading_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grading_2eproto;
namespace sim_msg {
class Grading;
class GradingDefaultTypeInternal;
extern GradingDefaultTypeInternal _Grading_default_instance_;
class Grading_Acceleration;
class Grading_AccelerationDefaultTypeInternal;
extern Grading_AccelerationDefaultTypeInternal _Grading_Acceleration_default_instance_;
class Grading_Algorithm;
class Grading_AlgorithmDefaultTypeInternal;
extern Grading_AlgorithmDefaultTypeInternal _Grading_Algorithm_default_instance_;
class Grading_CarExpData;
class Grading_CarExpDataDefaultTypeInternal;
extern Grading_CarExpDataDefaultTypeInternal _Grading_CarExpData_default_instance_;
class Grading_Collision;
class Grading_CollisionDefaultTypeInternal;
extern Grading_CollisionDefaultTypeInternal _Grading_Collision_default_instance_;
class Grading_Control;
class Grading_ControlDefaultTypeInternal;
extern Grading_ControlDefaultTypeInternal _Grading_Control_default_instance_;
class Grading_DistHeadway;
class Grading_DistHeadwayDefaultTypeInternal;
extern Grading_DistHeadwayDefaultTypeInternal _Grading_DistHeadway_default_instance_;
class Grading_EventDetector;
class Grading_EventDetectorDefaultTypeInternal;
extern Grading_EventDetectorDefaultTypeInternal _Grading_EventDetector_default_instance_;
class Grading_EventDetector_DetectedEvent;
class Grading_EventDetector_DetectedEventDefaultTypeInternal;
extern Grading_EventDetector_DetectedEventDefaultTypeInternal _Grading_EventDetector_DetectedEvent_default_instance_;
class Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse;
class Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUseDefaultTypeInternal;
extern Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUseDefaultTypeInternal _Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_default_instance_;
class Grading_EventDetector_DetectedEventsEntry_DoNotUse;
class Grading_EventDetector_DetectedEventsEntry_DoNotUseDefaultTypeInternal;
extern Grading_EventDetector_DetectedEventsEntry_DoNotUseDefaultTypeInternal _Grading_EventDetector_DetectedEventsEntry_DoNotUse_default_instance_;
class Grading_ExpData;
class Grading_ExpDataDefaultTypeInternal;
extern Grading_ExpDataDefaultTypeInternal _Grading_ExpData_default_instance_;
class Grading_Lane;
class Grading_LaneDefaultTypeInternal;
extern Grading_LaneDefaultTypeInternal _Grading_Lane_default_instance_;
class Grading_Planning;
class Grading_PlanningDefaultTypeInternal;
extern Grading_PlanningDefaultTypeInternal _Grading_Planning_default_instance_;
class Grading_Speed;
class Grading_SpeedDefaultTypeInternal;
extern Grading_SpeedDefaultTypeInternal _Grading_Speed_default_instance_;
class Grading_Statistics;
class Grading_StatisticsDefaultTypeInternal;
extern Grading_StatisticsDefaultTypeInternal _Grading_Statistics_default_instance_;
class Grading_Statistics_CustomDetail;
class Grading_Statistics_CustomDetailDefaultTypeInternal;
extern Grading_Statistics_CustomDetailDefaultTypeInternal _Grading_Statistics_CustomDetail_default_instance_;
class Grading_Statistics_Detail;
class Grading_Statistics_DetailDefaultTypeInternal;
extern Grading_Statistics_DetailDefaultTypeInternal _Grading_Statistics_Detail_default_instance_;
class Grading_Statistics_DetailItem;
class Grading_Statistics_DetailItemDefaultTypeInternal;
extern Grading_Statistics_DetailItemDefaultTypeInternal _Grading_Statistics_DetailItem_default_instance_;
class Grading_TimeHeadway;
class Grading_TimeHeadwayDefaultTypeInternal;
extern Grading_TimeHeadwayDefaultTypeInternal _Grading_TimeHeadway_default_instance_;
class Grading_TimeStamp;
class Grading_TimeStampDefaultTypeInternal;
extern Grading_TimeStampDefaultTypeInternal _Grading_TimeStamp_default_instance_;
class Grading_TrafficLight;
class Grading_TrafficLightDefaultTypeInternal;
extern Grading_TrafficLightDefaultTypeInternal _Grading_TrafficLight_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Grading* Arena::CreateMaybeMessage<::sim_msg::Grading>(Arena*);
template<> ::sim_msg::Grading_Acceleration* Arena::CreateMaybeMessage<::sim_msg::Grading_Acceleration>(Arena*);
template<> ::sim_msg::Grading_Algorithm* Arena::CreateMaybeMessage<::sim_msg::Grading_Algorithm>(Arena*);
template<> ::sim_msg::Grading_CarExpData* Arena::CreateMaybeMessage<::sim_msg::Grading_CarExpData>(Arena*);
template<> ::sim_msg::Grading_Collision* Arena::CreateMaybeMessage<::sim_msg::Grading_Collision>(Arena*);
template<> ::sim_msg::Grading_Control* Arena::CreateMaybeMessage<::sim_msg::Grading_Control>(Arena*);
template<> ::sim_msg::Grading_DistHeadway* Arena::CreateMaybeMessage<::sim_msg::Grading_DistHeadway>(Arena*);
template<> ::sim_msg::Grading_EventDetector* Arena::CreateMaybeMessage<::sim_msg::Grading_EventDetector>(Arena*);
template<> ::sim_msg::Grading_EventDetector_DetectedEvent* Arena::CreateMaybeMessage<::sim_msg::Grading_EventDetector_DetectedEvent>(Arena*);
template<> ::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse* Arena::CreateMaybeMessage<::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse>(Arena*);
template<> ::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse* Arena::CreateMaybeMessage<::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse>(Arena*);
template<> ::sim_msg::Grading_ExpData* Arena::CreateMaybeMessage<::sim_msg::Grading_ExpData>(Arena*);
template<> ::sim_msg::Grading_Lane* Arena::CreateMaybeMessage<::sim_msg::Grading_Lane>(Arena*);
template<> ::sim_msg::Grading_Planning* Arena::CreateMaybeMessage<::sim_msg::Grading_Planning>(Arena*);
template<> ::sim_msg::Grading_Speed* Arena::CreateMaybeMessage<::sim_msg::Grading_Speed>(Arena*);
template<> ::sim_msg::Grading_Statistics* Arena::CreateMaybeMessage<::sim_msg::Grading_Statistics>(Arena*);
template<> ::sim_msg::Grading_Statistics_CustomDetail* Arena::CreateMaybeMessage<::sim_msg::Grading_Statistics_CustomDetail>(Arena*);
template<> ::sim_msg::Grading_Statistics_Detail* Arena::CreateMaybeMessage<::sim_msg::Grading_Statistics_Detail>(Arena*);
template<> ::sim_msg::Grading_Statistics_DetailItem* Arena::CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(Arena*);
template<> ::sim_msg::Grading_TimeHeadway* Arena::CreateMaybeMessage<::sim_msg::Grading_TimeHeadway>(Arena*);
template<> ::sim_msg::Grading_TimeStamp* Arena::CreateMaybeMessage<::sim_msg::Grading_TimeStamp>(Arena*);
template<> ::sim_msg::Grading_TrafficLight* Arena::CreateMaybeMessage<::sim_msg::Grading_TrafficLight>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum Grading_EventDetector_EventState : int {
  Grading_EventDetector_EventState_EventNotDetected = 0,
  Grading_EventDetector_EventState_EventDetected = 1,
  Grading_EventDetector_EventState_Grading_EventDetector_EventState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Grading_EventDetector_EventState_Grading_EventDetector_EventState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Grading_EventDetector_EventState_IsValid(int value);
constexpr Grading_EventDetector_EventState Grading_EventDetector_EventState_EventState_MIN = Grading_EventDetector_EventState_EventNotDetected;
constexpr Grading_EventDetector_EventState Grading_EventDetector_EventState_EventState_MAX = Grading_EventDetector_EventState_EventDetected;
constexpr int Grading_EventDetector_EventState_EventState_ARRAYSIZE = Grading_EventDetector_EventState_EventState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Grading_EventDetector_EventState_descriptor();
template<typename T>
inline const std::string& Grading_EventDetector_EventState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Grading_EventDetector_EventState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Grading_EventDetector_EventState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Grading_EventDetector_EventState_descriptor(), enum_t_value);
}
inline bool Grading_EventDetector_EventState_Parse(
    const std::string& name, Grading_EventDetector_EventState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Grading_EventDetector_EventState>(
    Grading_EventDetector_EventState_descriptor(), name, value);
}
enum GradingCollisionState : int {
  GRADING_COLLISION_NOCOLLISION = 0,
  GRADING_COLLISION_VEHICLE = 1,
  GRADING_COLLISION_PEDESTRIAN = 2,
  GRADING_COLLISION_OBSTACLE = 3,
  GradingCollisionState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingCollisionState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingCollisionState_IsValid(int value);
constexpr GradingCollisionState GradingCollisionState_MIN = GRADING_COLLISION_NOCOLLISION;
constexpr GradingCollisionState GradingCollisionState_MAX = GRADING_COLLISION_OBSTACLE;
constexpr int GradingCollisionState_ARRAYSIZE = GradingCollisionState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingCollisionState_descriptor();
template<typename T>
inline const std::string& GradingCollisionState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingCollisionState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingCollisionState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingCollisionState_descriptor(), enum_t_value);
}
inline bool GradingCollisionState_Parse(
    const std::string& name, GradingCollisionState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingCollisionState>(
    GradingCollisionState_descriptor(), name, value);
}
enum GradingAlgorithmState : int {
  GRADING_ALGORITHM_RUNNING = 0,
  GRADING_ALGORITHM_TIMEOUT = 1,
  GRADING_ALGORITHM_THROWEXCEPTION = 2,
  GradingAlgorithmState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingAlgorithmState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingAlgorithmState_IsValid(int value);
constexpr GradingAlgorithmState GradingAlgorithmState_MIN = GRADING_ALGORITHM_RUNNING;
constexpr GradingAlgorithmState GradingAlgorithmState_MAX = GRADING_ALGORITHM_THROWEXCEPTION;
constexpr int GradingAlgorithmState_ARRAYSIZE = GradingAlgorithmState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingAlgorithmState_descriptor();
template<typename T>
inline const std::string& GradingAlgorithmState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingAlgorithmState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingAlgorithmState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingAlgorithmState_descriptor(), enum_t_value);
}
inline bool GradingAlgorithmState_Parse(
    const std::string& name, GradingAlgorithmState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingAlgorithmState>(
    GradingAlgorithmState_descriptor(), name, value);
}
enum GradingTrafficLightState : int {
  GRADING_TRAFFICLIGHT_RUNNING = 0,
  GRADING_TRAFFICLIGHT_JUMPREDLIGHT = 1,
  GradingTrafficLightState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingTrafficLightState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingTrafficLightState_IsValid(int value);
constexpr GradingTrafficLightState GradingTrafficLightState_MIN = GRADING_TRAFFICLIGHT_RUNNING;
constexpr GradingTrafficLightState GradingTrafficLightState_MAX = GRADING_TRAFFICLIGHT_JUMPREDLIGHT;
constexpr int GradingTrafficLightState_ARRAYSIZE = GradingTrafficLightState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingTrafficLightState_descriptor();
template<typename T>
inline const std::string& GradingTrafficLightState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingTrafficLightState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingTrafficLightState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingTrafficLightState_descriptor(), enum_t_value);
}
inline bool GradingTrafficLightState_Parse(
    const std::string& name, GradingTrafficLightState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingTrafficLightState>(
    GradingTrafficLightState_descriptor(), name, value);
}
enum GradingSpeedState : int {
  GRADING_SPEED_NORMAL = 0,
  GRADING_SPEED_OVERHIGH = 1,
  GRADING_SPEED_OVERLOW = 2,
  GradingSpeedState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingSpeedState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingSpeedState_IsValid(int value);
constexpr GradingSpeedState GradingSpeedState_MIN = GRADING_SPEED_NORMAL;
constexpr GradingSpeedState GradingSpeedState_MAX = GRADING_SPEED_OVERLOW;
constexpr int GradingSpeedState_ARRAYSIZE = GradingSpeedState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingSpeedState_descriptor();
template<typename T>
inline const std::string& GradingSpeedState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingSpeedState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingSpeedState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingSpeedState_descriptor(), enum_t_value);
}
inline bool GradingSpeedState_Parse(
    const std::string& name, GradingSpeedState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingSpeedState>(
    GradingSpeedState_descriptor(), name, value);
}
enum GradingAccelerationState : int {
  GRADING_ACCELERATION_NORMAL = 0,
  GRADING_ACCELERATION_RAPIDACCELERATE = 1,
  GRADING_ACCELERATION_RAPIDDEACCELERATE = 2,
  GradingAccelerationState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingAccelerationState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingAccelerationState_IsValid(int value);
constexpr GradingAccelerationState GradingAccelerationState_MIN = GRADING_ACCELERATION_NORMAL;
constexpr GradingAccelerationState GradingAccelerationState_MAX = GRADING_ACCELERATION_RAPIDDEACCELERATE;
constexpr int GradingAccelerationState_ARRAYSIZE = GradingAccelerationState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingAccelerationState_descriptor();
template<typename T>
inline const std::string& GradingAccelerationState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingAccelerationState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingAccelerationState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingAccelerationState_descriptor(), enum_t_value);
}
inline bool GradingAccelerationState_Parse(
    const std::string& name, GradingAccelerationState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingAccelerationState>(
    GradingAccelerationState_descriptor(), name, value);
}
enum GradingTimeHeadwayState : int {
  GRADING_TIMEHEADWAY_NORMAL = 0,
  GRADING_TIMEHEADWAY_OVERLOW = 1,
  GradingTimeHeadwayState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingTimeHeadwayState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingTimeHeadwayState_IsValid(int value);
constexpr GradingTimeHeadwayState GradingTimeHeadwayState_MIN = GRADING_TIMEHEADWAY_NORMAL;
constexpr GradingTimeHeadwayState GradingTimeHeadwayState_MAX = GRADING_TIMEHEADWAY_OVERLOW;
constexpr int GradingTimeHeadwayState_ARRAYSIZE = GradingTimeHeadwayState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingTimeHeadwayState_descriptor();
template<typename T>
inline const std::string& GradingTimeHeadwayState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingTimeHeadwayState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingTimeHeadwayState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingTimeHeadwayState_descriptor(), enum_t_value);
}
inline bool GradingTimeHeadwayState_Parse(
    const std::string& name, GradingTimeHeadwayState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingTimeHeadwayState>(
    GradingTimeHeadwayState_descriptor(), name, value);
}
enum GradingDistHeadwayState : int {
  GRADING_DISTHEADWAY_NORMAL = 0,
  GRADING_DISTHEADWAY_OVERLOW = 1,
  GradingDistHeadwayState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingDistHeadwayState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingDistHeadwayState_IsValid(int value);
constexpr GradingDistHeadwayState GradingDistHeadwayState_MIN = GRADING_DISTHEADWAY_NORMAL;
constexpr GradingDistHeadwayState GradingDistHeadwayState_MAX = GRADING_DISTHEADWAY_OVERLOW;
constexpr int GradingDistHeadwayState_ARRAYSIZE = GradingDistHeadwayState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingDistHeadwayState_descriptor();
template<typename T>
inline const std::string& GradingDistHeadwayState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingDistHeadwayState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingDistHeadwayState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingDistHeadwayState_descriptor(), enum_t_value);
}
inline bool GradingDistHeadwayState_Parse(
    const std::string& name, GradingDistHeadwayState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingDistHeadwayState>(
    GradingDistHeadwayState_descriptor(), name, value);
}
enum GradingPosErrorState : int {
  GRADING_PosError_NORMAL = 0,
  GRADING_PosError_EXCEED = 1,
  GradingPosErrorState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GradingPosErrorState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GradingPosErrorState_IsValid(int value);
constexpr GradingPosErrorState GradingPosErrorState_MIN = GRADING_PosError_NORMAL;
constexpr GradingPosErrorState GradingPosErrorState_MAX = GRADING_PosError_EXCEED;
constexpr int GradingPosErrorState_ARRAYSIZE = GradingPosErrorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingPosErrorState_descriptor();
template<typename T>
inline const std::string& GradingPosErrorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GradingPosErrorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GradingPosErrorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GradingPosErrorState_descriptor(), enum_t_value);
}
inline bool GradingPosErrorState_Parse(
    const std::string& name, GradingPosErrorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GradingPosErrorState>(
    GradingPosErrorState_descriptor(), name, value);
}
// ===================================================================

class Grading_TimeStamp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.TimeStamp) */ {
 public:
  Grading_TimeStamp();
  virtual ~Grading_TimeStamp();

  Grading_TimeStamp(const Grading_TimeStamp& from);
  Grading_TimeStamp(Grading_TimeStamp&& from) noexcept
    : Grading_TimeStamp() {
    *this = ::std::move(from);
  }

  inline Grading_TimeStamp& operator=(const Grading_TimeStamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_TimeStamp& operator=(Grading_TimeStamp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_TimeStamp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_TimeStamp* internal_default_instance() {
    return reinterpret_cast<const Grading_TimeStamp*>(
               &_Grading_TimeStamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Grading_TimeStamp& a, Grading_TimeStamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_TimeStamp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_TimeStamp* New() const final {
    return CreateMaybeMessage<Grading_TimeStamp>(nullptr);
  }

  Grading_TimeStamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_TimeStamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_TimeStamp& from);
  void MergeFrom(const Grading_TimeStamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_TimeStamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.TimeStamp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeStampFieldNumber = 1,
  };
  // uint64 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.TimeStamp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Speed :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Speed) */ {
 public:
  Grading_Speed();
  virtual ~Grading_Speed();

  Grading_Speed(const Grading_Speed& from);
  Grading_Speed(Grading_Speed&& from) noexcept
    : Grading_Speed() {
    *this = ::std::move(from);
  }

  inline Grading_Speed& operator=(const Grading_Speed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Speed& operator=(Grading_Speed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Speed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Speed* internal_default_instance() {
    return reinterpret_cast<const Grading_Speed*>(
               &_Grading_Speed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Grading_Speed& a, Grading_Speed& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Speed* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Speed* New() const final {
    return CreateMaybeMessage<Grading_Speed>(nullptr);
  }

  Grading_Speed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Speed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Speed& from);
  void MergeFrom(const Grading_Speed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Speed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Speed";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
    kThresholdFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // double speed = 1;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // double threshold = 3;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);

  // .sim_msg.GradingSpeedState state = 2;
  void clear_state();
  ::sim_msg::GradingSpeedState state() const;
  void set_state(::sim_msg::GradingSpeedState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Speed)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double speed_;
  double threshold_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Acceleration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Acceleration) */ {
 public:
  Grading_Acceleration();
  virtual ~Grading_Acceleration();

  Grading_Acceleration(const Grading_Acceleration& from);
  Grading_Acceleration(Grading_Acceleration&& from) noexcept
    : Grading_Acceleration() {
    *this = ::std::move(from);
  }

  inline Grading_Acceleration& operator=(const Grading_Acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Acceleration& operator=(Grading_Acceleration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Acceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Acceleration* internal_default_instance() {
    return reinterpret_cast<const Grading_Acceleration*>(
               &_Grading_Acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Grading_Acceleration& a, Grading_Acceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Acceleration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Acceleration* New() const final {
    return CreateMaybeMessage<Grading_Acceleration>(nullptr);
  }

  Grading_Acceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Acceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Acceleration& from);
  void MergeFrom(const Grading_Acceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Acceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Acceleration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationFieldNumber = 1,
    kThresholdFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // double acceleration = 1;
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);

  // double threshold = 3;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);

  // .sim_msg.GradingAccelerationState state = 2;
  void clear_state();
  ::sim_msg::GradingAccelerationState state() const;
  void set_state(::sim_msg::GradingAccelerationState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Acceleration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double acceleration_;
  double threshold_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Collision :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Collision) */ {
 public:
  Grading_Collision();
  virtual ~Grading_Collision();

  Grading_Collision(const Grading_Collision& from);
  Grading_Collision(Grading_Collision&& from) noexcept
    : Grading_Collision() {
    *this = ::std::move(from);
  }

  inline Grading_Collision& operator=(const Grading_Collision& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Collision& operator=(Grading_Collision&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Collision& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Collision* internal_default_instance() {
    return reinterpret_cast<const Grading_Collision*>(
               &_Grading_Collision_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Grading_Collision& a, Grading_Collision& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Collision* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Collision* New() const final {
    return CreateMaybeMessage<Grading_Collision>(nullptr);
  }

  Grading_Collision* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Collision>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Collision& from);
  void MergeFrom(const Grading_Collision& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Collision* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Collision";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // .sim_msg.Vec3 location = 2;
  bool has_location() const;
  void clear_location();
  const ::sim_msg::Vec3& location() const;
  ::sim_msg::Vec3* release_location();
  ::sim_msg::Vec3* mutable_location();
  void set_allocated_location(::sim_msg::Vec3* location);

  // .sim_msg.GradingCollisionState state = 1;
  void clear_state();
  ::sim_msg::GradingCollisionState state() const;
  void set_state(::sim_msg::GradingCollisionState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Collision)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Vec3* location_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_TimeHeadway :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.TimeHeadway) */ {
 public:
  Grading_TimeHeadway();
  virtual ~Grading_TimeHeadway();

  Grading_TimeHeadway(const Grading_TimeHeadway& from);
  Grading_TimeHeadway(Grading_TimeHeadway&& from) noexcept
    : Grading_TimeHeadway() {
    *this = ::std::move(from);
  }

  inline Grading_TimeHeadway& operator=(const Grading_TimeHeadway& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_TimeHeadway& operator=(Grading_TimeHeadway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_TimeHeadway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_TimeHeadway* internal_default_instance() {
    return reinterpret_cast<const Grading_TimeHeadway*>(
               &_Grading_TimeHeadway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Grading_TimeHeadway& a, Grading_TimeHeadway& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_TimeHeadway* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_TimeHeadway* New() const final {
    return CreateMaybeMessage<Grading_TimeHeadway>(nullptr);
  }

  Grading_TimeHeadway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_TimeHeadway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_TimeHeadway& from);
  void MergeFrom(const Grading_TimeHeadway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_TimeHeadway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.TimeHeadway";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kATHFieldNumber = 1,
    kStateFieldNumber = 2,
    kThresholdFieldNumber = 3,
  };
  // float ATH = 1;
  void clear_ath();
  float ath() const;
  void set_ath(float value);

  // .sim_msg.GradingTimeHeadwayState state = 2;
  void clear_state();
  ::sim_msg::GradingTimeHeadwayState state() const;
  void set_state(::sim_msg::GradingTimeHeadwayState value);

  // double threshold = 3;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.TimeHeadway)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float ath_;
  int state_;
  double threshold_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_DistHeadway :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.DistHeadway) */ {
 public:
  Grading_DistHeadway();
  virtual ~Grading_DistHeadway();

  Grading_DistHeadway(const Grading_DistHeadway& from);
  Grading_DistHeadway(Grading_DistHeadway&& from) noexcept
    : Grading_DistHeadway() {
    *this = ::std::move(from);
  }

  inline Grading_DistHeadway& operator=(const Grading_DistHeadway& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_DistHeadway& operator=(Grading_DistHeadway&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_DistHeadway& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_DistHeadway* internal_default_instance() {
    return reinterpret_cast<const Grading_DistHeadway*>(
               &_Grading_DistHeadway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Grading_DistHeadway& a, Grading_DistHeadway& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_DistHeadway* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_DistHeadway* New() const final {
    return CreateMaybeMessage<Grading_DistHeadway>(nullptr);
  }

  Grading_DistHeadway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_DistHeadway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_DistHeadway& from);
  void MergeFrom(const Grading_DistHeadway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_DistHeadway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.DistHeadway";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistToFellowFieldNumber = 1,
    kThresholdFieldNumber = 3,
    kDistStateFieldNumber = 2,
  };
  // double dist_to_fellow = 1;
  void clear_dist_to_fellow();
  double dist_to_fellow() const;
  void set_dist_to_fellow(double value);

  // double threshold = 3;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);

  // .sim_msg.GradingDistHeadwayState dist_state = 2;
  void clear_dist_state();
  ::sim_msg::GradingDistHeadwayState dist_state() const;
  void set_dist_state(::sim_msg::GradingDistHeadwayState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.DistHeadway)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double dist_to_fellow_;
  double threshold_;
  int dist_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Algorithm :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Algorithm) */ {
 public:
  Grading_Algorithm();
  virtual ~Grading_Algorithm();

  Grading_Algorithm(const Grading_Algorithm& from);
  Grading_Algorithm(Grading_Algorithm&& from) noexcept
    : Grading_Algorithm() {
    *this = ::std::move(from);
  }

  inline Grading_Algorithm& operator=(const Grading_Algorithm& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Algorithm& operator=(Grading_Algorithm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Algorithm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Algorithm* internal_default_instance() {
    return reinterpret_cast<const Grading_Algorithm*>(
               &_Grading_Algorithm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Grading_Algorithm& a, Grading_Algorithm& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Algorithm* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Algorithm* New() const final {
    return CreateMaybeMessage<Grading_Algorithm>(nullptr);
  }

  Grading_Algorithm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Algorithm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Algorithm& from);
  void MergeFrom(const Grading_Algorithm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Algorithm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Algorithm";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .sim_msg.GradingAlgorithmState state = 1;
  void clear_state();
  ::sim_msg::GradingAlgorithmState state() const;
  void set_state(::sim_msg::GradingAlgorithmState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Algorithm)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Lane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Lane) */ {
 public:
  Grading_Lane();
  virtual ~Grading_Lane();

  Grading_Lane(const Grading_Lane& from);
  Grading_Lane(Grading_Lane&& from) noexcept
    : Grading_Lane() {
    *this = ::std::move(from);
  }

  inline Grading_Lane& operator=(const Grading_Lane& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Lane& operator=(Grading_Lane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Lane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Lane* internal_default_instance() {
    return reinterpret_cast<const Grading_Lane*>(
               &_Grading_Lane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Grading_Lane& a, Grading_Lane& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Lane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Lane* New() const final {
    return CreateMaybeMessage<Grading_Lane>(nullptr);
  }

  Grading_Lane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Lane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Lane& from);
  void MergeFrom(const Grading_Lane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Lane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Lane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOnSolidLineFieldNumber = 1,
    kIsOnDottedLineFieldNumber = 2,
    kIsOnStopLineFieldNumber = 3,
  };
  // bool isOnSolidLine = 1;
  void clear_isonsolidline();
  bool isonsolidline() const;
  void set_isonsolidline(bool value);

  // bool isOnDottedLine = 2;
  void clear_isondottedline();
  bool isondottedline() const;
  void set_isondottedline(bool value);

  // bool isOnStopLine = 3;
  void clear_isonstopline();
  bool isonstopline() const;
  void set_isonstopline(bool value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Lane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool isonsolidline_;
  bool isondottedline_;
  bool isonstopline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_TrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.TrafficLight) */ {
 public:
  Grading_TrafficLight();
  virtual ~Grading_TrafficLight();

  Grading_TrafficLight(const Grading_TrafficLight& from);
  Grading_TrafficLight(Grading_TrafficLight&& from) noexcept
    : Grading_TrafficLight() {
    *this = ::std::move(from);
  }

  inline Grading_TrafficLight& operator=(const Grading_TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_TrafficLight& operator=(Grading_TrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_TrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_TrafficLight* internal_default_instance() {
    return reinterpret_cast<const Grading_TrafficLight*>(
               &_Grading_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Grading_TrafficLight& a, Grading_TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_TrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_TrafficLight* New() const final {
    return CreateMaybeMessage<Grading_TrafficLight>(nullptr);
  }

  Grading_TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_TrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_TrafficLight& from);
  void MergeFrom(const Grading_TrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.TrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRunTrafficlightThreshFieldNumber = 2,
    kRunTrafficlightCountFieldNumber = 3,
    kStateFieldNumber = 1,
  };
  // uint64 run_trafficlight_thresh = 2;
  void clear_run_trafficlight_thresh();
  ::PROTOBUF_NAMESPACE_ID::uint64 run_trafficlight_thresh() const;
  void set_run_trafficlight_thresh(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 run_trafficlight_count = 3;
  void clear_run_trafficlight_count();
  ::PROTOBUF_NAMESPACE_ID::uint64 run_trafficlight_count() const;
  void set_run_trafficlight_count(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .sim_msg.GradingTrafficLightState state = 1;
  void clear_state();
  ::sim_msg::GradingTrafficLightState state() const;
  void set_state(::sim_msg::GradingTrafficLightState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.TrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 run_trafficlight_thresh_;
  ::PROTOBUF_NAMESPACE_ID::uint64 run_trafficlight_count_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Control :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Control) */ {
 public:
  Grading_Control();
  virtual ~Grading_Control();

  Grading_Control(const Grading_Control& from);
  Grading_Control(Grading_Control&& from) noexcept
    : Grading_Control() {
    *this = ::std::move(from);
  }

  inline Grading_Control& operator=(const Grading_Control& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Control& operator=(Grading_Control&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Control& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Control* internal_default_instance() {
    return reinterpret_cast<const Grading_Control*>(
               &_Grading_Control_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Grading_Control& a, Grading_Control& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Control* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Control* New() const final {
    return CreateMaybeMessage<Grading_Control>(nullptr);
  }

  Grading_Control* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Control>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Control& from);
  void MergeFrom(const Grading_Control& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Control* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Control";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosErrorHFieldNumber = 1,
    kThresholdFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // double posError_H = 1;
  void clear_poserror_h();
  double poserror_h() const;
  void set_poserror_h(double value);

  // double threshold = 3;
  void clear_threshold();
  double threshold() const;
  void set_threshold(double value);

  // .sim_msg.GradingPosErrorState state = 2;
  void clear_state();
  ::sim_msg::GradingPosErrorState state() const;
  void set_state(::sim_msg::GradingPosErrorState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Control)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double poserror_h_;
  double threshold_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Planning :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Planning) */ {
 public:
  Grading_Planning();
  virtual ~Grading_Planning();

  Grading_Planning(const Grading_Planning& from);
  Grading_Planning(Grading_Planning&& from) noexcept
    : Grading_Planning() {
    *this = ::std::move(from);
  }

  inline Grading_Planning& operator=(const Grading_Planning& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Planning& operator=(Grading_Planning&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Planning& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Planning* internal_default_instance() {
    return reinterpret_cast<const Grading_Planning*>(
               &_Grading_Planning_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Grading_Planning& a, Grading_Planning& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Planning* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Planning* New() const final {
    return CreateMaybeMessage<Grading_Planning>(nullptr);
  }

  Grading_Planning* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Planning>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Planning& from);
  void MergeFrom(const Grading_Planning& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Planning* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Planning";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrentPointFieldNumber = 2,
    kEndpointFieldNumber = 3,
    kIsReachEndpointFieldNumber = 1,
  };
  // .sim_msg.Vec3 current_point = 2;
  bool has_current_point() const;
  void clear_current_point();
  const ::sim_msg::Vec3& current_point() const;
  ::sim_msg::Vec3* release_current_point();
  ::sim_msg::Vec3* mutable_current_point();
  void set_allocated_current_point(::sim_msg::Vec3* current_point);

  // .sim_msg.Vec3 endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  const ::sim_msg::Vec3& endpoint() const;
  ::sim_msg::Vec3* release_endpoint();
  ::sim_msg::Vec3* mutable_endpoint();
  void set_allocated_endpoint(::sim_msg::Vec3* endpoint);

  // bool is_reachEndpoint = 1;
  void clear_is_reachendpoint();
  bool is_reachendpoint() const;
  void set_is_reachendpoint(bool value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Planning)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Vec3* current_point_;
  ::sim_msg::Vec3* endpoint_;
  bool is_reachendpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_CarExpData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.CarExpData) */ {
 public:
  Grading_CarExpData();
  virtual ~Grading_CarExpData();

  Grading_CarExpData(const Grading_CarExpData& from);
  Grading_CarExpData(Grading_CarExpData&& from) noexcept
    : Grading_CarExpData() {
    *this = ::std::move(from);
  }

  inline Grading_CarExpData& operator=(const Grading_CarExpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_CarExpData& operator=(Grading_CarExpData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_CarExpData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_CarExpData* internal_default_instance() {
    return reinterpret_cast<const Grading_CarExpData*>(
               &_Grading_CarExpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Grading_CarExpData& a, Grading_CarExpData& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_CarExpData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_CarExpData* New() const final {
    return CreateMaybeMessage<Grading_CarExpData>(nullptr);
  }

  Grading_CarExpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_CarExpData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_CarExpData& from);
  void MergeFrom(const Grading_CarExpData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_CarExpData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.CarExpData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // double id = 1;
  void clear_id();
  double id() const;
  void set_id(double value);

  // double value = 2;
  void clear_value();
  double value() const;
  void set_value(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.CarExpData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double id_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_ExpData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.ExpData) */ {
 public:
  Grading_ExpData();
  virtual ~Grading_ExpData();

  Grading_ExpData(const Grading_ExpData& from);
  Grading_ExpData(Grading_ExpData&& from) noexcept
    : Grading_ExpData() {
    *this = ::std::move(from);
  }

  inline Grading_ExpData& operator=(const Grading_ExpData& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_ExpData& operator=(Grading_ExpData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_ExpData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_ExpData* internal_default_instance() {
    return reinterpret_cast<const Grading_ExpData*>(
               &_Grading_ExpData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Grading_ExpData& a, Grading_ExpData& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_ExpData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_ExpData* New() const final {
    return CreateMaybeMessage<Grading_ExpData>(nullptr);
  }

  Grading_ExpData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_ExpData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_ExpData& from);
  void MergeFrom(const Grading_ExpData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_ExpData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.ExpData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistFromCarFieldNumber = 1,
    kDistFromCarHFieldNumber = 2,
    kDistFromCarVFieldNumber = 3,
    kThFromCarFieldNumber = 4,
    kDotSFellowFieldNumber = 5,
    kDotXFellowFieldNumber = 6,
    kDotYFellowFieldNumber = 7,
    kDotSEgoFieldNumber = 8,
    kDotXEgoFieldNumber = 9,
    kDotYEgoFieldNumber = 10,
  };
  // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
  int distfromcar_size() const;
  void clear_distfromcar();
  ::sim_msg::Grading_CarExpData* mutable_distfromcar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
      mutable_distfromcar();
  const ::sim_msg::Grading_CarExpData& distfromcar(int index) const;
  ::sim_msg::Grading_CarExpData* add_distfromcar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
      distfromcar() const;

  // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
  int distfromcar_h_size() const;
  void clear_distfromcar_h();
  ::sim_msg::Grading_CarExpData* mutable_distfromcar_h(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
      mutable_distfromcar_h();
  const ::sim_msg::Grading_CarExpData& distfromcar_h(int index) const;
  ::sim_msg::Grading_CarExpData* add_distfromcar_h();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
      distfromcar_h() const;

  // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
  int distfromcar_v_size() const;
  void clear_distfromcar_v();
  ::sim_msg::Grading_CarExpData* mutable_distfromcar_v(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
      mutable_distfromcar_v();
  const ::sim_msg::Grading_CarExpData& distfromcar_v(int index) const;
  ::sim_msg::Grading_CarExpData* add_distfromcar_v();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
      distfromcar_v() const;

  // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
  int thfromcar_size() const;
  void clear_thfromcar();
  ::sim_msg::Grading_CarExpData* mutable_thfromcar(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
      mutable_thfromcar();
  const ::sim_msg::Grading_CarExpData& thfromcar(int index) const;
  ::sim_msg::Grading_CarExpData* add_thfromcar();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
      thfromcar() const;

  // repeated .sim_msg.Grading.CarExpData dot_s_fellow = 5;
  int dot_s_fellow_size() const;
  void clear_dot_s_fellow();
  ::sim_msg::Grading_CarExpData* mutable_dot_s_fellow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
      mutable_dot_s_fellow();
  const ::sim_msg::Grading_CarExpData& dot_s_fellow(int index) const;
  ::sim_msg::Grading_CarExpData* add_dot_s_fellow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
      dot_s_fellow() const;

  // repeated .sim_msg.Grading.CarExpData dot_x_fellow = 6;
  int dot_x_fellow_size() const;
  void clear_dot_x_fellow();
  ::sim_msg::Grading_CarExpData* mutable_dot_x_fellow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
      mutable_dot_x_fellow();
  const ::sim_msg::Grading_CarExpData& dot_x_fellow(int index) const;
  ::sim_msg::Grading_CarExpData* add_dot_x_fellow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
      dot_x_fellow() const;

  // repeated .sim_msg.Grading.CarExpData dot_y_fellow = 7;
  int dot_y_fellow_size() const;
  void clear_dot_y_fellow();
  ::sim_msg::Grading_CarExpData* mutable_dot_y_fellow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
      mutable_dot_y_fellow();
  const ::sim_msg::Grading_CarExpData& dot_y_fellow(int index) const;
  ::sim_msg::Grading_CarExpData* add_dot_y_fellow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
      dot_y_fellow() const;

  // double dot_s_ego = 8;
  void clear_dot_s_ego();
  double dot_s_ego() const;
  void set_dot_s_ego(double value);

  // double dot_x_ego = 9;
  void clear_dot_x_ego();
  double dot_x_ego() const;
  void set_dot_x_ego(double value);

  // double dot_y_ego = 10;
  void clear_dot_y_ego();
  double dot_y_ego() const;
  void set_dot_y_ego(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.ExpData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData > distfromcar_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData > distfromcar_h_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData > distfromcar_v_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData > thfromcar_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData > dot_s_fellow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData > dot_x_fellow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData > dot_y_fellow_;
  double dot_s_ego_;
  double dot_x_ego_;
  double dot_y_ego_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Statistics_DetailItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Statistics.DetailItem) */ {
 public:
  Grading_Statistics_DetailItem();
  virtual ~Grading_Statistics_DetailItem();

  Grading_Statistics_DetailItem(const Grading_Statistics_DetailItem& from);
  Grading_Statistics_DetailItem(Grading_Statistics_DetailItem&& from) noexcept
    : Grading_Statistics_DetailItem() {
    *this = ::std::move(from);
  }

  inline Grading_Statistics_DetailItem& operator=(const Grading_Statistics_DetailItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Statistics_DetailItem& operator=(Grading_Statistics_DetailItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Statistics_DetailItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Statistics_DetailItem* internal_default_instance() {
    return reinterpret_cast<const Grading_Statistics_DetailItem*>(
               &_Grading_Statistics_DetailItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Grading_Statistics_DetailItem& a, Grading_Statistics_DetailItem& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Statistics_DetailItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Statistics_DetailItem* New() const final {
    return CreateMaybeMessage<Grading_Statistics_DetailItem>(nullptr);
  }

  Grading_Statistics_DetailItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Statistics_DetailItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Statistics_DetailItem& from);
  void MergeFrom(const Grading_Statistics_DetailItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Statistics_DetailItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Statistics.DetailItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvalValueFieldNumber = 1,
    kIsEnabledFieldNumber = 2,
    kIsPassFieldNumber = 3,
  };
  // double eval_value = 1;
  void clear_eval_value();
  double eval_value() const;
  void set_eval_value(double value);

  // bool is_enabled = 2;
  void clear_is_enabled();
  bool is_enabled() const;
  void set_is_enabled(bool value);

  // bool is_pass = 3;
  void clear_is_pass();
  bool is_pass() const;
  void set_is_pass(bool value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Statistics.DetailItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double eval_value_;
  bool is_enabled_;
  bool is_pass_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Statistics_Detail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Statistics.Detail) */ {
 public:
  Grading_Statistics_Detail();
  virtual ~Grading_Statistics_Detail();

  Grading_Statistics_Detail(const Grading_Statistics_Detail& from);
  Grading_Statistics_Detail(Grading_Statistics_Detail&& from) noexcept
    : Grading_Statistics_Detail() {
    *this = ::std::move(from);
  }

  inline Grading_Statistics_Detail& operator=(const Grading_Statistics_Detail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Statistics_Detail& operator=(Grading_Statistics_Detail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Statistics_Detail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Statistics_Detail* internal_default_instance() {
    return reinterpret_cast<const Grading_Statistics_Detail*>(
               &_Grading_Statistics_Detail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Grading_Statistics_Detail& a, Grading_Statistics_Detail& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Statistics_Detail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Statistics_Detail* New() const final {
    return CreateMaybeMessage<Grading_Statistics_Detail>(nullptr);
  }

  Grading_Statistics_Detail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Statistics_Detail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Statistics_Detail& from);
  void MergeFrom(const Grading_Statistics_Detail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Statistics_Detail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Statistics.Detail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountOverSpeedFieldNumber = 1,
    kCountOverAccelerationFieldNumber = 2,
    kCountOverDecellerationFieldNumber = 3,
    kCountOverTurningAccelerationFieldNumber = 4,
    kCountTooCloseTTCFieldNumber = 5,
    kCountTooCloseDistanceFieldNumber = 6,
    kCountOverMaxPosErrorHFieldNumber = 7,
    kAveragePosErrorHFieldNumber = 8,
    kMaxPosErrorHFieldNumber = 9,
    kMaxPosErrorHLFieldNumber = 10,
    kMaxPosErrorHRFieldNumber = 11,
    kCountCrossSolidLineFieldNumber = 12,
    kCountRanRedLightFieldNumber = 13,
    kReachEndPointFieldNumber = 14,
    kCollisionFieldNumber = 15,
  };
  // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
  bool has_count_overspeed() const;
  void clear_count_overspeed();
  const ::sim_msg::Grading_Statistics_DetailItem& count_overspeed() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_overspeed();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_overspeed();
  void set_allocated_count_overspeed(::sim_msg::Grading_Statistics_DetailItem* count_overspeed);

  // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
  bool has_count_overacceleration() const;
  void clear_count_overacceleration();
  const ::sim_msg::Grading_Statistics_DetailItem& count_overacceleration() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_overacceleration();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_overacceleration();
  void set_allocated_count_overacceleration(::sim_msg::Grading_Statistics_DetailItem* count_overacceleration);

  // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
  bool has_count_overdecelleration() const;
  void clear_count_overdecelleration();
  const ::sim_msg::Grading_Statistics_DetailItem& count_overdecelleration() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_overdecelleration();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_overdecelleration();
  void set_allocated_count_overdecelleration(::sim_msg::Grading_Statistics_DetailItem* count_overdecelleration);

  // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
  bool has_count_overturningacceleration() const;
  void clear_count_overturningacceleration();
  const ::sim_msg::Grading_Statistics_DetailItem& count_overturningacceleration() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_overturningacceleration();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_overturningacceleration();
  void set_allocated_count_overturningacceleration(::sim_msg::Grading_Statistics_DetailItem* count_overturningacceleration);

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
  bool has_count_tooclosettc() const;
  void clear_count_tooclosettc();
  const ::sim_msg::Grading_Statistics_DetailItem& count_tooclosettc() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_tooclosettc();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_tooclosettc();
  void set_allocated_count_tooclosettc(::sim_msg::Grading_Statistics_DetailItem* count_tooclosettc);

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
  bool has_count_tooclosedistance() const;
  void clear_count_tooclosedistance();
  const ::sim_msg::Grading_Statistics_DetailItem& count_tooclosedistance() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_tooclosedistance();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_tooclosedistance();
  void set_allocated_count_tooclosedistance(::sim_msg::Grading_Statistics_DetailItem* count_tooclosedistance);

  // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
  bool has_count_overmaxposerror_h() const;
  void clear_count_overmaxposerror_h();
  const ::sim_msg::Grading_Statistics_DetailItem& count_overmaxposerror_h() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_overmaxposerror_h();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_overmaxposerror_h();
  void set_allocated_count_overmaxposerror_h(::sim_msg::Grading_Statistics_DetailItem* count_overmaxposerror_h);

  // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
  bool has_average_poserror_h() const;
  void clear_average_poserror_h();
  const ::sim_msg::Grading_Statistics_DetailItem& average_poserror_h() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_average_poserror_h();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_average_poserror_h();
  void set_allocated_average_poserror_h(::sim_msg::Grading_Statistics_DetailItem* average_poserror_h);

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
  bool has_max_poserror_h() const;
  void clear_max_poserror_h();
  const ::sim_msg::Grading_Statistics_DetailItem& max_poserror_h() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_max_poserror_h();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_max_poserror_h();
  void set_allocated_max_poserror_h(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h);

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
  bool has_max_poserror_h_l() const;
  void clear_max_poserror_h_l();
  const ::sim_msg::Grading_Statistics_DetailItem& max_poserror_h_l() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_max_poserror_h_l();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_max_poserror_h_l();
  void set_allocated_max_poserror_h_l(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_l);

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
  bool has_max_poserror_h_r() const;
  void clear_max_poserror_h_r();
  const ::sim_msg::Grading_Statistics_DetailItem& max_poserror_h_r() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_max_poserror_h_r();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_max_poserror_h_r();
  void set_allocated_max_poserror_h_r(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_r);

  // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
  bool has_count_crosssolidline() const;
  void clear_count_crosssolidline();
  const ::sim_msg::Grading_Statistics_DetailItem& count_crosssolidline() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_crosssolidline();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_crosssolidline();
  void set_allocated_count_crosssolidline(::sim_msg::Grading_Statistics_DetailItem* count_crosssolidline);

  // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
  bool has_count_ranredlight() const;
  void clear_count_ranredlight();
  const ::sim_msg::Grading_Statistics_DetailItem& count_ranredlight() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_count_ranredlight();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_count_ranredlight();
  void set_allocated_count_ranredlight(::sim_msg::Grading_Statistics_DetailItem* count_ranredlight);

  // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
  bool has_reachendpoint() const;
  void clear_reachendpoint();
  const ::sim_msg::Grading_Statistics_DetailItem& reachendpoint() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_reachendpoint();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_reachendpoint();
  void set_allocated_reachendpoint(::sim_msg::Grading_Statistics_DetailItem* reachendpoint);

  // .sim_msg.Grading.Statistics.DetailItem collision = 15;
  bool has_collision() const;
  void clear_collision();
  const ::sim_msg::Grading_Statistics_DetailItem& collision() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_collision();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_collision();
  void set_allocated_collision(::sim_msg::Grading_Statistics_DetailItem* collision);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Statistics.Detail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Grading_Statistics_DetailItem* count_overspeed_;
  ::sim_msg::Grading_Statistics_DetailItem* count_overacceleration_;
  ::sim_msg::Grading_Statistics_DetailItem* count_overdecelleration_;
  ::sim_msg::Grading_Statistics_DetailItem* count_overturningacceleration_;
  ::sim_msg::Grading_Statistics_DetailItem* count_tooclosettc_;
  ::sim_msg::Grading_Statistics_DetailItem* count_tooclosedistance_;
  ::sim_msg::Grading_Statistics_DetailItem* count_overmaxposerror_h_;
  ::sim_msg::Grading_Statistics_DetailItem* average_poserror_h_;
  ::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_;
  ::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_l_;
  ::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_r_;
  ::sim_msg::Grading_Statistics_DetailItem* count_crosssolidline_;
  ::sim_msg::Grading_Statistics_DetailItem* count_ranredlight_;
  ::sim_msg::Grading_Statistics_DetailItem* reachendpoint_;
  ::sim_msg::Grading_Statistics_DetailItem* collision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Statistics_CustomDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Statistics.CustomDetail) */ {
 public:
  Grading_Statistics_CustomDetail();
  virtual ~Grading_Statistics_CustomDetail();

  Grading_Statistics_CustomDetail(const Grading_Statistics_CustomDetail& from);
  Grading_Statistics_CustomDetail(Grading_Statistics_CustomDetail&& from) noexcept
    : Grading_Statistics_CustomDetail() {
    *this = ::std::move(from);
  }

  inline Grading_Statistics_CustomDetail& operator=(const Grading_Statistics_CustomDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Statistics_CustomDetail& operator=(Grading_Statistics_CustomDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Statistics_CustomDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Statistics_CustomDetail* internal_default_instance() {
    return reinterpret_cast<const Grading_Statistics_CustomDetail*>(
               &_Grading_Statistics_CustomDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Grading_Statistics_CustomDetail& a, Grading_Statistics_CustomDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Statistics_CustomDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Statistics_CustomDetail* New() const final {
    return CreateMaybeMessage<Grading_Statistics_CustomDetail>(nullptr);
  }

  Grading_Statistics_CustomDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Statistics_CustomDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Statistics_CustomDetail& from);
  void MergeFrom(const Grading_Statistics_CustomDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Statistics_CustomDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Statistics.CustomDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomReachEndPointFieldNumber = 1,
    kCustomMaxPosErrorExceedFieldNumber = 2,
  };
  // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
  bool has_custom_reachendpoint() const;
  void clear_custom_reachendpoint();
  const ::sim_msg::Grading_Statistics_DetailItem& custom_reachendpoint() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_custom_reachendpoint();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_custom_reachendpoint();
  void set_allocated_custom_reachendpoint(::sim_msg::Grading_Statistics_DetailItem* custom_reachendpoint);

  // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
  bool has_custom_maxposerror_exceed() const;
  void clear_custom_maxposerror_exceed();
  const ::sim_msg::Grading_Statistics_DetailItem& custom_maxposerror_exceed() const;
  ::sim_msg::Grading_Statistics_DetailItem* release_custom_maxposerror_exceed();
  ::sim_msg::Grading_Statistics_DetailItem* mutable_custom_maxposerror_exceed();
  void set_allocated_custom_maxposerror_exceed(::sim_msg::Grading_Statistics_DetailItem* custom_maxposerror_exceed);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Statistics.CustomDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Grading_Statistics_DetailItem* custom_reachendpoint_;
  ::sim_msg::Grading_Statistics_DetailItem* custom_maxposerror_exceed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_Statistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.Statistics) */ {
 public:
  Grading_Statistics();
  virtual ~Grading_Statistics();

  Grading_Statistics(const Grading_Statistics& from);
  Grading_Statistics(Grading_Statistics&& from) noexcept
    : Grading_Statistics() {
    *this = ::std::move(from);
  }

  inline Grading_Statistics& operator=(const Grading_Statistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_Statistics& operator=(Grading_Statistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_Statistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_Statistics* internal_default_instance() {
    return reinterpret_cast<const Grading_Statistics*>(
               &_Grading_Statistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Grading_Statistics& a, Grading_Statistics& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_Statistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_Statistics* New() const final {
    return CreateMaybeMessage<Grading_Statistics>(nullptr);
  }

  Grading_Statistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_Statistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_Statistics& from);
  void MergeFrom(const Grading_Statistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_Statistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.Statistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Grading_Statistics_DetailItem DetailItem;
  typedef Grading_Statistics_Detail Detail;
  typedef Grading_Statistics_CustomDetail CustomDetail;

  // accessors -------------------------------------------------------

  enum : int {
    kSceneNameFieldNumber = 1,
    kReportDateFieldNumber = 2,
    kGradingXmlFieldNumber = 7,
    kReasonFieldNumber = 10,
    kDetailFieldNumber = 8,
    kCustomDetailFieldNumber = 9,
    kTotalTimeFieldNumber = 4,
    kTotalMilleageFieldNumber = 5,
    kIsPassFieldNumber = 3,
    kIsTimeoutFieldNumber = 6,
  };
  // string scene_name = 1;
  void clear_scene_name();
  const std::string& scene_name() const;
  void set_scene_name(const std::string& value);
  void set_scene_name(std::string&& value);
  void set_scene_name(const char* value);
  void set_scene_name(const char* value, size_t size);
  std::string* mutable_scene_name();
  std::string* release_scene_name();
  void set_allocated_scene_name(std::string* scene_name);

  // string report_date = 2;
  void clear_report_date();
  const std::string& report_date() const;
  void set_report_date(const std::string& value);
  void set_report_date(std::string&& value);
  void set_report_date(const char* value);
  void set_report_date(const char* value, size_t size);
  std::string* mutable_report_date();
  std::string* release_report_date();
  void set_allocated_report_date(std::string* report_date);

  // string grading_xml = 7;
  void clear_grading_xml();
  const std::string& grading_xml() const;
  void set_grading_xml(const std::string& value);
  void set_grading_xml(std::string&& value);
  void set_grading_xml(const char* value);
  void set_grading_xml(const char* value, size_t size);
  std::string* mutable_grading_xml();
  std::string* release_grading_xml();
  void set_allocated_grading_xml(std::string* grading_xml);

  // string reason = 10;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);

  // .sim_msg.Grading.Statistics.Detail detail = 8;
  bool has_detail() const;
  void clear_detail();
  const ::sim_msg::Grading_Statistics_Detail& detail() const;
  ::sim_msg::Grading_Statistics_Detail* release_detail();
  ::sim_msg::Grading_Statistics_Detail* mutable_detail();
  void set_allocated_detail(::sim_msg::Grading_Statistics_Detail* detail);

  // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
  bool has_custom_detail() const;
  void clear_custom_detail();
  const ::sim_msg::Grading_Statistics_CustomDetail& custom_detail() const;
  ::sim_msg::Grading_Statistics_CustomDetail* release_custom_detail();
  ::sim_msg::Grading_Statistics_CustomDetail* mutable_custom_detail();
  void set_allocated_custom_detail(::sim_msg::Grading_Statistics_CustomDetail* custom_detail);

  // double total_time = 4;
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);

  // double total_milleage = 5;
  void clear_total_milleage();
  double total_milleage() const;
  void set_total_milleage(double value);

  // bool is_pass = 3;
  void clear_is_pass();
  bool is_pass() const;
  void set_is_pass(bool value);

  // bool is_timeout = 6;
  void clear_is_timeout();
  bool is_timeout() const;
  void set_is_timeout(bool value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.Statistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scene_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grading_xml_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::sim_msg::Grading_Statistics_Detail* detail_;
  ::sim_msg::Grading_Statistics_CustomDetail* custom_detail_;
  double total_time_;
  double total_milleage_;
  bool is_pass_;
  bool is_timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse();
  Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse& other);
  static const Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse*>(&_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class Grading_EventDetector_DetectedEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.EventDetector.DetectedEvent) */ {
 public:
  Grading_EventDetector_DetectedEvent();
  virtual ~Grading_EventDetector_DetectedEvent();

  Grading_EventDetector_DetectedEvent(const Grading_EventDetector_DetectedEvent& from);
  Grading_EventDetector_DetectedEvent(Grading_EventDetector_DetectedEvent&& from) noexcept
    : Grading_EventDetector_DetectedEvent() {
    *this = ::std::move(from);
  }

  inline Grading_EventDetector_DetectedEvent& operator=(const Grading_EventDetector_DetectedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_EventDetector_DetectedEvent& operator=(Grading_EventDetector_DetectedEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_EventDetector_DetectedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_EventDetector_DetectedEvent* internal_default_instance() {
    return reinterpret_cast<const Grading_EventDetector_DetectedEvent*>(
               &_Grading_EventDetector_DetectedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Grading_EventDetector_DetectedEvent& a, Grading_EventDetector_DetectedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_EventDetector_DetectedEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_EventDetector_DetectedEvent* New() const final {
    return CreateMaybeMessage<Grading_EventDetector_DetectedEvent>(nullptr);
  }

  Grading_EventDetector_DetectedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_EventDetector_DetectedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_EventDetector_DetectedEvent& from);
  void MergeFrom(const Grading_EventDetector_DetectedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_EventDetector_DetectedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.EventDetector.DetectedEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAdditionalsFieldNumber = 3,
    kEdgeFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // map<string, string> additionals = 3;
  int additionals_size() const;
  void clear_additionals();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      additionals() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_additionals();

  // .sim_msg.Grading.EventDetector.EventState edge = 1;
  void clear_edge();
  ::sim_msg::Grading_EventDetector_EventState edge() const;
  void set_edge(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState state = 2;
  void clear_state();
  ::sim_msg::Grading_EventDetector_EventState state() const;
  void set_state(::sim_msg::Grading_EventDetector_EventState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.EventDetector.DetectedEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > additionals_;
  int edge_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading_EventDetector_DetectedEventsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Grading_EventDetector_DetectedEventsEntry_DoNotUse, 
    std::string, ::sim_msg::Grading_EventDetector_DetectedEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Grading_EventDetector_DetectedEventsEntry_DoNotUse, 
    std::string, ::sim_msg::Grading_EventDetector_DetectedEvent,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Grading_EventDetector_DetectedEventsEntry_DoNotUse();
  Grading_EventDetector_DetectedEventsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Grading_EventDetector_DetectedEventsEntry_DoNotUse& other);
  static const Grading_EventDetector_DetectedEventsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Grading_EventDetector_DetectedEventsEntry_DoNotUse*>(&_Grading_EventDetector_DetectedEventsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sim_msg.Grading.EventDetector.DetectedEventsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[19];
  }

  public:
};

// -------------------------------------------------------------------

class Grading_EventDetector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading.EventDetector) */ {
 public:
  Grading_EventDetector();
  virtual ~Grading_EventDetector();

  Grading_EventDetector(const Grading_EventDetector& from);
  Grading_EventDetector(Grading_EventDetector&& from) noexcept
    : Grading_EventDetector() {
    *this = ::std::move(from);
  }

  inline Grading_EventDetector& operator=(const Grading_EventDetector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading_EventDetector& operator=(Grading_EventDetector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading_EventDetector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading_EventDetector* internal_default_instance() {
    return reinterpret_cast<const Grading_EventDetector*>(
               &_Grading_EventDetector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Grading_EventDetector& a, Grading_EventDetector& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading_EventDetector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading_EventDetector* New() const final {
    return CreateMaybeMessage<Grading_EventDetector>(nullptr);
  }

  Grading_EventDetector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading_EventDetector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading_EventDetector& from);
  void MergeFrom(const Grading_EventDetector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading_EventDetector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading.EventDetector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Grading_EventDetector_DetectedEvent DetectedEvent;

  typedef Grading_EventDetector_EventState EventState;
  static constexpr EventState EventNotDetected =
    Grading_EventDetector_EventState_EventNotDetected;
  static constexpr EventState EventDetected =
    Grading_EventDetector_EventState_EventDetected;
  static inline bool EventState_IsValid(int value) {
    return Grading_EventDetector_EventState_IsValid(value);
  }
  static constexpr EventState EventState_MIN =
    Grading_EventDetector_EventState_EventState_MIN;
  static constexpr EventState EventState_MAX =
    Grading_EventDetector_EventState_EventState_MAX;
  static constexpr int EventState_ARRAYSIZE =
    Grading_EventDetector_EventState_EventState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventState_descriptor() {
    return Grading_EventDetector_EventState_descriptor();
  }
  template<typename T>
  static inline const std::string& EventState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventState_Name.");
    return Grading_EventDetector_EventState_Name(enum_t_value);
  }
  static inline bool EventState_Parse(const std::string& name,
      EventState* value) {
    return Grading_EventDetector_EventState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetectedEventsFieldNumber = 10,
    kDtSecondFieldNumber = 1,
    kCurTSecondFieldNumber = 2,
    kAccelerationAboveThreshFieldNumber = 3,
    kSpeedAboveThreshFieldNumber = 4,
    kIfCollisionFieldNumber = 5,
    kTimeHeadAwayBelowThreshFieldNumber = 6,
    kRunTrafficLightFieldNumber = 7,
    kOnSolidLineFieldNumber = 8,
    kDecelerationAboveThreshFieldNumber = 9,
    kHasEdgeFieldNumber = 11,
  };
  // map<string, .sim_msg.Grading.EventDetector.DetectedEvent> detectedEvents = 10;
  int detectedevents_size() const;
  void clear_detectedevents();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >&
      detectedevents() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >*
      mutable_detectedevents();

  // double dt_second = 1;
  void clear_dt_second();
  double dt_second() const;
  void set_dt_second(double value);

  // double cur_t_second = 2;
  void clear_cur_t_second();
  double cur_t_second() const;
  void set_cur_t_second(double value);

  // .sim_msg.Grading.EventDetector.EventState Acceleration_Above_Thresh = 3;
  void clear_acceleration_above_thresh();
  ::sim_msg::Grading_EventDetector_EventState acceleration_above_thresh() const;
  void set_acceleration_above_thresh(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState Speed_Above_Thresh = 4;
  void clear_speed_above_thresh();
  ::sim_msg::Grading_EventDetector_EventState speed_above_thresh() const;
  void set_speed_above_thresh(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState If_Collision = 5;
  void clear_if_collision();
  ::sim_msg::Grading_EventDetector_EventState if_collision() const;
  void set_if_collision(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState TimeHeadAway_Below_Thresh = 6;
  void clear_timeheadaway_below_thresh();
  ::sim_msg::Grading_EventDetector_EventState timeheadaway_below_thresh() const;
  void set_timeheadaway_below_thresh(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState Run_TrafficLight = 7;
  void clear_run_trafficlight();
  ::sim_msg::Grading_EventDetector_EventState run_trafficlight() const;
  void set_run_trafficlight(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState On_SolidLine = 8;
  void clear_on_solidline();
  ::sim_msg::Grading_EventDetector_EventState on_solidline() const;
  void set_on_solidline(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState Deceleration_Above_Thresh = 9;
  void clear_deceleration_above_thresh();
  ::sim_msg::Grading_EventDetector_EventState deceleration_above_thresh() const;
  void set_deceleration_above_thresh(::sim_msg::Grading_EventDetector_EventState value);

  // .sim_msg.Grading.EventDetector.EventState hasEdge = 11;
  void clear_hasedge();
  ::sim_msg::Grading_EventDetector_EventState hasedge() const;
  void set_hasedge(::sim_msg::Grading_EventDetector_EventState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading.EventDetector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Grading_EventDetector_DetectedEventsEntry_DoNotUse,
      std::string, ::sim_msg::Grading_EventDetector_DetectedEvent,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > detectedevents_;
  double dt_second_;
  double cur_t_second_;
  int acceleration_above_thresh_;
  int speed_above_thresh_;
  int if_collision_;
  int timeheadaway_below_thresh_;
  int run_trafficlight_;
  int on_solidline_;
  int deceleration_above_thresh_;
  int hasedge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// -------------------------------------------------------------------

class Grading :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Grading) */ {
 public:
  Grading();
  virtual ~Grading();

  Grading(const Grading& from);
  Grading(Grading&& from) noexcept
    : Grading() {
    *this = ::std::move(from);
  }

  inline Grading& operator=(const Grading& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grading& operator=(Grading&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grading& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grading* internal_default_instance() {
    return reinterpret_cast<const Grading*>(
               &_Grading_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(Grading& a, Grading& b) {
    a.Swap(&b);
  }
  inline void Swap(Grading* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grading* New() const final {
    return CreateMaybeMessage<Grading>(nullptr);
  }

  Grading* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grading>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grading& from);
  void MergeFrom(const Grading& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grading* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Grading";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_grading_2eproto);
    return ::descriptor_table_grading_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Grading_TimeStamp TimeStamp;
  typedef Grading_Speed Speed;
  typedef Grading_Acceleration Acceleration;
  typedef Grading_Collision Collision;
  typedef Grading_TimeHeadway TimeHeadway;
  typedef Grading_DistHeadway DistHeadway;
  typedef Grading_Algorithm Algorithm;
  typedef Grading_Lane Lane;
  typedef Grading_TrafficLight TrafficLight;
  typedef Grading_Control Control;
  typedef Grading_Planning Planning;
  typedef Grading_CarExpData CarExpData;
  typedef Grading_ExpData ExpData;
  typedef Grading_Statistics Statistics;
  typedef Grading_EventDetector EventDetector;

  // accessors -------------------------------------------------------

  enum : int {
    kCollisionFieldNumber = 3,
    kSpeedFieldNumber = 1,
    kAccelerationFieldNumber = 2,
    kTimeHeadwayFieldNumber = 4,
    kAlgorithmFieldNumber = 5,
    kLaneFieldNumber = 6,
    kTrafficeLightFieldNumber = 7,
    kTimeStampFieldNumber = 8,
    kExpDataFieldNumber = 10,
    kDistHeadwayFieldNumber = 11,
    kControlFieldNumber = 12,
    kPlanningFieldNumber = 13,
    kLateralAccFieldNumber = 14,
    kDecAccFieldNumber = 15,
    kEventDetectorFieldNumber = 16,
    kMileageFieldNumber = 9,
  };
  // repeated .sim_msg.Grading.Collision collision = 3;
  int collision_size() const;
  void clear_collision();
  ::sim_msg::Grading_Collision* mutable_collision(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_Collision >*
      mutable_collision();
  const ::sim_msg::Grading_Collision& collision(int index) const;
  ::sim_msg::Grading_Collision* add_collision();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_Collision >&
      collision() const;

  // .sim_msg.Grading.Speed speed = 1;
  bool has_speed() const;
  void clear_speed();
  const ::sim_msg::Grading_Speed& speed() const;
  ::sim_msg::Grading_Speed* release_speed();
  ::sim_msg::Grading_Speed* mutable_speed();
  void set_allocated_speed(::sim_msg::Grading_Speed* speed);

  // .sim_msg.Grading.Acceleration acceleration = 2;
  bool has_acceleration() const;
  void clear_acceleration();
  const ::sim_msg::Grading_Acceleration& acceleration() const;
  ::sim_msg::Grading_Acceleration* release_acceleration();
  ::sim_msg::Grading_Acceleration* mutable_acceleration();
  void set_allocated_acceleration(::sim_msg::Grading_Acceleration* acceleration);

  // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
  bool has_timeheadway() const;
  void clear_timeheadway();
  const ::sim_msg::Grading_TimeHeadway& timeheadway() const;
  ::sim_msg::Grading_TimeHeadway* release_timeheadway();
  ::sim_msg::Grading_TimeHeadway* mutable_timeheadway();
  void set_allocated_timeheadway(::sim_msg::Grading_TimeHeadway* timeheadway);

  // .sim_msg.Grading.Algorithm algorithm = 5;
  bool has_algorithm() const;
  void clear_algorithm();
  const ::sim_msg::Grading_Algorithm& algorithm() const;
  ::sim_msg::Grading_Algorithm* release_algorithm();
  ::sim_msg::Grading_Algorithm* mutable_algorithm();
  void set_allocated_algorithm(::sim_msg::Grading_Algorithm* algorithm);

  // .sim_msg.Grading.Lane lane = 6;
  bool has_lane() const;
  void clear_lane();
  const ::sim_msg::Grading_Lane& lane() const;
  ::sim_msg::Grading_Lane* release_lane();
  ::sim_msg::Grading_Lane* mutable_lane();
  void set_allocated_lane(::sim_msg::Grading_Lane* lane);

  // .sim_msg.Grading.TrafficLight trafficeLight = 7;
  bool has_trafficelight() const;
  void clear_trafficelight();
  const ::sim_msg::Grading_TrafficLight& trafficelight() const;
  ::sim_msg::Grading_TrafficLight* release_trafficelight();
  ::sim_msg::Grading_TrafficLight* mutable_trafficelight();
  void set_allocated_trafficelight(::sim_msg::Grading_TrafficLight* trafficelight);

  // .sim_msg.Grading.TimeStamp timeStamp = 8;
  bool has_timestamp() const;
  void clear_timestamp();
  const ::sim_msg::Grading_TimeStamp& timestamp() const;
  ::sim_msg::Grading_TimeStamp* release_timestamp();
  ::sim_msg::Grading_TimeStamp* mutable_timestamp();
  void set_allocated_timestamp(::sim_msg::Grading_TimeStamp* timestamp);

  // .sim_msg.Grading.ExpData expData = 10;
  bool has_expdata() const;
  void clear_expdata();
  const ::sim_msg::Grading_ExpData& expdata() const;
  ::sim_msg::Grading_ExpData* release_expdata();
  ::sim_msg::Grading_ExpData* mutable_expdata();
  void set_allocated_expdata(::sim_msg::Grading_ExpData* expdata);

  // .sim_msg.Grading.DistHeadway distHeadway = 11;
  bool has_distheadway() const;
  void clear_distheadway();
  const ::sim_msg::Grading_DistHeadway& distheadway() const;
  ::sim_msg::Grading_DistHeadway* release_distheadway();
  ::sim_msg::Grading_DistHeadway* mutable_distheadway();
  void set_allocated_distheadway(::sim_msg::Grading_DistHeadway* distheadway);

  // .sim_msg.Grading.Control control = 12;
  bool has_control() const;
  void clear_control();
  const ::sim_msg::Grading_Control& control() const;
  ::sim_msg::Grading_Control* release_control();
  ::sim_msg::Grading_Control* mutable_control();
  void set_allocated_control(::sim_msg::Grading_Control* control);

  // .sim_msg.Grading.Planning planning = 13;
  bool has_planning() const;
  void clear_planning();
  const ::sim_msg::Grading_Planning& planning() const;
  ::sim_msg::Grading_Planning* release_planning();
  ::sim_msg::Grading_Planning* mutable_planning();
  void set_allocated_planning(::sim_msg::Grading_Planning* planning);

  // .sim_msg.Grading.Acceleration lateral_acc = 14;
  bool has_lateral_acc() const;
  void clear_lateral_acc();
  const ::sim_msg::Grading_Acceleration& lateral_acc() const;
  ::sim_msg::Grading_Acceleration* release_lateral_acc();
  ::sim_msg::Grading_Acceleration* mutable_lateral_acc();
  void set_allocated_lateral_acc(::sim_msg::Grading_Acceleration* lateral_acc);

  // .sim_msg.Grading.Acceleration dec_acc = 15;
  bool has_dec_acc() const;
  void clear_dec_acc();
  const ::sim_msg::Grading_Acceleration& dec_acc() const;
  ::sim_msg::Grading_Acceleration* release_dec_acc();
  ::sim_msg::Grading_Acceleration* mutable_dec_acc();
  void set_allocated_dec_acc(::sim_msg::Grading_Acceleration* dec_acc);

  // .sim_msg.Grading.EventDetector event_detector = 16;
  bool has_event_detector() const;
  void clear_event_detector();
  const ::sim_msg::Grading_EventDetector& event_detector() const;
  ::sim_msg::Grading_EventDetector* release_event_detector();
  ::sim_msg::Grading_EventDetector* mutable_event_detector();
  void set_allocated_event_detector(::sim_msg::Grading_EventDetector* event_detector);

  // double mileage = 9;
  void clear_mileage();
  double mileage() const;
  void set_mileage(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Grading)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_Collision > collision_;
  ::sim_msg::Grading_Speed* speed_;
  ::sim_msg::Grading_Acceleration* acceleration_;
  ::sim_msg::Grading_TimeHeadway* timeheadway_;
  ::sim_msg::Grading_Algorithm* algorithm_;
  ::sim_msg::Grading_Lane* lane_;
  ::sim_msg::Grading_TrafficLight* trafficelight_;
  ::sim_msg::Grading_TimeStamp* timestamp_;
  ::sim_msg::Grading_ExpData* expdata_;
  ::sim_msg::Grading_DistHeadway* distheadway_;
  ::sim_msg::Grading_Control* control_;
  ::sim_msg::Grading_Planning* planning_;
  ::sim_msg::Grading_Acceleration* lateral_acc_;
  ::sim_msg::Grading_Acceleration* dec_acc_;
  ::sim_msg::Grading_EventDetector* event_detector_;
  double mileage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_grading_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Grading_TimeStamp

// uint64 timeStamp = 1;
inline void Grading_TimeStamp::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Grading_TimeStamp::timestamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeStamp.timeStamp)
  return timestamp_;
}
inline void Grading_TimeStamp::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeStamp.timeStamp)
}

// -------------------------------------------------------------------

// Grading_Speed

// double speed = 1;
inline void Grading_Speed::clear_speed() {
  speed_ = 0;
}
inline double Grading_Speed::speed() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Speed.speed)
  return speed_;
}
inline void Grading_Speed::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Speed.speed)
}

// .sim_msg.GradingSpeedState state = 2;
inline void Grading_Speed::clear_state() {
  state_ = 0;
}
inline ::sim_msg::GradingSpeedState Grading_Speed::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Speed.state)
  return static_cast< ::sim_msg::GradingSpeedState >(state_);
}
inline void Grading_Speed::set_state(::sim_msg::GradingSpeedState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Speed.state)
}

// double threshold = 3;
inline void Grading_Speed::clear_threshold() {
  threshold_ = 0;
}
inline double Grading_Speed::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Speed.threshold)
  return threshold_;
}
inline void Grading_Speed::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Speed.threshold)
}

// -------------------------------------------------------------------

// Grading_Acceleration

// double acceleration = 1;
inline void Grading_Acceleration::clear_acceleration() {
  acceleration_ = 0;
}
inline double Grading_Acceleration::acceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Acceleration.acceleration)
  return acceleration_;
}
inline void Grading_Acceleration::set_acceleration(double value) {
  
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Acceleration.acceleration)
}

// .sim_msg.GradingAccelerationState state = 2;
inline void Grading_Acceleration::clear_state() {
  state_ = 0;
}
inline ::sim_msg::GradingAccelerationState Grading_Acceleration::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Acceleration.state)
  return static_cast< ::sim_msg::GradingAccelerationState >(state_);
}
inline void Grading_Acceleration::set_state(::sim_msg::GradingAccelerationState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Acceleration.state)
}

// double threshold = 3;
inline void Grading_Acceleration::clear_threshold() {
  threshold_ = 0;
}
inline double Grading_Acceleration::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Acceleration.threshold)
  return threshold_;
}
inline void Grading_Acceleration::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Acceleration.threshold)
}

// -------------------------------------------------------------------

// Grading_Collision

// .sim_msg.GradingCollisionState state = 1;
inline void Grading_Collision::clear_state() {
  state_ = 0;
}
inline ::sim_msg::GradingCollisionState Grading_Collision::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Collision.state)
  return static_cast< ::sim_msg::GradingCollisionState >(state_);
}
inline void Grading_Collision::set_state(::sim_msg::GradingCollisionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Collision.state)
}

// .sim_msg.Vec3 location = 2;
inline bool Grading_Collision::has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline const ::sim_msg::Vec3& Grading_Collision::location() const {
  const ::sim_msg::Vec3* p = location_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Collision.location)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* Grading_Collision::release_location() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Collision.location)
  
  ::sim_msg::Vec3* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Grading_Collision::mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Collision.location)
  return location_;
}
inline void Grading_Collision::set_allocated_location(::sim_msg::Vec3* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Collision.location)
}

// -------------------------------------------------------------------

// Grading_TimeHeadway

// float ATH = 1;
inline void Grading_TimeHeadway::clear_ath() {
  ath_ = 0;
}
inline float Grading_TimeHeadway::ath() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeHeadway.ATH)
  return ath_;
}
inline void Grading_TimeHeadway::set_ath(float value) {
  
  ath_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeHeadway.ATH)
}

// .sim_msg.GradingTimeHeadwayState state = 2;
inline void Grading_TimeHeadway::clear_state() {
  state_ = 0;
}
inline ::sim_msg::GradingTimeHeadwayState Grading_TimeHeadway::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeHeadway.state)
  return static_cast< ::sim_msg::GradingTimeHeadwayState >(state_);
}
inline void Grading_TimeHeadway::set_state(::sim_msg::GradingTimeHeadwayState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeHeadway.state)
}

// double threshold = 3;
inline void Grading_TimeHeadway::clear_threshold() {
  threshold_ = 0;
}
inline double Grading_TimeHeadway::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeHeadway.threshold)
  return threshold_;
}
inline void Grading_TimeHeadway::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeHeadway.threshold)
}

// -------------------------------------------------------------------

// Grading_DistHeadway

// double dist_to_fellow = 1;
inline void Grading_DistHeadway::clear_dist_to_fellow() {
  dist_to_fellow_ = 0;
}
inline double Grading_DistHeadway::dist_to_fellow() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.DistHeadway.dist_to_fellow)
  return dist_to_fellow_;
}
inline void Grading_DistHeadway::set_dist_to_fellow(double value) {
  
  dist_to_fellow_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.DistHeadway.dist_to_fellow)
}

// .sim_msg.GradingDistHeadwayState dist_state = 2;
inline void Grading_DistHeadway::clear_dist_state() {
  dist_state_ = 0;
}
inline ::sim_msg::GradingDistHeadwayState Grading_DistHeadway::dist_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.DistHeadway.dist_state)
  return static_cast< ::sim_msg::GradingDistHeadwayState >(dist_state_);
}
inline void Grading_DistHeadway::set_dist_state(::sim_msg::GradingDistHeadwayState value) {
  
  dist_state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.DistHeadway.dist_state)
}

// double threshold = 3;
inline void Grading_DistHeadway::clear_threshold() {
  threshold_ = 0;
}
inline double Grading_DistHeadway::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.DistHeadway.threshold)
  return threshold_;
}
inline void Grading_DistHeadway::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.DistHeadway.threshold)
}

// -------------------------------------------------------------------

// Grading_Algorithm

// .sim_msg.GradingAlgorithmState state = 1;
inline void Grading_Algorithm::clear_state() {
  state_ = 0;
}
inline ::sim_msg::GradingAlgorithmState Grading_Algorithm::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Algorithm.state)
  return static_cast< ::sim_msg::GradingAlgorithmState >(state_);
}
inline void Grading_Algorithm::set_state(::sim_msg::GradingAlgorithmState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Algorithm.state)
}

// -------------------------------------------------------------------

// Grading_Lane

// bool isOnSolidLine = 1;
inline void Grading_Lane::clear_isonsolidline() {
  isonsolidline_ = false;
}
inline bool Grading_Lane::isonsolidline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Lane.isOnSolidLine)
  return isonsolidline_;
}
inline void Grading_Lane::set_isonsolidline(bool value) {
  
  isonsolidline_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Lane.isOnSolidLine)
}

// bool isOnDottedLine = 2;
inline void Grading_Lane::clear_isondottedline() {
  isondottedline_ = false;
}
inline bool Grading_Lane::isondottedline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Lane.isOnDottedLine)
  return isondottedline_;
}
inline void Grading_Lane::set_isondottedline(bool value) {
  
  isondottedline_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Lane.isOnDottedLine)
}

// bool isOnStopLine = 3;
inline void Grading_Lane::clear_isonstopline() {
  isonstopline_ = false;
}
inline bool Grading_Lane::isonstopline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Lane.isOnStopLine)
  return isonstopline_;
}
inline void Grading_Lane::set_isonstopline(bool value) {
  
  isonstopline_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Lane.isOnStopLine)
}

// -------------------------------------------------------------------

// Grading_TrafficLight

// .sim_msg.GradingTrafficLightState state = 1;
inline void Grading_TrafficLight::clear_state() {
  state_ = 0;
}
inline ::sim_msg::GradingTrafficLightState Grading_TrafficLight::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TrafficLight.state)
  return static_cast< ::sim_msg::GradingTrafficLightState >(state_);
}
inline void Grading_TrafficLight::set_state(::sim_msg::GradingTrafficLightState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TrafficLight.state)
}

// uint64 run_trafficlight_thresh = 2;
inline void Grading_TrafficLight::clear_run_trafficlight_thresh() {
  run_trafficlight_thresh_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Grading_TrafficLight::run_trafficlight_thresh() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TrafficLight.run_trafficlight_thresh)
  return run_trafficlight_thresh_;
}
inline void Grading_TrafficLight::set_run_trafficlight_thresh(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  run_trafficlight_thresh_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TrafficLight.run_trafficlight_thresh)
}

// uint64 run_trafficlight_count = 3;
inline void Grading_TrafficLight::clear_run_trafficlight_count() {
  run_trafficlight_count_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Grading_TrafficLight::run_trafficlight_count() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TrafficLight.run_trafficlight_count)
  return run_trafficlight_count_;
}
inline void Grading_TrafficLight::set_run_trafficlight_count(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  run_trafficlight_count_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TrafficLight.run_trafficlight_count)
}

// -------------------------------------------------------------------

// Grading_Control

// double posError_H = 1;
inline void Grading_Control::clear_poserror_h() {
  poserror_h_ = 0;
}
inline double Grading_Control::poserror_h() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Control.posError_H)
  return poserror_h_;
}
inline void Grading_Control::set_poserror_h(double value) {
  
  poserror_h_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Control.posError_H)
}

// .sim_msg.GradingPosErrorState state = 2;
inline void Grading_Control::clear_state() {
  state_ = 0;
}
inline ::sim_msg::GradingPosErrorState Grading_Control::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Control.state)
  return static_cast< ::sim_msg::GradingPosErrorState >(state_);
}
inline void Grading_Control::set_state(::sim_msg::GradingPosErrorState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Control.state)
}

// double threshold = 3;
inline void Grading_Control::clear_threshold() {
  threshold_ = 0;
}
inline double Grading_Control::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Control.threshold)
  return threshold_;
}
inline void Grading_Control::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Control.threshold)
}

// -------------------------------------------------------------------

// Grading_Planning

// bool is_reachEndpoint = 1;
inline void Grading_Planning::clear_is_reachendpoint() {
  is_reachendpoint_ = false;
}
inline bool Grading_Planning::is_reachendpoint() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Planning.is_reachEndpoint)
  return is_reachendpoint_;
}
inline void Grading_Planning::set_is_reachendpoint(bool value) {
  
  is_reachendpoint_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Planning.is_reachEndpoint)
}

// .sim_msg.Vec3 current_point = 2;
inline bool Grading_Planning::has_current_point() const {
  return this != internal_default_instance() && current_point_ != nullptr;
}
inline const ::sim_msg::Vec3& Grading_Planning::current_point() const {
  const ::sim_msg::Vec3* p = current_point_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Planning.current_point)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* Grading_Planning::release_current_point() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Planning.current_point)
  
  ::sim_msg::Vec3* temp = current_point_;
  current_point_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Grading_Planning::mutable_current_point() {
  
  if (current_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    current_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Planning.current_point)
  return current_point_;
}
inline void Grading_Planning::set_allocated_current_point(::sim_msg::Vec3* current_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_point_);
  }
  if (current_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      current_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_point, submessage_arena);
    }
    
  } else {
    
  }
  current_point_ = current_point;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Planning.current_point)
}

// .sim_msg.Vec3 endpoint = 3;
inline bool Grading_Planning::has_endpoint() const {
  return this != internal_default_instance() && endpoint_ != nullptr;
}
inline const ::sim_msg::Vec3& Grading_Planning::endpoint() const {
  const ::sim_msg::Vec3* p = endpoint_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Planning.endpoint)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Vec3*>(
      &::sim_msg::_Vec3_default_instance_);
}
inline ::sim_msg::Vec3* Grading_Planning::release_endpoint() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Planning.endpoint)
  
  ::sim_msg::Vec3* temp = endpoint_;
  endpoint_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Grading_Planning::mutable_endpoint() {
  
  if (endpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaNoVirtual());
    endpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Planning.endpoint)
  return endpoint_;
}
inline void Grading_Planning::set_allocated_endpoint(::sim_msg::Vec3* endpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(endpoint_);
  }
  if (endpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      endpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endpoint, submessage_arena);
    }
    
  } else {
    
  }
  endpoint_ = endpoint;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Planning.endpoint)
}

// -------------------------------------------------------------------

// Grading_CarExpData

// double id = 1;
inline void Grading_CarExpData::clear_id() {
  id_ = 0;
}
inline double Grading_CarExpData::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.CarExpData.id)
  return id_;
}
inline void Grading_CarExpData::set_id(double value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.CarExpData.id)
}

// double value = 2;
inline void Grading_CarExpData::clear_value() {
  value_ = 0;
}
inline double Grading_CarExpData::value() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.CarExpData.value)
  return value_;
}
inline void Grading_CarExpData::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.CarExpData.value)
}

// -------------------------------------------------------------------

// Grading_ExpData

// repeated .sim_msg.Grading.CarExpData distFromCar = 1;
inline int Grading_ExpData::distfromcar_size() const {
  return distfromcar_.size();
}
inline void Grading_ExpData::clear_distfromcar() {
  distfromcar_.Clear();
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_distfromcar(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_distfromcar() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.distFromCar)
  return &distfromcar_;
}
inline const ::sim_msg::Grading_CarExpData& Grading_ExpData::distfromcar(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_.Get(index);
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::add_distfromcar() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::distfromcar() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_;
}

// repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
inline int Grading_ExpData::distfromcar_h_size() const {
  return distfromcar_h_.size();
}
inline void Grading_ExpData::clear_distfromcar_h() {
  distfromcar_h_.Clear();
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_distfromcar_h(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_distfromcar_h() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.distFromCar_H)
  return &distfromcar_h_;
}
inline const ::sim_msg::Grading_CarExpData& Grading_ExpData::distfromcar_h(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_.Get(index);
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::add_distfromcar_h() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::distfromcar_h() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_;
}

// repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
inline int Grading_ExpData::distfromcar_v_size() const {
  return distfromcar_v_.size();
}
inline void Grading_ExpData::clear_distfromcar_v() {
  distfromcar_v_.Clear();
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_distfromcar_v(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_distfromcar_v() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.distFromCar_V)
  return &distfromcar_v_;
}
inline const ::sim_msg::Grading_CarExpData& Grading_ExpData::distfromcar_v(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_.Get(index);
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::add_distfromcar_v() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::distfromcar_v() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_;
}

// repeated .sim_msg.Grading.CarExpData thFromCar = 4;
inline int Grading_ExpData::thfromcar_size() const {
  return thfromcar_.size();
}
inline void Grading_ExpData::clear_thfromcar() {
  thfromcar_.Clear();
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_thfromcar(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_thfromcar() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.thFromCar)
  return &thfromcar_;
}
inline const ::sim_msg::Grading_CarExpData& Grading_ExpData::thfromcar(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_.Get(index);
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::add_thfromcar() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::thfromcar() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_;
}

// repeated .sim_msg.Grading.CarExpData dot_s_fellow = 5;
inline int Grading_ExpData::dot_s_fellow_size() const {
  return dot_s_fellow_.size();
}
inline void Grading_ExpData::clear_dot_s_fellow() {
  dot_s_fellow_.Clear();
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_dot_s_fellow(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.dot_s_fellow)
  return dot_s_fellow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_dot_s_fellow() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.dot_s_fellow)
  return &dot_s_fellow_;
}
inline const ::sim_msg::Grading_CarExpData& Grading_ExpData::dot_s_fellow(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.dot_s_fellow)
  return dot_s_fellow_.Get(index);
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::add_dot_s_fellow() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.dot_s_fellow)
  return dot_s_fellow_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::dot_s_fellow() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.dot_s_fellow)
  return dot_s_fellow_;
}

// repeated .sim_msg.Grading.CarExpData dot_x_fellow = 6;
inline int Grading_ExpData::dot_x_fellow_size() const {
  return dot_x_fellow_.size();
}
inline void Grading_ExpData::clear_dot_x_fellow() {
  dot_x_fellow_.Clear();
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_dot_x_fellow(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.dot_x_fellow)
  return dot_x_fellow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_dot_x_fellow() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.dot_x_fellow)
  return &dot_x_fellow_;
}
inline const ::sim_msg::Grading_CarExpData& Grading_ExpData::dot_x_fellow(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.dot_x_fellow)
  return dot_x_fellow_.Get(index);
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::add_dot_x_fellow() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.dot_x_fellow)
  return dot_x_fellow_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::dot_x_fellow() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.dot_x_fellow)
  return dot_x_fellow_;
}

// repeated .sim_msg.Grading.CarExpData dot_y_fellow = 7;
inline int Grading_ExpData::dot_y_fellow_size() const {
  return dot_y_fellow_.size();
}
inline void Grading_ExpData::clear_dot_y_fellow() {
  dot_y_fellow_.Clear();
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_dot_y_fellow(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.dot_y_fellow)
  return dot_y_fellow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_dot_y_fellow() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.dot_y_fellow)
  return &dot_y_fellow_;
}
inline const ::sim_msg::Grading_CarExpData& Grading_ExpData::dot_y_fellow(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.dot_y_fellow)
  return dot_y_fellow_.Get(index);
}
inline ::sim_msg::Grading_CarExpData* Grading_ExpData::add_dot_y_fellow() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.dot_y_fellow)
  return dot_y_fellow_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::dot_y_fellow() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.dot_y_fellow)
  return dot_y_fellow_;
}

// double dot_s_ego = 8;
inline void Grading_ExpData::clear_dot_s_ego() {
  dot_s_ego_ = 0;
}
inline double Grading_ExpData::dot_s_ego() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.dot_s_ego)
  return dot_s_ego_;
}
inline void Grading_ExpData::set_dot_s_ego(double value) {
  
  dot_s_ego_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.ExpData.dot_s_ego)
}

// double dot_x_ego = 9;
inline void Grading_ExpData::clear_dot_x_ego() {
  dot_x_ego_ = 0;
}
inline double Grading_ExpData::dot_x_ego() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.dot_x_ego)
  return dot_x_ego_;
}
inline void Grading_ExpData::set_dot_x_ego(double value) {
  
  dot_x_ego_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.ExpData.dot_x_ego)
}

// double dot_y_ego = 10;
inline void Grading_ExpData::clear_dot_y_ego() {
  dot_y_ego_ = 0;
}
inline double Grading_ExpData::dot_y_ego() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.dot_y_ego)
  return dot_y_ego_;
}
inline void Grading_ExpData::set_dot_y_ego(double value) {
  
  dot_y_ego_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.ExpData.dot_y_ego)
}

// -------------------------------------------------------------------

// Grading_Statistics_DetailItem

// double eval_value = 1;
inline void Grading_Statistics_DetailItem::clear_eval_value() {
  eval_value_ = 0;
}
inline double Grading_Statistics_DetailItem::eval_value() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.DetailItem.eval_value)
  return eval_value_;
}
inline void Grading_Statistics_DetailItem::set_eval_value(double value) {
  
  eval_value_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.DetailItem.eval_value)
}

// bool is_enabled = 2;
inline void Grading_Statistics_DetailItem::clear_is_enabled() {
  is_enabled_ = false;
}
inline bool Grading_Statistics_DetailItem::is_enabled() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.DetailItem.is_enabled)
  return is_enabled_;
}
inline void Grading_Statistics_DetailItem::set_is_enabled(bool value) {
  
  is_enabled_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.DetailItem.is_enabled)
}

// bool is_pass = 3;
inline void Grading_Statistics_DetailItem::clear_is_pass() {
  is_pass_ = false;
}
inline bool Grading_Statistics_DetailItem::is_pass() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.DetailItem.is_pass)
  return is_pass_;
}
inline void Grading_Statistics_DetailItem::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.DetailItem.is_pass)
}

// -------------------------------------------------------------------

// Grading_Statistics_Detail

// .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
inline bool Grading_Statistics_Detail::has_count_overspeed() const {
  return this != internal_default_instance() && count_overspeed_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_overspeed() {
  if (GetArenaNoVirtual() == nullptr && count_overspeed_ != nullptr) {
    delete count_overspeed_;
  }
  count_overspeed_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overspeed() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_overspeed_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overSpeed)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overspeed() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overSpeed)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overspeed_;
  count_overspeed_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overspeed() {
  
  if (count_overspeed_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_overspeed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overSpeed)
  return count_overspeed_;
}
inline void Grading_Statistics_Detail::set_allocated_count_overspeed(::sim_msg::Grading_Statistics_DetailItem* count_overspeed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_overspeed_;
  }
  if (count_overspeed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_overspeed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_overspeed, submessage_arena);
    }
    
  } else {
    
  }
  count_overspeed_ = count_overspeed;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overSpeed)
}

// .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
inline bool Grading_Statistics_Detail::has_count_overacceleration() const {
  return this != internal_default_instance() && count_overacceleration_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_overacceleration() {
  if (GetArenaNoVirtual() == nullptr && count_overacceleration_ != nullptr) {
    delete count_overacceleration_;
  }
  count_overacceleration_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overacceleration() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_overacceleration_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overacceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overacceleration_;
  count_overacceleration_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overacceleration() {
  
  if (count_overacceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_overacceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
  return count_overacceleration_;
}
inline void Grading_Statistics_Detail::set_allocated_count_overacceleration(::sim_msg::Grading_Statistics_DetailItem* count_overacceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_overacceleration_;
  }
  if (count_overacceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_overacceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_overacceleration, submessage_arena);
    }
    
  } else {
    
  }
  count_overacceleration_ = count_overacceleration;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
}

// .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
inline bool Grading_Statistics_Detail::has_count_overdecelleration() const {
  return this != internal_default_instance() && count_overdecelleration_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_overdecelleration() {
  if (GetArenaNoVirtual() == nullptr && count_overdecelleration_ != nullptr) {
    delete count_overdecelleration_;
  }
  count_overdecelleration_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overdecelleration() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_overdecelleration_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overdecelleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overdecelleration_;
  count_overdecelleration_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overdecelleration() {
  
  if (count_overdecelleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_overdecelleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
  return count_overdecelleration_;
}
inline void Grading_Statistics_Detail::set_allocated_count_overdecelleration(::sim_msg::Grading_Statistics_DetailItem* count_overdecelleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_overdecelleration_;
  }
  if (count_overdecelleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_overdecelleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_overdecelleration, submessage_arena);
    }
    
  } else {
    
  }
  count_overdecelleration_ = count_overdecelleration;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
}

// .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
inline bool Grading_Statistics_Detail::has_count_overturningacceleration() const {
  return this != internal_default_instance() && count_overturningacceleration_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_overturningacceleration() {
  if (GetArenaNoVirtual() == nullptr && count_overturningacceleration_ != nullptr) {
    delete count_overturningacceleration_;
  }
  count_overturningacceleration_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overturningacceleration() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_overturningacceleration_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overturningacceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overturningacceleration_;
  count_overturningacceleration_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overturningacceleration() {
  
  if (count_overturningacceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_overturningacceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
  return count_overturningacceleration_;
}
inline void Grading_Statistics_Detail::set_allocated_count_overturningacceleration(::sim_msg::Grading_Statistics_DetailItem* count_overturningacceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_overturningacceleration_;
  }
  if (count_overturningacceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_overturningacceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_overturningacceleration, submessage_arena);
    }
    
  } else {
    
  }
  count_overturningacceleration_ = count_overturningacceleration;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
}

// .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
inline bool Grading_Statistics_Detail::has_count_tooclosettc() const {
  return this != internal_default_instance() && count_tooclosettc_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_tooclosettc() {
  if (GetArenaNoVirtual() == nullptr && count_tooclosettc_ != nullptr) {
    delete count_tooclosettc_;
  }
  count_tooclosettc_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_tooclosettc() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_tooclosettc_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_tooclosettc() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_tooclosettc_;
  count_tooclosettc_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_tooclosettc() {
  
  if (count_tooclosettc_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_tooclosettc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
  return count_tooclosettc_;
}
inline void Grading_Statistics_Detail::set_allocated_count_tooclosettc(::sim_msg::Grading_Statistics_DetailItem* count_tooclosettc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_tooclosettc_;
  }
  if (count_tooclosettc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_tooclosettc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_tooclosettc, submessage_arena);
    }
    
  } else {
    
  }
  count_tooclosettc_ = count_tooclosettc;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
}

// .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
inline bool Grading_Statistics_Detail::has_count_tooclosedistance() const {
  return this != internal_default_instance() && count_tooclosedistance_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_tooclosedistance() {
  if (GetArenaNoVirtual() == nullptr && count_tooclosedistance_ != nullptr) {
    delete count_tooclosedistance_;
  }
  count_tooclosedistance_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_tooclosedistance() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_tooclosedistance_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_tooclosedistance() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_tooclosedistance_;
  count_tooclosedistance_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_tooclosedistance() {
  
  if (count_tooclosedistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_tooclosedistance_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
  return count_tooclosedistance_;
}
inline void Grading_Statistics_Detail::set_allocated_count_tooclosedistance(::sim_msg::Grading_Statistics_DetailItem* count_tooclosedistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_tooclosedistance_;
  }
  if (count_tooclosedistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_tooclosedistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_tooclosedistance, submessage_arena);
    }
    
  } else {
    
  }
  count_tooclosedistance_ = count_tooclosedistance;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
}

// .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
inline bool Grading_Statistics_Detail::has_count_overmaxposerror_h() const {
  return this != internal_default_instance() && count_overmaxposerror_h_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_overmaxposerror_h() {
  if (GetArenaNoVirtual() == nullptr && count_overmaxposerror_h_ != nullptr) {
    delete count_overmaxposerror_h_;
  }
  count_overmaxposerror_h_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overmaxposerror_h() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_overmaxposerror_h_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overmaxposerror_h() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overmaxposerror_h_;
  count_overmaxposerror_h_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overmaxposerror_h() {
  
  if (count_overmaxposerror_h_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_overmaxposerror_h_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
  return count_overmaxposerror_h_;
}
inline void Grading_Statistics_Detail::set_allocated_count_overmaxposerror_h(::sim_msg::Grading_Statistics_DetailItem* count_overmaxposerror_h) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_overmaxposerror_h_;
  }
  if (count_overmaxposerror_h) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_overmaxposerror_h = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_overmaxposerror_h, submessage_arena);
    }
    
  } else {
    
  }
  count_overmaxposerror_h_ = count_overmaxposerror_h;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
}

// .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
inline bool Grading_Statistics_Detail::has_average_poserror_h() const {
  return this != internal_default_instance() && average_poserror_h_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_average_poserror_h() {
  if (GetArenaNoVirtual() == nullptr && average_poserror_h_ != nullptr) {
    delete average_poserror_h_;
  }
  average_poserror_h_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::average_poserror_h() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = average_poserror_h_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.average_PosError_H)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_average_poserror_h() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.average_PosError_H)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = average_poserror_h_;
  average_poserror_h_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_average_poserror_h() {
  
  if (average_poserror_h_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    average_poserror_h_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.average_PosError_H)
  return average_poserror_h_;
}
inline void Grading_Statistics_Detail::set_allocated_average_poserror_h(::sim_msg::Grading_Statistics_DetailItem* average_poserror_h) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete average_poserror_h_;
  }
  if (average_poserror_h) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      average_poserror_h = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_poserror_h, submessage_arena);
    }
    
  } else {
    
  }
  average_poserror_h_ = average_poserror_h;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.average_PosError_H)
}

// .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
inline bool Grading_Statistics_Detail::has_max_poserror_h() const {
  return this != internal_default_instance() && max_poserror_h_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_max_poserror_h() {
  if (GetArenaNoVirtual() == nullptr && max_poserror_h_ != nullptr) {
    delete max_poserror_h_;
  }
  max_poserror_h_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::max_poserror_h() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = max_poserror_h_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.max_PosError_H)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_max_poserror_h() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.max_PosError_H)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = max_poserror_h_;
  max_poserror_h_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_max_poserror_h() {
  
  if (max_poserror_h_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    max_poserror_h_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.max_PosError_H)
  return max_poserror_h_;
}
inline void Grading_Statistics_Detail::set_allocated_max_poserror_h(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete max_poserror_h_;
  }
  if (max_poserror_h) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_poserror_h = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_poserror_h, submessage_arena);
    }
    
  } else {
    
  }
  max_poserror_h_ = max_poserror_h;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.max_PosError_H)
}

// .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
inline bool Grading_Statistics_Detail::has_max_poserror_h_l() const {
  return this != internal_default_instance() && max_poserror_h_l_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_max_poserror_h_l() {
  if (GetArenaNoVirtual() == nullptr && max_poserror_h_l_ != nullptr) {
    delete max_poserror_h_l_;
  }
  max_poserror_h_l_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::max_poserror_h_l() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = max_poserror_h_l_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_max_poserror_h_l() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = max_poserror_h_l_;
  max_poserror_h_l_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_max_poserror_h_l() {
  
  if (max_poserror_h_l_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    max_poserror_h_l_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
  return max_poserror_h_l_;
}
inline void Grading_Statistics_Detail::set_allocated_max_poserror_h_l(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_l) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete max_poserror_h_l_;
  }
  if (max_poserror_h_l) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_poserror_h_l = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_poserror_h_l, submessage_arena);
    }
    
  } else {
    
  }
  max_poserror_h_l_ = max_poserror_h_l;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
}

// .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
inline bool Grading_Statistics_Detail::has_max_poserror_h_r() const {
  return this != internal_default_instance() && max_poserror_h_r_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_max_poserror_h_r() {
  if (GetArenaNoVirtual() == nullptr && max_poserror_h_r_ != nullptr) {
    delete max_poserror_h_r_;
  }
  max_poserror_h_r_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::max_poserror_h_r() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = max_poserror_h_r_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_max_poserror_h_r() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = max_poserror_h_r_;
  max_poserror_h_r_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_max_poserror_h_r() {
  
  if (max_poserror_h_r_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    max_poserror_h_r_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
  return max_poserror_h_r_;
}
inline void Grading_Statistics_Detail::set_allocated_max_poserror_h_r(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_r) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete max_poserror_h_r_;
  }
  if (max_poserror_h_r) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_poserror_h_r = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_poserror_h_r, submessage_arena);
    }
    
  } else {
    
  }
  max_poserror_h_r_ = max_poserror_h_r;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
}

// .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
inline bool Grading_Statistics_Detail::has_count_crosssolidline() const {
  return this != internal_default_instance() && count_crosssolidline_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_crosssolidline() {
  if (GetArenaNoVirtual() == nullptr && count_crosssolidline_ != nullptr) {
    delete count_crosssolidline_;
  }
  count_crosssolidline_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_crosssolidline() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_crosssolidline_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_crosssolidline() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_crosssolidline_;
  count_crosssolidline_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_crosssolidline() {
  
  if (count_crosssolidline_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_crosssolidline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
  return count_crosssolidline_;
}
inline void Grading_Statistics_Detail::set_allocated_count_crosssolidline(::sim_msg::Grading_Statistics_DetailItem* count_crosssolidline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_crosssolidline_;
  }
  if (count_crosssolidline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_crosssolidline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_crosssolidline, submessage_arena);
    }
    
  } else {
    
  }
  count_crosssolidline_ = count_crosssolidline;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
}

// .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
inline bool Grading_Statistics_Detail::has_count_ranredlight() const {
  return this != internal_default_instance() && count_ranredlight_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_count_ranredlight() {
  if (GetArenaNoVirtual() == nullptr && count_ranredlight_ != nullptr) {
    delete count_ranredlight_;
  }
  count_ranredlight_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_ranredlight() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = count_ranredlight_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_ranredlight() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_ranredlight_;
  count_ranredlight_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_ranredlight() {
  
  if (count_ranredlight_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    count_ranredlight_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
  return count_ranredlight_;
}
inline void Grading_Statistics_Detail::set_allocated_count_ranredlight(::sim_msg::Grading_Statistics_DetailItem* count_ranredlight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete count_ranredlight_;
  }
  if (count_ranredlight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count_ranredlight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count_ranredlight, submessage_arena);
    }
    
  } else {
    
  }
  count_ranredlight_ = count_ranredlight;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
}

// .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
inline bool Grading_Statistics_Detail::has_reachendpoint() const {
  return this != internal_default_instance() && reachendpoint_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_reachendpoint() {
  if (GetArenaNoVirtual() == nullptr && reachendpoint_ != nullptr) {
    delete reachendpoint_;
  }
  reachendpoint_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::reachendpoint() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = reachendpoint_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.reachEndPoint)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_reachendpoint() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.reachEndPoint)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = reachendpoint_;
  reachendpoint_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_reachendpoint() {
  
  if (reachendpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    reachendpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.reachEndPoint)
  return reachendpoint_;
}
inline void Grading_Statistics_Detail::set_allocated_reachendpoint(::sim_msg::Grading_Statistics_DetailItem* reachendpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reachendpoint_;
  }
  if (reachendpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reachendpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reachendpoint, submessage_arena);
    }
    
  } else {
    
  }
  reachendpoint_ = reachendpoint;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.reachEndPoint)
}

// .sim_msg.Grading.Statistics.DetailItem collision = 15;
inline bool Grading_Statistics_Detail::has_collision() const {
  return this != internal_default_instance() && collision_ != nullptr;
}
inline void Grading_Statistics_Detail::clear_collision() {
  if (GetArenaNoVirtual() == nullptr && collision_ != nullptr) {
    delete collision_;
  }
  collision_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::collision() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = collision_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.collision)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_collision() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.collision)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = collision_;
  collision_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_collision() {
  
  if (collision_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    collision_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.collision)
  return collision_;
}
inline void Grading_Statistics_Detail::set_allocated_collision(::sim_msg::Grading_Statistics_DetailItem* collision) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collision_;
  }
  if (collision) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collision = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collision, submessage_arena);
    }
    
  } else {
    
  }
  collision_ = collision;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.collision)
}

// -------------------------------------------------------------------

// Grading_Statistics_CustomDetail

// .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
inline bool Grading_Statistics_CustomDetail::has_custom_reachendpoint() const {
  return this != internal_default_instance() && custom_reachendpoint_ != nullptr;
}
inline void Grading_Statistics_CustomDetail::clear_custom_reachendpoint() {
  if (GetArenaNoVirtual() == nullptr && custom_reachendpoint_ != nullptr) {
    delete custom_reachendpoint_;
  }
  custom_reachendpoint_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_CustomDetail::custom_reachendpoint() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = custom_reachendpoint_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::release_custom_reachendpoint() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = custom_reachendpoint_;
  custom_reachendpoint_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::mutable_custom_reachendpoint() {
  
  if (custom_reachendpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    custom_reachendpoint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
  return custom_reachendpoint_;
}
inline void Grading_Statistics_CustomDetail::set_allocated_custom_reachendpoint(::sim_msg::Grading_Statistics_DetailItem* custom_reachendpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete custom_reachendpoint_;
  }
  if (custom_reachendpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_reachendpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_reachendpoint, submessage_arena);
    }
    
  } else {
    
  }
  custom_reachendpoint_ = custom_reachendpoint;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
}

// .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
inline bool Grading_Statistics_CustomDetail::has_custom_maxposerror_exceed() const {
  return this != internal_default_instance() && custom_maxposerror_exceed_ != nullptr;
}
inline void Grading_Statistics_CustomDetail::clear_custom_maxposerror_exceed() {
  if (GetArenaNoVirtual() == nullptr && custom_maxposerror_exceed_ != nullptr) {
    delete custom_maxposerror_exceed_;
  }
  custom_maxposerror_exceed_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_CustomDetail::custom_maxposerror_exceed() const {
  const ::sim_msg::Grading_Statistics_DetailItem* p = custom_maxposerror_exceed_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_DetailItem*>(
      &::sim_msg::_Grading_Statistics_DetailItem_default_instance_);
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::release_custom_maxposerror_exceed() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = custom_maxposerror_exceed_;
  custom_maxposerror_exceed_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::mutable_custom_maxposerror_exceed() {
  
  if (custom_maxposerror_exceed_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_DetailItem>(GetArenaNoVirtual());
    custom_maxposerror_exceed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
  return custom_maxposerror_exceed_;
}
inline void Grading_Statistics_CustomDetail::set_allocated_custom_maxposerror_exceed(::sim_msg::Grading_Statistics_DetailItem* custom_maxposerror_exceed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete custom_maxposerror_exceed_;
  }
  if (custom_maxposerror_exceed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_maxposerror_exceed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_maxposerror_exceed, submessage_arena);
    }
    
  } else {
    
  }
  custom_maxposerror_exceed_ = custom_maxposerror_exceed;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
}

// -------------------------------------------------------------------

// Grading_Statistics

// string scene_name = 1;
inline void Grading_Statistics::clear_scene_name() {
  scene_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Grading_Statistics::scene_name() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.scene_name)
  return scene_name_.GetNoArena();
}
inline void Grading_Statistics::set_scene_name(const std::string& value) {
  
  scene_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.scene_name)
}
inline void Grading_Statistics::set_scene_name(std::string&& value) {
  
  scene_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.scene_name)
}
inline void Grading_Statistics::set_scene_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scene_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.scene_name)
}
inline void Grading_Statistics::set_scene_name(const char* value, size_t size) {
  
  scene_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.scene_name)
}
inline std::string* Grading_Statistics::mutable_scene_name() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.scene_name)
  return scene_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Grading_Statistics::release_scene_name() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.scene_name)
  
  return scene_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Grading_Statistics::set_allocated_scene_name(std::string* scene_name) {
  if (scene_name != nullptr) {
    
  } else {
    
  }
  scene_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scene_name);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.scene_name)
}

// string report_date = 2;
inline void Grading_Statistics::clear_report_date() {
  report_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Grading_Statistics::report_date() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.report_date)
  return report_date_.GetNoArena();
}
inline void Grading_Statistics::set_report_date(const std::string& value) {
  
  report_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.report_date)
}
inline void Grading_Statistics::set_report_date(std::string&& value) {
  
  report_date_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.report_date)
}
inline void Grading_Statistics::set_report_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  report_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.report_date)
}
inline void Grading_Statistics::set_report_date(const char* value, size_t size) {
  
  report_date_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.report_date)
}
inline std::string* Grading_Statistics::mutable_report_date() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.report_date)
  return report_date_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Grading_Statistics::release_report_date() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.report_date)
  
  return report_date_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Grading_Statistics::set_allocated_report_date(std::string* report_date) {
  if (report_date != nullptr) {
    
  } else {
    
  }
  report_date_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_date);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.report_date)
}

// bool is_pass = 3;
inline void Grading_Statistics::clear_is_pass() {
  is_pass_ = false;
}
inline bool Grading_Statistics::is_pass() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.is_pass)
  return is_pass_;
}
inline void Grading_Statistics::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.is_pass)
}

// double total_time = 4;
inline void Grading_Statistics::clear_total_time() {
  total_time_ = 0;
}
inline double Grading_Statistics::total_time() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.total_time)
  return total_time_;
}
inline void Grading_Statistics::set_total_time(double value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.total_time)
}

// double total_milleage = 5;
inline void Grading_Statistics::clear_total_milleage() {
  total_milleage_ = 0;
}
inline double Grading_Statistics::total_milleage() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.total_milleage)
  return total_milleage_;
}
inline void Grading_Statistics::set_total_milleage(double value) {
  
  total_milleage_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.total_milleage)
}

// bool is_timeout = 6;
inline void Grading_Statistics::clear_is_timeout() {
  is_timeout_ = false;
}
inline bool Grading_Statistics::is_timeout() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.is_timeout)
  return is_timeout_;
}
inline void Grading_Statistics::set_is_timeout(bool value) {
  
  is_timeout_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.is_timeout)
}

// string grading_xml = 7;
inline void Grading_Statistics::clear_grading_xml() {
  grading_xml_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Grading_Statistics::grading_xml() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.grading_xml)
  return grading_xml_.GetNoArena();
}
inline void Grading_Statistics::set_grading_xml(const std::string& value) {
  
  grading_xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.grading_xml)
}
inline void Grading_Statistics::set_grading_xml(std::string&& value) {
  
  grading_xml_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.grading_xml)
}
inline void Grading_Statistics::set_grading_xml(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grading_xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.grading_xml)
}
inline void Grading_Statistics::set_grading_xml(const char* value, size_t size) {
  
  grading_xml_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.grading_xml)
}
inline std::string* Grading_Statistics::mutable_grading_xml() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.grading_xml)
  return grading_xml_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Grading_Statistics::release_grading_xml() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.grading_xml)
  
  return grading_xml_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Grading_Statistics::set_allocated_grading_xml(std::string* grading_xml) {
  if (grading_xml != nullptr) {
    
  } else {
    
  }
  grading_xml_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grading_xml);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.grading_xml)
}

// .sim_msg.Grading.Statistics.Detail detail = 8;
inline bool Grading_Statistics::has_detail() const {
  return this != internal_default_instance() && detail_ != nullptr;
}
inline void Grading_Statistics::clear_detail() {
  if (GetArenaNoVirtual() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_Detail& Grading_Statistics::detail() const {
  const ::sim_msg::Grading_Statistics_Detail* p = detail_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.detail)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_Detail*>(
      &::sim_msg::_Grading_Statistics_Detail_default_instance_);
}
inline ::sim_msg::Grading_Statistics_Detail* Grading_Statistics::release_detail() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.detail)
  
  ::sim_msg::Grading_Statistics_Detail* temp = detail_;
  detail_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_Detail* Grading_Statistics::mutable_detail() {
  
  if (detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_Detail>(GetArenaNoVirtual());
    detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.detail)
  return detail_;
}
inline void Grading_Statistics::set_allocated_detail(::sim_msg::Grading_Statistics_Detail* detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete detail_;
  }
  if (detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detail, submessage_arena);
    }
    
  } else {
    
  }
  detail_ = detail;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.detail)
}

// .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
inline bool Grading_Statistics::has_custom_detail() const {
  return this != internal_default_instance() && custom_detail_ != nullptr;
}
inline void Grading_Statistics::clear_custom_detail() {
  if (GetArenaNoVirtual() == nullptr && custom_detail_ != nullptr) {
    delete custom_detail_;
  }
  custom_detail_ = nullptr;
}
inline const ::sim_msg::Grading_Statistics_CustomDetail& Grading_Statistics::custom_detail() const {
  const ::sim_msg::Grading_Statistics_CustomDetail* p = custom_detail_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.custom_detail)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Statistics_CustomDetail*>(
      &::sim_msg::_Grading_Statistics_CustomDetail_default_instance_);
}
inline ::sim_msg::Grading_Statistics_CustomDetail* Grading_Statistics::release_custom_detail() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.custom_detail)
  
  ::sim_msg::Grading_Statistics_CustomDetail* temp = custom_detail_;
  custom_detail_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Statistics_CustomDetail* Grading_Statistics::mutable_custom_detail() {
  
  if (custom_detail_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Statistics_CustomDetail>(GetArenaNoVirtual());
    custom_detail_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.custom_detail)
  return custom_detail_;
}
inline void Grading_Statistics::set_allocated_custom_detail(::sim_msg::Grading_Statistics_CustomDetail* custom_detail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete custom_detail_;
  }
  if (custom_detail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_detail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_detail, submessage_arena);
    }
    
  } else {
    
  }
  custom_detail_ = custom_detail;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.custom_detail)
}

// string reason = 10;
inline void Grading_Statistics::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Grading_Statistics::reason() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.reason)
  return reason_.GetNoArena();
}
inline void Grading_Statistics::set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.reason)
}
inline void Grading_Statistics::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.reason)
}
inline void Grading_Statistics::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.reason)
}
inline void Grading_Statistics::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.reason)
}
inline std::string* Grading_Statistics::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.reason)
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Grading_Statistics::release_reason() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Grading_Statistics::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.reason)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Grading_EventDetector_DetectedEvent

// .sim_msg.Grading.EventDetector.EventState edge = 1;
inline void Grading_EventDetector_DetectedEvent::clear_edge() {
  edge_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector_DetectedEvent::edge() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.DetectedEvent.edge)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(edge_);
}
inline void Grading_EventDetector_DetectedEvent::set_edge(::sim_msg::Grading_EventDetector_EventState value) {
  
  edge_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.DetectedEvent.edge)
}

// .sim_msg.Grading.EventDetector.EventState state = 2;
inline void Grading_EventDetector_DetectedEvent::clear_state() {
  state_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector_DetectedEvent::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.DetectedEvent.state)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(state_);
}
inline void Grading_EventDetector_DetectedEvent::set_state(::sim_msg::Grading_EventDetector_EventState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.DetectedEvent.state)
}

// map<string, string> additionals = 3;
inline int Grading_EventDetector_DetectedEvent::additionals_size() const {
  return additionals_.size();
}
inline void Grading_EventDetector_DetectedEvent::clear_additionals() {
  additionals_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Grading_EventDetector_DetectedEvent::additionals() const {
  // @@protoc_insertion_point(field_map:sim_msg.Grading.EventDetector.DetectedEvent.additionals)
  return additionals_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Grading_EventDetector_DetectedEvent::mutable_additionals() {
  // @@protoc_insertion_point(field_mutable_map:sim_msg.Grading.EventDetector.DetectedEvent.additionals)
  return additionals_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Grading_EventDetector

// double dt_second = 1;
inline void Grading_EventDetector::clear_dt_second() {
  dt_second_ = 0;
}
inline double Grading_EventDetector::dt_second() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.dt_second)
  return dt_second_;
}
inline void Grading_EventDetector::set_dt_second(double value) {
  
  dt_second_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.dt_second)
}

// double cur_t_second = 2;
inline void Grading_EventDetector::clear_cur_t_second() {
  cur_t_second_ = 0;
}
inline double Grading_EventDetector::cur_t_second() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.cur_t_second)
  return cur_t_second_;
}
inline void Grading_EventDetector::set_cur_t_second(double value) {
  
  cur_t_second_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.cur_t_second)
}

// .sim_msg.Grading.EventDetector.EventState Acceleration_Above_Thresh = 3;
inline void Grading_EventDetector::clear_acceleration_above_thresh() {
  acceleration_above_thresh_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::acceleration_above_thresh() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.Acceleration_Above_Thresh)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(acceleration_above_thresh_);
}
inline void Grading_EventDetector::set_acceleration_above_thresh(::sim_msg::Grading_EventDetector_EventState value) {
  
  acceleration_above_thresh_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.Acceleration_Above_Thresh)
}

// .sim_msg.Grading.EventDetector.EventState Speed_Above_Thresh = 4;
inline void Grading_EventDetector::clear_speed_above_thresh() {
  speed_above_thresh_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::speed_above_thresh() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.Speed_Above_Thresh)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(speed_above_thresh_);
}
inline void Grading_EventDetector::set_speed_above_thresh(::sim_msg::Grading_EventDetector_EventState value) {
  
  speed_above_thresh_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.Speed_Above_Thresh)
}

// .sim_msg.Grading.EventDetector.EventState If_Collision = 5;
inline void Grading_EventDetector::clear_if_collision() {
  if_collision_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::if_collision() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.If_Collision)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(if_collision_);
}
inline void Grading_EventDetector::set_if_collision(::sim_msg::Grading_EventDetector_EventState value) {
  
  if_collision_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.If_Collision)
}

// .sim_msg.Grading.EventDetector.EventState TimeHeadAway_Below_Thresh = 6;
inline void Grading_EventDetector::clear_timeheadaway_below_thresh() {
  timeheadaway_below_thresh_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::timeheadaway_below_thresh() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.TimeHeadAway_Below_Thresh)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(timeheadaway_below_thresh_);
}
inline void Grading_EventDetector::set_timeheadaway_below_thresh(::sim_msg::Grading_EventDetector_EventState value) {
  
  timeheadaway_below_thresh_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.TimeHeadAway_Below_Thresh)
}

// .sim_msg.Grading.EventDetector.EventState Run_TrafficLight = 7;
inline void Grading_EventDetector::clear_run_trafficlight() {
  run_trafficlight_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::run_trafficlight() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.Run_TrafficLight)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(run_trafficlight_);
}
inline void Grading_EventDetector::set_run_trafficlight(::sim_msg::Grading_EventDetector_EventState value) {
  
  run_trafficlight_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.Run_TrafficLight)
}

// .sim_msg.Grading.EventDetector.EventState On_SolidLine = 8;
inline void Grading_EventDetector::clear_on_solidline() {
  on_solidline_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::on_solidline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.On_SolidLine)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(on_solidline_);
}
inline void Grading_EventDetector::set_on_solidline(::sim_msg::Grading_EventDetector_EventState value) {
  
  on_solidline_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.On_SolidLine)
}

// .sim_msg.Grading.EventDetector.EventState Deceleration_Above_Thresh = 9;
inline void Grading_EventDetector::clear_deceleration_above_thresh() {
  deceleration_above_thresh_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::deceleration_above_thresh() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.Deceleration_Above_Thresh)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(deceleration_above_thresh_);
}
inline void Grading_EventDetector::set_deceleration_above_thresh(::sim_msg::Grading_EventDetector_EventState value) {
  
  deceleration_above_thresh_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.Deceleration_Above_Thresh)
}

// map<string, .sim_msg.Grading.EventDetector.DetectedEvent> detectedEvents = 10;
inline int Grading_EventDetector::detectedevents_size() const {
  return detectedevents_.size();
}
inline void Grading_EventDetector::clear_detectedevents() {
  detectedevents_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >&
Grading_EventDetector::detectedevents() const {
  // @@protoc_insertion_point(field_map:sim_msg.Grading.EventDetector.detectedEvents)
  return detectedevents_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >*
Grading_EventDetector::mutable_detectedevents() {
  // @@protoc_insertion_point(field_mutable_map:sim_msg.Grading.EventDetector.detectedEvents)
  return detectedevents_.MutableMap();
}

// .sim_msg.Grading.EventDetector.EventState hasEdge = 11;
inline void Grading_EventDetector::clear_hasedge() {
  hasedge_ = 0;
}
inline ::sim_msg::Grading_EventDetector_EventState Grading_EventDetector::hasedge() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.EventDetector.hasEdge)
  return static_cast< ::sim_msg::Grading_EventDetector_EventState >(hasedge_);
}
inline void Grading_EventDetector::set_hasedge(::sim_msg::Grading_EventDetector_EventState value) {
  
  hasedge_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.EventDetector.hasEdge)
}

// -------------------------------------------------------------------

// Grading

// .sim_msg.Grading.Speed speed = 1;
inline bool Grading::has_speed() const {
  return this != internal_default_instance() && speed_ != nullptr;
}
inline void Grading::clear_speed() {
  if (GetArenaNoVirtual() == nullptr && speed_ != nullptr) {
    delete speed_;
  }
  speed_ = nullptr;
}
inline const ::sim_msg::Grading_Speed& Grading::speed() const {
  const ::sim_msg::Grading_Speed* p = speed_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.speed)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Speed*>(
      &::sim_msg::_Grading_Speed_default_instance_);
}
inline ::sim_msg::Grading_Speed* Grading::release_speed() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.speed)
  
  ::sim_msg::Grading_Speed* temp = speed_;
  speed_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Speed* Grading::mutable_speed() {
  
  if (speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Speed>(GetArenaNoVirtual());
    speed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.speed)
  return speed_;
}
inline void Grading::set_allocated_speed(::sim_msg::Grading_Speed* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete speed_;
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.speed)
}

// .sim_msg.Grading.Acceleration acceleration = 2;
inline bool Grading::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline void Grading::clear_acceleration() {
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
inline const ::sim_msg::Grading_Acceleration& Grading::acceleration() const {
  const ::sim_msg::Grading_Acceleration* p = acceleration_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.acceleration)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Acceleration*>(
      &::sim_msg::_Grading_Acceleration_default_instance_);
}
inline ::sim_msg::Grading_Acceleration* Grading::release_acceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.acceleration)
  
  ::sim_msg::Grading_Acceleration* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Acceleration* Grading::mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Acceleration>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.acceleration)
  return acceleration_;
}
inline void Grading::set_allocated_acceleration(::sim_msg::Grading_Acceleration* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.acceleration)
}

// repeated .sim_msg.Grading.Collision collision = 3;
inline int Grading::collision_size() const {
  return collision_.size();
}
inline void Grading::clear_collision() {
  collision_.Clear();
}
inline ::sim_msg::Grading_Collision* Grading::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.collision)
  return collision_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_Collision >*
Grading::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.collision)
  return &collision_;
}
inline const ::sim_msg::Grading_Collision& Grading::collision(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.collision)
  return collision_.Get(index);
}
inline ::sim_msg::Grading_Collision* Grading::add_collision() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.collision)
  return collision_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Grading_Collision >&
Grading::collision() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.collision)
  return collision_;
}

// .sim_msg.Grading.TimeHeadway timeHeadway = 4;
inline bool Grading::has_timeheadway() const {
  return this != internal_default_instance() && timeheadway_ != nullptr;
}
inline void Grading::clear_timeheadway() {
  if (GetArenaNoVirtual() == nullptr && timeheadway_ != nullptr) {
    delete timeheadway_;
  }
  timeheadway_ = nullptr;
}
inline const ::sim_msg::Grading_TimeHeadway& Grading::timeheadway() const {
  const ::sim_msg::Grading_TimeHeadway* p = timeheadway_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.timeHeadway)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_TimeHeadway*>(
      &::sim_msg::_Grading_TimeHeadway_default_instance_);
}
inline ::sim_msg::Grading_TimeHeadway* Grading::release_timeheadway() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.timeHeadway)
  
  ::sim_msg::Grading_TimeHeadway* temp = timeheadway_;
  timeheadway_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_TimeHeadway* Grading::mutable_timeheadway() {
  
  if (timeheadway_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_TimeHeadway>(GetArenaNoVirtual());
    timeheadway_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.timeHeadway)
  return timeheadway_;
}
inline void Grading::set_allocated_timeheadway(::sim_msg::Grading_TimeHeadway* timeheadway) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timeheadway_;
  }
  if (timeheadway) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timeheadway = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeheadway, submessage_arena);
    }
    
  } else {
    
  }
  timeheadway_ = timeheadway;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.timeHeadway)
}

// .sim_msg.Grading.Algorithm algorithm = 5;
inline bool Grading::has_algorithm() const {
  return this != internal_default_instance() && algorithm_ != nullptr;
}
inline void Grading::clear_algorithm() {
  if (GetArenaNoVirtual() == nullptr && algorithm_ != nullptr) {
    delete algorithm_;
  }
  algorithm_ = nullptr;
}
inline const ::sim_msg::Grading_Algorithm& Grading::algorithm() const {
  const ::sim_msg::Grading_Algorithm* p = algorithm_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.algorithm)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Algorithm*>(
      &::sim_msg::_Grading_Algorithm_default_instance_);
}
inline ::sim_msg::Grading_Algorithm* Grading::release_algorithm() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.algorithm)
  
  ::sim_msg::Grading_Algorithm* temp = algorithm_;
  algorithm_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Algorithm* Grading::mutable_algorithm() {
  
  if (algorithm_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Algorithm>(GetArenaNoVirtual());
    algorithm_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.algorithm)
  return algorithm_;
}
inline void Grading::set_allocated_algorithm(::sim_msg::Grading_Algorithm* algorithm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete algorithm_;
  }
  if (algorithm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      algorithm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm, submessage_arena);
    }
    
  } else {
    
  }
  algorithm_ = algorithm;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.algorithm)
}

// .sim_msg.Grading.Lane lane = 6;
inline bool Grading::has_lane() const {
  return this != internal_default_instance() && lane_ != nullptr;
}
inline void Grading::clear_lane() {
  if (GetArenaNoVirtual() == nullptr && lane_ != nullptr) {
    delete lane_;
  }
  lane_ = nullptr;
}
inline const ::sim_msg::Grading_Lane& Grading::lane() const {
  const ::sim_msg::Grading_Lane* p = lane_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.lane)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Lane*>(
      &::sim_msg::_Grading_Lane_default_instance_);
}
inline ::sim_msg::Grading_Lane* Grading::release_lane() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.lane)
  
  ::sim_msg::Grading_Lane* temp = lane_;
  lane_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Lane* Grading::mutable_lane() {
  
  if (lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Lane>(GetArenaNoVirtual());
    lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.lane)
  return lane_;
}
inline void Grading::set_allocated_lane(::sim_msg::Grading_Lane* lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_;
  }
  if (lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane, submessage_arena);
    }
    
  } else {
    
  }
  lane_ = lane;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.lane)
}

// .sim_msg.Grading.TrafficLight trafficeLight = 7;
inline bool Grading::has_trafficelight() const {
  return this != internal_default_instance() && trafficelight_ != nullptr;
}
inline void Grading::clear_trafficelight() {
  if (GetArenaNoVirtual() == nullptr && trafficelight_ != nullptr) {
    delete trafficelight_;
  }
  trafficelight_ = nullptr;
}
inline const ::sim_msg::Grading_TrafficLight& Grading::trafficelight() const {
  const ::sim_msg::Grading_TrafficLight* p = trafficelight_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.trafficeLight)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_TrafficLight*>(
      &::sim_msg::_Grading_TrafficLight_default_instance_);
}
inline ::sim_msg::Grading_TrafficLight* Grading::release_trafficelight() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.trafficeLight)
  
  ::sim_msg::Grading_TrafficLight* temp = trafficelight_;
  trafficelight_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_TrafficLight* Grading::mutable_trafficelight() {
  
  if (trafficelight_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_TrafficLight>(GetArenaNoVirtual());
    trafficelight_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.trafficeLight)
  return trafficelight_;
}
inline void Grading::set_allocated_trafficelight(::sim_msg::Grading_TrafficLight* trafficelight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trafficelight_;
  }
  if (trafficelight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trafficelight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trafficelight, submessage_arena);
    }
    
  } else {
    
  }
  trafficelight_ = trafficelight;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.trafficeLight)
}

// .sim_msg.Grading.TimeStamp timeStamp = 8;
inline bool Grading::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline void Grading::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
inline const ::sim_msg::Grading_TimeStamp& Grading::timestamp() const {
  const ::sim_msg::Grading_TimeStamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.timeStamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_TimeStamp*>(
      &::sim_msg::_Grading_TimeStamp_default_instance_);
}
inline ::sim_msg::Grading_TimeStamp* Grading::release_timestamp() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.timeStamp)
  
  ::sim_msg::Grading_TimeStamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_TimeStamp* Grading::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_TimeStamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.timeStamp)
  return timestamp_;
}
inline void Grading::set_allocated_timestamp(::sim_msg::Grading_TimeStamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete timestamp_;
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.timeStamp)
}

// double mileage = 9;
inline void Grading::clear_mileage() {
  mileage_ = 0;
}
inline double Grading::mileage() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.mileage)
  return mileage_;
}
inline void Grading::set_mileage(double value) {
  
  mileage_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.mileage)
}

// .sim_msg.Grading.ExpData expData = 10;
inline bool Grading::has_expdata() const {
  return this != internal_default_instance() && expdata_ != nullptr;
}
inline void Grading::clear_expdata() {
  if (GetArenaNoVirtual() == nullptr && expdata_ != nullptr) {
    delete expdata_;
  }
  expdata_ = nullptr;
}
inline const ::sim_msg::Grading_ExpData& Grading::expdata() const {
  const ::sim_msg::Grading_ExpData* p = expdata_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.expData)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_ExpData*>(
      &::sim_msg::_Grading_ExpData_default_instance_);
}
inline ::sim_msg::Grading_ExpData* Grading::release_expdata() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.expData)
  
  ::sim_msg::Grading_ExpData* temp = expdata_;
  expdata_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_ExpData* Grading::mutable_expdata() {
  
  if (expdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_ExpData>(GetArenaNoVirtual());
    expdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.expData)
  return expdata_;
}
inline void Grading::set_allocated_expdata(::sim_msg::Grading_ExpData* expdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expdata_;
  }
  if (expdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expdata, submessage_arena);
    }
    
  } else {
    
  }
  expdata_ = expdata;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.expData)
}

// .sim_msg.Grading.DistHeadway distHeadway = 11;
inline bool Grading::has_distheadway() const {
  return this != internal_default_instance() && distheadway_ != nullptr;
}
inline void Grading::clear_distheadway() {
  if (GetArenaNoVirtual() == nullptr && distheadway_ != nullptr) {
    delete distheadway_;
  }
  distheadway_ = nullptr;
}
inline const ::sim_msg::Grading_DistHeadway& Grading::distheadway() const {
  const ::sim_msg::Grading_DistHeadway* p = distheadway_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.distHeadway)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_DistHeadway*>(
      &::sim_msg::_Grading_DistHeadway_default_instance_);
}
inline ::sim_msg::Grading_DistHeadway* Grading::release_distheadway() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.distHeadway)
  
  ::sim_msg::Grading_DistHeadway* temp = distheadway_;
  distheadway_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_DistHeadway* Grading::mutable_distheadway() {
  
  if (distheadway_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_DistHeadway>(GetArenaNoVirtual());
    distheadway_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.distHeadway)
  return distheadway_;
}
inline void Grading::set_allocated_distheadway(::sim_msg::Grading_DistHeadway* distheadway) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete distheadway_;
  }
  if (distheadway) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distheadway = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distheadway, submessage_arena);
    }
    
  } else {
    
  }
  distheadway_ = distheadway;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.distHeadway)
}

// .sim_msg.Grading.Control control = 12;
inline bool Grading::has_control() const {
  return this != internal_default_instance() && control_ != nullptr;
}
inline void Grading::clear_control() {
  if (GetArenaNoVirtual() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
}
inline const ::sim_msg::Grading_Control& Grading::control() const {
  const ::sim_msg::Grading_Control* p = control_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.control)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Control*>(
      &::sim_msg::_Grading_Control_default_instance_);
}
inline ::sim_msg::Grading_Control* Grading::release_control() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.control)
  
  ::sim_msg::Grading_Control* temp = control_;
  control_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Control* Grading::mutable_control() {
  
  if (control_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Control>(GetArenaNoVirtual());
    control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.control)
  return control_;
}
inline void Grading::set_allocated_control(::sim_msg::Grading_Control* control) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete control_;
  }
  if (control) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      control = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    
  } else {
    
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.control)
}

// .sim_msg.Grading.Planning planning = 13;
inline bool Grading::has_planning() const {
  return this != internal_default_instance() && planning_ != nullptr;
}
inline void Grading::clear_planning() {
  if (GetArenaNoVirtual() == nullptr && planning_ != nullptr) {
    delete planning_;
  }
  planning_ = nullptr;
}
inline const ::sim_msg::Grading_Planning& Grading::planning() const {
  const ::sim_msg::Grading_Planning* p = planning_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.planning)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Planning*>(
      &::sim_msg::_Grading_Planning_default_instance_);
}
inline ::sim_msg::Grading_Planning* Grading::release_planning() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.planning)
  
  ::sim_msg::Grading_Planning* temp = planning_;
  planning_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Planning* Grading::mutable_planning() {
  
  if (planning_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Planning>(GetArenaNoVirtual());
    planning_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.planning)
  return planning_;
}
inline void Grading::set_allocated_planning(::sim_msg::Grading_Planning* planning) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete planning_;
  }
  if (planning) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      planning = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planning, submessage_arena);
    }
    
  } else {
    
  }
  planning_ = planning;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.planning)
}

// .sim_msg.Grading.Acceleration lateral_acc = 14;
inline bool Grading::has_lateral_acc() const {
  return this != internal_default_instance() && lateral_acc_ != nullptr;
}
inline void Grading::clear_lateral_acc() {
  if (GetArenaNoVirtual() == nullptr && lateral_acc_ != nullptr) {
    delete lateral_acc_;
  }
  lateral_acc_ = nullptr;
}
inline const ::sim_msg::Grading_Acceleration& Grading::lateral_acc() const {
  const ::sim_msg::Grading_Acceleration* p = lateral_acc_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.lateral_acc)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Acceleration*>(
      &::sim_msg::_Grading_Acceleration_default_instance_);
}
inline ::sim_msg::Grading_Acceleration* Grading::release_lateral_acc() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.lateral_acc)
  
  ::sim_msg::Grading_Acceleration* temp = lateral_acc_;
  lateral_acc_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Acceleration* Grading::mutable_lateral_acc() {
  
  if (lateral_acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Acceleration>(GetArenaNoVirtual());
    lateral_acc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.lateral_acc)
  return lateral_acc_;
}
inline void Grading::set_allocated_lateral_acc(::sim_msg::Grading_Acceleration* lateral_acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lateral_acc_;
  }
  if (lateral_acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lateral_acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lateral_acc, submessage_arena);
    }
    
  } else {
    
  }
  lateral_acc_ = lateral_acc;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.lateral_acc)
}

// .sim_msg.Grading.Acceleration dec_acc = 15;
inline bool Grading::has_dec_acc() const {
  return this != internal_default_instance() && dec_acc_ != nullptr;
}
inline void Grading::clear_dec_acc() {
  if (GetArenaNoVirtual() == nullptr && dec_acc_ != nullptr) {
    delete dec_acc_;
  }
  dec_acc_ = nullptr;
}
inline const ::sim_msg::Grading_Acceleration& Grading::dec_acc() const {
  const ::sim_msg::Grading_Acceleration* p = dec_acc_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.dec_acc)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_Acceleration*>(
      &::sim_msg::_Grading_Acceleration_default_instance_);
}
inline ::sim_msg::Grading_Acceleration* Grading::release_dec_acc() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.dec_acc)
  
  ::sim_msg::Grading_Acceleration* temp = dec_acc_;
  dec_acc_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_Acceleration* Grading::mutable_dec_acc() {
  
  if (dec_acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_Acceleration>(GetArenaNoVirtual());
    dec_acc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.dec_acc)
  return dec_acc_;
}
inline void Grading::set_allocated_dec_acc(::sim_msg::Grading_Acceleration* dec_acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dec_acc_;
  }
  if (dec_acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dec_acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dec_acc, submessage_arena);
    }
    
  } else {
    
  }
  dec_acc_ = dec_acc;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.dec_acc)
}

// .sim_msg.Grading.EventDetector event_detector = 16;
inline bool Grading::has_event_detector() const {
  return this != internal_default_instance() && event_detector_ != nullptr;
}
inline void Grading::clear_event_detector() {
  if (GetArenaNoVirtual() == nullptr && event_detector_ != nullptr) {
    delete event_detector_;
  }
  event_detector_ = nullptr;
}
inline const ::sim_msg::Grading_EventDetector& Grading::event_detector() const {
  const ::sim_msg::Grading_EventDetector* p = event_detector_;
  // @@protoc_insertion_point(field_get:sim_msg.Grading.event_detector)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Grading_EventDetector*>(
      &::sim_msg::_Grading_EventDetector_default_instance_);
}
inline ::sim_msg::Grading_EventDetector* Grading::release_event_detector() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.event_detector)
  
  ::sim_msg::Grading_EventDetector* temp = event_detector_;
  event_detector_ = nullptr;
  return temp;
}
inline ::sim_msg::Grading_EventDetector* Grading::mutable_event_detector() {
  
  if (event_detector_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Grading_EventDetector>(GetArenaNoVirtual());
    event_detector_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.event_detector)
  return event_detector_;
}
inline void Grading::set_allocated_event_detector(::sim_msg::Grading_EventDetector* event_detector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete event_detector_;
  }
  if (event_detector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event_detector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_detector, submessage_arena);
    }
    
  } else {
    
  }
  event_detector_ = event_detector;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.event_detector)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::Grading_EventDetector_EventState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::Grading_EventDetector_EventState>() {
  return ::sim_msg::Grading_EventDetector_EventState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingCollisionState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingCollisionState>() {
  return ::sim_msg::GradingCollisionState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingAlgorithmState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingAlgorithmState>() {
  return ::sim_msg::GradingAlgorithmState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingTrafficLightState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingTrafficLightState>() {
  return ::sim_msg::GradingTrafficLightState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingSpeedState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingSpeedState>() {
  return ::sim_msg::GradingSpeedState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingAccelerationState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingAccelerationState>() {
  return ::sim_msg::GradingAccelerationState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingTimeHeadwayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingTimeHeadwayState>() {
  return ::sim_msg::GradingTimeHeadwayState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingDistHeadwayState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingDistHeadwayState>() {
  return ::sim_msg::GradingDistHeadwayState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::GradingPosErrorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::GradingPosErrorState>() {
  return ::sim_msg::GradingPosErrorState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_grading_2eproto
