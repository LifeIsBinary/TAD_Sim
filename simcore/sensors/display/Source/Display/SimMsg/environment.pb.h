// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: environment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_environment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_environment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_environment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_environment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_environment_2eproto;
namespace sim_msg {
class EnvironmentalConditions;
class EnvironmentalConditionsDefaultTypeInternal;
extern EnvironmentalConditionsDefaultTypeInternal _EnvironmentalConditions_default_instance_;
class EnvironmentalConditions_CloudLayer;
class EnvironmentalConditions_CloudLayerDefaultTypeInternal;
extern EnvironmentalConditions_CloudLayerDefaultTypeInternal _EnvironmentalConditions_CloudLayer_default_instance_;
class EnvironmentalConditions_Fog;
class EnvironmentalConditions_FogDefaultTypeInternal;
extern EnvironmentalConditions_FogDefaultTypeInternal _EnvironmentalConditions_Fog_default_instance_;
class EnvironmentalConditions_Precipitation;
class EnvironmentalConditions_PrecipitationDefaultTypeInternal;
extern EnvironmentalConditions_PrecipitationDefaultTypeInternal _EnvironmentalConditions_Precipitation_default_instance_;
class EnvironmentalConditions_Sun;
class EnvironmentalConditions_SunDefaultTypeInternal;
extern EnvironmentalConditions_SunDefaultTypeInternal _EnvironmentalConditions_Sun_default_instance_;
class EnvironmentalConditions_TimeOfDay;
class EnvironmentalConditions_TimeOfDayDefaultTypeInternal;
extern EnvironmentalConditions_TimeOfDayDefaultTypeInternal _EnvironmentalConditions_TimeOfDay_default_instance_;
class EnvironmentalConditions_Wind;
class EnvironmentalConditions_WindDefaultTypeInternal;
extern EnvironmentalConditions_WindDefaultTypeInternal _EnvironmentalConditions_Wind_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::EnvironmentalConditions* Arena::CreateMaybeMessage<::sim_msg::EnvironmentalConditions>(Arena*);
template<> ::sim_msg::EnvironmentalConditions_CloudLayer* Arena::CreateMaybeMessage<::sim_msg::EnvironmentalConditions_CloudLayer>(Arena*);
template<> ::sim_msg::EnvironmentalConditions_Fog* Arena::CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Fog>(Arena*);
template<> ::sim_msg::EnvironmentalConditions_Precipitation* Arena::CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Precipitation>(Arena*);
template<> ::sim_msg::EnvironmentalConditions_Sun* Arena::CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Sun>(Arena*);
template<> ::sim_msg::EnvironmentalConditions_TimeOfDay* Arena::CreateMaybeMessage<::sim_msg::EnvironmentalConditions_TimeOfDay>(Arena*);
template<> ::sim_msg::EnvironmentalConditions_Wind* Arena::CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Wind>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum EnvironmentalConditions_Precipitation_Type : int {
  EnvironmentalConditions_Precipitation_Type_DRY = 0,
  EnvironmentalConditions_Precipitation_Type_RAIN = 1,
  EnvironmentalConditions_Precipitation_Type_SNOW = 2,
  EnvironmentalConditions_Precipitation_Type_HAIL = 3,
  EnvironmentalConditions_Precipitation_Type_QRAUPEL = 4,
  EnvironmentalConditions_Precipitation_Type_OTHER = 5,
  EnvironmentalConditions_Precipitation_Type_EnvironmentalConditions_Precipitation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnvironmentalConditions_Precipitation_Type_EnvironmentalConditions_Precipitation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnvironmentalConditions_Precipitation_Type_IsValid(int value);
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation_Type_Type_MIN = EnvironmentalConditions_Precipitation_Type_DRY;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation_Type_Type_MAX = EnvironmentalConditions_Precipitation_Type_OTHER;
constexpr int EnvironmentalConditions_Precipitation_Type_Type_ARRAYSIZE = EnvironmentalConditions_Precipitation_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Precipitation_Type_descriptor();
template<typename T>
inline const std::string& EnvironmentalConditions_Precipitation_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvironmentalConditions_Precipitation_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvironmentalConditions_Precipitation_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvironmentalConditions_Precipitation_Type_descriptor(), enum_t_value);
}
inline bool EnvironmentalConditions_Precipitation_Type_Parse(
    const std::string& name, EnvironmentalConditions_Precipitation_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvironmentalConditions_Precipitation_Type>(
    EnvironmentalConditions_Precipitation_Type_descriptor(), name, value);
}
enum EnvironmentalConditions_CloudLayer_FractionalCloudCover : int {
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_UNKNOWN = 0,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_OTHER = 1,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_ZERO_OKTAS = 2,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_ONE_OKTAS = 3,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_TWO_OKTAS = 4,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_THREE_OKTAS = 5,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_FOUR_OKTAS = 6,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_FIVE_OKTAS = 7,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_SIX_OKTAS = 8,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_SEVEN_OKTAS = 9,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_EIGHT_OKTAS = 10,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_SKY_OBSCURED = 11,
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_EnvironmentalConditions_CloudLayer_FractionalCloudCover_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnvironmentalConditions_CloudLayer_FractionalCloudCover_EnvironmentalConditions_CloudLayer_FractionalCloudCover_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnvironmentalConditions_CloudLayer_FractionalCloudCover_IsValid(int value);
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer_FractionalCloudCover_FractionalCloudCover_MIN = EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_UNKNOWN;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer_FractionalCloudCover_FractionalCloudCover_MAX = EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_SKY_OBSCURED;
constexpr int EnvironmentalConditions_CloudLayer_FractionalCloudCover_FractionalCloudCover_ARRAYSIZE = EnvironmentalConditions_CloudLayer_FractionalCloudCover_FractionalCloudCover_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor();
template<typename T>
inline const std::string& EnvironmentalConditions_CloudLayer_FractionalCloudCover_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvironmentalConditions_CloudLayer_FractionalCloudCover>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvironmentalConditions_CloudLayer_FractionalCloudCover_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor(), enum_t_value);
}
inline bool EnvironmentalConditions_CloudLayer_FractionalCloudCover_Parse(
    const std::string& name, EnvironmentalConditions_CloudLayer_FractionalCloudCover* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvironmentalConditions_CloudLayer_FractionalCloudCover>(
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor(), name, value);
}
enum EnvironmentalConditions_AmbientIllumination : int {
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_UNKNOWN = 0,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_OTHER = 1,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL1 = 2,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL2 = 3,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL3 = 4,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL4 = 5,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL5 = 6,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL6 = 7,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL7 = 8,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL8 = 9,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL9 = 10,
  EnvironmentalConditions_AmbientIllumination_EnvironmentalConditions_AmbientIllumination_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EnvironmentalConditions_AmbientIllumination_EnvironmentalConditions_AmbientIllumination_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value);
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MIN = EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_UNKNOWN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MAX = EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL9;
constexpr int EnvironmentalConditions_AmbientIllumination_AmbientIllumination_ARRAYSIZE = EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor();
template<typename T>
inline const std::string& EnvironmentalConditions_AmbientIllumination_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvironmentalConditions_AmbientIllumination>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvironmentalConditions_AmbientIllumination_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvironmentalConditions_AmbientIllumination_descriptor(), enum_t_value);
}
inline bool EnvironmentalConditions_AmbientIllumination_Parse(
    const std::string& name, EnvironmentalConditions_AmbientIllumination* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvironmentalConditions_AmbientIllumination>(
    EnvironmentalConditions_AmbientIllumination_descriptor(), name, value);
}
// ===================================================================

class EnvironmentalConditions_Precipitation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EnvironmentalConditions.Precipitation) */ {
 public:
  EnvironmentalConditions_Precipitation();
  virtual ~EnvironmentalConditions_Precipitation();

  EnvironmentalConditions_Precipitation(const EnvironmentalConditions_Precipitation& from);
  EnvironmentalConditions_Precipitation(EnvironmentalConditions_Precipitation&& from) noexcept
    : EnvironmentalConditions_Precipitation() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions_Precipitation& operator=(const EnvironmentalConditions_Precipitation& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions_Precipitation& operator=(EnvironmentalConditions_Precipitation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions_Precipitation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions_Precipitation* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions_Precipitation*>(
               &_EnvironmentalConditions_Precipitation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnvironmentalConditions_Precipitation& a, EnvironmentalConditions_Precipitation& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions_Precipitation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions_Precipitation* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions_Precipitation>(nullptr);
  }

  EnvironmentalConditions_Precipitation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions_Precipitation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions_Precipitation& from);
  void MergeFrom(const EnvironmentalConditions_Precipitation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions_Precipitation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EnvironmentalConditions.Precipitation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_environment_2eproto);
    return ::descriptor_table_environment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvironmentalConditions_Precipitation_Type Type;
  static constexpr Type DRY =
    EnvironmentalConditions_Precipitation_Type_DRY;
  static constexpr Type RAIN =
    EnvironmentalConditions_Precipitation_Type_RAIN;
  static constexpr Type SNOW =
    EnvironmentalConditions_Precipitation_Type_SNOW;
  static constexpr Type HAIL =
    EnvironmentalConditions_Precipitation_Type_HAIL;
  static constexpr Type QRAUPEL =
    EnvironmentalConditions_Precipitation_Type_QRAUPEL;
  static constexpr Type OTHER =
    EnvironmentalConditions_Precipitation_Type_OTHER;
  static inline bool Type_IsValid(int value) {
    return EnvironmentalConditions_Precipitation_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EnvironmentalConditions_Precipitation_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EnvironmentalConditions_Precipitation_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EnvironmentalConditions_Precipitation_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EnvironmentalConditions_Precipitation_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EnvironmentalConditions_Precipitation_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return EnvironmentalConditions_Precipitation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIntensityFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // double intensity = 1;
  void clear_intensity();
  double intensity() const;
  void set_intensity(double value);

  // .sim_msg.EnvironmentalConditions.Precipitation.Type type = 2;
  void clear_type();
  ::sim_msg::EnvironmentalConditions_Precipitation_Type type() const;
  void set_type(::sim_msg::EnvironmentalConditions_Precipitation_Type value);

  // @@protoc_insertion_point(class_scope:sim_msg.EnvironmentalConditions.Precipitation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double intensity_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_environment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentalConditions_Fog :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EnvironmentalConditions.Fog) */ {
 public:
  EnvironmentalConditions_Fog();
  virtual ~EnvironmentalConditions_Fog();

  EnvironmentalConditions_Fog(const EnvironmentalConditions_Fog& from);
  EnvironmentalConditions_Fog(EnvironmentalConditions_Fog&& from) noexcept
    : EnvironmentalConditions_Fog() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions_Fog& operator=(const EnvironmentalConditions_Fog& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions_Fog& operator=(EnvironmentalConditions_Fog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions_Fog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions_Fog* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions_Fog*>(
               &_EnvironmentalConditions_Fog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnvironmentalConditions_Fog& a, EnvironmentalConditions_Fog& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions_Fog* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions_Fog* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions_Fog>(nullptr);
  }

  EnvironmentalConditions_Fog* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions_Fog>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions_Fog& from);
  void MergeFrom(const EnvironmentalConditions_Fog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions_Fog* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EnvironmentalConditions.Fog";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_environment_2eproto);
    return ::descriptor_table_environment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVisibilityFieldNumber = 1,
  };
  // double visibility = 1;
  void clear_visibility();
  double visibility() const;
  void set_visibility(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.EnvironmentalConditions.Fog)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double visibility_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_environment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentalConditions_TimeOfDay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EnvironmentalConditions.TimeOfDay) */ {
 public:
  EnvironmentalConditions_TimeOfDay();
  virtual ~EnvironmentalConditions_TimeOfDay();

  EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from);
  EnvironmentalConditions_TimeOfDay(EnvironmentalConditions_TimeOfDay&& from) noexcept
    : EnvironmentalConditions_TimeOfDay() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions_TimeOfDay& operator=(const EnvironmentalConditions_TimeOfDay& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions_TimeOfDay& operator=(EnvironmentalConditions_TimeOfDay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions_TimeOfDay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions_TimeOfDay* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions_TimeOfDay*>(
               &_EnvironmentalConditions_TimeOfDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EnvironmentalConditions_TimeOfDay& a, EnvironmentalConditions_TimeOfDay& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions_TimeOfDay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions_TimeOfDay* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions_TimeOfDay>(nullptr);
  }

  EnvironmentalConditions_TimeOfDay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions_TimeOfDay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions_TimeOfDay& from);
  void MergeFrom(const EnvironmentalConditions_TimeOfDay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions_TimeOfDay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EnvironmentalConditions.TimeOfDay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_environment_2eproto);
    return ::descriptor_table_environment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsSinceMidnightFieldNumber = 1,
  };
  // uint32 seconds_since_midnight = 1;
  void clear_seconds_since_midnight();
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_since_midnight() const;
  void set_seconds_since_midnight(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.EnvironmentalConditions.TimeOfDay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_since_midnight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_environment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentalConditions_CloudLayer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EnvironmentalConditions.CloudLayer) */ {
 public:
  EnvironmentalConditions_CloudLayer();
  virtual ~EnvironmentalConditions_CloudLayer();

  EnvironmentalConditions_CloudLayer(const EnvironmentalConditions_CloudLayer& from);
  EnvironmentalConditions_CloudLayer(EnvironmentalConditions_CloudLayer&& from) noexcept
    : EnvironmentalConditions_CloudLayer() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions_CloudLayer& operator=(const EnvironmentalConditions_CloudLayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions_CloudLayer& operator=(EnvironmentalConditions_CloudLayer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions_CloudLayer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions_CloudLayer* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions_CloudLayer*>(
               &_EnvironmentalConditions_CloudLayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EnvironmentalConditions_CloudLayer& a, EnvironmentalConditions_CloudLayer& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions_CloudLayer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions_CloudLayer* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions_CloudLayer>(nullptr);
  }

  EnvironmentalConditions_CloudLayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions_CloudLayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions_CloudLayer& from);
  void MergeFrom(const EnvironmentalConditions_CloudLayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions_CloudLayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EnvironmentalConditions.CloudLayer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_environment_2eproto);
    return ::descriptor_table_environment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvironmentalConditions_CloudLayer_FractionalCloudCover FractionalCloudCover;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_UNKNOWN =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_UNKNOWN;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_OTHER =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_OTHER;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_ZERO_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_ZERO_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_ONE_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_ONE_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_TWO_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_TWO_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_THREE_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_THREE_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_FOUR_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_FOUR_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_FIVE_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_FIVE_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_SIX_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_SIX_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_SEVEN_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_SEVEN_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_EIGHT_OKTAS =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_EIGHT_OKTAS;
  static constexpr FractionalCloudCover FRACTIONAL_CLOUD_COVER_SKY_OBSCURED =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FRACTIONAL_CLOUD_COVER_SKY_OBSCURED;
  static inline bool FractionalCloudCover_IsValid(int value) {
    return EnvironmentalConditions_CloudLayer_FractionalCloudCover_IsValid(value);
  }
  static constexpr FractionalCloudCover FractionalCloudCover_MIN =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FractionalCloudCover_MIN;
  static constexpr FractionalCloudCover FractionalCloudCover_MAX =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FractionalCloudCover_MAX;
  static constexpr int FractionalCloudCover_ARRAYSIZE =
    EnvironmentalConditions_CloudLayer_FractionalCloudCover_FractionalCloudCover_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FractionalCloudCover_descriptor() {
    return EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor();
  }
  template<typename T>
  static inline const std::string& FractionalCloudCover_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FractionalCloudCover>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FractionalCloudCover_Name.");
    return EnvironmentalConditions_CloudLayer_FractionalCloudCover_Name(enum_t_value);
  }
  static inline bool FractionalCloudCover_Parse(const std::string& name,
      FractionalCloudCover* value) {
    return EnvironmentalConditions_CloudLayer_FractionalCloudCover_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFractionalCloudCoverFieldNumber = 1,
  };
  // .sim_msg.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  void clear_fractional_cloud_cover();
  ::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover fractional_cloud_cover() const;
  void set_fractional_cloud_cover(::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover value);

  // @@protoc_insertion_point(class_scope:sim_msg.EnvironmentalConditions.CloudLayer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int fractional_cloud_cover_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_environment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentalConditions_Wind :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EnvironmentalConditions.Wind) */ {
 public:
  EnvironmentalConditions_Wind();
  virtual ~EnvironmentalConditions_Wind();

  EnvironmentalConditions_Wind(const EnvironmentalConditions_Wind& from);
  EnvironmentalConditions_Wind(EnvironmentalConditions_Wind&& from) noexcept
    : EnvironmentalConditions_Wind() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions_Wind& operator=(const EnvironmentalConditions_Wind& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions_Wind& operator=(EnvironmentalConditions_Wind&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions_Wind& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions_Wind* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions_Wind*>(
               &_EnvironmentalConditions_Wind_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EnvironmentalConditions_Wind& a, EnvironmentalConditions_Wind& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions_Wind* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions_Wind* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions_Wind>(nullptr);
  }

  EnvironmentalConditions_Wind* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions_Wind>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions_Wind& from);
  void MergeFrom(const EnvironmentalConditions_Wind& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions_Wind* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EnvironmentalConditions.Wind";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_environment_2eproto);
    return ::descriptor_table_environment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginDirectionFieldNumber = 1,
    kSpeedFieldNumber = 2,
  };
  // double origin_direction = 1;
  void clear_origin_direction();
  double origin_direction() const;
  void set_origin_direction(double value);

  // double speed = 2;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.EnvironmentalConditions.Wind)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double origin_direction_;
  double speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_environment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentalConditions_Sun :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EnvironmentalConditions.Sun) */ {
 public:
  EnvironmentalConditions_Sun();
  virtual ~EnvironmentalConditions_Sun();

  EnvironmentalConditions_Sun(const EnvironmentalConditions_Sun& from);
  EnvironmentalConditions_Sun(EnvironmentalConditions_Sun&& from) noexcept
    : EnvironmentalConditions_Sun() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions_Sun& operator=(const EnvironmentalConditions_Sun& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions_Sun& operator=(EnvironmentalConditions_Sun&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions_Sun& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions_Sun* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions_Sun*>(
               &_EnvironmentalConditions_Sun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EnvironmentalConditions_Sun& a, EnvironmentalConditions_Sun& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions_Sun* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions_Sun* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions_Sun>(nullptr);
  }

  EnvironmentalConditions_Sun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions_Sun>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions_Sun& from);
  void MergeFrom(const EnvironmentalConditions_Sun& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions_Sun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EnvironmentalConditions.Sun";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_environment_2eproto);
    return ::descriptor_table_environment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzimuthFieldNumber = 1,
    kElevationFieldNumber = 2,
    kIntensityFieldNumber = 3,
  };
  // double azimuth = 1;
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);

  // double elevation = 2;
  void clear_elevation();
  double elevation() const;
  void set_elevation(double value);

  // double intensity = 3;
  void clear_intensity();
  double intensity() const;
  void set_intensity(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.EnvironmentalConditions.Sun)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double azimuth_;
  double elevation_;
  double intensity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_environment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentalConditions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.EnvironmentalConditions) */ {
 public:
  EnvironmentalConditions();
  virtual ~EnvironmentalConditions();

  EnvironmentalConditions(const EnvironmentalConditions& from);
  EnvironmentalConditions(EnvironmentalConditions&& from) noexcept
    : EnvironmentalConditions() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions& operator=(const EnvironmentalConditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions& operator=(EnvironmentalConditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions*>(
               &_EnvironmentalConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EnvironmentalConditions& a, EnvironmentalConditions& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions>(nullptr);
  }

  EnvironmentalConditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions& from);
  void MergeFrom(const EnvironmentalConditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.EnvironmentalConditions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_environment_2eproto);
    return ::descriptor_table_environment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvironmentalConditions_Precipitation Precipitation;
  typedef EnvironmentalConditions_Fog Fog;
  typedef EnvironmentalConditions_TimeOfDay TimeOfDay;
  typedef EnvironmentalConditions_CloudLayer CloudLayer;
  typedef EnvironmentalConditions_Wind Wind;
  typedef EnvironmentalConditions_Sun Sun;

  typedef EnvironmentalConditions_AmbientIllumination AmbientIllumination;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_UNKNOWN =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_UNKNOWN;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_OTHER =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_OTHER;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL1 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL1;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL2 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL2;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL3 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL3;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL4 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL4;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL5 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL5;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL6 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL6;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL7 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL7;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL8 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL8;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL9 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL9;
  static inline bool AmbientIllumination_IsValid(int value) {
    return EnvironmentalConditions_AmbientIllumination_IsValid(value);
  }
  static constexpr AmbientIllumination AmbientIllumination_MIN =
    EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MIN;
  static constexpr AmbientIllumination AmbientIllumination_MAX =
    EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MAX;
  static constexpr int AmbientIllumination_ARRAYSIZE =
    EnvironmentalConditions_AmbientIllumination_AmbientIllumination_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AmbientIllumination_descriptor() {
    return EnvironmentalConditions_AmbientIllumination_descriptor();
  }
  template<typename T>
  static inline const std::string& AmbientIllumination_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AmbientIllumination>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AmbientIllumination_Name.");
    return EnvironmentalConditions_AmbientIllumination_Name(enum_t_value);
  }
  static inline bool AmbientIllumination_Parse(const std::string& name,
      AmbientIllumination* value) {
    return EnvironmentalConditions_AmbientIllumination_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kTimeOfDayFieldNumber = 3,
    kPrecipitationFieldNumber = 8,
    kFogFieldNumber = 9,
    kCloudsFieldNumber = 10,
    kWindFieldNumber = 11,
    kSunFieldNumber = 12,
    kUnixTimestampFieldNumber = 4,
    kAtmosphericPressureFieldNumber = 5,
    kTemperatureFieldNumber = 6,
    kRelativeHumidityFieldNumber = 7,
    kTemperatureCFieldNumber = 13,
    kAmbientIlluminationFieldNumber = 2,
  };
  // .sim_msg.Header header = 1;
  bool has_header() const;
  void clear_header();
  const ::sim_msg::Header& header() const;
  ::sim_msg::Header* release_header();
  ::sim_msg::Header* mutable_header();
  void set_allocated_header(::sim_msg::Header* header);

  // .sim_msg.EnvironmentalConditions.TimeOfDay time_of_day = 3;
  bool has_time_of_day() const;
  void clear_time_of_day();
  const ::sim_msg::EnvironmentalConditions_TimeOfDay& time_of_day() const;
  ::sim_msg::EnvironmentalConditions_TimeOfDay* release_time_of_day();
  ::sim_msg::EnvironmentalConditions_TimeOfDay* mutable_time_of_day();
  void set_allocated_time_of_day(::sim_msg::EnvironmentalConditions_TimeOfDay* time_of_day);

  // .sim_msg.EnvironmentalConditions.Precipitation precipitation = 8;
  bool has_precipitation() const;
  void clear_precipitation();
  const ::sim_msg::EnvironmentalConditions_Precipitation& precipitation() const;
  ::sim_msg::EnvironmentalConditions_Precipitation* release_precipitation();
  ::sim_msg::EnvironmentalConditions_Precipitation* mutable_precipitation();
  void set_allocated_precipitation(::sim_msg::EnvironmentalConditions_Precipitation* precipitation);

  // .sim_msg.EnvironmentalConditions.Fog fog = 9;
  bool has_fog() const;
  void clear_fog();
  const ::sim_msg::EnvironmentalConditions_Fog& fog() const;
  ::sim_msg::EnvironmentalConditions_Fog* release_fog();
  ::sim_msg::EnvironmentalConditions_Fog* mutable_fog();
  void set_allocated_fog(::sim_msg::EnvironmentalConditions_Fog* fog);

  // .sim_msg.EnvironmentalConditions.CloudLayer clouds = 10;
  bool has_clouds() const;
  void clear_clouds();
  const ::sim_msg::EnvironmentalConditions_CloudLayer& clouds() const;
  ::sim_msg::EnvironmentalConditions_CloudLayer* release_clouds();
  ::sim_msg::EnvironmentalConditions_CloudLayer* mutable_clouds();
  void set_allocated_clouds(::sim_msg::EnvironmentalConditions_CloudLayer* clouds);

  // .sim_msg.EnvironmentalConditions.Wind wind = 11;
  bool has_wind() const;
  void clear_wind();
  const ::sim_msg::EnvironmentalConditions_Wind& wind() const;
  ::sim_msg::EnvironmentalConditions_Wind* release_wind();
  ::sim_msg::EnvironmentalConditions_Wind* mutable_wind();
  void set_allocated_wind(::sim_msg::EnvironmentalConditions_Wind* wind);

  // .sim_msg.EnvironmentalConditions.Sun sun = 12;
  bool has_sun() const;
  void clear_sun();
  const ::sim_msg::EnvironmentalConditions_Sun& sun() const;
  ::sim_msg::EnvironmentalConditions_Sun* release_sun();
  ::sim_msg::EnvironmentalConditions_Sun* mutable_sun();
  void set_allocated_sun(::sim_msg::EnvironmentalConditions_Sun* sun);

  // int64 unix_timestamp = 4;
  void clear_unix_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 unix_timestamp() const;
  void set_unix_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double atmospheric_pressure = 5;
  void clear_atmospheric_pressure();
  double atmospheric_pressure() const;
  void set_atmospheric_pressure(double value);

  // double temperature = 6;
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);

  // double relative_humidity = 7;
  void clear_relative_humidity();
  double relative_humidity() const;
  void set_relative_humidity(double value);

  // double temperature_c = 13;
  void clear_temperature_c();
  double temperature_c() const;
  void set_temperature_c(double value);

  // .sim_msg.EnvironmentalConditions.AmbientIllumination ambient_illumination = 2;
  void clear_ambient_illumination();
  ::sim_msg::EnvironmentalConditions_AmbientIllumination ambient_illumination() const;
  void set_ambient_illumination(::sim_msg::EnvironmentalConditions_AmbientIllumination value);

  // @@protoc_insertion_point(class_scope:sim_msg.EnvironmentalConditions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Header* header_;
  ::sim_msg::EnvironmentalConditions_TimeOfDay* time_of_day_;
  ::sim_msg::EnvironmentalConditions_Precipitation* precipitation_;
  ::sim_msg::EnvironmentalConditions_Fog* fog_;
  ::sim_msg::EnvironmentalConditions_CloudLayer* clouds_;
  ::sim_msg::EnvironmentalConditions_Wind* wind_;
  ::sim_msg::EnvironmentalConditions_Sun* sun_;
  ::PROTOBUF_NAMESPACE_ID::int64 unix_timestamp_;
  double atmospheric_pressure_;
  double temperature_;
  double relative_humidity_;
  double temperature_c_;
  int ambient_illumination_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_environment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnvironmentalConditions_Precipitation

// double intensity = 1;
inline void EnvironmentalConditions_Precipitation::clear_intensity() {
  intensity_ = 0;
}
inline double EnvironmentalConditions_Precipitation::intensity() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Precipitation.intensity)
  return intensity_;
}
inline void EnvironmentalConditions_Precipitation::set_intensity(double value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Precipitation.intensity)
}

// .sim_msg.EnvironmentalConditions.Precipitation.Type type = 2;
inline void EnvironmentalConditions_Precipitation::clear_type() {
  type_ = 0;
}
inline ::sim_msg::EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Precipitation.type)
  return static_cast< ::sim_msg::EnvironmentalConditions_Precipitation_Type >(type_);
}
inline void EnvironmentalConditions_Precipitation::set_type(::sim_msg::EnvironmentalConditions_Precipitation_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Precipitation.type)
}

// -------------------------------------------------------------------

// EnvironmentalConditions_Fog

// double visibility = 1;
inline void EnvironmentalConditions_Fog::clear_visibility() {
  visibility_ = 0;
}
inline double EnvironmentalConditions_Fog::visibility() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Fog.visibility)
  return visibility_;
}
inline void EnvironmentalConditions_Fog::set_visibility(double value) {
  
  visibility_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Fog.visibility)
}

// -------------------------------------------------------------------

// EnvironmentalConditions_TimeOfDay

// uint32 seconds_since_midnight = 1;
inline void EnvironmentalConditions_TimeOfDay::clear_seconds_since_midnight() {
  seconds_since_midnight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvironmentalConditions_TimeOfDay::seconds_since_midnight() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.TimeOfDay.seconds_since_midnight)
  return seconds_since_midnight_;
}
inline void EnvironmentalConditions_TimeOfDay::set_seconds_since_midnight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seconds_since_midnight_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.TimeOfDay.seconds_since_midnight)
}

// -------------------------------------------------------------------

// EnvironmentalConditions_CloudLayer

// .sim_msg.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
inline void EnvironmentalConditions_CloudLayer::clear_fractional_cloud_cover() {
  fractional_cloud_cover_ = 0;
}
inline ::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::fractional_cloud_cover() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.CloudLayer.fractional_cloud_cover)
  return static_cast< ::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover >(fractional_cloud_cover_);
}
inline void EnvironmentalConditions_CloudLayer::set_fractional_cloud_cover(::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover value) {
  
  fractional_cloud_cover_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.CloudLayer.fractional_cloud_cover)
}

// -------------------------------------------------------------------

// EnvironmentalConditions_Wind

// double origin_direction = 1;
inline void EnvironmentalConditions_Wind::clear_origin_direction() {
  origin_direction_ = 0;
}
inline double EnvironmentalConditions_Wind::origin_direction() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Wind.origin_direction)
  return origin_direction_;
}
inline void EnvironmentalConditions_Wind::set_origin_direction(double value) {
  
  origin_direction_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Wind.origin_direction)
}

// double speed = 2;
inline void EnvironmentalConditions_Wind::clear_speed() {
  speed_ = 0;
}
inline double EnvironmentalConditions_Wind::speed() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Wind.speed)
  return speed_;
}
inline void EnvironmentalConditions_Wind::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Wind.speed)
}

// -------------------------------------------------------------------

// EnvironmentalConditions_Sun

// double azimuth = 1;
inline void EnvironmentalConditions_Sun::clear_azimuth() {
  azimuth_ = 0;
}
inline double EnvironmentalConditions_Sun::azimuth() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Sun.azimuth)
  return azimuth_;
}
inline void EnvironmentalConditions_Sun::set_azimuth(double value) {
  
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Sun.azimuth)
}

// double elevation = 2;
inline void EnvironmentalConditions_Sun::clear_elevation() {
  elevation_ = 0;
}
inline double EnvironmentalConditions_Sun::elevation() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Sun.elevation)
  return elevation_;
}
inline void EnvironmentalConditions_Sun::set_elevation(double value) {
  
  elevation_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Sun.elevation)
}

// double intensity = 3;
inline void EnvironmentalConditions_Sun::clear_intensity() {
  intensity_ = 0;
}
inline double EnvironmentalConditions_Sun::intensity() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.Sun.intensity)
  return intensity_;
}
inline void EnvironmentalConditions_Sun::set_intensity(double value) {
  
  intensity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.Sun.intensity)
}

// -------------------------------------------------------------------

// EnvironmentalConditions

// .sim_msg.Header header = 1;
inline bool EnvironmentalConditions::has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline const ::sim_msg::Header& EnvironmentalConditions::header() const {
  const ::sim_msg::Header* p = header_;
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Header*>(
      &::sim_msg::_Header_default_instance_);
}
inline ::sim_msg::Header* EnvironmentalConditions::release_header() {
  // @@protoc_insertion_point(field_release:sim_msg.EnvironmentalConditions.header)
  
  ::sim_msg::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::sim_msg::Header* EnvironmentalConditions::mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.EnvironmentalConditions.header)
  return header_;
}
inline void EnvironmentalConditions::set_allocated_header(::sim_msg::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.EnvironmentalConditions.header)
}

// .sim_msg.EnvironmentalConditions.AmbientIllumination ambient_illumination = 2;
inline void EnvironmentalConditions::clear_ambient_illumination() {
  ambient_illumination_ = 0;
}
inline ::sim_msg::EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::ambient_illumination() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.ambient_illumination)
  return static_cast< ::sim_msg::EnvironmentalConditions_AmbientIllumination >(ambient_illumination_);
}
inline void EnvironmentalConditions::set_ambient_illumination(::sim_msg::EnvironmentalConditions_AmbientIllumination value) {
  
  ambient_illumination_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.ambient_illumination)
}

// .sim_msg.EnvironmentalConditions.TimeOfDay time_of_day = 3;
inline bool EnvironmentalConditions::has_time_of_day() const {
  return this != internal_default_instance() && time_of_day_ != nullptr;
}
inline void EnvironmentalConditions::clear_time_of_day() {
  if (GetArenaNoVirtual() == nullptr && time_of_day_ != nullptr) {
    delete time_of_day_;
  }
  time_of_day_ = nullptr;
}
inline const ::sim_msg::EnvironmentalConditions_TimeOfDay& EnvironmentalConditions::time_of_day() const {
  const ::sim_msg::EnvironmentalConditions_TimeOfDay* p = time_of_day_;
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.time_of_day)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::EnvironmentalConditions_TimeOfDay*>(
      &::sim_msg::_EnvironmentalConditions_TimeOfDay_default_instance_);
}
inline ::sim_msg::EnvironmentalConditions_TimeOfDay* EnvironmentalConditions::release_time_of_day() {
  // @@protoc_insertion_point(field_release:sim_msg.EnvironmentalConditions.time_of_day)
  
  ::sim_msg::EnvironmentalConditions_TimeOfDay* temp = time_of_day_;
  time_of_day_ = nullptr;
  return temp;
}
inline ::sim_msg::EnvironmentalConditions_TimeOfDay* EnvironmentalConditions::mutable_time_of_day() {
  
  if (time_of_day_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::EnvironmentalConditions_TimeOfDay>(GetArenaNoVirtual());
    time_of_day_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.EnvironmentalConditions.time_of_day)
  return time_of_day_;
}
inline void EnvironmentalConditions::set_allocated_time_of_day(::sim_msg::EnvironmentalConditions_TimeOfDay* time_of_day) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_of_day_;
  }
  if (time_of_day) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_of_day = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_of_day, submessage_arena);
    }
    
  } else {
    
  }
  time_of_day_ = time_of_day;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.EnvironmentalConditions.time_of_day)
}

// int64 unix_timestamp = 4;
inline void EnvironmentalConditions::clear_unix_timestamp() {
  unix_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EnvironmentalConditions::unix_timestamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.unix_timestamp)
  return unix_timestamp_;
}
inline void EnvironmentalConditions::set_unix_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unix_timestamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.unix_timestamp)
}

// double atmospheric_pressure = 5;
inline void EnvironmentalConditions::clear_atmospheric_pressure() {
  atmospheric_pressure_ = 0;
}
inline double EnvironmentalConditions::atmospheric_pressure() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.atmospheric_pressure)
  return atmospheric_pressure_;
}
inline void EnvironmentalConditions::set_atmospheric_pressure(double value) {
  
  atmospheric_pressure_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.atmospheric_pressure)
}

// double temperature = 6;
inline void EnvironmentalConditions::clear_temperature() {
  temperature_ = 0;
}
inline double EnvironmentalConditions::temperature() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.temperature)
  return temperature_;
}
inline void EnvironmentalConditions::set_temperature(double value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.temperature)
}

// double relative_humidity = 7;
inline void EnvironmentalConditions::clear_relative_humidity() {
  relative_humidity_ = 0;
}
inline double EnvironmentalConditions::relative_humidity() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.relative_humidity)
  return relative_humidity_;
}
inline void EnvironmentalConditions::set_relative_humidity(double value) {
  
  relative_humidity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.relative_humidity)
}

// .sim_msg.EnvironmentalConditions.Precipitation precipitation = 8;
inline bool EnvironmentalConditions::has_precipitation() const {
  return this != internal_default_instance() && precipitation_ != nullptr;
}
inline void EnvironmentalConditions::clear_precipitation() {
  if (GetArenaNoVirtual() == nullptr && precipitation_ != nullptr) {
    delete precipitation_;
  }
  precipitation_ = nullptr;
}
inline const ::sim_msg::EnvironmentalConditions_Precipitation& EnvironmentalConditions::precipitation() const {
  const ::sim_msg::EnvironmentalConditions_Precipitation* p = precipitation_;
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.precipitation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::EnvironmentalConditions_Precipitation*>(
      &::sim_msg::_EnvironmentalConditions_Precipitation_default_instance_);
}
inline ::sim_msg::EnvironmentalConditions_Precipitation* EnvironmentalConditions::release_precipitation() {
  // @@protoc_insertion_point(field_release:sim_msg.EnvironmentalConditions.precipitation)
  
  ::sim_msg::EnvironmentalConditions_Precipitation* temp = precipitation_;
  precipitation_ = nullptr;
  return temp;
}
inline ::sim_msg::EnvironmentalConditions_Precipitation* EnvironmentalConditions::mutable_precipitation() {
  
  if (precipitation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Precipitation>(GetArenaNoVirtual());
    precipitation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.EnvironmentalConditions.precipitation)
  return precipitation_;
}
inline void EnvironmentalConditions::set_allocated_precipitation(::sim_msg::EnvironmentalConditions_Precipitation* precipitation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete precipitation_;
  }
  if (precipitation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      precipitation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, precipitation, submessage_arena);
    }
    
  } else {
    
  }
  precipitation_ = precipitation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.EnvironmentalConditions.precipitation)
}

// .sim_msg.EnvironmentalConditions.Fog fog = 9;
inline bool EnvironmentalConditions::has_fog() const {
  return this != internal_default_instance() && fog_ != nullptr;
}
inline void EnvironmentalConditions::clear_fog() {
  if (GetArenaNoVirtual() == nullptr && fog_ != nullptr) {
    delete fog_;
  }
  fog_ = nullptr;
}
inline const ::sim_msg::EnvironmentalConditions_Fog& EnvironmentalConditions::fog() const {
  const ::sim_msg::EnvironmentalConditions_Fog* p = fog_;
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.fog)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::EnvironmentalConditions_Fog*>(
      &::sim_msg::_EnvironmentalConditions_Fog_default_instance_);
}
inline ::sim_msg::EnvironmentalConditions_Fog* EnvironmentalConditions::release_fog() {
  // @@protoc_insertion_point(field_release:sim_msg.EnvironmentalConditions.fog)
  
  ::sim_msg::EnvironmentalConditions_Fog* temp = fog_;
  fog_ = nullptr;
  return temp;
}
inline ::sim_msg::EnvironmentalConditions_Fog* EnvironmentalConditions::mutable_fog() {
  
  if (fog_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Fog>(GetArenaNoVirtual());
    fog_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.EnvironmentalConditions.fog)
  return fog_;
}
inline void EnvironmentalConditions::set_allocated_fog(::sim_msg::EnvironmentalConditions_Fog* fog) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fog_;
  }
  if (fog) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fog = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fog, submessage_arena);
    }
    
  } else {
    
  }
  fog_ = fog;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.EnvironmentalConditions.fog)
}

// .sim_msg.EnvironmentalConditions.CloudLayer clouds = 10;
inline bool EnvironmentalConditions::has_clouds() const {
  return this != internal_default_instance() && clouds_ != nullptr;
}
inline void EnvironmentalConditions::clear_clouds() {
  if (GetArenaNoVirtual() == nullptr && clouds_ != nullptr) {
    delete clouds_;
  }
  clouds_ = nullptr;
}
inline const ::sim_msg::EnvironmentalConditions_CloudLayer& EnvironmentalConditions::clouds() const {
  const ::sim_msg::EnvironmentalConditions_CloudLayer* p = clouds_;
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.clouds)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::EnvironmentalConditions_CloudLayer*>(
      &::sim_msg::_EnvironmentalConditions_CloudLayer_default_instance_);
}
inline ::sim_msg::EnvironmentalConditions_CloudLayer* EnvironmentalConditions::release_clouds() {
  // @@protoc_insertion_point(field_release:sim_msg.EnvironmentalConditions.clouds)
  
  ::sim_msg::EnvironmentalConditions_CloudLayer* temp = clouds_;
  clouds_ = nullptr;
  return temp;
}
inline ::sim_msg::EnvironmentalConditions_CloudLayer* EnvironmentalConditions::mutable_clouds() {
  
  if (clouds_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::EnvironmentalConditions_CloudLayer>(GetArenaNoVirtual());
    clouds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.EnvironmentalConditions.clouds)
  return clouds_;
}
inline void EnvironmentalConditions::set_allocated_clouds(::sim_msg::EnvironmentalConditions_CloudLayer* clouds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clouds_;
  }
  if (clouds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clouds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clouds, submessage_arena);
    }
    
  } else {
    
  }
  clouds_ = clouds;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.EnvironmentalConditions.clouds)
}

// .sim_msg.EnvironmentalConditions.Wind wind = 11;
inline bool EnvironmentalConditions::has_wind() const {
  return this != internal_default_instance() && wind_ != nullptr;
}
inline void EnvironmentalConditions::clear_wind() {
  if (GetArenaNoVirtual() == nullptr && wind_ != nullptr) {
    delete wind_;
  }
  wind_ = nullptr;
}
inline const ::sim_msg::EnvironmentalConditions_Wind& EnvironmentalConditions::wind() const {
  const ::sim_msg::EnvironmentalConditions_Wind* p = wind_;
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.wind)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::EnvironmentalConditions_Wind*>(
      &::sim_msg::_EnvironmentalConditions_Wind_default_instance_);
}
inline ::sim_msg::EnvironmentalConditions_Wind* EnvironmentalConditions::release_wind() {
  // @@protoc_insertion_point(field_release:sim_msg.EnvironmentalConditions.wind)
  
  ::sim_msg::EnvironmentalConditions_Wind* temp = wind_;
  wind_ = nullptr;
  return temp;
}
inline ::sim_msg::EnvironmentalConditions_Wind* EnvironmentalConditions::mutable_wind() {
  
  if (wind_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Wind>(GetArenaNoVirtual());
    wind_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.EnvironmentalConditions.wind)
  return wind_;
}
inline void EnvironmentalConditions::set_allocated_wind(::sim_msg::EnvironmentalConditions_Wind* wind) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete wind_;
  }
  if (wind) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wind = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wind, submessage_arena);
    }
    
  } else {
    
  }
  wind_ = wind;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.EnvironmentalConditions.wind)
}

// .sim_msg.EnvironmentalConditions.Sun sun = 12;
inline bool EnvironmentalConditions::has_sun() const {
  return this != internal_default_instance() && sun_ != nullptr;
}
inline void EnvironmentalConditions::clear_sun() {
  if (GetArenaNoVirtual() == nullptr && sun_ != nullptr) {
    delete sun_;
  }
  sun_ = nullptr;
}
inline const ::sim_msg::EnvironmentalConditions_Sun& EnvironmentalConditions::sun() const {
  const ::sim_msg::EnvironmentalConditions_Sun* p = sun_;
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.sun)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::EnvironmentalConditions_Sun*>(
      &::sim_msg::_EnvironmentalConditions_Sun_default_instance_);
}
inline ::sim_msg::EnvironmentalConditions_Sun* EnvironmentalConditions::release_sun() {
  // @@protoc_insertion_point(field_release:sim_msg.EnvironmentalConditions.sun)
  
  ::sim_msg::EnvironmentalConditions_Sun* temp = sun_;
  sun_ = nullptr;
  return temp;
}
inline ::sim_msg::EnvironmentalConditions_Sun* EnvironmentalConditions::mutable_sun() {
  
  if (sun_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::EnvironmentalConditions_Sun>(GetArenaNoVirtual());
    sun_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.EnvironmentalConditions.sun)
  return sun_;
}
inline void EnvironmentalConditions::set_allocated_sun(::sim_msg::EnvironmentalConditions_Sun* sun) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sun_;
  }
  if (sun) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sun = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sun, submessage_arena);
    }
    
  } else {
    
  }
  sun_ = sun;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.EnvironmentalConditions.sun)
}

// double temperature_c = 13;
inline void EnvironmentalConditions::clear_temperature_c() {
  temperature_c_ = 0;
}
inline double EnvironmentalConditions::temperature_c() const {
  // @@protoc_insertion_point(field_get:sim_msg.EnvironmentalConditions.temperature_c)
  return temperature_c_;
}
inline void EnvironmentalConditions::set_temperature_c(double value) {
  
  temperature_c_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.EnvironmentalConditions.temperature_c)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::EnvironmentalConditions_Precipitation_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::EnvironmentalConditions_Precipitation_Type>() {
  return ::sim_msg::EnvironmentalConditions_Precipitation_Type_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover>() {
  return ::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::EnvironmentalConditions_AmbientIllumination> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::EnvironmentalConditions_AmbientIllumination>() {
  return ::sim_msg::EnvironmentalConditions_AmbientIllumination_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_environment_2eproto
