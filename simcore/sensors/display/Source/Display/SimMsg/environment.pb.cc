// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: environment.proto

#pragma warning (disable : 4125)
#include "environment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_environment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_CloudLayer_environment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_environment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Fog_environment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_environment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Precipitation_environment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_environment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Sun_environment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_environment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_TimeOfDay_environment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_environment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Wind_environment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Header_header_2eproto;
namespace sim_msg {
class EnvironmentalConditions_PrecipitationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_Precipitation> _instance;
} _EnvironmentalConditions_Precipitation_default_instance_;
class EnvironmentalConditions_FogDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_Fog> _instance;
} _EnvironmentalConditions_Fog_default_instance_;
class EnvironmentalConditions_TimeOfDayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_TimeOfDay> _instance;
} _EnvironmentalConditions_TimeOfDay_default_instance_;
class EnvironmentalConditions_CloudLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_CloudLayer> _instance;
} _EnvironmentalConditions_CloudLayer_default_instance_;
class EnvironmentalConditions_WindDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_Wind> _instance;
} _EnvironmentalConditions_Wind_default_instance_;
class EnvironmentalConditions_SunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_Sun> _instance;
} _EnvironmentalConditions_Sun_default_instance_;
class EnvironmentalConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions> _instance;
} _EnvironmentalConditions_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_EnvironmentalConditions_environment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EnvironmentalConditions_default_instance_;
    new (ptr) ::sim_msg::EnvironmentalConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EnvironmentalConditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_EnvironmentalConditions_environment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_EnvironmentalConditions_environment_2eproto}, {
      &scc_info_Header_header_2eproto.base,
      &scc_info_EnvironmentalConditions_TimeOfDay_environment_2eproto.base,
      &scc_info_EnvironmentalConditions_Precipitation_environment_2eproto.base,
      &scc_info_EnvironmentalConditions_Fog_environment_2eproto.base,
      &scc_info_EnvironmentalConditions_CloudLayer_environment_2eproto.base,
      &scc_info_EnvironmentalConditions_Wind_environment_2eproto.base,
      &scc_info_EnvironmentalConditions_Sun_environment_2eproto.base,}};

static void InitDefaultsscc_info_EnvironmentalConditions_CloudLayer_environment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EnvironmentalConditions_CloudLayer_default_instance_;
    new (ptr) ::sim_msg::EnvironmentalConditions_CloudLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EnvironmentalConditions_CloudLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_CloudLayer_environment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_CloudLayer_environment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_Fog_environment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EnvironmentalConditions_Fog_default_instance_;
    new (ptr) ::sim_msg::EnvironmentalConditions_Fog();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EnvironmentalConditions_Fog::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Fog_environment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_Fog_environment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_Precipitation_environment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EnvironmentalConditions_Precipitation_default_instance_;
    new (ptr) ::sim_msg::EnvironmentalConditions_Precipitation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EnvironmentalConditions_Precipitation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Precipitation_environment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_Precipitation_environment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_Sun_environment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EnvironmentalConditions_Sun_default_instance_;
    new (ptr) ::sim_msg::EnvironmentalConditions_Sun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EnvironmentalConditions_Sun::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Sun_environment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_Sun_environment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_TimeOfDay_environment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EnvironmentalConditions_TimeOfDay_default_instance_;
    new (ptr) ::sim_msg::EnvironmentalConditions_TimeOfDay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EnvironmentalConditions_TimeOfDay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_TimeOfDay_environment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_TimeOfDay_environment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_Wind_environment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_EnvironmentalConditions_Wind_default_instance_;
    new (ptr) ::sim_msg::EnvironmentalConditions_Wind();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::EnvironmentalConditions_Wind::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Wind_environment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_Wind_environment_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_environment_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_environment_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_environment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_environment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Precipitation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Precipitation, intensity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Precipitation, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Fog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Fog, visibility_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_TimeOfDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_TimeOfDay, seconds_since_midnight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_CloudLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_CloudLayer, fractional_cloud_cover_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Wind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Wind, origin_direction_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Wind, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Sun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Sun, azimuth_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Sun, elevation_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions_Sun, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, header_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, ambient_illumination_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, unix_timestamp_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, atmospheric_pressure_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, temperature_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, relative_humidity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, precipitation_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, fog_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, clouds_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, wind_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, sun_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::EnvironmentalConditions, temperature_c_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::EnvironmentalConditions_Precipitation)},
  { 7, -1, sizeof(::sim_msg::EnvironmentalConditions_Fog)},
  { 13, -1, sizeof(::sim_msg::EnvironmentalConditions_TimeOfDay)},
  { 19, -1, sizeof(::sim_msg::EnvironmentalConditions_CloudLayer)},
  { 25, -1, sizeof(::sim_msg::EnvironmentalConditions_Wind)},
  { 32, -1, sizeof(::sim_msg::EnvironmentalConditions_Sun)},
  { 40, -1, sizeof(::sim_msg::EnvironmentalConditions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EnvironmentalConditions_Precipitation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EnvironmentalConditions_Fog_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EnvironmentalConditions_TimeOfDay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EnvironmentalConditions_CloudLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EnvironmentalConditions_Wind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EnvironmentalConditions_Sun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_EnvironmentalConditions_default_instance_),
};

const char descriptor_table_protodef_environment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021environment.proto\022\007sim_msg\032\014header.pro"
  "to\"\254\017\n\027EnvironmentalConditions\022\037\n\006header"
  "\030\001 \001(\0132\017.sim_msg.Header\022R\n\024ambient_illum"
  "ination\030\002 \001(\01624.sim_msg.EnvironmentalCon"
  "ditions.AmbientIllumination\022\?\n\013time_of_d"
  "ay\030\003 \001(\0132*.sim_msg.EnvironmentalConditio"
  "ns.TimeOfDay\022\026\n\016unix_timestamp\030\004 \001(\003\022\034\n\024"
  "atmospheric_pressure\030\005 \001(\001\022\023\n\013temperatur"
  "e\030\006 \001(\001\022\031\n\021relative_humidity\030\007 \001(\001\022E\n\rpr"
  "ecipitation\030\010 \001(\0132..sim_msg.Environmenta"
  "lConditions.Precipitation\0221\n\003fog\030\t \001(\0132$"
  ".sim_msg.EnvironmentalConditions.Fog\022;\n\006"
  "clouds\030\n \001(\0132+.sim_msg.EnvironmentalCond"
  "itions.CloudLayer\0223\n\004wind\030\013 \001(\0132%.sim_ms"
  "g.EnvironmentalConditions.Wind\0221\n\003sun\030\014 "
  "\001(\0132$.sim_msg.EnvironmentalConditions.Su"
  "n\022\025\n\rtemperature_c\030\r \001(\001\032\254\001\n\rPrecipitati"
  "on\022\021\n\tintensity\030\001 \001(\001\022A\n\004type\030\002 \001(\01623.si"
  "m_msg.EnvironmentalConditions.Precipitat"
  "ion.Type\"E\n\004Type\022\007\n\003DRY\020\000\022\010\n\004RAIN\020\001\022\010\n\004S"
  "NOW\020\002\022\010\n\004HAIL\020\003\022\013\n\007QRAUPEL\020\004\022\t\n\005OTHER\020\005\032"
  "\031\n\003Fog\022\022\n\nvisibility\030\001 \001(\001\032+\n\tTimeOfDay\022"
  "\036\n\026seconds_since_midnight\030\001 \001(\r\032\325\004\n\nClou"
  "dLayer\022`\n\026fractional_cloud_cover\030\001 \001(\0162@"
  ".sim_msg.EnvironmentalConditions.CloudLa"
  "yer.FractionalCloudCover\"\344\003\n\024FractionalC"
  "loudCover\022\"\n\036FRACTIONAL_CLOUD_COVER_UNKN"
  "OWN\020\000\022 \n\034FRACTIONAL_CLOUD_COVER_OTHER\020\001\022"
  "%\n!FRACTIONAL_CLOUD_COVER_ZERO_OKTAS\020\002\022$"
  "\n FRACTIONAL_CLOUD_COVER_ONE_OKTAS\020\003\022$\n "
  "FRACTIONAL_CLOUD_COVER_TWO_OKTAS\020\004\022&\n\"FR"
  "ACTIONAL_CLOUD_COVER_THREE_OKTAS\020\005\022%\n!FR"
  "ACTIONAL_CLOUD_COVER_FOUR_OKTAS\020\006\022%\n!FRA"
  "CTIONAL_CLOUD_COVER_FIVE_OKTAS\020\007\022$\n FRAC"
  "TIONAL_CLOUD_COVER_SIX_OKTAS\020\010\022&\n\"FRACTI"
  "ONAL_CLOUD_COVER_SEVEN_OKTAS\020\t\022&\n\"FRACTI"
  "ONAL_CLOUD_COVER_EIGHT_OKTAS\020\n\022\'\n#FRACTI"
  "ONAL_CLOUD_COVER_SKY_OBSCURED\020\013\032/\n\004Wind\022"
  "\030\n\020origin_direction\030\001 \001(\001\022\r\n\005speed\030\002 \001(\001"
  "\032<\n\003Sun\022\017\n\007azimuth\030\001 \001(\001\022\021\n\televation\030\002 "
  "\001(\001\022\021\n\tintensity\030\003 \001(\001\"\200\003\n\023AmbientIllumi"
  "nation\022 \n\034AMBIENT_ILLUMINATION_UNKNOWN\020\000"
  "\022\036\n\032AMBIENT_ILLUMINATION_OTHER\020\001\022\037\n\033AMBI"
  "ENT_ILLUMINATION_LEVEL1\020\002\022\037\n\033AMBIENT_ILL"
  "UMINATION_LEVEL2\020\003\022\037\n\033AMBIENT_ILLUMINATI"
  "ON_LEVEL3\020\004\022\037\n\033AMBIENT_ILLUMINATION_LEVE"
  "L4\020\005\022\037\n\033AMBIENT_ILLUMINATION_LEVEL5\020\006\022\037\n"
  "\033AMBIENT_ILLUMINATION_LEVEL6\020\007\022\037\n\033AMBIEN"
  "T_ILLUMINATION_LEVEL7\020\010\022\037\n\033AMBIENT_ILLUM"
  "INATION_LEVEL8\020\t\022\037\n\033AMBIENT_ILLUMINATION"
  "_LEVEL9\020\nb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_environment_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_environment_2eproto_sccs[7] = {
  &scc_info_EnvironmentalConditions_environment_2eproto.base,
  &scc_info_EnvironmentalConditions_CloudLayer_environment_2eproto.base,
  &scc_info_EnvironmentalConditions_Fog_environment_2eproto.base,
  &scc_info_EnvironmentalConditions_Precipitation_environment_2eproto.base,
  &scc_info_EnvironmentalConditions_Sun_environment_2eproto.base,
  &scc_info_EnvironmentalConditions_TimeOfDay_environment_2eproto.base,
  &scc_info_EnvironmentalConditions_Wind_environment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_environment_2eproto_once;
static bool descriptor_table_environment_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_environment_2eproto = {
  &descriptor_table_environment_2eproto_initialized, descriptor_table_protodef_environment_2eproto, "environment.proto", 2017,
  &descriptor_table_environment_2eproto_once, descriptor_table_environment_2eproto_sccs, descriptor_table_environment_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_environment_2eproto::offsets,
  file_level_metadata_environment_2eproto, 7, file_level_enum_descriptors_environment_2eproto, file_level_service_descriptors_environment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_environment_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_environment_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Precipitation_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_environment_2eproto);
  return file_level_enum_descriptors_environment_2eproto[0];
}
bool EnvironmentalConditions_Precipitation_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::DRY;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::RAIN;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::SNOW;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::HAIL;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::QRAUPEL;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::OTHER;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::Type_MIN;
constexpr EnvironmentalConditions_Precipitation_Type EnvironmentalConditions_Precipitation::Type_MAX;
constexpr int EnvironmentalConditions_Precipitation::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_environment_2eproto);
  return file_level_enum_descriptors_environment_2eproto[1];
}
bool EnvironmentalConditions_CloudLayer_FractionalCloudCover_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_UNKNOWN;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_OTHER;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_ZERO_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_ONE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_TWO_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_THREE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_FOUR_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_FIVE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SIX_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SEVEN_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_EIGHT_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SKY_OBSCURED;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FractionalCloudCover_MIN;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FractionalCloudCover_MAX;
constexpr int EnvironmentalConditions_CloudLayer::FractionalCloudCover_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_environment_2eproto);
  return file_level_enum_descriptors_environment_2eproto[2];
}
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_UNKNOWN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_OTHER;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL1;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL2;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL3;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL4;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL5;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL6;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL7;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL8;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL9;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MIN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MAX;
constexpr int EnvironmentalConditions::AmbientIllumination_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void EnvironmentalConditions_Precipitation::InitAsDefaultInstance() {
}
class EnvironmentalConditions_Precipitation::_Internal {
 public:
};

EnvironmentalConditions_Precipitation::EnvironmentalConditions_Precipitation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EnvironmentalConditions.Precipitation)
}
EnvironmentalConditions_Precipitation::EnvironmentalConditions_Precipitation(const EnvironmentalConditions_Precipitation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&intensity_, &from.intensity_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&intensity_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.EnvironmentalConditions.Precipitation)
}

void EnvironmentalConditions_Precipitation::SharedCtor() {
  ::memset(&intensity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&intensity_)) + sizeof(type_));
}

EnvironmentalConditions_Precipitation::~EnvironmentalConditions_Precipitation() {
  // @@protoc_insertion_point(destructor:sim_msg.EnvironmentalConditions.Precipitation)
  SharedDtor();
}

void EnvironmentalConditions_Precipitation::SharedDtor() {
}

void EnvironmentalConditions_Precipitation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_Precipitation& EnvironmentalConditions_Precipitation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_Precipitation_environment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_Precipitation::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EnvironmentalConditions.Precipitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&intensity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&intensity_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_Precipitation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double intensity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.Precipitation.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::sim_msg::EnvironmentalConditions_Precipitation_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_Precipitation::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EnvironmentalConditions.Precipitation)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double intensity = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.Precipitation.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sim_msg::EnvironmentalConditions_Precipitation_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EnvironmentalConditions.Precipitation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EnvironmentalConditions.Precipitation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_Precipitation::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EnvironmentalConditions.Precipitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double intensity = 1;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->intensity(), output);
  }

  // .sim_msg.EnvironmentalConditions.Precipitation.Type type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EnvironmentalConditions.Precipitation)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_Precipitation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EnvironmentalConditions.Precipitation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double intensity = 1;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->intensity(), target);
  }

  // .sim_msg.EnvironmentalConditions.Precipitation.Type type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EnvironmentalConditions.Precipitation)
  return target;
}

size_t EnvironmentalConditions_Precipitation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EnvironmentalConditions.Precipitation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double intensity = 1;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.EnvironmentalConditions.Precipitation.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_Precipitation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EnvironmentalConditions.Precipitation)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_Precipitation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_Precipitation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EnvironmentalConditions.Precipitation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EnvironmentalConditions.Precipitation)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_Precipitation::MergeFrom(const EnvironmentalConditions_Precipitation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EnvironmentalConditions.Precipitation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    set_intensity(from.intensity());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void EnvironmentalConditions_Precipitation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EnvironmentalConditions.Precipitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_Precipitation::CopyFrom(const EnvironmentalConditions_Precipitation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EnvironmentalConditions.Precipitation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Precipitation::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Precipitation::InternalSwap(EnvironmentalConditions_Precipitation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(intensity_, other->intensity_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Precipitation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_Fog::InitAsDefaultInstance() {
}
class EnvironmentalConditions_Fog::_Internal {
 public:
};

EnvironmentalConditions_Fog::EnvironmentalConditions_Fog()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EnvironmentalConditions.Fog)
}
EnvironmentalConditions_Fog::EnvironmentalConditions_Fog(const EnvironmentalConditions_Fog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  visibility_ = from.visibility_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.EnvironmentalConditions.Fog)
}

void EnvironmentalConditions_Fog::SharedCtor() {
  visibility_ = 0;
}

EnvironmentalConditions_Fog::~EnvironmentalConditions_Fog() {
  // @@protoc_insertion_point(destructor:sim_msg.EnvironmentalConditions.Fog)
  SharedDtor();
}

void EnvironmentalConditions_Fog::SharedDtor() {
}

void EnvironmentalConditions_Fog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_Fog& EnvironmentalConditions_Fog::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_Fog_environment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_Fog::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EnvironmentalConditions.Fog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visibility_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_Fog::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double visibility = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_Fog::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EnvironmentalConditions.Fog)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double visibility = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &visibility_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EnvironmentalConditions.Fog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EnvironmentalConditions.Fog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_Fog::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EnvironmentalConditions.Fog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double visibility = 1;
  if (!(this->visibility() <= 0 && this->visibility() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->visibility(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EnvironmentalConditions.Fog)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_Fog::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EnvironmentalConditions.Fog)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double visibility = 1;
  if (!(this->visibility() <= 0 && this->visibility() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->visibility(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EnvironmentalConditions.Fog)
  return target;
}

size_t EnvironmentalConditions_Fog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EnvironmentalConditions.Fog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double visibility = 1;
  if (!(this->visibility() <= 0 && this->visibility() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_Fog::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EnvironmentalConditions.Fog)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_Fog* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_Fog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EnvironmentalConditions.Fog)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EnvironmentalConditions.Fog)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_Fog::MergeFrom(const EnvironmentalConditions_Fog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EnvironmentalConditions.Fog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.visibility() <= 0 && from.visibility() >= 0)) {
    set_visibility(from.visibility());
  }
}

void EnvironmentalConditions_Fog::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EnvironmentalConditions.Fog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_Fog::CopyFrom(const EnvironmentalConditions_Fog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EnvironmentalConditions.Fog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Fog::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Fog::InternalSwap(EnvironmentalConditions_Fog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(visibility_, other->visibility_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Fog::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_TimeOfDay::InitAsDefaultInstance() {
}
class EnvironmentalConditions_TimeOfDay::_Internal {
 public:
};

EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EnvironmentalConditions.TimeOfDay)
}
EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seconds_since_midnight_ = from.seconds_since_midnight_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.EnvironmentalConditions.TimeOfDay)
}

void EnvironmentalConditions_TimeOfDay::SharedCtor() {
  seconds_since_midnight_ = 0u;
}

EnvironmentalConditions_TimeOfDay::~EnvironmentalConditions_TimeOfDay() {
  // @@protoc_insertion_point(destructor:sim_msg.EnvironmentalConditions.TimeOfDay)
  SharedDtor();
}

void EnvironmentalConditions_TimeOfDay::SharedDtor() {
}

void EnvironmentalConditions_TimeOfDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_TimeOfDay& EnvironmentalConditions_TimeOfDay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_TimeOfDay_environment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_since_midnight_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_TimeOfDay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seconds_since_midnight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seconds_since_midnight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_TimeOfDay::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seconds_since_midnight = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_since_midnight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EnvironmentalConditions.TimeOfDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EnvironmentalConditions.TimeOfDay)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_TimeOfDay::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->seconds_since_midnight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EnvironmentalConditions.TimeOfDay)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_TimeOfDay::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds_since_midnight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EnvironmentalConditions.TimeOfDay)
  return target;
}

size_t EnvironmentalConditions_TimeOfDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->seconds_since_midnight());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_TimeOfDay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_TimeOfDay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EnvironmentalConditions.TimeOfDay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EnvironmentalConditions.TimeOfDay)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds_since_midnight() != 0) {
    set_seconds_since_midnight(from.seconds_since_midnight());
  }
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_TimeOfDay::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_TimeOfDay::InternalSwap(EnvironmentalConditions_TimeOfDay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(seconds_since_midnight_, other->seconds_since_midnight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_TimeOfDay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_CloudLayer::InitAsDefaultInstance() {
}
class EnvironmentalConditions_CloudLayer::_Internal {
 public:
};

EnvironmentalConditions_CloudLayer::EnvironmentalConditions_CloudLayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EnvironmentalConditions.CloudLayer)
}
EnvironmentalConditions_CloudLayer::EnvironmentalConditions_CloudLayer(const EnvironmentalConditions_CloudLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fractional_cloud_cover_ = from.fractional_cloud_cover_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.EnvironmentalConditions.CloudLayer)
}

void EnvironmentalConditions_CloudLayer::SharedCtor() {
  fractional_cloud_cover_ = 0;
}

EnvironmentalConditions_CloudLayer::~EnvironmentalConditions_CloudLayer() {
  // @@protoc_insertion_point(destructor:sim_msg.EnvironmentalConditions.CloudLayer)
  SharedDtor();
}

void EnvironmentalConditions_CloudLayer::SharedDtor() {
}

void EnvironmentalConditions_CloudLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_CloudLayer& EnvironmentalConditions_CloudLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_CloudLayer_environment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_CloudLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EnvironmentalConditions.CloudLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fractional_cloud_cover_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_CloudLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_fractional_cloud_cover(static_cast<::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_CloudLayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EnvironmentalConditions.CloudLayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fractional_cloud_cover(static_cast< ::sim_msg::EnvironmentalConditions_CloudLayer_FractionalCloudCover >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EnvironmentalConditions.CloudLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EnvironmentalConditions.CloudLayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_CloudLayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EnvironmentalConditions.CloudLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  if (this->fractional_cloud_cover() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->fractional_cloud_cover(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EnvironmentalConditions.CloudLayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_CloudLayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EnvironmentalConditions.CloudLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  if (this->fractional_cloud_cover() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->fractional_cloud_cover(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EnvironmentalConditions.CloudLayer)
  return target;
}

size_t EnvironmentalConditions_CloudLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EnvironmentalConditions.CloudLayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  if (this->fractional_cloud_cover() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fractional_cloud_cover());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_CloudLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EnvironmentalConditions.CloudLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_CloudLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_CloudLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EnvironmentalConditions.CloudLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EnvironmentalConditions.CloudLayer)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_CloudLayer::MergeFrom(const EnvironmentalConditions_CloudLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EnvironmentalConditions.CloudLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fractional_cloud_cover() != 0) {
    set_fractional_cloud_cover(from.fractional_cloud_cover());
  }
}

void EnvironmentalConditions_CloudLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EnvironmentalConditions.CloudLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_CloudLayer::CopyFrom(const EnvironmentalConditions_CloudLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EnvironmentalConditions.CloudLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_CloudLayer::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_CloudLayer::InternalSwap(EnvironmentalConditions_CloudLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fractional_cloud_cover_, other->fractional_cloud_cover_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_CloudLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_Wind::InitAsDefaultInstance() {
}
class EnvironmentalConditions_Wind::_Internal {
 public:
};

EnvironmentalConditions_Wind::EnvironmentalConditions_Wind()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EnvironmentalConditions.Wind)
}
EnvironmentalConditions_Wind::EnvironmentalConditions_Wind(const EnvironmentalConditions_Wind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&origin_direction_, &from.origin_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&origin_direction_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.EnvironmentalConditions.Wind)
}

void EnvironmentalConditions_Wind::SharedCtor() {
  ::memset(&origin_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&origin_direction_)) + sizeof(speed_));
}

EnvironmentalConditions_Wind::~EnvironmentalConditions_Wind() {
  // @@protoc_insertion_point(destructor:sim_msg.EnvironmentalConditions.Wind)
  SharedDtor();
}

void EnvironmentalConditions_Wind::SharedDtor() {
}

void EnvironmentalConditions_Wind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_Wind& EnvironmentalConditions_Wind::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_Wind_environment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_Wind::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EnvironmentalConditions.Wind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&origin_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&origin_direction_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_Wind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double origin_direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          origin_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_Wind::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EnvironmentalConditions.Wind)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double origin_direction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EnvironmentalConditions.Wind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EnvironmentalConditions.Wind)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_Wind::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EnvironmentalConditions.Wind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double origin_direction = 1;
  if (!(this->origin_direction() <= 0 && this->origin_direction() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->origin_direction(), output);
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EnvironmentalConditions.Wind)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_Wind::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EnvironmentalConditions.Wind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double origin_direction = 1;
  if (!(this->origin_direction() <= 0 && this->origin_direction() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->origin_direction(), target);
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EnvironmentalConditions.Wind)
  return target;
}

size_t EnvironmentalConditions_Wind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EnvironmentalConditions.Wind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double origin_direction = 1;
  if (!(this->origin_direction() <= 0 && this->origin_direction() >= 0)) {
    total_size += 1 + 8;
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_Wind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EnvironmentalConditions.Wind)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_Wind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_Wind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EnvironmentalConditions.Wind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EnvironmentalConditions.Wind)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_Wind::MergeFrom(const EnvironmentalConditions_Wind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EnvironmentalConditions.Wind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.origin_direction() <= 0 && from.origin_direction() >= 0)) {
    set_origin_direction(from.origin_direction());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
}

void EnvironmentalConditions_Wind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EnvironmentalConditions.Wind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_Wind::CopyFrom(const EnvironmentalConditions_Wind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EnvironmentalConditions.Wind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Wind::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Wind::InternalSwap(EnvironmentalConditions_Wind* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(origin_direction_, other->origin_direction_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Wind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_Sun::InitAsDefaultInstance() {
}
class EnvironmentalConditions_Sun::_Internal {
 public:
};

EnvironmentalConditions_Sun::EnvironmentalConditions_Sun()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EnvironmentalConditions.Sun)
}
EnvironmentalConditions_Sun::EnvironmentalConditions_Sun(const EnvironmentalConditions_Sun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(intensity_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.EnvironmentalConditions.Sun)
}

void EnvironmentalConditions_Sun::SharedCtor() {
  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(intensity_));
}

EnvironmentalConditions_Sun::~EnvironmentalConditions_Sun() {
  // @@protoc_insertion_point(destructor:sim_msg.EnvironmentalConditions.Sun)
  SharedDtor();
}

void EnvironmentalConditions_Sun::SharedDtor() {
}

void EnvironmentalConditions_Sun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_Sun& EnvironmentalConditions_Sun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_Sun_environment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_Sun::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EnvironmentalConditions.Sun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(intensity_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_Sun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double elevation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double intensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_Sun::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EnvironmentalConditions.Sun)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double azimuth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double elevation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double intensity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EnvironmentalConditions.Sun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EnvironmentalConditions.Sun)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_Sun::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EnvironmentalConditions.Sun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->azimuth(), output);
  }

  // double elevation = 2;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->elevation(), output);
  }

  // double intensity = 3;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->intensity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EnvironmentalConditions.Sun)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_Sun::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EnvironmentalConditions.Sun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->azimuth(), target);
  }

  // double elevation = 2;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->elevation(), target);
  }

  // double intensity = 3;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->intensity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EnvironmentalConditions.Sun)
  return target;
}

size_t EnvironmentalConditions_Sun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EnvironmentalConditions.Sun)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 1 + 8;
  }

  // double elevation = 2;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    total_size += 1 + 8;
  }

  // double intensity = 3;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_Sun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EnvironmentalConditions.Sun)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_Sun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_Sun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EnvironmentalConditions.Sun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EnvironmentalConditions.Sun)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_Sun::MergeFrom(const EnvironmentalConditions_Sun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EnvironmentalConditions.Sun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    set_azimuth(from.azimuth());
  }
  if (!(from.elevation() <= 0 && from.elevation() >= 0)) {
    set_elevation(from.elevation());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    set_intensity(from.intensity());
  }
}

void EnvironmentalConditions_Sun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EnvironmentalConditions.Sun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_Sun::CopyFrom(const EnvironmentalConditions_Sun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EnvironmentalConditions.Sun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Sun::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Sun::InternalSwap(EnvironmentalConditions_Sun* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(azimuth_, other->azimuth_);
  swap(elevation_, other->elevation_);
  swap(intensity_, other->intensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Sun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions::InitAsDefaultInstance() {
  ::sim_msg::_EnvironmentalConditions_default_instance_._instance.get_mutable()->header_ = const_cast< ::sim_msg::Header*>(
      ::sim_msg::Header::internal_default_instance());
  ::sim_msg::_EnvironmentalConditions_default_instance_._instance.get_mutable()->time_of_day_ = const_cast< ::sim_msg::EnvironmentalConditions_TimeOfDay*>(
      ::sim_msg::EnvironmentalConditions_TimeOfDay::internal_default_instance());
  ::sim_msg::_EnvironmentalConditions_default_instance_._instance.get_mutable()->precipitation_ = const_cast< ::sim_msg::EnvironmentalConditions_Precipitation*>(
      ::sim_msg::EnvironmentalConditions_Precipitation::internal_default_instance());
  ::sim_msg::_EnvironmentalConditions_default_instance_._instance.get_mutable()->fog_ = const_cast< ::sim_msg::EnvironmentalConditions_Fog*>(
      ::sim_msg::EnvironmentalConditions_Fog::internal_default_instance());
  ::sim_msg::_EnvironmentalConditions_default_instance_._instance.get_mutable()->clouds_ = const_cast< ::sim_msg::EnvironmentalConditions_CloudLayer*>(
      ::sim_msg::EnvironmentalConditions_CloudLayer::internal_default_instance());
  ::sim_msg::_EnvironmentalConditions_default_instance_._instance.get_mutable()->wind_ = const_cast< ::sim_msg::EnvironmentalConditions_Wind*>(
      ::sim_msg::EnvironmentalConditions_Wind::internal_default_instance());
  ::sim_msg::_EnvironmentalConditions_default_instance_._instance.get_mutable()->sun_ = const_cast< ::sim_msg::EnvironmentalConditions_Sun*>(
      ::sim_msg::EnvironmentalConditions_Sun::internal_default_instance());
}
class EnvironmentalConditions::_Internal {
 public:
  static const ::sim_msg::Header& header(const EnvironmentalConditions* msg);
  static const ::sim_msg::EnvironmentalConditions_TimeOfDay& time_of_day(const EnvironmentalConditions* msg);
  static const ::sim_msg::EnvironmentalConditions_Precipitation& precipitation(const EnvironmentalConditions* msg);
  static const ::sim_msg::EnvironmentalConditions_Fog& fog(const EnvironmentalConditions* msg);
  static const ::sim_msg::EnvironmentalConditions_CloudLayer& clouds(const EnvironmentalConditions* msg);
  static const ::sim_msg::EnvironmentalConditions_Wind& wind(const EnvironmentalConditions* msg);
  static const ::sim_msg::EnvironmentalConditions_Sun& sun(const EnvironmentalConditions* msg);
};

const ::sim_msg::Header&
EnvironmentalConditions::_Internal::header(const EnvironmentalConditions* msg) {
  return *msg->header_;
}
const ::sim_msg::EnvironmentalConditions_TimeOfDay&
EnvironmentalConditions::_Internal::time_of_day(const EnvironmentalConditions* msg) {
  return *msg->time_of_day_;
}
const ::sim_msg::EnvironmentalConditions_Precipitation&
EnvironmentalConditions::_Internal::precipitation(const EnvironmentalConditions* msg) {
  return *msg->precipitation_;
}
const ::sim_msg::EnvironmentalConditions_Fog&
EnvironmentalConditions::_Internal::fog(const EnvironmentalConditions* msg) {
  return *msg->fog_;
}
const ::sim_msg::EnvironmentalConditions_CloudLayer&
EnvironmentalConditions::_Internal::clouds(const EnvironmentalConditions* msg) {
  return *msg->clouds_;
}
const ::sim_msg::EnvironmentalConditions_Wind&
EnvironmentalConditions::_Internal::wind(const EnvironmentalConditions* msg) {
  return *msg->wind_;
}
const ::sim_msg::EnvironmentalConditions_Sun&
EnvironmentalConditions::_Internal::sun(const EnvironmentalConditions* msg) {
  return *msg->sun_;
}
void EnvironmentalConditions::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
EnvironmentalConditions::EnvironmentalConditions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.EnvironmentalConditions)
}
EnvironmentalConditions::EnvironmentalConditions(const EnvironmentalConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::sim_msg::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_time_of_day()) {
    time_of_day_ = new ::sim_msg::EnvironmentalConditions_TimeOfDay(*from.time_of_day_);
  } else {
    time_of_day_ = nullptr;
  }
  if (from.has_precipitation()) {
    precipitation_ = new ::sim_msg::EnvironmentalConditions_Precipitation(*from.precipitation_);
  } else {
    precipitation_ = nullptr;
  }
  if (from.has_fog()) {
    fog_ = new ::sim_msg::EnvironmentalConditions_Fog(*from.fog_);
  } else {
    fog_ = nullptr;
  }
  if (from.has_clouds()) {
    clouds_ = new ::sim_msg::EnvironmentalConditions_CloudLayer(*from.clouds_);
  } else {
    clouds_ = nullptr;
  }
  if (from.has_wind()) {
    wind_ = new ::sim_msg::EnvironmentalConditions_Wind(*from.wind_);
  } else {
    wind_ = nullptr;
  }
  if (from.has_sun()) {
    sun_ = new ::sim_msg::EnvironmentalConditions_Sun(*from.sun_);
  } else {
    sun_ = nullptr;
  }
  ::memcpy(&unix_timestamp_, &from.unix_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&ambient_illumination_) -
    reinterpret_cast<char*>(&unix_timestamp_)) + sizeof(ambient_illumination_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.EnvironmentalConditions)
}

void EnvironmentalConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentalConditions_environment_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ambient_illumination_) -
      reinterpret_cast<char*>(&header_)) + sizeof(ambient_illumination_));
}

EnvironmentalConditions::~EnvironmentalConditions() {
  // @@protoc_insertion_point(destructor:sim_msg.EnvironmentalConditions)
  SharedDtor();
}

void EnvironmentalConditions::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete time_of_day_;
  if (this != internal_default_instance()) delete precipitation_;
  if (this != internal_default_instance()) delete fog_;
  if (this != internal_default_instance()) delete clouds_;
  if (this != internal_default_instance()) delete wind_;
  if (this != internal_default_instance()) delete sun_;
}

void EnvironmentalConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions& EnvironmentalConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_environment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && time_of_day_ != nullptr) {
    delete time_of_day_;
  }
  time_of_day_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && precipitation_ != nullptr) {
    delete precipitation_;
  }
  precipitation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && fog_ != nullptr) {
    delete fog_;
  }
  fog_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clouds_ != nullptr) {
    delete clouds_;
  }
  clouds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wind_ != nullptr) {
    delete wind_;
  }
  wind_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sun_ != nullptr) {
    delete sun_;
  }
  sun_ = nullptr;
  ::memset(&unix_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ambient_illumination_) -
      reinterpret_cast<char*>(&unix_timestamp_)) + sizeof(ambient_illumination_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.AmbientIllumination ambient_illumination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ambient_illumination(static_cast<::sim_msg::EnvironmentalConditions_AmbientIllumination>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.TimeOfDay time_of_day = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_time_of_day(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unix_timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          unix_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double atmospheric_pressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          atmospheric_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double temperature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double relative_humidity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          relative_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.Precipitation precipitation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_precipitation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.Fog fog = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_fog(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.CloudLayer clouds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_clouds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.Wind wind = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_wind(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.EnvironmentalConditions.Sun sun = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_sun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double temperature_c = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          temperature_c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.EnvironmentalConditions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Header header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.AmbientIllumination ambient_illumination = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ambient_illumination(static_cast< ::sim_msg::EnvironmentalConditions_AmbientIllumination >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.TimeOfDay time_of_day = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_of_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unix_timestamp = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unix_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double atmospheric_pressure = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atmospheric_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double relative_humidity = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_humidity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.Precipitation precipitation = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_precipitation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.Fog fog = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fog()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.CloudLayer clouds = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clouds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.Wind wind = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.EnvironmentalConditions.Sun sun = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sun()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature_c = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (105 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.EnvironmentalConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.EnvironmentalConditions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .sim_msg.EnvironmentalConditions.AmbientIllumination ambient_illumination = 2;
  if (this->ambient_illumination() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ambient_illumination(), output);
  }

  // .sim_msg.EnvironmentalConditions.TimeOfDay time_of_day = 3;
  if (this->has_time_of_day()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::time_of_day(this), output);
  }

  // int64 unix_timestamp = 4;
  if (this->unix_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->unix_timestamp(), output);
  }

  // double atmospheric_pressure = 5;
  if (!(this->atmospheric_pressure() <= 0 && this->atmospheric_pressure() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->atmospheric_pressure(), output);
  }

  // double temperature = 6;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->temperature(), output);
  }

  // double relative_humidity = 7;
  if (!(this->relative_humidity() <= 0 && this->relative_humidity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->relative_humidity(), output);
  }

  // .sim_msg.EnvironmentalConditions.Precipitation precipitation = 8;
  if (this->has_precipitation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::precipitation(this), output);
  }

  // .sim_msg.EnvironmentalConditions.Fog fog = 9;
  if (this->has_fog()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::fog(this), output);
  }

  // .sim_msg.EnvironmentalConditions.CloudLayer clouds = 10;
  if (this->has_clouds()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::clouds(this), output);
  }

  // .sim_msg.EnvironmentalConditions.Wind wind = 11;
  if (this->has_wind()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::wind(this), output);
  }

  // .sim_msg.EnvironmentalConditions.Sun sun = 12;
  if (this->has_sun()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::sun(this), output);
  }

  // double temperature_c = 13;
  if (!(this->temperature_c() <= 0 && this->temperature_c() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(13, this->temperature_c(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.EnvironmentalConditions)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .sim_msg.EnvironmentalConditions.AmbientIllumination ambient_illumination = 2;
  if (this->ambient_illumination() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ambient_illumination(), target);
  }

  // .sim_msg.EnvironmentalConditions.TimeOfDay time_of_day = 3;
  if (this->has_time_of_day()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::time_of_day(this), target);
  }

  // int64 unix_timestamp = 4;
  if (this->unix_timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->unix_timestamp(), target);
  }

  // double atmospheric_pressure = 5;
  if (!(this->atmospheric_pressure() <= 0 && this->atmospheric_pressure() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->atmospheric_pressure(), target);
  }

  // double temperature = 6;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->temperature(), target);
  }

  // double relative_humidity = 7;
  if (!(this->relative_humidity() <= 0 && this->relative_humidity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->relative_humidity(), target);
  }

  // .sim_msg.EnvironmentalConditions.Precipitation precipitation = 8;
  if (this->has_precipitation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::precipitation(this), target);
  }

  // .sim_msg.EnvironmentalConditions.Fog fog = 9;
  if (this->has_fog()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::fog(this), target);
  }

  // .sim_msg.EnvironmentalConditions.CloudLayer clouds = 10;
  if (this->has_clouds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::clouds(this), target);
  }

  // .sim_msg.EnvironmentalConditions.Wind wind = 11;
  if (this->has_wind()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::wind(this), target);
  }

  // .sim_msg.EnvironmentalConditions.Sun sun = 12;
  if (this->has_sun()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::sun(this), target);
  }

  // double temperature_c = 13;
  if (!(this->temperature_c() <= 0 && this->temperature_c() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->temperature_c(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.EnvironmentalConditions)
  return target;
}

size_t EnvironmentalConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.EnvironmentalConditions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .sim_msg.EnvironmentalConditions.TimeOfDay time_of_day = 3;
  if (this->has_time_of_day()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_of_day_);
  }

  // .sim_msg.EnvironmentalConditions.Precipitation precipitation = 8;
  if (this->has_precipitation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *precipitation_);
  }

  // .sim_msg.EnvironmentalConditions.Fog fog = 9;
  if (this->has_fog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fog_);
  }

  // .sim_msg.EnvironmentalConditions.CloudLayer clouds = 10;
  if (this->has_clouds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clouds_);
  }

  // .sim_msg.EnvironmentalConditions.Wind wind = 11;
  if (this->has_wind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wind_);
  }

  // .sim_msg.EnvironmentalConditions.Sun sun = 12;
  if (this->has_sun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sun_);
  }

  // int64 unix_timestamp = 4;
  if (this->unix_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->unix_timestamp());
  }

  // double atmospheric_pressure = 5;
  if (!(this->atmospheric_pressure() <= 0 && this->atmospheric_pressure() >= 0)) {
    total_size += 1 + 8;
  }

  // double temperature = 6;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 8;
  }

  // double relative_humidity = 7;
  if (!(this->relative_humidity() <= 0 && this->relative_humidity() >= 0)) {
    total_size += 1 + 8;
  }

  // double temperature_c = 13;
  if (!(this->temperature_c() <= 0 && this->temperature_c() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.EnvironmentalConditions.AmbientIllumination ambient_illumination = 2;
  if (this->ambient_illumination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ambient_illumination());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.EnvironmentalConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.EnvironmentalConditions)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions::MergeFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::sim_msg::Header::MergeFrom(from.header());
  }
  if (from.has_time_of_day()) {
    mutable_time_of_day()->::sim_msg::EnvironmentalConditions_TimeOfDay::MergeFrom(from.time_of_day());
  }
  if (from.has_precipitation()) {
    mutable_precipitation()->::sim_msg::EnvironmentalConditions_Precipitation::MergeFrom(from.precipitation());
  }
  if (from.has_fog()) {
    mutable_fog()->::sim_msg::EnvironmentalConditions_Fog::MergeFrom(from.fog());
  }
  if (from.has_clouds()) {
    mutable_clouds()->::sim_msg::EnvironmentalConditions_CloudLayer::MergeFrom(from.clouds());
  }
  if (from.has_wind()) {
    mutable_wind()->::sim_msg::EnvironmentalConditions_Wind::MergeFrom(from.wind());
  }
  if (from.has_sun()) {
    mutable_sun()->::sim_msg::EnvironmentalConditions_Sun::MergeFrom(from.sun());
  }
  if (from.unix_timestamp() != 0) {
    set_unix_timestamp(from.unix_timestamp());
  }
  if (!(from.atmospheric_pressure() <= 0 && from.atmospheric_pressure() >= 0)) {
    set_atmospheric_pressure(from.atmospheric_pressure());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    set_temperature(from.temperature());
  }
  if (!(from.relative_humidity() <= 0 && from.relative_humidity() >= 0)) {
    set_relative_humidity(from.relative_humidity());
  }
  if (!(from.temperature_c() <= 0 && from.temperature_c() >= 0)) {
    set_temperature_c(from.temperature_c());
  }
  if (from.ambient_illumination() != 0) {
    set_ambient_illumination(from.ambient_illumination());
  }
}

void EnvironmentalConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions::CopyFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions::IsInitialized() const {
  return true;
}

void EnvironmentalConditions::InternalSwap(EnvironmentalConditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(time_of_day_, other->time_of_day_);
  swap(precipitation_, other->precipitation_);
  swap(fog_, other->fog_);
  swap(clouds_, other->clouds_);
  swap(wind_, other->wind_);
  swap(sun_, other->sun_);
  swap(unix_timestamp_, other->unix_timestamp_);
  swap(atmospheric_pressure_, other->atmospheric_pressure_);
  swap(temperature_, other->temperature_);
  swap(relative_humidity_, other->relative_humidity_);
  swap(temperature_c_, other->temperature_c_);
  swap(ambient_illumination_, other->ambient_illumination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::EnvironmentalConditions_Precipitation* Arena::CreateMaybeMessage< ::sim_msg::EnvironmentalConditions_Precipitation >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EnvironmentalConditions_Precipitation >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::EnvironmentalConditions_Fog* Arena::CreateMaybeMessage< ::sim_msg::EnvironmentalConditions_Fog >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EnvironmentalConditions_Fog >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::EnvironmentalConditions_TimeOfDay* Arena::CreateMaybeMessage< ::sim_msg::EnvironmentalConditions_TimeOfDay >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EnvironmentalConditions_TimeOfDay >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::EnvironmentalConditions_CloudLayer* Arena::CreateMaybeMessage< ::sim_msg::EnvironmentalConditions_CloudLayer >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EnvironmentalConditions_CloudLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::EnvironmentalConditions_Wind* Arena::CreateMaybeMessage< ::sim_msg::EnvironmentalConditions_Wind >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EnvironmentalConditions_Wind >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::EnvironmentalConditions_Sun* Arena::CreateMaybeMessage< ::sim_msg::EnvironmentalConditions_Sun >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EnvironmentalConditions_Sun >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::EnvironmentalConditions* Arena::CreateMaybeMessage< ::sim_msg::EnvironmentalConditions >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::EnvironmentalConditions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
