// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grading.proto
#pragma warning (disable : 4125)
#include "grading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Acceleration_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Algorithm_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_CarExpData_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Collision_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Control_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_DistHeadway_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_EventDetector_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_EventDetector_DetectedEvent_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_EventDetector_DetectedEventsEntry_DoNotUse_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_ExpData_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Lane_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Planning_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Speed_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Statistics_CustomDetail_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Statistics_Detail_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Statistics_DetailItem_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_TimeHeadway_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_TimeStamp_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_grading_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_TrafficLight_grading_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
namespace sim_msg {
class Grading_TimeStampDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_TimeStamp> _instance;
} _Grading_TimeStamp_default_instance_;
class Grading_SpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Speed> _instance;
} _Grading_Speed_default_instance_;
class Grading_AccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Acceleration> _instance;
} _Grading_Acceleration_default_instance_;
class Grading_CollisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Collision> _instance;
} _Grading_Collision_default_instance_;
class Grading_TimeHeadwayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_TimeHeadway> _instance;
} _Grading_TimeHeadway_default_instance_;
class Grading_DistHeadwayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_DistHeadway> _instance;
} _Grading_DistHeadway_default_instance_;
class Grading_AlgorithmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Algorithm> _instance;
} _Grading_Algorithm_default_instance_;
class Grading_LaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Lane> _instance;
} _Grading_Lane_default_instance_;
class Grading_TrafficLightDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_TrafficLight> _instance;
} _Grading_TrafficLight_default_instance_;
class Grading_ControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Control> _instance;
} _Grading_Control_default_instance_;
class Grading_PlanningDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Planning> _instance;
} _Grading_Planning_default_instance_;
class Grading_CarExpDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_CarExpData> _instance;
} _Grading_CarExpData_default_instance_;
class Grading_ExpDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_ExpData> _instance;
} _Grading_ExpData_default_instance_;
class Grading_Statistics_DetailItemDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Statistics_DetailItem> _instance;
} _Grading_Statistics_DetailItem_default_instance_;
class Grading_Statistics_DetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Statistics_Detail> _instance;
} _Grading_Statistics_Detail_default_instance_;
class Grading_Statistics_CustomDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Statistics_CustomDetail> _instance;
} _Grading_Statistics_CustomDetail_default_instance_;
class Grading_StatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_Statistics> _instance;
} _Grading_Statistics_default_instance_;
class Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse> _instance;
} _Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_default_instance_;
class Grading_EventDetector_DetectedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_EventDetector_DetectedEvent> _instance;
} _Grading_EventDetector_DetectedEvent_default_instance_;
class Grading_EventDetector_DetectedEventsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_EventDetector_DetectedEventsEntry_DoNotUse> _instance;
} _Grading_EventDetector_DetectedEventsEntry_DoNotUse_default_instance_;
class Grading_EventDetectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading_EventDetector> _instance;
} _Grading_EventDetector_default_instance_;
class GradingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grading> _instance;
} _Grading_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Grading_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_default_instance_;
    new (ptr) ::sim_msg::Grading();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_Grading_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, InitDefaultsscc_info_Grading_grading_2eproto}, {
      &scc_info_Grading_Speed_grading_2eproto.base,
      &scc_info_Grading_Acceleration_grading_2eproto.base,
      &scc_info_Grading_Collision_grading_2eproto.base,
      &scc_info_Grading_TimeHeadway_grading_2eproto.base,
      &scc_info_Grading_Algorithm_grading_2eproto.base,
      &scc_info_Grading_Lane_grading_2eproto.base,
      &scc_info_Grading_TrafficLight_grading_2eproto.base,
      &scc_info_Grading_TimeStamp_grading_2eproto.base,
      &scc_info_Grading_ExpData_grading_2eproto.base,
      &scc_info_Grading_DistHeadway_grading_2eproto.base,
      &scc_info_Grading_Control_grading_2eproto.base,
      &scc_info_Grading_Planning_grading_2eproto.base,
      &scc_info_Grading_EventDetector_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_Acceleration_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Acceleration_default_instance_;
    new (ptr) ::sim_msg::Grading_Acceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Acceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Acceleration_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_Acceleration_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_Algorithm_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Algorithm_default_instance_;
    new (ptr) ::sim_msg::Grading_Algorithm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Algorithm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Algorithm_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_Algorithm_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_CarExpData_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_CarExpData_default_instance_;
    new (ptr) ::sim_msg::Grading_CarExpData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_CarExpData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_CarExpData_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_CarExpData_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_Collision_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Collision_default_instance_;
    new (ptr) ::sim_msg::Grading_Collision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Collision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Collision_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_Collision_grading_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,}};

static void InitDefaultsscc_info_Grading_Control_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Control_default_instance_;
    new (ptr) ::sim_msg::Grading_Control();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Control::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Control_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_Control_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_DistHeadway_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_DistHeadway_default_instance_;
    new (ptr) ::sim_msg::Grading_DistHeadway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_DistHeadway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_DistHeadway_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_DistHeadway_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_EventDetector_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_EventDetector_default_instance_;
    new (ptr) ::sim_msg::Grading_EventDetector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_EventDetector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_EventDetector_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_EventDetector_grading_2eproto}, {
      &scc_info_Grading_EventDetector_DetectedEventsEntry_DoNotUse_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_EventDetector_DetectedEvent_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_EventDetector_DetectedEvent_default_instance_;
    new (ptr) ::sim_msg::Grading_EventDetector_DetectedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_EventDetector_DetectedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_EventDetector_DetectedEvent_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_EventDetector_DetectedEvent_grading_2eproto}, {
      &scc_info_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_default_instance_;
    new (ptr) ::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse();
  }
  ::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_EventDetector_DetectedEventsEntry_DoNotUse_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_EventDetector_DetectedEventsEntry_DoNotUse_default_instance_;
    new (ptr) ::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse();
  }
  ::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_EventDetector_DetectedEventsEntry_DoNotUse_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_EventDetector_DetectedEventsEntry_DoNotUse_grading_2eproto}, {
      &scc_info_Grading_EventDetector_DetectedEvent_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_ExpData_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_ExpData_default_instance_;
    new (ptr) ::sim_msg::Grading_ExpData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_ExpData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_ExpData_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_ExpData_grading_2eproto}, {
      &scc_info_Grading_CarExpData_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_Lane_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Lane_default_instance_;
    new (ptr) ::sim_msg::Grading_Lane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Lane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Lane_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_Lane_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_Planning_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Planning_default_instance_;
    new (ptr) ::sim_msg::Grading_Planning();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Planning::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Planning_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_Planning_grading_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,}};

static void InitDefaultsscc_info_Grading_Speed_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Speed_default_instance_;
    new (ptr) ::sim_msg::Grading_Speed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Speed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Speed_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_Speed_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_Statistics_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Statistics_default_instance_;
    new (ptr) ::sim_msg::Grading_Statistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Statistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Grading_Statistics_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Grading_Statistics_grading_2eproto}, {
      &scc_info_Grading_Statistics_Detail_grading_2eproto.base,
      &scc_info_Grading_Statistics_CustomDetail_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_Statistics_CustomDetail_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Statistics_CustomDetail_default_instance_;
    new (ptr) ::sim_msg::Grading_Statistics_CustomDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Statistics_CustomDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Statistics_CustomDetail_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_Statistics_CustomDetail_grading_2eproto}, {
      &scc_info_Grading_Statistics_DetailItem_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_Statistics_Detail_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Statistics_Detail_default_instance_;
    new (ptr) ::sim_msg::Grading_Statistics_Detail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Statistics_Detail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grading_Statistics_Detail_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Grading_Statistics_Detail_grading_2eproto}, {
      &scc_info_Grading_Statistics_DetailItem_grading_2eproto.base,}};

static void InitDefaultsscc_info_Grading_Statistics_DetailItem_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_Statistics_DetailItem_default_instance_;
    new (ptr) ::sim_msg::Grading_Statistics_DetailItem();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_Statistics_DetailItem::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_Statistics_DetailItem_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_Statistics_DetailItem_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_TimeHeadway_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_TimeHeadway_default_instance_;
    new (ptr) ::sim_msg::Grading_TimeHeadway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_TimeHeadway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_TimeHeadway_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_TimeHeadway_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_TimeStamp_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_TimeStamp_default_instance_;
    new (ptr) ::sim_msg::Grading_TimeStamp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_TimeStamp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_TimeStamp_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_TimeStamp_grading_2eproto}, {}};

static void InitDefaultsscc_info_Grading_TrafficLight_grading_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Grading_TrafficLight_default_instance_;
    new (ptr) ::sim_msg::Grading_TrafficLight();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Grading_TrafficLight::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Grading_TrafficLight_grading_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Grading_TrafficLight_grading_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_grading_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_grading_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_grading_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_grading_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TimeStamp, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Speed, speed_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Speed, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Speed, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Acceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Acceleration, acceleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Acceleration, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Acceleration, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Collision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Collision, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Collision, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TimeHeadway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TimeHeadway, ath_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TimeHeadway, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TimeHeadway, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_DistHeadway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_DistHeadway, dist_to_fellow_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_DistHeadway, dist_state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_DistHeadway, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Algorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Algorithm, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Lane, isonsolidline_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Lane, isondottedline_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Lane, isonstopline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TrafficLight, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TrafficLight, run_trafficlight_thresh_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_TrafficLight, run_trafficlight_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Control, poserror_h_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Control, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Control, threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Planning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Planning, is_reachendpoint_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Planning, current_point_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Planning, endpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_CarExpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_CarExpData, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_CarExpData, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, distfromcar_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, distfromcar_h_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, distfromcar_v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, thfromcar_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, dot_s_fellow_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, dot_x_fellow_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, dot_y_fellow_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, dot_s_ego_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, dot_x_ego_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_ExpData, dot_y_ego_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_DetailItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_DetailItem, eval_value_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_DetailItem, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_DetailItem, is_pass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_overspeed_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_overacceleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_overdecelleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_overturningacceleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_tooclosettc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_tooclosedistance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_overmaxposerror_h_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, average_poserror_h_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, max_poserror_h_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, max_poserror_h_l_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, max_poserror_h_r_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_crosssolidline_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, count_ranredlight_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, reachendpoint_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_Detail, collision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_CustomDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_CustomDetail, custom_reachendpoint_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics_CustomDetail, custom_maxposerror_exceed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, scene_name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, report_date_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, is_pass_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, total_time_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, total_milleage_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, is_timeout_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, grading_xml_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, detail_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, custom_detail_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_Statistics, reason_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent, edge_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent, state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEvent, additionals_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, dt_second_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, cur_t_second_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, acceleration_above_thresh_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, speed_above_thresh_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, if_collision_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, timeheadaway_below_thresh_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, run_trafficlight_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, on_solidline_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, deceleration_above_thresh_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, detectedevents_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading_EventDetector, hasedge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, speed_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, acceleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, collision_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, timeheadway_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, algorithm_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, lane_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, trafficelight_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, mileage_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, expdata_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, distheadway_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, control_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, planning_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, lateral_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, dec_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Grading, event_detector_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Grading_TimeStamp)},
  { 6, -1, sizeof(::sim_msg::Grading_Speed)},
  { 14, -1, sizeof(::sim_msg::Grading_Acceleration)},
  { 22, -1, sizeof(::sim_msg::Grading_Collision)},
  { 29, -1, sizeof(::sim_msg::Grading_TimeHeadway)},
  { 37, -1, sizeof(::sim_msg::Grading_DistHeadway)},
  { 45, -1, sizeof(::sim_msg::Grading_Algorithm)},
  { 51, -1, sizeof(::sim_msg::Grading_Lane)},
  { 59, -1, sizeof(::sim_msg::Grading_TrafficLight)},
  { 67, -1, sizeof(::sim_msg::Grading_Control)},
  { 75, -1, sizeof(::sim_msg::Grading_Planning)},
  { 83, -1, sizeof(::sim_msg::Grading_CarExpData)},
  { 90, -1, sizeof(::sim_msg::Grading_ExpData)},
  { 105, -1, sizeof(::sim_msg::Grading_Statistics_DetailItem)},
  { 113, -1, sizeof(::sim_msg::Grading_Statistics_Detail)},
  { 133, -1, sizeof(::sim_msg::Grading_Statistics_CustomDetail)},
  { 140, -1, sizeof(::sim_msg::Grading_Statistics)},
  { 155, 162, sizeof(::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse)},
  { 164, -1, sizeof(::sim_msg::Grading_EventDetector_DetectedEvent)},
  { 172, 179, sizeof(::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse)},
  { 181, -1, sizeof(::sim_msg::Grading_EventDetector)},
  { 197, -1, sizeof(::sim_msg::Grading)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_TimeStamp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Speed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Acceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Collision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_TimeHeadway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_DistHeadway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Algorithm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Lane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Planning_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_CarExpData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_ExpData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Statistics_DetailItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Statistics_Detail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Statistics_CustomDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_Statistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_EventDetector_DetectedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_EventDetector_DetectedEventsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_EventDetector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Grading_default_instance_),
};

const char descriptor_table_protodef_grading_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rgrading.proto\022\007sim_msg\032\013basic.proto\"\227&"
  "\n\007Grading\022%\n\005speed\030\001 \001(\0132\026.sim_msg.Gradi"
  "ng.Speed\0223\n\014acceleration\030\002 \001(\0132\035.sim_msg"
  ".Grading.Acceleration\022-\n\tcollision\030\003 \003(\013"
  "2\032.sim_msg.Grading.Collision\0221\n\013timeHead"
  "way\030\004 \001(\0132\034.sim_msg.Grading.TimeHeadway\022"
  "-\n\talgorithm\030\005 \001(\0132\032.sim_msg.Grading.Alg"
  "orithm\022#\n\004lane\030\006 \001(\0132\025.sim_msg.Grading.L"
  "ane\0224\n\rtrafficeLight\030\007 \001(\0132\035.sim_msg.Gra"
  "ding.TrafficLight\022-\n\ttimeStamp\030\010 \001(\0132\032.s"
  "im_msg.Grading.TimeStamp\022\017\n\007mileage\030\t \001("
  "\001\022)\n\007expData\030\n \001(\0132\030.sim_msg.Grading.Exp"
  "Data\0221\n\013distHeadway\030\013 \001(\0132\034.sim_msg.Grad"
  "ing.DistHeadway\022)\n\007control\030\014 \001(\0132\030.sim_m"
  "sg.Grading.Control\022+\n\010planning\030\r \001(\0132\031.s"
  "im_msg.Grading.Planning\0222\n\013lateral_acc\030\016"
  " \001(\0132\035.sim_msg.Grading.Acceleration\022.\n\007d"
  "ec_acc\030\017 \001(\0132\035.sim_msg.Grading.Accelerat"
  "ion\0226\n\016event_detector\030\020 \001(\0132\036.sim_msg.Gr"
  "ading.EventDetector\032\036\n\tTimeStamp\022\021\n\ttime"
  "Stamp\030\001 \001(\004\032T\n\005Speed\022\r\n\005speed\030\001 \001(\001\022)\n\005s"
  "tate\030\002 \001(\0162\032.sim_msg.GradingSpeedState\022\021"
  "\n\tthreshold\030\003 \001(\001\032i\n\014Acceleration\022\024\n\014acc"
  "eleration\030\001 \001(\001\0220\n\005state\030\002 \001(\0162!.sim_msg"
  ".GradingAccelerationState\022\021\n\tthreshold\030\003"
  " \001(\001\032[\n\tCollision\022-\n\005state\030\001 \001(\0162\036.sim_m"
  "sg.GradingCollisionState\022\037\n\010location\030\002 \001"
  "(\0132\r.sim_msg.Vec3\032^\n\013TimeHeadway\022\013\n\003ATH\030"
  "\001 \001(\002\022/\n\005state\030\002 \001(\0162 .sim_msg.GradingTi"
  "meHeadwayState\022\021\n\tthreshold\030\003 \001(\001\032n\n\013Dis"
  "tHeadway\022\026\n\016dist_to_fellow\030\001 \001(\001\0224\n\ndist"
  "_state\030\002 \001(\0162 .sim_msg.GradingDistHeadwa"
  "yState\022\021\n\tthreshold\030\003 \001(\001\032:\n\tAlgorithm\022-"
  "\n\005state\030\001 \001(\0162\036.sim_msg.GradingAlgorithm"
  "State\032K\n\004Lane\022\025\n\risOnSolidLine\030\001 \001(\010\022\026\n\016"
  "isOnDottedLine\030\002 \001(\010\022\024\n\014isOnStopLine\030\003 \001"
  "(\010\032\201\001\n\014TrafficLight\0220\n\005state\030\001 \001(\0162!.sim"
  "_msg.GradingTrafficLightState\022\037\n\027run_tra"
  "fficlight_thresh\030\002 \001(\004\022\036\n\026run_trafficlig"
  "ht_count\030\003 \001(\004\032^\n\007Control\022\022\n\nposError_H\030"
  "\001 \001(\001\022,\n\005state\030\002 \001(\0162\035.sim_msg.GradingPo"
  "sErrorState\022\021\n\tthreshold\030\003 \001(\001\032k\n\010Planni"
  "ng\022\030\n\020is_reachEndpoint\030\001 \001(\010\022$\n\rcurrent_"
  "point\030\002 \001(\0132\r.sim_msg.Vec3\022\037\n\010endpoint\030\003"
  " \001(\0132\r.sim_msg.Vec3\032\'\n\nCarExpData\022\n\n\002id\030"
  "\001 \001(\001\022\r\n\005value\030\002 \001(\001\032\245\003\n\007ExpData\0220\n\013dist"
  "FromCar\030\001 \003(\0132\033.sim_msg.Grading.CarExpDa"
  "ta\0222\n\rdistFromCar_H\030\002 \003(\0132\033.sim_msg.Grad"
  "ing.CarExpData\0222\n\rdistFromCar_V\030\003 \003(\0132\033."
  "sim_msg.Grading.CarExpData\022.\n\tthFromCar\030"
  "\004 \003(\0132\033.sim_msg.Grading.CarExpData\0221\n\014do"
  "t_s_fellow\030\005 \003(\0132\033.sim_msg.Grading.CarEx"
  "pData\0221\n\014dot_x_fellow\030\006 \003(\0132\033.sim_msg.Gr"
  "ading.CarExpData\0221\n\014dot_y_fellow\030\007 \003(\0132\033"
  ".sim_msg.Grading.CarExpData\022\021\n\tdot_s_ego"
  "\030\010 \001(\001\022\021\n\tdot_x_ego\030\t \001(\001\022\021\n\tdot_y_ego\030\n"
  " \001(\001\032\224\014\n\nStatistics\022\022\n\nscene_name\030\001 \001(\t\022"
  "\023\n\013report_date\030\002 \001(\t\022\017\n\007is_pass\030\003 \001(\010\022\022\n"
  "\ntotal_time\030\004 \001(\001\022\026\n\016total_milleage\030\005 \001("
  "\001\022\022\n\nis_timeout\030\006 \001(\010\022\023\n\013grading_xml\030\007 \001"
  "(\t\0222\n\006detail\030\010 \001(\0132\".sim_msg.Grading.Sta"
  "tistics.Detail\022\?\n\rcustom_detail\030\t \001(\0132(."
  "sim_msg.Grading.Statistics.CustomDetail\022"
  "\016\n\006reason\030\n \001(\t\032E\n\nDetailItem\022\022\n\neval_va"
  "lue\030\001 \001(\001\022\022\n\nis_enabled\030\002 \001(\010\022\017\n\007is_pass"
  "\030\003 \001(\010\032\210\010\n\006Detail\022\?\n\017count_overSpeed\030\001 \001"
  "(\0132&.sim_msg.Grading.Statistics.DetailIt"
  "em\022F\n\026count_overAcceleration\030\002 \001(\0132&.sim"
  "_msg.Grading.Statistics.DetailItem\022G\n\027co"
  "unt_overDecelleration\030\003 \001(\0132&.sim_msg.Gr"
  "ading.Statistics.DetailItem\022M\n\035count_ove"
  "rTurningAcceleration\030\004 \001(\0132&.sim_msg.Gra"
  "ding.Statistics.DetailItem\022A\n\021count_tooC"
  "loseTTC\030\005 \001(\0132&.sim_msg.Grading.Statisti"
  "cs.DetailItem\022F\n\026count_tooCloseDistance\030"
  "\006 \001(\0132&.sim_msg.Grading.Statistics.Detai"
  "lItem\022G\n\027count_overMaxPosError_H\030\007 \001(\0132&"
  ".sim_msg.Grading.Statistics.DetailItem\022B"
  "\n\022average_PosError_H\030\010 \001(\0132&.sim_msg.Gra"
  "ding.Statistics.DetailItem\022>\n\016max_PosErr"
  "or_H\030\t \001(\0132&.sim_msg.Grading.Statistics."
  "DetailItem\022@\n\020max_PosError_H_L\030\n \001(\0132&.s"
  "im_msg.Grading.Statistics.DetailItem\022@\n\020"
  "max_PosError_H_R\030\013 \001(\0132&.sim_msg.Grading"
  ".Statistics.DetailItem\022D\n\024count_CrossSol"
  "idLine\030\014 \001(\0132&.sim_msg.Grading.Statistic"
  "s.DetailItem\022A\n\021count_RanRedLight\030\r \001(\0132"
  "&.sim_msg.Grading.Statistics.DetailItem\022"
  "=\n\rreachEndPoint\030\016 \001(\0132&.sim_msg.Grading"
  ".Statistics.DetailItem\0229\n\tcollision\030\017 \001("
  "\0132&.sim_msg.Grading.Statistics.DetailIte"
  "m\032\237\001\n\014CustomDetail\022D\n\024custom_ReachEndPoi"
  "nt\030\001 \001(\0132&.sim_msg.Grading.Statistics.De"
  "tailItem\022I\n\031custom_maxPosError_Exceed\030\002 "
  "\001(\0132&.sim_msg.Grading.Statistics.DetailI"
  "tem\032\341\010\n\rEventDetector\022\021\n\tdt_second\030\001 \001(\001"
  "\022\024\n\014cur_t_second\030\002 \001(\001\022L\n\031Acceleration_A"
  "bove_Thresh\030\003 \001(\0162).sim_msg.Grading.Even"
  "tDetector.EventState\022E\n\022Speed_Above_Thre"
  "sh\030\004 \001(\0162).sim_msg.Grading.EventDetector"
  ".EventState\022\?\n\014If_Collision\030\005 \001(\0162).sim_"
  "msg.Grading.EventDetector.EventState\022L\n\031"
  "TimeHeadAway_Below_Thresh\030\006 \001(\0162).sim_ms"
  "g.Grading.EventDetector.EventState\022C\n\020Ru"
  "n_TrafficLight\030\007 \001(\0162).sim_msg.Grading.E"
  "ventDetector.EventState\022\?\n\014On_SolidLine\030"
  "\010 \001(\0162).sim_msg.Grading.EventDetector.Ev"
  "entState\022L\n\031Deceleration_Above_Thresh\030\t "
  "\001(\0162).sim_msg.Grading.EventDetector.Even"
  "tState\022J\n\016detectedEvents\030\n \003(\01322.sim_msg"
  ".Grading.EventDetector.DetectedEventsEnt"
  "ry\022:\n\007hasEdge\030\013 \001(\0162).sim_msg.Grading.Ev"
  "entDetector.EventState\032\212\002\n\rDetectedEvent"
  "\0227\n\004edge\030\001 \001(\0162).sim_msg.Grading.EventDe"
  "tector.EventState\0228\n\005state\030\002 \001(\0162).sim_m"
  "sg.Grading.EventDetector.EventState\022R\n\013a"
  "dditionals\030\003 \003(\0132=.sim_msg.Grading.Event"
  "Detector.DetectedEvent.AdditionalsEntry\032"
  "2\n\020AdditionalsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t:\0028\001\032c\n\023DetectedEventsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022;\n\005value\030\002 \001(\0132,.sim_msg.Grading"
  ".EventDetector.DetectedEvent:\0028\001\"5\n\nEven"
  "tState\022\024\n\020EventNotDetected\020\000\022\021\n\rEventDet"
  "ected\020\001*\233\001\n\025GradingCollisionState\022!\n\035GRA"
  "DING_COLLISION_NOCOLLISION\020\000\022\035\n\031GRADING_"
  "COLLISION_VEHICLE\020\001\022 \n\034GRADING_COLLISION"
  "_PEDESTRIAN\020\002\022\036\n\032GRADING_COLLISION_OBSTA"
  "CLE\020\003*{\n\025GradingAlgorithmState\022\035\n\031GRADIN"
  "G_ALGORITHM_RUNNING\020\000\022\035\n\031GRADING_ALGORIT"
  "HM_TIMEOUT\020\001\022$\n GRADING_ALGORITHM_THROWE"
  "XCEPTION\020\002*c\n\030GradingTrafficLightState\022 "
  "\n\034GRADING_TRAFFICLIGHT_RUNNING\020\000\022%\n!GRAD"
  "ING_TRAFFICLIGHT_JUMPREDLIGHT\020\001*d\n\021Gradi"
  "ngSpeedState\022\030\n\024GRADING_SPEED_NORMAL\020\000\022\032"
  "\n\026GRADING_SPEED_OVERHIGH\020\001\022\031\n\025GRADING_SP"
  "EED_OVERLOW\020\002*\221\001\n\030GradingAccelerationSta"
  "te\022\037\n\033GRADING_ACCELERATION_NORMAL\020\000\022(\n$G"
  "RADING_ACCELERATION_RAPIDACCELERATE\020\001\022*\n"
  "&GRADING_ACCELERATION_RAPIDDEACCELERATE\020"
  "\002*Z\n\027GradingTimeHeadwayState\022\036\n\032GRADING_"
  "TIMEHEADWAY_NORMAL\020\000\022\037\n\033GRADING_TIMEHEAD"
  "WAY_OVERLOW\020\001*Z\n\027GradingDistHeadwayState"
  "\022\036\n\032GRADING_DISTHEADWAY_NORMAL\020\000\022\037\n\033GRAD"
  "ING_DISTHEADWAY_OVERLOW\020\001*P\n\024GradingPosE"
  "rrorState\022\033\n\027GRADING_PosError_NORMAL\020\000\022\033"
  "\n\027GRADING_PosError_EXCEED\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_grading_2eproto_deps[1] = {
  &::descriptor_table_basic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_grading_2eproto_sccs[22] = {
  &scc_info_Grading_grading_2eproto.base,
  &scc_info_Grading_Acceleration_grading_2eproto.base,
  &scc_info_Grading_Algorithm_grading_2eproto.base,
  &scc_info_Grading_CarExpData_grading_2eproto.base,
  &scc_info_Grading_Collision_grading_2eproto.base,
  &scc_info_Grading_Control_grading_2eproto.base,
  &scc_info_Grading_DistHeadway_grading_2eproto.base,
  &scc_info_Grading_EventDetector_grading_2eproto.base,
  &scc_info_Grading_EventDetector_DetectedEvent_grading_2eproto.base,
  &scc_info_Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse_grading_2eproto.base,
  &scc_info_Grading_EventDetector_DetectedEventsEntry_DoNotUse_grading_2eproto.base,
  &scc_info_Grading_ExpData_grading_2eproto.base,
  &scc_info_Grading_Lane_grading_2eproto.base,
  &scc_info_Grading_Planning_grading_2eproto.base,
  &scc_info_Grading_Speed_grading_2eproto.base,
  &scc_info_Grading_Statistics_grading_2eproto.base,
  &scc_info_Grading_Statistics_CustomDetail_grading_2eproto.base,
  &scc_info_Grading_Statistics_Detail_grading_2eproto.base,
  &scc_info_Grading_Statistics_DetailItem_grading_2eproto.base,
  &scc_info_Grading_TimeHeadway_grading_2eproto.base,
  &scc_info_Grading_TimeStamp_grading_2eproto.base,
  &scc_info_Grading_TrafficLight_grading_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_grading_2eproto_once;
static bool descriptor_table_grading_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_grading_2eproto = {
  &descriptor_table_grading_2eproto_initialized, descriptor_table_protodef_grading_2eproto, "grading.proto", 5835,
  &descriptor_table_grading_2eproto_once, descriptor_table_grading_2eproto_sccs, descriptor_table_grading_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_grading_2eproto::offsets,
  file_level_metadata_grading_2eproto, 22, file_level_enum_descriptors_grading_2eproto, file_level_service_descriptors_grading_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_grading_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_grading_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Grading_EventDetector_EventState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[0];
}
bool Grading_EventDetector_EventState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Grading_EventDetector_EventState Grading_EventDetector::EventNotDetected;
constexpr Grading_EventDetector_EventState Grading_EventDetector::EventDetected;
constexpr Grading_EventDetector_EventState Grading_EventDetector::EventState_MIN;
constexpr Grading_EventDetector_EventState Grading_EventDetector::EventState_MAX;
constexpr int Grading_EventDetector::EventState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingCollisionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[1];
}
bool GradingCollisionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingAlgorithmState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[2];
}
bool GradingAlgorithmState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingTrafficLightState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[3];
}
bool GradingTrafficLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingSpeedState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[4];
}
bool GradingSpeedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingAccelerationState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[5];
}
bool GradingAccelerationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingTimeHeadwayState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[6];
}
bool GradingTimeHeadwayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingDistHeadwayState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[7];
}
bool GradingDistHeadwayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GradingPosErrorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_grading_2eproto);
  return file_level_enum_descriptors_grading_2eproto[8];
}
bool GradingPosErrorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Grading_TimeStamp::InitAsDefaultInstance() {
}
class Grading_TimeStamp::_Internal {
 public:
};

Grading_TimeStamp::Grading_TimeStamp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.TimeStamp)
}
Grading_TimeStamp::Grading_TimeStamp(const Grading_TimeStamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.TimeStamp)
}

void Grading_TimeStamp::SharedCtor() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

Grading_TimeStamp::~Grading_TimeStamp() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.TimeStamp)
  SharedDtor();
}

void Grading_TimeStamp::SharedDtor() {
}

void Grading_TimeStamp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_TimeStamp& Grading_TimeStamp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_TimeStamp_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_TimeStamp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_TimeStamp::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.TimeStamp)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timeStamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.TimeStamp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_TimeStamp::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timeStamp = 1;
  if (this->timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.TimeStamp)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_TimeStamp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.TimeStamp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timeStamp = 1;
  if (this->timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.TimeStamp)
  return target;
}

size_t Grading_TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.TimeStamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_TimeStamp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_TimeStamp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_TimeStamp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.TimeStamp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.TimeStamp)
    MergeFrom(*source);
  }
}

void Grading_TimeStamp::MergeFrom(const Grading_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Grading_TimeStamp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_TimeStamp::CopyFrom(const Grading_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_TimeStamp::IsInitialized() const {
  return true;
}

void Grading_TimeStamp::InternalSwap(Grading_TimeStamp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_TimeStamp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Speed::InitAsDefaultInstance() {
}
class Grading_Speed::_Internal {
 public:
};

Grading_Speed::Grading_Speed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Speed)
}
Grading_Speed::Grading_Speed(const Grading_Speed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&speed_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Speed)
}

void Grading_Speed::SharedCtor() {
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(state_));
}

Grading_Speed::~Grading_Speed() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Speed)
  SharedDtor();
}

void Grading_Speed::SharedDtor() {
}

void Grading_Speed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Speed& Grading_Speed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Speed_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Speed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GradingSpeedState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::GradingSpeedState>(val));
        } else goto handle_unusual;
        continue;
      // double threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Speed::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Speed)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double speed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingSpeedState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingSpeedState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Speed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Speed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Speed::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  // .sim_msg.GradingSpeedState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Speed)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Speed::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Speed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  // .sim_msg.GradingSpeedState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Speed)
  return target;
}

size_t Grading_Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Speed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double speed = 1;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingSpeedState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Speed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Speed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Speed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Speed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Speed)
    MergeFrom(*source);
  }
}

void Grading_Speed::MergeFrom(const Grading_Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Speed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Speed::CopyFrom(const Grading_Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Speed::IsInitialized() const {
  return true;
}

void Grading_Speed::InternalSwap(Grading_Speed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(speed_, other->speed_);
  swap(threshold_, other->threshold_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Speed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Acceleration::InitAsDefaultInstance() {
}
class Grading_Acceleration::_Internal {
 public:
};

Grading_Acceleration::Grading_Acceleration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Acceleration)
}
Grading_Acceleration::Grading_Acceleration(const Grading_Acceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acceleration_, &from.acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&acceleration_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Acceleration)
}

void Grading_Acceleration::SharedCtor() {
  ::memset(&acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&acceleration_)) + sizeof(state_));
}

Grading_Acceleration::~Grading_Acceleration() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Acceleration)
  SharedDtor();
}

void Grading_Acceleration::SharedDtor() {
}

void Grading_Acceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Acceleration& Grading_Acceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Acceleration_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Acceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&acceleration_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Acceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GradingAccelerationState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::GradingAccelerationState>(val));
        } else goto handle_unusual;
        continue;
      // double threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Acceleration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Acceleration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acceleration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingAccelerationState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingAccelerationState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Acceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Acceleration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Acceleration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acceleration = 1;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->acceleration(), output);
  }

  // .sim_msg.GradingAccelerationState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Acceleration)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Acceleration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acceleration = 1;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->acceleration(), target);
  }

  // .sim_msg.GradingAccelerationState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Acceleration)
  return target;
}

size_t Grading_Acceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Acceleration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double acceleration = 1;
  if (!(this->acceleration() <= 0 && this->acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingAccelerationState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Acceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Acceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Acceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Acceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Acceleration)
    MergeFrom(*source);
  }
}

void Grading_Acceleration::MergeFrom(const Grading_Acceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.acceleration() <= 0 && from.acceleration() >= 0)) {
    set_acceleration(from.acceleration());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Acceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Acceleration::CopyFrom(const Grading_Acceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Acceleration::IsInitialized() const {
  return true;
}

void Grading_Acceleration::InternalSwap(Grading_Acceleration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(acceleration_, other->acceleration_);
  swap(threshold_, other->threshold_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Acceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Collision::InitAsDefaultInstance() {
  ::sim_msg::_Grading_Collision_default_instance_._instance.get_mutable()->location_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}
class Grading_Collision::_Internal {
 public:
  static const ::sim_msg::Vec3& location(const Grading_Collision* msg);
};

const ::sim_msg::Vec3&
Grading_Collision::_Internal::location(const Grading_Collision* msg) {
  return *msg->location_;
}
void Grading_Collision::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
Grading_Collision::Grading_Collision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Collision)
}
Grading_Collision::Grading_Collision(const Grading_Collision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::sim_msg::Vec3(*from.location_);
  } else {
    location_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Collision)
}

void Grading_Collision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_Collision_grading_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&location_)) + sizeof(state_));
}

Grading_Collision::~Grading_Collision() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Collision)
  SharedDtor();
}

void Grading_Collision::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void Grading_Collision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Collision& Grading_Collision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Collision_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Collision::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Collision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Collision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.GradingCollisionState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::GradingCollisionState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Collision::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Collision)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.GradingCollisionState state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingCollisionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 location = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Collision)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Collision::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Collision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.GradingCollisionState state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .sim_msg.Vec3 location = 2;
  if (this->has_location()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::location(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Collision)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Collision::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Collision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.GradingCollisionState state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .sim_msg.Vec3 location = 2;
  if (this->has_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::location(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Collision)
  return target;
}

size_t Grading_Collision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Collision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .sim_msg.GradingCollisionState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Collision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Collision)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Collision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Collision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Collision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Collision)
    MergeFrom(*source);
  }
}

void Grading_Collision::MergeFrom(const Grading_Collision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Collision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    mutable_location()->::sim_msg::Vec3::MergeFrom(from.location());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Collision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Collision::CopyFrom(const Grading_Collision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Collision::IsInitialized() const {
  return true;
}

void Grading_Collision::InternalSwap(Grading_Collision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Collision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_TimeHeadway::InitAsDefaultInstance() {
}
class Grading_TimeHeadway::_Internal {
 public:
};

Grading_TimeHeadway::Grading_TimeHeadway()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.TimeHeadway)
}
Grading_TimeHeadway::Grading_TimeHeadway(const Grading_TimeHeadway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ath_, &from.ath_,
    static_cast<size_t>(reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&ath_)) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.TimeHeadway)
}

void Grading_TimeHeadway::SharedCtor() {
  ::memset(&ath_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&ath_)) + sizeof(threshold_));
}

Grading_TimeHeadway::~Grading_TimeHeadway() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.TimeHeadway)
  SharedDtor();
}

void Grading_TimeHeadway::SharedDtor() {
}

void Grading_TimeHeadway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_TimeHeadway& Grading_TimeHeadway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_TimeHeadway_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_TimeHeadway::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.TimeHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ath_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&threshold_) -
      reinterpret_cast<char*>(&ath_)) + sizeof(threshold_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_TimeHeadway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float ATH = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          ath_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GradingTimeHeadwayState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::GradingTimeHeadwayState>(val));
        } else goto handle_unusual;
        continue;
      // double threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_TimeHeadway::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.TimeHeadway)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float ATH = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (13 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ath_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingTimeHeadwayState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingTimeHeadwayState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.TimeHeadway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.TimeHeadway)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_TimeHeadway::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.TimeHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ATH = 1;
  if (!(this->ath() <= 0 && this->ath() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(1, this->ath(), output);
  }

  // .sim_msg.GradingTimeHeadwayState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.TimeHeadway)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_TimeHeadway::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.TimeHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float ATH = 1;
  if (!(this->ath() <= 0 && this->ath() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->ath(), target);
  }

  // .sim_msg.GradingTimeHeadwayState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.TimeHeadway)
  return target;
}

size_t Grading_TimeHeadway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.TimeHeadway)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float ATH = 1;
  if (!(this->ath() <= 0 && this->ath() >= 0)) {
    total_size += 1 + 4;
  }

  // .sim_msg.GradingTimeHeadwayState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_TimeHeadway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.TimeHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_TimeHeadway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_TimeHeadway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.TimeHeadway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.TimeHeadway)
    MergeFrom(*source);
  }
}

void Grading_TimeHeadway::MergeFrom(const Grading_TimeHeadway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.TimeHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.ath() <= 0 && from.ath() >= 0)) {
    set_ath(from.ath());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
}

void Grading_TimeHeadway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.TimeHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_TimeHeadway::CopyFrom(const Grading_TimeHeadway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.TimeHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_TimeHeadway::IsInitialized() const {
  return true;
}

void Grading_TimeHeadway::InternalSwap(Grading_TimeHeadway* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ath_, other->ath_);
  swap(state_, other->state_);
  swap(threshold_, other->threshold_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_TimeHeadway::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_DistHeadway::InitAsDefaultInstance() {
}
class Grading_DistHeadway::_Internal {
 public:
};

Grading_DistHeadway::Grading_DistHeadway()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.DistHeadway)
}
Grading_DistHeadway::Grading_DistHeadway(const Grading_DistHeadway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dist_to_fellow_, &from.dist_to_fellow_,
    static_cast<size_t>(reinterpret_cast<char*>(&dist_state_) -
    reinterpret_cast<char*>(&dist_to_fellow_)) + sizeof(dist_state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.DistHeadway)
}

void Grading_DistHeadway::SharedCtor() {
  ::memset(&dist_to_fellow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_state_) -
      reinterpret_cast<char*>(&dist_to_fellow_)) + sizeof(dist_state_));
}

Grading_DistHeadway::~Grading_DistHeadway() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.DistHeadway)
  SharedDtor();
}

void Grading_DistHeadway::SharedDtor() {
}

void Grading_DistHeadway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_DistHeadway& Grading_DistHeadway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_DistHeadway_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_DistHeadway::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.DistHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dist_to_fellow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dist_state_) -
      reinterpret_cast<char*>(&dist_to_fellow_)) + sizeof(dist_state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_DistHeadway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dist_to_fellow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dist_to_fellow_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GradingDistHeadwayState dist_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dist_state(static_cast<::sim_msg::GradingDistHeadwayState>(val));
        } else goto handle_unusual;
        continue;
      // double threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_DistHeadway::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.DistHeadway)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dist_to_fellow = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_fellow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingDistHeadwayState dist_state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dist_state(static_cast< ::sim_msg::GradingDistHeadwayState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.DistHeadway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.DistHeadway)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_DistHeadway::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.DistHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dist_to_fellow = 1;
  if (!(this->dist_to_fellow() <= 0 && this->dist_to_fellow() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->dist_to_fellow(), output);
  }

  // .sim_msg.GradingDistHeadwayState dist_state = 2;
  if (this->dist_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->dist_state(), output);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.DistHeadway)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_DistHeadway::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.DistHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dist_to_fellow = 1;
  if (!(this->dist_to_fellow() <= 0 && this->dist_to_fellow() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->dist_to_fellow(), target);
  }

  // .sim_msg.GradingDistHeadwayState dist_state = 2;
  if (this->dist_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->dist_state(), target);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.DistHeadway)
  return target;
}

size_t Grading_DistHeadway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.DistHeadway)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double dist_to_fellow = 1;
  if (!(this->dist_to_fellow() <= 0 && this->dist_to_fellow() >= 0)) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingDistHeadwayState dist_state = 2;
  if (this->dist_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dist_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_DistHeadway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.DistHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_DistHeadway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_DistHeadway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.DistHeadway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.DistHeadway)
    MergeFrom(*source);
  }
}

void Grading_DistHeadway::MergeFrom(const Grading_DistHeadway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.DistHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.dist_to_fellow() <= 0 && from.dist_to_fellow() >= 0)) {
    set_dist_to_fellow(from.dist_to_fellow());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
  if (from.dist_state() != 0) {
    set_dist_state(from.dist_state());
  }
}

void Grading_DistHeadway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.DistHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_DistHeadway::CopyFrom(const Grading_DistHeadway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.DistHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_DistHeadway::IsInitialized() const {
  return true;
}

void Grading_DistHeadway::InternalSwap(Grading_DistHeadway* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dist_to_fellow_, other->dist_to_fellow_);
  swap(threshold_, other->threshold_);
  swap(dist_state_, other->dist_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_DistHeadway::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Algorithm::InitAsDefaultInstance() {
}
class Grading_Algorithm::_Internal {
 public:
};

Grading_Algorithm::Grading_Algorithm()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Algorithm)
}
Grading_Algorithm::Grading_Algorithm(const Grading_Algorithm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Algorithm)
}

void Grading_Algorithm::SharedCtor() {
  state_ = 0;
}

Grading_Algorithm::~Grading_Algorithm() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Algorithm)
  SharedDtor();
}

void Grading_Algorithm::SharedDtor() {
}

void Grading_Algorithm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Algorithm& Grading_Algorithm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Algorithm_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Algorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Algorithm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Algorithm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.GradingAlgorithmState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::GradingAlgorithmState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Algorithm::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Algorithm)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.GradingAlgorithmState state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingAlgorithmState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Algorithm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Algorithm)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Algorithm::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Algorithm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.GradingAlgorithmState state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Algorithm)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Algorithm::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Algorithm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.GradingAlgorithmState state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Algorithm)
  return target;
}

size_t Grading_Algorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Algorithm)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.GradingAlgorithmState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Algorithm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Algorithm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Algorithm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Algorithm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Algorithm)
    MergeFrom(*source);
  }
}

void Grading_Algorithm::MergeFrom(const Grading_Algorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Algorithm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Algorithm::CopyFrom(const Grading_Algorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Algorithm::IsInitialized() const {
  return true;
}

void Grading_Algorithm::InternalSwap(Grading_Algorithm* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Algorithm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Lane::InitAsDefaultInstance() {
}
class Grading_Lane::_Internal {
 public:
};

Grading_Lane::Grading_Lane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Lane)
}
Grading_Lane::Grading_Lane(const Grading_Lane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isonsolidline_, &from.isonsolidline_,
    static_cast<size_t>(reinterpret_cast<char*>(&isonstopline_) -
    reinterpret_cast<char*>(&isonsolidline_)) + sizeof(isonstopline_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Lane)
}

void Grading_Lane::SharedCtor() {
  ::memset(&isonsolidline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isonstopline_) -
      reinterpret_cast<char*>(&isonsolidline_)) + sizeof(isonstopline_));
}

Grading_Lane::~Grading_Lane() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Lane)
  SharedDtor();
}

void Grading_Lane::SharedDtor() {
}

void Grading_Lane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Lane& Grading_Lane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Lane_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&isonsolidline_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isonstopline_) -
      reinterpret_cast<char*>(&isonsolidline_)) + sizeof(isonstopline_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Lane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOnSolidLine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isonsolidline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOnDottedLine = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          isondottedline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool isOnStopLine = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          isonstopline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Lane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Lane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isOnSolidLine = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonsolidline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOnDottedLine = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isondottedline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOnStopLine = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonstopline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Lane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Lane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOnSolidLine = 1;
  if (this->isonsolidline() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->isonsolidline(), output);
  }

  // bool isOnDottedLine = 2;
  if (this->isondottedline() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->isondottedline(), output);
  }

  // bool isOnStopLine = 3;
  if (this->isonstopline() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->isonstopline(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Lane)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Lane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Lane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOnSolidLine = 1;
  if (this->isonsolidline() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->isonsolidline(), target);
  }

  // bool isOnDottedLine = 2;
  if (this->isondottedline() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->isondottedline(), target);
  }

  // bool isOnStopLine = 3;
  if (this->isonstopline() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->isonstopline(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Lane)
  return target;
}

size_t Grading_Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Lane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOnSolidLine = 1;
  if (this->isonsolidline() != 0) {
    total_size += 1 + 1;
  }

  // bool isOnDottedLine = 2;
  if (this->isondottedline() != 0) {
    total_size += 1 + 1;
  }

  // bool isOnStopLine = 3;
  if (this->isonstopline() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Lane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Lane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Lane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Lane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Lane)
    MergeFrom(*source);
  }
}

void Grading_Lane::MergeFrom(const Grading_Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isonsolidline() != 0) {
    set_isonsolidline(from.isonsolidline());
  }
  if (from.isondottedline() != 0) {
    set_isondottedline(from.isondottedline());
  }
  if (from.isonstopline() != 0) {
    set_isonstopline(from.isonstopline());
  }
}

void Grading_Lane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Lane::CopyFrom(const Grading_Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Lane::IsInitialized() const {
  return true;
}

void Grading_Lane::InternalSwap(Grading_Lane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isonsolidline_, other->isonsolidline_);
  swap(isondottedline_, other->isondottedline_);
  swap(isonstopline_, other->isonstopline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Lane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_TrafficLight::InitAsDefaultInstance() {
}
class Grading_TrafficLight::_Internal {
 public:
};

Grading_TrafficLight::Grading_TrafficLight()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.TrafficLight)
}
Grading_TrafficLight::Grading_TrafficLight(const Grading_TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&run_trafficlight_thresh_, &from.run_trafficlight_thresh_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&run_trafficlight_thresh_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.TrafficLight)
}

void Grading_TrafficLight::SharedCtor() {
  ::memset(&run_trafficlight_thresh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&run_trafficlight_thresh_)) + sizeof(state_));
}

Grading_TrafficLight::~Grading_TrafficLight() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.TrafficLight)
  SharedDtor();
}

void Grading_TrafficLight::SharedDtor() {
}

void Grading_TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_TrafficLight& Grading_TrafficLight::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_TrafficLight_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&run_trafficlight_thresh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&run_trafficlight_thresh_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.GradingTrafficLightState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::GradingTrafficLightState>(val));
        } else goto handle_unusual;
        continue;
      // uint64 run_trafficlight_thresh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          run_trafficlight_thresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 run_trafficlight_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          run_trafficlight_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_TrafficLight::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.TrafficLight)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.GradingTrafficLightState state = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingTrafficLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 run_trafficlight_thresh = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &run_trafficlight_thresh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 run_trafficlight_count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &run_trafficlight_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.TrafficLight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_TrafficLight::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.GradingTrafficLightState state = 1;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // uint64 run_trafficlight_thresh = 2;
  if (this->run_trafficlight_thresh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->run_trafficlight_thresh(), output);
  }

  // uint64 run_trafficlight_count = 3;
  if (this->run_trafficlight_count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->run_trafficlight_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.TrafficLight)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_TrafficLight::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.GradingTrafficLightState state = 1;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // uint64 run_trafficlight_thresh = 2;
  if (this->run_trafficlight_thresh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->run_trafficlight_thresh(), target);
  }

  // uint64 run_trafficlight_count = 3;
  if (this->run_trafficlight_count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->run_trafficlight_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.TrafficLight)
  return target;
}

size_t Grading_TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.TrafficLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 run_trafficlight_thresh = 2;
  if (this->run_trafficlight_thresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->run_trafficlight_thresh());
  }

  // uint64 run_trafficlight_count = 3;
  if (this->run_trafficlight_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->run_trafficlight_count());
  }

  // .sim_msg.GradingTrafficLightState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_TrafficLight::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_TrafficLight* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_TrafficLight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.TrafficLight)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.TrafficLight)
    MergeFrom(*source);
  }
}

void Grading_TrafficLight::MergeFrom(const Grading_TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.run_trafficlight_thresh() != 0) {
    set_run_trafficlight_thresh(from.run_trafficlight_thresh());
  }
  if (from.run_trafficlight_count() != 0) {
    set_run_trafficlight_count(from.run_trafficlight_count());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_TrafficLight::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_TrafficLight::CopyFrom(const Grading_TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_TrafficLight::IsInitialized() const {
  return true;
}

void Grading_TrafficLight::InternalSwap(Grading_TrafficLight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(run_trafficlight_thresh_, other->run_trafficlight_thresh_);
  swap(run_trafficlight_count_, other->run_trafficlight_count_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_TrafficLight::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Control::InitAsDefaultInstance() {
}
class Grading_Control::_Internal {
 public:
};

Grading_Control::Grading_Control()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Control)
}
Grading_Control::Grading_Control(const Grading_Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poserror_h_, &from.poserror_h_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&poserror_h_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Control)
}

void Grading_Control::SharedCtor() {
  ::memset(&poserror_h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&poserror_h_)) + sizeof(state_));
}

Grading_Control::~Grading_Control() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Control)
  SharedDtor();
}

void Grading_Control::SharedDtor() {
}

void Grading_Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Control& Grading_Control::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Control_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Control::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&poserror_h_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&poserror_h_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double posError_H = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          poserror_h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GradingPosErrorState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::GradingPosErrorState>(val));
        } else goto handle_unusual;
        continue;
      // double threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Control::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Control)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double posError_H = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poserror_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingPosErrorState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingPosErrorState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Control)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Control::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double posError_H = 1;
  if (!(this->poserror_h() <= 0 && this->poserror_h() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->poserror_h(), output);
  }

  // .sim_msg.GradingPosErrorState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Control)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Control::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double posError_H = 1;
  if (!(this->poserror_h() <= 0 && this->poserror_h() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->poserror_h(), target);
  }

  // .sim_msg.GradingPosErrorState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Control)
  return target;
}

size_t Grading_Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Control)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double posError_H = 1;
  if (!(this->poserror_h() <= 0 && this->poserror_h() >= 0)) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (!(this->threshold() <= 0 && this->threshold() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingPosErrorState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Control::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Control* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Control>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Control)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Control)
    MergeFrom(*source);
  }
}

void Grading_Control::MergeFrom(const Grading_Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.poserror_h() <= 0 && from.poserror_h() >= 0)) {
    set_poserror_h(from.poserror_h());
  }
  if (!(from.threshold() <= 0 && from.threshold() >= 0)) {
    set_threshold(from.threshold());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Control::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Control::CopyFrom(const Grading_Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Control::IsInitialized() const {
  return true;
}

void Grading_Control::InternalSwap(Grading_Control* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(poserror_h_, other->poserror_h_);
  swap(threshold_, other->threshold_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Control::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Planning::InitAsDefaultInstance() {
  ::sim_msg::_Grading_Planning_default_instance_._instance.get_mutable()->current_point_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  ::sim_msg::_Grading_Planning_default_instance_._instance.get_mutable()->endpoint_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}
class Grading_Planning::_Internal {
 public:
  static const ::sim_msg::Vec3& current_point(const Grading_Planning* msg);
  static const ::sim_msg::Vec3& endpoint(const Grading_Planning* msg);
};

const ::sim_msg::Vec3&
Grading_Planning::_Internal::current_point(const Grading_Planning* msg) {
  return *msg->current_point_;
}
const ::sim_msg::Vec3&
Grading_Planning::_Internal::endpoint(const Grading_Planning* msg) {
  return *msg->endpoint_;
}
void Grading_Planning::clear_current_point() {
  if (GetArenaNoVirtual() == nullptr && current_point_ != nullptr) {
    delete current_point_;
  }
  current_point_ = nullptr;
}
void Grading_Planning::clear_endpoint() {
  if (GetArenaNoVirtual() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
}
Grading_Planning::Grading_Planning()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Planning)
}
Grading_Planning::Grading_Planning(const Grading_Planning& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_point()) {
    current_point_ = new ::sim_msg::Vec3(*from.current_point_);
  } else {
    current_point_ = nullptr;
  }
  if (from.has_endpoint()) {
    endpoint_ = new ::sim_msg::Vec3(*from.endpoint_);
  } else {
    endpoint_ = nullptr;
  }
  is_reachendpoint_ = from.is_reachendpoint_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Planning)
}

void Grading_Planning::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_Planning_grading_2eproto.base);
  ::memset(&current_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reachendpoint_) -
      reinterpret_cast<char*>(&current_point_)) + sizeof(is_reachendpoint_));
}

Grading_Planning::~Grading_Planning() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Planning)
  SharedDtor();
}

void Grading_Planning::SharedDtor() {
  if (this != internal_default_instance()) delete current_point_;
  if (this != internal_default_instance()) delete endpoint_;
}

void Grading_Planning::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Planning& Grading_Planning::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Planning_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Planning::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Planning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && current_point_ != nullptr) {
    delete current_point_;
  }
  current_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && endpoint_ != nullptr) {
    delete endpoint_;
  }
  endpoint_ = nullptr;
  is_reachendpoint_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Planning::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_reachEndpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_reachendpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 current_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_current_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 endpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_endpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Planning::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Planning)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_reachEndpoint = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reachendpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 current_point = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_current_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 endpoint = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_endpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Planning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Planning)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Planning::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Planning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_reachEndpoint = 1;
  if (this->is_reachendpoint() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->is_reachendpoint(), output);
  }

  // .sim_msg.Vec3 current_point = 2;
  if (this->has_current_point()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::current_point(this), output);
  }

  // .sim_msg.Vec3 endpoint = 3;
  if (this->has_endpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::endpoint(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Planning)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Planning::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Planning)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_reachEndpoint = 1;
  if (this->is_reachendpoint() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_reachendpoint(), target);
  }

  // .sim_msg.Vec3 current_point = 2;
  if (this->has_current_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::current_point(this), target);
  }

  // .sim_msg.Vec3 endpoint = 3;
  if (this->has_endpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::endpoint(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Planning)
  return target;
}

size_t Grading_Planning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Planning)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 current_point = 2;
  if (this->has_current_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_point_);
  }

  // .sim_msg.Vec3 endpoint = 3;
  if (this->has_endpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *endpoint_);
  }

  // bool is_reachEndpoint = 1;
  if (this->is_reachendpoint() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Planning::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Planning)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Planning* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Planning>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Planning)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Planning)
    MergeFrom(*source);
  }
}

void Grading_Planning::MergeFrom(const Grading_Planning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Planning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_current_point()) {
    mutable_current_point()->::sim_msg::Vec3::MergeFrom(from.current_point());
  }
  if (from.has_endpoint()) {
    mutable_endpoint()->::sim_msg::Vec3::MergeFrom(from.endpoint());
  }
  if (from.is_reachendpoint() != 0) {
    set_is_reachendpoint(from.is_reachendpoint());
  }
}

void Grading_Planning::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Planning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Planning::CopyFrom(const Grading_Planning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Planning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Planning::IsInitialized() const {
  return true;
}

void Grading_Planning::InternalSwap(Grading_Planning* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(current_point_, other->current_point_);
  swap(endpoint_, other->endpoint_);
  swap(is_reachendpoint_, other->is_reachendpoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Planning::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_CarExpData::InitAsDefaultInstance() {
}
class Grading_CarExpData::_Internal {
 public:
};

Grading_CarExpData::Grading_CarExpData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.CarExpData)
}
Grading_CarExpData::Grading_CarExpData(const Grading_CarExpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.CarExpData)
}

void Grading_CarExpData::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
}

Grading_CarExpData::~Grading_CarExpData() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.CarExpData)
  SharedDtor();
}

void Grading_CarExpData::SharedDtor() {
}

void Grading_CarExpData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_CarExpData& Grading_CarExpData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_CarExpData_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_CarExpData::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.CarExpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&id_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_CarExpData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_CarExpData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.CarExpData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.CarExpData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.CarExpData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_CarExpData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.CarExpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->id(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.CarExpData)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_CarExpData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.CarExpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->id(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.CarExpData)
  return target;
}

size_t Grading_CarExpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.CarExpData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double id = 1;
  if (!(this->id() <= 0 && this->id() >= 0)) {
    total_size += 1 + 8;
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_CarExpData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.CarExpData)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_CarExpData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_CarExpData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.CarExpData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.CarExpData)
    MergeFrom(*source);
  }
}

void Grading_CarExpData::MergeFrom(const Grading_CarExpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.CarExpData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.id() <= 0 && from.id() >= 0)) {
    set_id(from.id());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void Grading_CarExpData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.CarExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_CarExpData::CopyFrom(const Grading_CarExpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.CarExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_CarExpData::IsInitialized() const {
  return true;
}

void Grading_CarExpData::InternalSwap(Grading_CarExpData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_CarExpData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_ExpData::InitAsDefaultInstance() {
}
class Grading_ExpData::_Internal {
 public:
};

Grading_ExpData::Grading_ExpData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.ExpData)
}
Grading_ExpData::Grading_ExpData(const Grading_ExpData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      distfromcar_(from.distfromcar_),
      distfromcar_h_(from.distfromcar_h_),
      distfromcar_v_(from.distfromcar_v_),
      thfromcar_(from.thfromcar_),
      dot_s_fellow_(from.dot_s_fellow_),
      dot_x_fellow_(from.dot_x_fellow_),
      dot_y_fellow_(from.dot_y_fellow_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dot_s_ego_, &from.dot_s_ego_,
    static_cast<size_t>(reinterpret_cast<char*>(&dot_y_ego_) -
    reinterpret_cast<char*>(&dot_s_ego_)) + sizeof(dot_y_ego_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.ExpData)
}

void Grading_ExpData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_ExpData_grading_2eproto.base);
  ::memset(&dot_s_ego_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dot_y_ego_) -
      reinterpret_cast<char*>(&dot_s_ego_)) + sizeof(dot_y_ego_));
}

Grading_ExpData::~Grading_ExpData() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.ExpData)
  SharedDtor();
}

void Grading_ExpData::SharedDtor() {
}

void Grading_ExpData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_ExpData& Grading_ExpData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_ExpData_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_ExpData::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.ExpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distfromcar_.Clear();
  distfromcar_h_.Clear();
  distfromcar_v_.Clear();
  thfromcar_.Clear();
  dot_s_fellow_.Clear();
  dot_x_fellow_.Clear();
  dot_y_fellow_.Clear();
  ::memset(&dot_s_ego_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dot_y_ego_) -
      reinterpret_cast<char*>(&dot_s_ego_)) + sizeof(dot_y_ego_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_ExpData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_distfromcar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_distfromcar_h(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_distfromcar_v(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_thfromcar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Grading.CarExpData dot_s_fellow = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dot_s_fellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Grading.CarExpData dot_x_fellow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dot_x_fellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Grading.CarExpData dot_y_fellow = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_dot_y_fellow(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // double dot_s_ego = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          dot_s_ego_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dot_x_ego = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          dot_x_ego_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double dot_y_ego = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          dot_y_ego_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_ExpData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.ExpData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_distfromcar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_distfromcar_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_distfromcar_v()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_thfromcar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.CarExpData dot_s_fellow = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dot_s_fellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.CarExpData dot_x_fellow = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dot_x_fellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.CarExpData dot_y_fellow = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_dot_y_fellow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dot_s_ego = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dot_s_ego_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dot_x_ego = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dot_x_ego_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double dot_y_ego = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (81 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dot_y_ego_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.ExpData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.ExpData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_ExpData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.ExpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distfromcar_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->distfromcar(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distfromcar_h_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->distfromcar_h(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distfromcar_v_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->distfromcar_v(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thfromcar_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->thfromcar(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Grading.CarExpData dot_s_fellow = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dot_s_fellow_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->dot_s_fellow(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Grading.CarExpData dot_x_fellow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dot_x_fellow_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->dot_x_fellow(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Grading.CarExpData dot_y_fellow = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dot_y_fellow_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->dot_y_fellow(static_cast<int>(i)),
      output);
  }

  // double dot_s_ego = 8;
  if (!(this->dot_s_ego() <= 0 && this->dot_s_ego() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->dot_s_ego(), output);
  }

  // double dot_x_ego = 9;
  if (!(this->dot_x_ego() <= 0 && this->dot_x_ego() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->dot_x_ego(), output);
  }

  // double dot_y_ego = 10;
  if (!(this->dot_y_ego() <= 0 && this->dot_y_ego() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(10, this->dot_y_ego(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.ExpData)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_ExpData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.ExpData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distfromcar_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->distfromcar(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distfromcar_h_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->distfromcar_h(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->distfromcar_v_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->distfromcar_v(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->thfromcar_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->thfromcar(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Grading.CarExpData dot_s_fellow = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dot_s_fellow_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->dot_s_fellow(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Grading.CarExpData dot_x_fellow = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dot_x_fellow_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->dot_x_fellow(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Grading.CarExpData dot_y_fellow = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->dot_y_fellow_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->dot_y_fellow(static_cast<int>(i)), target);
  }

  // double dot_s_ego = 8;
  if (!(this->dot_s_ego() <= 0 && this->dot_s_ego() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->dot_s_ego(), target);
  }

  // double dot_x_ego = 9;
  if (!(this->dot_x_ego() <= 0 && this->dot_x_ego() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->dot_x_ego(), target);
  }

  // double dot_y_ego = 10;
  if (!(this->dot_y_ego() <= 0 && this->dot_y_ego() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->dot_y_ego(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.ExpData)
  return target;
}

size_t Grading_ExpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.ExpData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->distfromcar_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->distfromcar(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->distfromcar_h_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->distfromcar_h(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->distfromcar_v_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->distfromcar_v(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->thfromcar_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->thfromcar(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Grading.CarExpData dot_s_fellow = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->dot_s_fellow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dot_s_fellow(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Grading.CarExpData dot_x_fellow = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->dot_x_fellow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dot_x_fellow(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Grading.CarExpData dot_y_fellow = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->dot_y_fellow_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->dot_y_fellow(static_cast<int>(i)));
    }
  }

  // double dot_s_ego = 8;
  if (!(this->dot_s_ego() <= 0 && this->dot_s_ego() >= 0)) {
    total_size += 1 + 8;
  }

  // double dot_x_ego = 9;
  if (!(this->dot_x_ego() <= 0 && this->dot_x_ego() >= 0)) {
    total_size += 1 + 8;
  }

  // double dot_y_ego = 10;
  if (!(this->dot_y_ego() <= 0 && this->dot_y_ego() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_ExpData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.ExpData)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_ExpData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_ExpData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.ExpData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.ExpData)
    MergeFrom(*source);
  }
}

void Grading_ExpData::MergeFrom(const Grading_ExpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.ExpData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distfromcar_.MergeFrom(from.distfromcar_);
  distfromcar_h_.MergeFrom(from.distfromcar_h_);
  distfromcar_v_.MergeFrom(from.distfromcar_v_);
  thfromcar_.MergeFrom(from.thfromcar_);
  dot_s_fellow_.MergeFrom(from.dot_s_fellow_);
  dot_x_fellow_.MergeFrom(from.dot_x_fellow_);
  dot_y_fellow_.MergeFrom(from.dot_y_fellow_);
  if (!(from.dot_s_ego() <= 0 && from.dot_s_ego() >= 0)) {
    set_dot_s_ego(from.dot_s_ego());
  }
  if (!(from.dot_x_ego() <= 0 && from.dot_x_ego() >= 0)) {
    set_dot_x_ego(from.dot_x_ego());
  }
  if (!(from.dot_y_ego() <= 0 && from.dot_y_ego() >= 0)) {
    set_dot_y_ego(from.dot_y_ego());
  }
}

void Grading_ExpData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.ExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_ExpData::CopyFrom(const Grading_ExpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.ExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_ExpData::IsInitialized() const {
  return true;
}

void Grading_ExpData::InternalSwap(Grading_ExpData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&distfromcar_)->InternalSwap(CastToBase(&other->distfromcar_));
  CastToBase(&distfromcar_h_)->InternalSwap(CastToBase(&other->distfromcar_h_));
  CastToBase(&distfromcar_v_)->InternalSwap(CastToBase(&other->distfromcar_v_));
  CastToBase(&thfromcar_)->InternalSwap(CastToBase(&other->thfromcar_));
  CastToBase(&dot_s_fellow_)->InternalSwap(CastToBase(&other->dot_s_fellow_));
  CastToBase(&dot_x_fellow_)->InternalSwap(CastToBase(&other->dot_x_fellow_));
  CastToBase(&dot_y_fellow_)->InternalSwap(CastToBase(&other->dot_y_fellow_));
  swap(dot_s_ego_, other->dot_s_ego_);
  swap(dot_x_ego_, other->dot_x_ego_);
  swap(dot_y_ego_, other->dot_y_ego_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_ExpData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Statistics_DetailItem::InitAsDefaultInstance() {
}
class Grading_Statistics_DetailItem::_Internal {
 public:
};

Grading_Statistics_DetailItem::Grading_Statistics_DetailItem()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics.DetailItem)
}
Grading_Statistics_DetailItem::Grading_Statistics_DetailItem(const Grading_Statistics_DetailItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eval_value_, &from.eval_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_pass_) -
    reinterpret_cast<char*>(&eval_value_)) + sizeof(is_pass_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics.DetailItem)
}

void Grading_Statistics_DetailItem::SharedCtor() {
  ::memset(&eval_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pass_) -
      reinterpret_cast<char*>(&eval_value_)) + sizeof(is_pass_));
}

Grading_Statistics_DetailItem::~Grading_Statistics_DetailItem() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics.DetailItem)
  SharedDtor();
}

void Grading_Statistics_DetailItem::SharedDtor() {
}

void Grading_Statistics_DetailItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Statistics_DetailItem& Grading_Statistics_DetailItem::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Statistics_DetailItem_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Statistics_DetailItem::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics.DetailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&eval_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_pass_) -
      reinterpret_cast<char*>(&eval_value_)) + sizeof(is_pass_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Statistics_DetailItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double eval_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          eval_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_pass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Statistics_DetailItem::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics.DetailItem)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double eval_value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eval_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_enabled = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pass = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics.DetailItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics.DetailItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Statistics_DetailItem::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics.DetailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double eval_value = 1;
  if (!(this->eval_value() <= 0 && this->eval_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->eval_value(), output);
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->is_enabled(), output);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_pass(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics.DetailItem)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Statistics_DetailItem::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics.DetailItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double eval_value = 1;
  if (!(this->eval_value() <= 0 && this->eval_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->eval_value(), target);
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->is_enabled(), target);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_pass(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics.DetailItem)
  return target;
}

size_t Grading_Statistics_DetailItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics.DetailItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double eval_value = 1;
  if (!(this->eval_value() <= 0 && this->eval_value() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Statistics_DetailItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics.DetailItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics_DetailItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Statistics_DetailItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics.DetailItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics.DetailItem)
    MergeFrom(*source);
  }
}

void Grading_Statistics_DetailItem::MergeFrom(const Grading_Statistics_DetailItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics.DetailItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.eval_value() <= 0 && from.eval_value() >= 0)) {
    set_eval_value(from.eval_value());
  }
  if (from.is_enabled() != 0) {
    set_is_enabled(from.is_enabled());
  }
  if (from.is_pass() != 0) {
    set_is_pass(from.is_pass());
  }
}

void Grading_Statistics_DetailItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics.DetailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics_DetailItem::CopyFrom(const Grading_Statistics_DetailItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics.DetailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics_DetailItem::IsInitialized() const {
  return true;
}

void Grading_Statistics_DetailItem::InternalSwap(Grading_Statistics_DetailItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(eval_value_, other->eval_value_);
  swap(is_enabled_, other->is_enabled_);
  swap(is_pass_, other->is_pass_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Statistics_DetailItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Statistics_Detail::InitAsDefaultInstance() {
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_overspeed_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_overacceleration_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_overdecelleration_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_overturningacceleration_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_tooclosettc_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_tooclosedistance_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_overmaxposerror_h_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->average_poserror_h_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->max_poserror_h_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->max_poserror_h_l_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->max_poserror_h_r_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_crosssolidline_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->count_ranredlight_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->reachendpoint_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_Detail_default_instance_._instance.get_mutable()->collision_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
}
class Grading_Statistics_Detail::_Internal {
 public:
  static const ::sim_msg::Grading_Statistics_DetailItem& count_overspeed(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_overacceleration(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_overdecelleration(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_overturningacceleration(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_tooclosettc(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_tooclosedistance(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_overmaxposerror_h(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& average_poserror_h(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& max_poserror_h(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& max_poserror_h_l(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& max_poserror_h_r(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_crosssolidline(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& count_ranredlight(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& reachendpoint(const Grading_Statistics_Detail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& collision(const Grading_Statistics_Detail* msg);
};

const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_overspeed(const Grading_Statistics_Detail* msg) {
  return *msg->count_overspeed_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_overacceleration(const Grading_Statistics_Detail* msg) {
  return *msg->count_overacceleration_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_overdecelleration(const Grading_Statistics_Detail* msg) {
  return *msg->count_overdecelleration_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_overturningacceleration(const Grading_Statistics_Detail* msg) {
  return *msg->count_overturningacceleration_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_tooclosettc(const Grading_Statistics_Detail* msg) {
  return *msg->count_tooclosettc_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_tooclosedistance(const Grading_Statistics_Detail* msg) {
  return *msg->count_tooclosedistance_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_overmaxposerror_h(const Grading_Statistics_Detail* msg) {
  return *msg->count_overmaxposerror_h_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::average_poserror_h(const Grading_Statistics_Detail* msg) {
  return *msg->average_poserror_h_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::max_poserror_h(const Grading_Statistics_Detail* msg) {
  return *msg->max_poserror_h_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::max_poserror_h_l(const Grading_Statistics_Detail* msg) {
  return *msg->max_poserror_h_l_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::max_poserror_h_r(const Grading_Statistics_Detail* msg) {
  return *msg->max_poserror_h_r_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_crosssolidline(const Grading_Statistics_Detail* msg) {
  return *msg->count_crosssolidline_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::count_ranredlight(const Grading_Statistics_Detail* msg) {
  return *msg->count_ranredlight_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::reachendpoint(const Grading_Statistics_Detail* msg) {
  return *msg->reachendpoint_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_Detail::_Internal::collision(const Grading_Statistics_Detail* msg) {
  return *msg->collision_;
}
Grading_Statistics_Detail::Grading_Statistics_Detail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics.Detail)
}
Grading_Statistics_Detail::Grading_Statistics_Detail(const Grading_Statistics_Detail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_count_overspeed()) {
    count_overspeed_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overspeed_);
  } else {
    count_overspeed_ = nullptr;
  }
  if (from.has_count_overacceleration()) {
    count_overacceleration_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overacceleration_);
  } else {
    count_overacceleration_ = nullptr;
  }
  if (from.has_count_overdecelleration()) {
    count_overdecelleration_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overdecelleration_);
  } else {
    count_overdecelleration_ = nullptr;
  }
  if (from.has_count_overturningacceleration()) {
    count_overturningacceleration_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overturningacceleration_);
  } else {
    count_overturningacceleration_ = nullptr;
  }
  if (from.has_count_tooclosettc()) {
    count_tooclosettc_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_tooclosettc_);
  } else {
    count_tooclosettc_ = nullptr;
  }
  if (from.has_count_tooclosedistance()) {
    count_tooclosedistance_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_tooclosedistance_);
  } else {
    count_tooclosedistance_ = nullptr;
  }
  if (from.has_count_overmaxposerror_h()) {
    count_overmaxposerror_h_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overmaxposerror_h_);
  } else {
    count_overmaxposerror_h_ = nullptr;
  }
  if (from.has_average_poserror_h()) {
    average_poserror_h_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.average_poserror_h_);
  } else {
    average_poserror_h_ = nullptr;
  }
  if (from.has_max_poserror_h()) {
    max_poserror_h_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.max_poserror_h_);
  } else {
    max_poserror_h_ = nullptr;
  }
  if (from.has_max_poserror_h_l()) {
    max_poserror_h_l_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.max_poserror_h_l_);
  } else {
    max_poserror_h_l_ = nullptr;
  }
  if (from.has_max_poserror_h_r()) {
    max_poserror_h_r_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.max_poserror_h_r_);
  } else {
    max_poserror_h_r_ = nullptr;
  }
  if (from.has_count_crosssolidline()) {
    count_crosssolidline_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_crosssolidline_);
  } else {
    count_crosssolidline_ = nullptr;
  }
  if (from.has_count_ranredlight()) {
    count_ranredlight_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_ranredlight_);
  } else {
    count_ranredlight_ = nullptr;
  }
  if (from.has_reachendpoint()) {
    reachendpoint_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.reachendpoint_);
  } else {
    reachendpoint_ = nullptr;
  }
  if (from.has_collision()) {
    collision_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.collision_);
  } else {
    collision_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics.Detail)
}

void Grading_Statistics_Detail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_Statistics_Detail_grading_2eproto.base);
  ::memset(&count_overspeed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collision_) -
      reinterpret_cast<char*>(&count_overspeed_)) + sizeof(collision_));
}

Grading_Statistics_Detail::~Grading_Statistics_Detail() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics.Detail)
  SharedDtor();
}

void Grading_Statistics_Detail::SharedDtor() {
  if (this != internal_default_instance()) delete count_overspeed_;
  if (this != internal_default_instance()) delete count_overacceleration_;
  if (this != internal_default_instance()) delete count_overdecelleration_;
  if (this != internal_default_instance()) delete count_overturningacceleration_;
  if (this != internal_default_instance()) delete count_tooclosettc_;
  if (this != internal_default_instance()) delete count_tooclosedistance_;
  if (this != internal_default_instance()) delete count_overmaxposerror_h_;
  if (this != internal_default_instance()) delete average_poserror_h_;
  if (this != internal_default_instance()) delete max_poserror_h_;
  if (this != internal_default_instance()) delete max_poserror_h_l_;
  if (this != internal_default_instance()) delete max_poserror_h_r_;
  if (this != internal_default_instance()) delete count_crosssolidline_;
  if (this != internal_default_instance()) delete count_ranredlight_;
  if (this != internal_default_instance()) delete reachendpoint_;
  if (this != internal_default_instance()) delete collision_;
}

void Grading_Statistics_Detail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Statistics_Detail& Grading_Statistics_Detail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Statistics_Detail_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Statistics_Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && count_overspeed_ != nullptr) {
    delete count_overspeed_;
  }
  count_overspeed_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_overacceleration_ != nullptr) {
    delete count_overacceleration_;
  }
  count_overacceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_overdecelleration_ != nullptr) {
    delete count_overdecelleration_;
  }
  count_overdecelleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_overturningacceleration_ != nullptr) {
    delete count_overturningacceleration_;
  }
  count_overturningacceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_tooclosettc_ != nullptr) {
    delete count_tooclosettc_;
  }
  count_tooclosettc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_tooclosedistance_ != nullptr) {
    delete count_tooclosedistance_;
  }
  count_tooclosedistance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_overmaxposerror_h_ != nullptr) {
    delete count_overmaxposerror_h_;
  }
  count_overmaxposerror_h_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && average_poserror_h_ != nullptr) {
    delete average_poserror_h_;
  }
  average_poserror_h_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_poserror_h_ != nullptr) {
    delete max_poserror_h_;
  }
  max_poserror_h_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_poserror_h_l_ != nullptr) {
    delete max_poserror_h_l_;
  }
  max_poserror_h_l_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && max_poserror_h_r_ != nullptr) {
    delete max_poserror_h_r_;
  }
  max_poserror_h_r_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_crosssolidline_ != nullptr) {
    delete count_crosssolidline_;
  }
  count_crosssolidline_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && count_ranredlight_ != nullptr) {
    delete count_ranredlight_;
  }
  count_ranredlight_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reachendpoint_ != nullptr) {
    delete reachendpoint_;
  }
  reachendpoint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && collision_ != nullptr) {
    delete collision_;
  }
  collision_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Statistics_Detail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_count_overspeed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_count_overacceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_count_overdecelleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_count_overturningacceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_count_tooclosettc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_count_tooclosedistance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_count_overmaxposerror_h(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_average_poserror_h(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_max_poserror_h(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_max_poserror_h_l(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_max_poserror_h_r(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_count_crosssolidline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_count_ranredlight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_reachendpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem collision = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_collision(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Statistics_Detail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics.Detail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_overspeed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_overacceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_overdecelleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_overturningacceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_tooclosettc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_tooclosedistance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_overmaxposerror_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_average_poserror_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_poserror_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_poserror_h_l()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_max_poserror_h_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_crosssolidline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_count_ranredlight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reachendpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem collision = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_collision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics.Detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics.Detail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Statistics_Detail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
  if (this->has_count_overspeed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::count_overspeed(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
  if (this->has_count_overacceleration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::count_overacceleration(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
  if (this->has_count_overdecelleration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::count_overdecelleration(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
  if (this->has_count_overturningacceleration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::count_overturningacceleration(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
  if (this->has_count_tooclosettc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::count_tooclosettc(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
  if (this->has_count_tooclosedistance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::count_tooclosedistance(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
  if (this->has_count_overmaxposerror_h()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::count_overmaxposerror_h(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
  if (this->has_average_poserror_h()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::average_poserror_h(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
  if (this->has_max_poserror_h()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::max_poserror_h(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
  if (this->has_max_poserror_h_l()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::max_poserror_h_l(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
  if (this->has_max_poserror_h_r()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::max_poserror_h_r(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
  if (this->has_count_crosssolidline()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::count_crosssolidline(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
  if (this->has_count_ranredlight()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::count_ranredlight(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
  if (this->has_reachendpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::reachendpoint(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem collision = 15;
  if (this->has_collision()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::collision(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics.Detail)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Statistics_Detail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics.Detail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
  if (this->has_count_overspeed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::count_overspeed(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
  if (this->has_count_overacceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::count_overacceleration(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
  if (this->has_count_overdecelleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::count_overdecelleration(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
  if (this->has_count_overturningacceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::count_overturningacceleration(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
  if (this->has_count_tooclosettc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::count_tooclosettc(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
  if (this->has_count_tooclosedistance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::count_tooclosedistance(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
  if (this->has_count_overmaxposerror_h()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::count_overmaxposerror_h(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
  if (this->has_average_poserror_h()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::average_poserror_h(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
  if (this->has_max_poserror_h()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::max_poserror_h(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
  if (this->has_max_poserror_h_l()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::max_poserror_h_l(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
  if (this->has_max_poserror_h_r()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::max_poserror_h_r(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
  if (this->has_count_crosssolidline()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::count_crosssolidline(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
  if (this->has_count_ranredlight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::count_ranredlight(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
  if (this->has_reachendpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::reachendpoint(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem collision = 15;
  if (this->has_collision()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::collision(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics.Detail)
  return target;
}

size_t Grading_Statistics_Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics.Detail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
  if (this->has_count_overspeed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_overspeed_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
  if (this->has_count_overacceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_overacceleration_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
  if (this->has_count_overdecelleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_overdecelleration_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
  if (this->has_count_overturningacceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_overturningacceleration_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
  if (this->has_count_tooclosettc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_tooclosettc_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
  if (this->has_count_tooclosedistance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_tooclosedistance_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
  if (this->has_count_overmaxposerror_h()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_overmaxposerror_h_);
  }

  // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
  if (this->has_average_poserror_h()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *average_poserror_h_);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
  if (this->has_max_poserror_h()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_poserror_h_);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
  if (this->has_max_poserror_h_l()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_poserror_h_l_);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
  if (this->has_max_poserror_h_r()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_poserror_h_r_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
  if (this->has_count_crosssolidline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_crosssolidline_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
  if (this->has_count_ranredlight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_ranredlight_);
  }

  // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
  if (this->has_reachendpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reachendpoint_);
  }

  // .sim_msg.Grading.Statistics.DetailItem collision = 15;
  if (this->has_collision()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collision_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Statistics_Detail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics_Detail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Statistics_Detail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics.Detail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics.Detail)
    MergeFrom(*source);
  }
}

void Grading_Statistics_Detail::MergeFrom(const Grading_Statistics_Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_count_overspeed()) {
    mutable_count_overspeed()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overspeed());
  }
  if (from.has_count_overacceleration()) {
    mutable_count_overacceleration()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overacceleration());
  }
  if (from.has_count_overdecelleration()) {
    mutable_count_overdecelleration()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overdecelleration());
  }
  if (from.has_count_overturningacceleration()) {
    mutable_count_overturningacceleration()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overturningacceleration());
  }
  if (from.has_count_tooclosettc()) {
    mutable_count_tooclosettc()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_tooclosettc());
  }
  if (from.has_count_tooclosedistance()) {
    mutable_count_tooclosedistance()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_tooclosedistance());
  }
  if (from.has_count_overmaxposerror_h()) {
    mutable_count_overmaxposerror_h()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overmaxposerror_h());
  }
  if (from.has_average_poserror_h()) {
    mutable_average_poserror_h()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.average_poserror_h());
  }
  if (from.has_max_poserror_h()) {
    mutable_max_poserror_h()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.max_poserror_h());
  }
  if (from.has_max_poserror_h_l()) {
    mutable_max_poserror_h_l()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.max_poserror_h_l());
  }
  if (from.has_max_poserror_h_r()) {
    mutable_max_poserror_h_r()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.max_poserror_h_r());
  }
  if (from.has_count_crosssolidline()) {
    mutable_count_crosssolidline()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_crosssolidline());
  }
  if (from.has_count_ranredlight()) {
    mutable_count_ranredlight()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_ranredlight());
  }
  if (from.has_reachendpoint()) {
    mutable_reachendpoint()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.reachendpoint());
  }
  if (from.has_collision()) {
    mutable_collision()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.collision());
  }
}

void Grading_Statistics_Detail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics_Detail::CopyFrom(const Grading_Statistics_Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics_Detail::IsInitialized() const {
  return true;
}

void Grading_Statistics_Detail::InternalSwap(Grading_Statistics_Detail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_overspeed_, other->count_overspeed_);
  swap(count_overacceleration_, other->count_overacceleration_);
  swap(count_overdecelleration_, other->count_overdecelleration_);
  swap(count_overturningacceleration_, other->count_overturningacceleration_);
  swap(count_tooclosettc_, other->count_tooclosettc_);
  swap(count_tooclosedistance_, other->count_tooclosedistance_);
  swap(count_overmaxposerror_h_, other->count_overmaxposerror_h_);
  swap(average_poserror_h_, other->average_poserror_h_);
  swap(max_poserror_h_, other->max_poserror_h_);
  swap(max_poserror_h_l_, other->max_poserror_h_l_);
  swap(max_poserror_h_r_, other->max_poserror_h_r_);
  swap(count_crosssolidline_, other->count_crosssolidline_);
  swap(count_ranredlight_, other->count_ranredlight_);
  swap(reachendpoint_, other->reachendpoint_);
  swap(collision_, other->collision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Statistics_Detail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Statistics_CustomDetail::InitAsDefaultInstance() {
  ::sim_msg::_Grading_Statistics_CustomDetail_default_instance_._instance.get_mutable()->custom_reachendpoint_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  ::sim_msg::_Grading_Statistics_CustomDetail_default_instance_._instance.get_mutable()->custom_maxposerror_exceed_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
}
class Grading_Statistics_CustomDetail::_Internal {
 public:
  static const ::sim_msg::Grading_Statistics_DetailItem& custom_reachendpoint(const Grading_Statistics_CustomDetail* msg);
  static const ::sim_msg::Grading_Statistics_DetailItem& custom_maxposerror_exceed(const Grading_Statistics_CustomDetail* msg);
};

const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_CustomDetail::_Internal::custom_reachendpoint(const Grading_Statistics_CustomDetail* msg) {
  return *msg->custom_reachendpoint_;
}
const ::sim_msg::Grading_Statistics_DetailItem&
Grading_Statistics_CustomDetail::_Internal::custom_maxposerror_exceed(const Grading_Statistics_CustomDetail* msg) {
  return *msg->custom_maxposerror_exceed_;
}
Grading_Statistics_CustomDetail::Grading_Statistics_CustomDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics.CustomDetail)
}
Grading_Statistics_CustomDetail::Grading_Statistics_CustomDetail(const Grading_Statistics_CustomDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_reachendpoint()) {
    custom_reachendpoint_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.custom_reachendpoint_);
  } else {
    custom_reachendpoint_ = nullptr;
  }
  if (from.has_custom_maxposerror_exceed()) {
    custom_maxposerror_exceed_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.custom_maxposerror_exceed_);
  } else {
    custom_maxposerror_exceed_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics.CustomDetail)
}

void Grading_Statistics_CustomDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_Statistics_CustomDetail_grading_2eproto.base);
  ::memset(&custom_reachendpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_maxposerror_exceed_) -
      reinterpret_cast<char*>(&custom_reachendpoint_)) + sizeof(custom_maxposerror_exceed_));
}

Grading_Statistics_CustomDetail::~Grading_Statistics_CustomDetail() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics.CustomDetail)
  SharedDtor();
}

void Grading_Statistics_CustomDetail::SharedDtor() {
  if (this != internal_default_instance()) delete custom_reachendpoint_;
  if (this != internal_default_instance()) delete custom_maxposerror_exceed_;
}

void Grading_Statistics_CustomDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Statistics_CustomDetail& Grading_Statistics_CustomDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Statistics_CustomDetail_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Statistics_CustomDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics.CustomDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && custom_reachendpoint_ != nullptr) {
    delete custom_reachendpoint_;
  }
  custom_reachendpoint_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && custom_maxposerror_exceed_ != nullptr) {
    delete custom_maxposerror_exceed_;
  }
  custom_maxposerror_exceed_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Statistics_CustomDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_custom_reachendpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_custom_maxposerror_exceed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Statistics_CustomDetail::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics.CustomDetail)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_reachendpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_maxposerror_exceed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics.CustomDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics.CustomDetail)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Statistics_CustomDetail::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics.CustomDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
  if (this->has_custom_reachendpoint()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::custom_reachendpoint(this), output);
  }

  // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
  if (this->has_custom_maxposerror_exceed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::custom_maxposerror_exceed(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics.CustomDetail)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Statistics_CustomDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics.CustomDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
  if (this->has_custom_reachendpoint()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::custom_reachendpoint(this), target);
  }

  // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
  if (this->has_custom_maxposerror_exceed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::custom_maxposerror_exceed(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics.CustomDetail)
  return target;
}

size_t Grading_Statistics_CustomDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics.CustomDetail)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
  if (this->has_custom_reachendpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_reachendpoint_);
  }

  // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
  if (this->has_custom_maxposerror_exceed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_maxposerror_exceed_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Statistics_CustomDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics.CustomDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics_CustomDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Statistics_CustomDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics.CustomDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics.CustomDetail)
    MergeFrom(*source);
  }
}

void Grading_Statistics_CustomDetail::MergeFrom(const Grading_Statistics_CustomDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics.CustomDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_custom_reachendpoint()) {
    mutable_custom_reachendpoint()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.custom_reachendpoint());
  }
  if (from.has_custom_maxposerror_exceed()) {
    mutable_custom_maxposerror_exceed()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.custom_maxposerror_exceed());
  }
}

void Grading_Statistics_CustomDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics.CustomDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics_CustomDetail::CopyFrom(const Grading_Statistics_CustomDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics.CustomDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics_CustomDetail::IsInitialized() const {
  return true;
}

void Grading_Statistics_CustomDetail::InternalSwap(Grading_Statistics_CustomDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(custom_reachendpoint_, other->custom_reachendpoint_);
  swap(custom_maxposerror_exceed_, other->custom_maxposerror_exceed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Statistics_CustomDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading_Statistics::InitAsDefaultInstance() {
  ::sim_msg::_Grading_Statistics_default_instance_._instance.get_mutable()->detail_ = const_cast< ::sim_msg::Grading_Statistics_Detail*>(
      ::sim_msg::Grading_Statistics_Detail::internal_default_instance());
  ::sim_msg::_Grading_Statistics_default_instance_._instance.get_mutable()->custom_detail_ = const_cast< ::sim_msg::Grading_Statistics_CustomDetail*>(
      ::sim_msg::Grading_Statistics_CustomDetail::internal_default_instance());
}
class Grading_Statistics::_Internal {
 public:
  static const ::sim_msg::Grading_Statistics_Detail& detail(const Grading_Statistics* msg);
  static const ::sim_msg::Grading_Statistics_CustomDetail& custom_detail(const Grading_Statistics* msg);
};

const ::sim_msg::Grading_Statistics_Detail&
Grading_Statistics::_Internal::detail(const Grading_Statistics* msg) {
  return *msg->detail_;
}
const ::sim_msg::Grading_Statistics_CustomDetail&
Grading_Statistics::_Internal::custom_detail(const Grading_Statistics* msg) {
  return *msg->custom_detail_;
}
Grading_Statistics::Grading_Statistics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics)
}
Grading_Statistics::Grading_Statistics(const Grading_Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.scene_name().empty()) {
    scene_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
  }
  report_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.report_date().empty()) {
    report_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.report_date_);
  }
  grading_xml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.grading_xml().empty()) {
    grading_xml_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.grading_xml_);
  }
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_detail()) {
    detail_ = new ::sim_msg::Grading_Statistics_Detail(*from.detail_);
  } else {
    detail_ = nullptr;
  }
  if (from.has_custom_detail()) {
    custom_detail_ = new ::sim_msg::Grading_Statistics_CustomDetail(*from.custom_detail_);
  } else {
    custom_detail_ = nullptr;
  }
  ::memcpy(&total_time_, &from.total_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_timeout_) -
    reinterpret_cast<char*>(&total_time_)) + sizeof(is_timeout_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics)
}

void Grading_Statistics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_Statistics_grading_2eproto.base);
  scene_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_date_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grading_xml_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&detail_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_timeout_) -
      reinterpret_cast<char*>(&detail_)) + sizeof(is_timeout_));
}

Grading_Statistics::~Grading_Statistics() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics)
  SharedDtor();
}

void Grading_Statistics::SharedDtor() {
  scene_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_date_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grading_xml_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detail_;
  if (this != internal_default_instance()) delete custom_detail_;
}

void Grading_Statistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_Statistics& Grading_Statistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_Statistics_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scene_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  report_date_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  grading_xml_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && detail_ != nullptr) {
    delete detail_;
  }
  detail_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && custom_detail_ != nullptr) {
    delete custom_detail_;
  }
  custom_detail_ = nullptr;
  ::memset(&total_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_timeout_) -
      reinterpret_cast<char*>(&total_time_)) + sizeof(is_timeout_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_Statistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scene_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_scene_name(), ptr, ctx, "sim_msg.Grading.Statistics.scene_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string report_date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_report_date(), ptr, ctx, "sim_msg.Grading.Statistics.report_date");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_pass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_pass_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double total_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_milleage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          total_milleage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool is_timeout = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string grading_xml = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_grading_xml(), ptr, ctx, "sim_msg.Grading.Statistics.grading_xml");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.Detail detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_custom_detail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reason = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_reason(), ptr, ctx, "sim_msg.Grading.Statistics.reason");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_Statistics::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scene_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->scene_name().data(), static_cast<int>(this->scene_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.scene_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string report_date = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_report_date()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->report_date().data(), static_cast<int>(this->report_date().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.report_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pass = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_milleage = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_milleage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_timeout = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string grading_xml = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_grading_xml()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->grading_xml().data(), static_cast<int>(this->grading_xml().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.grading_xml"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.Detail detail = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), static_cast<int>(this->reason().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_Statistics::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_name = 1;
  if (this->scene_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->scene_name().data(), static_cast<int>(this->scene_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.scene_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scene_name(), output);
  }

  // string report_date = 2;
  if (this->report_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->report_date().data(), static_cast<int>(this->report_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.report_date");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->report_date(), output);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_pass(), output);
  }

  // double total_time = 4;
  if (!(this->total_time() <= 0 && this->total_time() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->total_time(), output);
  }

  // double total_milleage = 5;
  if (!(this->total_milleage() <= 0 && this->total_milleage() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->total_milleage(), output);
  }

  // bool is_timeout = 6;
  if (this->is_timeout() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->is_timeout(), output);
  }

  // string grading_xml = 7;
  if (this->grading_xml().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grading_xml().data(), static_cast<int>(this->grading_xml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.grading_xml");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->grading_xml(), output);
  }

  // .sim_msg.Grading.Statistics.Detail detail = 8;
  if (this->has_detail()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::detail(this), output);
  }

  // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
  if (this->has_custom_detail()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::custom_detail(this), output);
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.reason");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_Statistics::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scene_name = 1;
  if (this->scene_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->scene_name().data(), static_cast<int>(this->scene_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.scene_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->scene_name(), target);
  }

  // string report_date = 2;
  if (this->report_date().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->report_date().data(), static_cast<int>(this->report_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.report_date");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->report_date(), target);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_pass(), target);
  }

  // double total_time = 4;
  if (!(this->total_time() <= 0 && this->total_time() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->total_time(), target);
  }

  // double total_milleage = 5;
  if (!(this->total_milleage() <= 0 && this->total_milleage() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->total_milleage(), target);
  }

  // bool is_timeout = 6;
  if (this->is_timeout() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->is_timeout(), target);
  }

  // string grading_xml = 7;
  if (this->grading_xml().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->grading_xml().data(), static_cast<int>(this->grading_xml().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.grading_xml");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->grading_xml(), target);
  }

  // .sim_msg.Grading.Statistics.Detail detail = 8;
  if (this->has_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::detail(this), target);
  }

  // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
  if (this->has_custom_detail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::custom_detail(this), target);
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), static_cast<int>(this->reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.reason");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        10, this->reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics)
  return target;
}

size_t Grading_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scene_name = 1;
  if (this->scene_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->scene_name());
  }

  // string report_date = 2;
  if (this->report_date().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->report_date());
  }

  // string grading_xml = 7;
  if (this->grading_xml().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->grading_xml());
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // .sim_msg.Grading.Statistics.Detail detail = 8;
  if (this->has_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detail_);
  }

  // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
  if (this->has_custom_detail()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_detail_);
  }

  // double total_time = 4;
  if (!(this->total_time() <= 0 && this->total_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_milleage = 5;
  if (!(this->total_milleage() <= 0 && this->total_milleage() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    total_size += 1 + 1;
  }

  // bool is_timeout = 6;
  if (this->is_timeout() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_Statistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_Statistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics)
    MergeFrom(*source);
  }
}

void Grading_Statistics::MergeFrom(const Grading_Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scene_name().size() > 0) {

    scene_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
  }
  if (from.report_date().size() > 0) {

    report_date_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.report_date_);
  }
  if (from.grading_xml().size() > 0) {

    grading_xml_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.grading_xml_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_detail()) {
    mutable_detail()->::sim_msg::Grading_Statistics_Detail::MergeFrom(from.detail());
  }
  if (from.has_custom_detail()) {
    mutable_custom_detail()->::sim_msg::Grading_Statistics_CustomDetail::MergeFrom(from.custom_detail());
  }
  if (!(from.total_time() <= 0 && from.total_time() >= 0)) {
    set_total_time(from.total_time());
  }
  if (!(from.total_milleage() <= 0 && from.total_milleage() >= 0)) {
    set_total_milleage(from.total_milleage());
  }
  if (from.is_pass() != 0) {
    set_is_pass(from.is_pass());
  }
  if (from.is_timeout() != 0) {
    set_is_timeout(from.is_timeout());
  }
}

void Grading_Statistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics::CopyFrom(const Grading_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics::IsInitialized() const {
  return true;
}

void Grading_Statistics::InternalSwap(Grading_Statistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scene_name_.Swap(&other->scene_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  report_date_.Swap(&other->report_date_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  grading_xml_.Swap(&other->grading_xml_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(detail_, other->detail_);
  swap(custom_detail_, other->custom_detail_);
  swap(total_time_, other->total_time_);
  swap(total_milleage_, other->total_milleage_);
  swap(is_pass_, other->is_pass_);
  swap(is_timeout_, other->is_timeout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_Statistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse() {}
Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::MergeFrom(const Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Grading_EventDetector_DetectedEvent::InitAsDefaultInstance() {
}
class Grading_EventDetector_DetectedEvent::_Internal {
 public:
};

Grading_EventDetector_DetectedEvent::Grading_EventDetector_DetectedEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.EventDetector.DetectedEvent)
}
Grading_EventDetector_DetectedEvent::Grading_EventDetector_DetectedEvent(const Grading_EventDetector_DetectedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  additionals_.MergeFrom(from.additionals_);
  ::memcpy(&edge_, &from.edge_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&edge_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.EventDetector.DetectedEvent)
}

void Grading_EventDetector_DetectedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_EventDetector_DetectedEvent_grading_2eproto.base);
  ::memset(&edge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&edge_)) + sizeof(state_));
}

Grading_EventDetector_DetectedEvent::~Grading_EventDetector_DetectedEvent() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.EventDetector.DetectedEvent)
  SharedDtor();
}

void Grading_EventDetector_DetectedEvent::SharedDtor() {
}

void Grading_EventDetector_DetectedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_EventDetector_DetectedEvent& Grading_EventDetector_DetectedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_EventDetector_DetectedEvent_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_EventDetector_DetectedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.EventDetector.DetectedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  additionals_.Clear();
  ::memset(&edge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&edge_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_EventDetector_DetectedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Grading.EventDetector.EventState edge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_edge(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> additionals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&additionals_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_EventDetector_DetectedEvent::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.EventDetector.DetectedEvent)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Grading.EventDetector.EventState edge = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_edge(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState state = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> additionals = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse,
              std::string, std::string,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string > > parser(&additionals_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.key"));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.EventDetector.DetectedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.EventDetector.DetectedEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_EventDetector_DetectedEvent::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.EventDetector.DetectedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.EventDetector.EventState edge = 1;
  if (this->edge() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->edge(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState state = 2;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // map<string, string> additionals = 3;
  if (!this->additionals().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->additionals().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->additionals().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->additionals().begin();
          it != this->additionals().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Funcs::SerializeToCodedStream(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->additionals().begin();
          it != this->additionals().end(); ++it) {
        Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Funcs::SerializeToCodedStream(3, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.EventDetector.DetectedEvent)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_EventDetector_DetectedEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.EventDetector.DetectedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.EventDetector.EventState edge = 1;
  if (this->edge() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->edge(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState state = 2;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // map<string, string> additionals = 3;
  if (!this->additionals().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Grading.EventDetector.DetectedEvent.AdditionalsEntry.value");
      }
    };

    if (false &&
        this->additionals().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->additionals().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->additionals().begin();
          it != this->additionals().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Funcs::SerializeToArray(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->additionals().begin();
          it != this->additionals().end(); ++it) {
        target = Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Funcs::SerializeToArray(3, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.EventDetector.DetectedEvent)
  return target;
}

size_t Grading_EventDetector_DetectedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.EventDetector.DetectedEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> additionals = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->additionals_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->additionals().begin();
      it != this->additionals().end(); ++it) {
    total_size += Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .sim_msg.Grading.EventDetector.EventState edge = 1;
  if (this->edge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->edge());
  }

  // .sim_msg.Grading.EventDetector.EventState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_EventDetector_DetectedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.EventDetector.DetectedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_EventDetector_DetectedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_EventDetector_DetectedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.EventDetector.DetectedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.EventDetector.DetectedEvent)
    MergeFrom(*source);
  }
}

void Grading_EventDetector_DetectedEvent::MergeFrom(const Grading_EventDetector_DetectedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.EventDetector.DetectedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  additionals_.MergeFrom(from.additionals_);
  if (from.edge() != 0) {
    set_edge(from.edge());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_EventDetector_DetectedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.EventDetector.DetectedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_EventDetector_DetectedEvent::CopyFrom(const Grading_EventDetector_DetectedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.EventDetector.DetectedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_EventDetector_DetectedEvent::IsInitialized() const {
  return true;
}

void Grading_EventDetector_DetectedEvent::InternalSwap(Grading_EventDetector_DetectedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  additionals_.Swap(&other->additionals_);
  swap(edge_, other->edge_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_EventDetector_DetectedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Grading_EventDetector_DetectedEventsEntry_DoNotUse::Grading_EventDetector_DetectedEventsEntry_DoNotUse() {}
Grading_EventDetector_DetectedEventsEntry_DoNotUse::Grading_EventDetector_DetectedEventsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Grading_EventDetector_DetectedEventsEntry_DoNotUse::MergeFrom(const Grading_EventDetector_DetectedEventsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Grading_EventDetector_DetectedEventsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Grading_EventDetector_DetectedEventsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Grading_EventDetector::InitAsDefaultInstance() {
}
class Grading_EventDetector::_Internal {
 public:
};

Grading_EventDetector::Grading_EventDetector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.EventDetector)
}
Grading_EventDetector::Grading_EventDetector(const Grading_EventDetector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detectedevents_.MergeFrom(from.detectedevents_);
  ::memcpy(&dt_second_, &from.dt_second_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasedge_) -
    reinterpret_cast<char*>(&dt_second_)) + sizeof(hasedge_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.EventDetector)
}

void Grading_EventDetector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_EventDetector_grading_2eproto.base);
  ::memset(&dt_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasedge_) -
      reinterpret_cast<char*>(&dt_second_)) + sizeof(hasedge_));
}

Grading_EventDetector::~Grading_EventDetector() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.EventDetector)
  SharedDtor();
}

void Grading_EventDetector::SharedDtor() {
}

void Grading_EventDetector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading_EventDetector& Grading_EventDetector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_EventDetector_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading_EventDetector::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.EventDetector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detectedevents_.Clear();
  ::memset(&dt_second_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasedge_) -
      reinterpret_cast<char*>(&dt_second_)) + sizeof(hasedge_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading_EventDetector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dt_second = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dt_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double cur_t_second = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          cur_t_second_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState Acceleration_Above_Thresh = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_acceleration_above_thresh(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState Speed_Above_Thresh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_speed_above_thresh(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState If_Collision = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_if_collision(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState TimeHeadAway_Below_Thresh = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_timeheadaway_below_thresh(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState Run_TrafficLight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_run_trafficlight(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState On_SolidLine = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_on_solidline(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState Deceleration_Above_Thresh = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_deceleration_above_thresh(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      // map<string, .sim_msg.Grading.EventDetector.DetectedEvent> detectedEvents = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&detectedevents_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector.EventState hasEdge = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_hasedge(static_cast<::sim_msg::Grading_EventDetector_EventState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading_EventDetector::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.EventDetector)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dt_second = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dt_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double cur_t_second = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_t_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState Acceleration_Above_Thresh = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_acceleration_above_thresh(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState Speed_Above_Thresh = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speed_above_thresh(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState If_Collision = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_if_collision(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState TimeHeadAway_Below_Thresh = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_timeheadaway_below_thresh(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState Run_TrafficLight = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_run_trafficlight(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState On_SolidLine = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_on_solidline(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState Deceleration_Above_Thresh = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_deceleration_above_thresh(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .sim_msg.Grading.EventDetector.DetectedEvent> detectedEvents = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          Grading_EventDetector_DetectedEventsEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Grading_EventDetector_DetectedEventsEntry_DoNotUse,
              std::string, ::sim_msg::Grading_EventDetector_DetectedEvent,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent > > parser(&detectedevents_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.EventDetector.DetectedEventsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector.EventState hasEdge = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hasedge(static_cast< ::sim_msg::Grading_EventDetector_EventState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.EventDetector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.EventDetector)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading_EventDetector::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.EventDetector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dt_second = 1;
  if (!(this->dt_second() <= 0 && this->dt_second() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->dt_second(), output);
  }

  // double cur_t_second = 2;
  if (!(this->cur_t_second() <= 0 && this->cur_t_second() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->cur_t_second(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState Acceleration_Above_Thresh = 3;
  if (this->acceleration_above_thresh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->acceleration_above_thresh(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState Speed_Above_Thresh = 4;
  if (this->speed_above_thresh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->speed_above_thresh(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState If_Collision = 5;
  if (this->if_collision() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->if_collision(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState TimeHeadAway_Below_Thresh = 6;
  if (this->timeheadaway_below_thresh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->timeheadaway_below_thresh(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState Run_TrafficLight = 7;
  if (this->run_trafficlight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->run_trafficlight(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState On_SolidLine = 8;
  if (this->on_solidline() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->on_solidline(), output);
  }

  // .sim_msg.Grading.EventDetector.EventState Deceleration_Above_Thresh = 9;
  if (this->deceleration_above_thresh() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->deceleration_above_thresh(), output);
  }

  // map<string, .sim_msg.Grading.EventDetector.DetectedEvent> detectedEvents = 10;
  if (!this->detectedevents().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Grading.EventDetector.DetectedEventsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->detectedevents().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->detectedevents().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::const_iterator
          it = this->detectedevents().begin();
          it != this->detectedevents().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Grading_EventDetector_DetectedEventsEntry_DoNotUse::Funcs::SerializeToCodedStream(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, output);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::const_iterator
          it = this->detectedevents().begin();
          it != this->detectedevents().end(); ++it) {
        Grading_EventDetector_DetectedEventsEntry_DoNotUse::Funcs::SerializeToCodedStream(10, it->first, it->second, output);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .sim_msg.Grading.EventDetector.EventState hasEdge = 11;
  if (this->hasedge() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->hasedge(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.EventDetector)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading_EventDetector::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.EventDetector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dt_second = 1;
  if (!(this->dt_second() <= 0 && this->dt_second() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->dt_second(), target);
  }

  // double cur_t_second = 2;
  if (!(this->cur_t_second() <= 0 && this->cur_t_second() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->cur_t_second(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState Acceleration_Above_Thresh = 3;
  if (this->acceleration_above_thresh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->acceleration_above_thresh(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState Speed_Above_Thresh = 4;
  if (this->speed_above_thresh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->speed_above_thresh(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState If_Collision = 5;
  if (this->if_collision() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->if_collision(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState TimeHeadAway_Below_Thresh = 6;
  if (this->timeheadaway_below_thresh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->timeheadaway_below_thresh(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState Run_TrafficLight = 7;
  if (this->run_trafficlight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->run_trafficlight(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState On_SolidLine = 8;
  if (this->on_solidline() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->on_solidline(), target);
  }

  // .sim_msg.Grading.EventDetector.EventState Deceleration_Above_Thresh = 9;
  if (this->deceleration_above_thresh() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->deceleration_above_thresh(), target);
  }

  // map<string, .sim_msg.Grading.EventDetector.DetectedEvent> detectedEvents = 10;
  if (!this->detectedevents().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "sim_msg.Grading.EventDetector.DetectedEventsEntry.key");
      }
    };

    if (false &&
        this->detectedevents().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->detectedevents().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::const_iterator
          it = this->detectedevents().begin();
          it != this->detectedevents().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Grading_EventDetector_DetectedEventsEntry_DoNotUse::Funcs::SerializeToArray(10, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::const_iterator
          it = this->detectedevents().begin();
          it != this->detectedevents().end(); ++it) {
        target = Grading_EventDetector_DetectedEventsEntry_DoNotUse::Funcs::SerializeToArray(10, it->first, it->second, target);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .sim_msg.Grading.EventDetector.EventState hasEdge = 11;
  if (this->hasedge() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->hasedge(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.EventDetector)
  return target;
}

size_t Grading_EventDetector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.EventDetector)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .sim_msg.Grading.EventDetector.DetectedEvent> detectedEvents = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->detectedevents_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sim_msg::Grading_EventDetector_DetectedEvent >::const_iterator
      it = this->detectedevents().begin();
      it != this->detectedevents().end(); ++it) {
    total_size += Grading_EventDetector_DetectedEventsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // double dt_second = 1;
  if (!(this->dt_second() <= 0 && this->dt_second() >= 0)) {
    total_size += 1 + 8;
  }

  // double cur_t_second = 2;
  if (!(this->cur_t_second() <= 0 && this->cur_t_second() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.Grading.EventDetector.EventState Acceleration_Above_Thresh = 3;
  if (this->acceleration_above_thresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->acceleration_above_thresh());
  }

  // .sim_msg.Grading.EventDetector.EventState Speed_Above_Thresh = 4;
  if (this->speed_above_thresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->speed_above_thresh());
  }

  // .sim_msg.Grading.EventDetector.EventState If_Collision = 5;
  if (this->if_collision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->if_collision());
  }

  // .sim_msg.Grading.EventDetector.EventState TimeHeadAway_Below_Thresh = 6;
  if (this->timeheadaway_below_thresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->timeheadaway_below_thresh());
  }

  // .sim_msg.Grading.EventDetector.EventState Run_TrafficLight = 7;
  if (this->run_trafficlight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->run_trafficlight());
  }

  // .sim_msg.Grading.EventDetector.EventState On_SolidLine = 8;
  if (this->on_solidline() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->on_solidline());
  }

  // .sim_msg.Grading.EventDetector.EventState Deceleration_Above_Thresh = 9;
  if (this->deceleration_above_thresh() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->deceleration_above_thresh());
  }

  // .sim_msg.Grading.EventDetector.EventState hasEdge = 11;
  if (this->hasedge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hasedge());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading_EventDetector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.EventDetector)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_EventDetector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading_EventDetector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.EventDetector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.EventDetector)
    MergeFrom(*source);
  }
}

void Grading_EventDetector::MergeFrom(const Grading_EventDetector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.EventDetector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  detectedevents_.MergeFrom(from.detectedevents_);
  if (!(from.dt_second() <= 0 && from.dt_second() >= 0)) {
    set_dt_second(from.dt_second());
  }
  if (!(from.cur_t_second() <= 0 && from.cur_t_second() >= 0)) {
    set_cur_t_second(from.cur_t_second());
  }
  if (from.acceleration_above_thresh() != 0) {
    set_acceleration_above_thresh(from.acceleration_above_thresh());
  }
  if (from.speed_above_thresh() != 0) {
    set_speed_above_thresh(from.speed_above_thresh());
  }
  if (from.if_collision() != 0) {
    set_if_collision(from.if_collision());
  }
  if (from.timeheadaway_below_thresh() != 0) {
    set_timeheadaway_below_thresh(from.timeheadaway_below_thresh());
  }
  if (from.run_trafficlight() != 0) {
    set_run_trafficlight(from.run_trafficlight());
  }
  if (from.on_solidline() != 0) {
    set_on_solidline(from.on_solidline());
  }
  if (from.deceleration_above_thresh() != 0) {
    set_deceleration_above_thresh(from.deceleration_above_thresh());
  }
  if (from.hasedge() != 0) {
    set_hasedge(from.hasedge());
  }
}

void Grading_EventDetector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.EventDetector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_EventDetector::CopyFrom(const Grading_EventDetector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.EventDetector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_EventDetector::IsInitialized() const {
  return true;
}

void Grading_EventDetector::InternalSwap(Grading_EventDetector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  detectedevents_.Swap(&other->detectedevents_);
  swap(dt_second_, other->dt_second_);
  swap(cur_t_second_, other->cur_t_second_);
  swap(acceleration_above_thresh_, other->acceleration_above_thresh_);
  swap(speed_above_thresh_, other->speed_above_thresh_);
  swap(if_collision_, other->if_collision_);
  swap(timeheadaway_below_thresh_, other->timeheadaway_below_thresh_);
  swap(run_trafficlight_, other->run_trafficlight_);
  swap(on_solidline_, other->on_solidline_);
  swap(deceleration_above_thresh_, other->deceleration_above_thresh_);
  swap(hasedge_, other->hasedge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading_EventDetector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grading::InitAsDefaultInstance() {
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->speed_ = const_cast< ::sim_msg::Grading_Speed*>(
      ::sim_msg::Grading_Speed::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::sim_msg::Grading_Acceleration*>(
      ::sim_msg::Grading_Acceleration::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->timeheadway_ = const_cast< ::sim_msg::Grading_TimeHeadway*>(
      ::sim_msg::Grading_TimeHeadway::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->algorithm_ = const_cast< ::sim_msg::Grading_Algorithm*>(
      ::sim_msg::Grading_Algorithm::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->lane_ = const_cast< ::sim_msg::Grading_Lane*>(
      ::sim_msg::Grading_Lane::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->trafficelight_ = const_cast< ::sim_msg::Grading_TrafficLight*>(
      ::sim_msg::Grading_TrafficLight::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::sim_msg::Grading_TimeStamp*>(
      ::sim_msg::Grading_TimeStamp::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->expdata_ = const_cast< ::sim_msg::Grading_ExpData*>(
      ::sim_msg::Grading_ExpData::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->distheadway_ = const_cast< ::sim_msg::Grading_DistHeadway*>(
      ::sim_msg::Grading_DistHeadway::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->control_ = const_cast< ::sim_msg::Grading_Control*>(
      ::sim_msg::Grading_Control::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->planning_ = const_cast< ::sim_msg::Grading_Planning*>(
      ::sim_msg::Grading_Planning::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->lateral_acc_ = const_cast< ::sim_msg::Grading_Acceleration*>(
      ::sim_msg::Grading_Acceleration::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->dec_acc_ = const_cast< ::sim_msg::Grading_Acceleration*>(
      ::sim_msg::Grading_Acceleration::internal_default_instance());
  ::sim_msg::_Grading_default_instance_._instance.get_mutable()->event_detector_ = const_cast< ::sim_msg::Grading_EventDetector*>(
      ::sim_msg::Grading_EventDetector::internal_default_instance());
}
class Grading::_Internal {
 public:
  static const ::sim_msg::Grading_Speed& speed(const Grading* msg);
  static const ::sim_msg::Grading_Acceleration& acceleration(const Grading* msg);
  static const ::sim_msg::Grading_TimeHeadway& timeheadway(const Grading* msg);
  static const ::sim_msg::Grading_Algorithm& algorithm(const Grading* msg);
  static const ::sim_msg::Grading_Lane& lane(const Grading* msg);
  static const ::sim_msg::Grading_TrafficLight& trafficelight(const Grading* msg);
  static const ::sim_msg::Grading_TimeStamp& timestamp(const Grading* msg);
  static const ::sim_msg::Grading_ExpData& expdata(const Grading* msg);
  static const ::sim_msg::Grading_DistHeadway& distheadway(const Grading* msg);
  static const ::sim_msg::Grading_Control& control(const Grading* msg);
  static const ::sim_msg::Grading_Planning& planning(const Grading* msg);
  static const ::sim_msg::Grading_Acceleration& lateral_acc(const Grading* msg);
  static const ::sim_msg::Grading_Acceleration& dec_acc(const Grading* msg);
  static const ::sim_msg::Grading_EventDetector& event_detector(const Grading* msg);
};

const ::sim_msg::Grading_Speed&
Grading::_Internal::speed(const Grading* msg) {
  return *msg->speed_;
}
const ::sim_msg::Grading_Acceleration&
Grading::_Internal::acceleration(const Grading* msg) {
  return *msg->acceleration_;
}
const ::sim_msg::Grading_TimeHeadway&
Grading::_Internal::timeheadway(const Grading* msg) {
  return *msg->timeheadway_;
}
const ::sim_msg::Grading_Algorithm&
Grading::_Internal::algorithm(const Grading* msg) {
  return *msg->algorithm_;
}
const ::sim_msg::Grading_Lane&
Grading::_Internal::lane(const Grading* msg) {
  return *msg->lane_;
}
const ::sim_msg::Grading_TrafficLight&
Grading::_Internal::trafficelight(const Grading* msg) {
  return *msg->trafficelight_;
}
const ::sim_msg::Grading_TimeStamp&
Grading::_Internal::timestamp(const Grading* msg) {
  return *msg->timestamp_;
}
const ::sim_msg::Grading_ExpData&
Grading::_Internal::expdata(const Grading* msg) {
  return *msg->expdata_;
}
const ::sim_msg::Grading_DistHeadway&
Grading::_Internal::distheadway(const Grading* msg) {
  return *msg->distheadway_;
}
const ::sim_msg::Grading_Control&
Grading::_Internal::control(const Grading* msg) {
  return *msg->control_;
}
const ::sim_msg::Grading_Planning&
Grading::_Internal::planning(const Grading* msg) {
  return *msg->planning_;
}
const ::sim_msg::Grading_Acceleration&
Grading::_Internal::lateral_acc(const Grading* msg) {
  return *msg->lateral_acc_;
}
const ::sim_msg::Grading_Acceleration&
Grading::_Internal::dec_acc(const Grading* msg) {
  return *msg->dec_acc_;
}
const ::sim_msg::Grading_EventDetector&
Grading::_Internal::event_detector(const Grading* msg) {
  return *msg->event_detector_;
}
Grading::Grading()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading)
}
Grading::Grading(const Grading& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collision_(from.collision_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_speed()) {
    speed_ = new ::sim_msg::Grading_Speed(*from.speed_);
  } else {
    speed_ = nullptr;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::sim_msg::Grading_Acceleration(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  if (from.has_timeheadway()) {
    timeheadway_ = new ::sim_msg::Grading_TimeHeadway(*from.timeheadway_);
  } else {
    timeheadway_ = nullptr;
  }
  if (from.has_algorithm()) {
    algorithm_ = new ::sim_msg::Grading_Algorithm(*from.algorithm_);
  } else {
    algorithm_ = nullptr;
  }
  if (from.has_lane()) {
    lane_ = new ::sim_msg::Grading_Lane(*from.lane_);
  } else {
    lane_ = nullptr;
  }
  if (from.has_trafficelight()) {
    trafficelight_ = new ::sim_msg::Grading_TrafficLight(*from.trafficelight_);
  } else {
    trafficelight_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::sim_msg::Grading_TimeStamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_expdata()) {
    expdata_ = new ::sim_msg::Grading_ExpData(*from.expdata_);
  } else {
    expdata_ = nullptr;
  }
  if (from.has_distheadway()) {
    distheadway_ = new ::sim_msg::Grading_DistHeadway(*from.distheadway_);
  } else {
    distheadway_ = nullptr;
  }
  if (from.has_control()) {
    control_ = new ::sim_msg::Grading_Control(*from.control_);
  } else {
    control_ = nullptr;
  }
  if (from.has_planning()) {
    planning_ = new ::sim_msg::Grading_Planning(*from.planning_);
  } else {
    planning_ = nullptr;
  }
  if (from.has_lateral_acc()) {
    lateral_acc_ = new ::sim_msg::Grading_Acceleration(*from.lateral_acc_);
  } else {
    lateral_acc_ = nullptr;
  }
  if (from.has_dec_acc()) {
    dec_acc_ = new ::sim_msg::Grading_Acceleration(*from.dec_acc_);
  } else {
    dec_acc_ = nullptr;
  }
  if (from.has_event_detector()) {
    event_detector_ = new ::sim_msg::Grading_EventDetector(*from.event_detector_);
  } else {
    event_detector_ = nullptr;
  }
  mileage_ = from.mileage_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading)
}

void Grading::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grading_grading_2eproto.base);
  ::memset(&speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mileage_) -
      reinterpret_cast<char*>(&speed_)) + sizeof(mileage_));
}

Grading::~Grading() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading)
  SharedDtor();
}

void Grading::SharedDtor() {
  if (this != internal_default_instance()) delete speed_;
  if (this != internal_default_instance()) delete acceleration_;
  if (this != internal_default_instance()) delete timeheadway_;
  if (this != internal_default_instance()) delete algorithm_;
  if (this != internal_default_instance()) delete lane_;
  if (this != internal_default_instance()) delete trafficelight_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete expdata_;
  if (this != internal_default_instance()) delete distheadway_;
  if (this != internal_default_instance()) delete control_;
  if (this != internal_default_instance()) delete planning_;
  if (this != internal_default_instance()) delete lateral_acc_;
  if (this != internal_default_instance()) delete dec_acc_;
  if (this != internal_default_instance()) delete event_detector_;
}

void Grading::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grading& Grading::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grading_grading_2eproto.base);
  return *internal_default_instance();
}


void Grading::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collision_.Clear();
  if (GetArenaNoVirtual() == nullptr && speed_ != nullptr) {
    delete speed_;
  }
  speed_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timeheadway_ != nullptr) {
    delete timeheadway_;
  }
  timeheadway_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && algorithm_ != nullptr) {
    delete algorithm_;
  }
  algorithm_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lane_ != nullptr) {
    delete lane_;
  }
  lane_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && trafficelight_ != nullptr) {
    delete trafficelight_;
  }
  trafficelight_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expdata_ != nullptr) {
    delete expdata_;
  }
  expdata_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && distheadway_ != nullptr) {
    delete distheadway_;
  }
  distheadway_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && control_ != nullptr) {
    delete control_;
  }
  control_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && planning_ != nullptr) {
    delete planning_;
  }
  planning_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lateral_acc_ != nullptr) {
    delete lateral_acc_;
  }
  lateral_acc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dec_acc_ != nullptr) {
    delete dec_acc_;
  }
  dec_acc_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && event_detector_ != nullptr) {
    delete event_detector_;
  }
  event_detector_ = nullptr;
  mileage_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Grading::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Grading.Speed speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Acceleration acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Grading.Collision collision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_collision(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_timeheadway(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Algorithm algorithm = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_algorithm(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Lane lane = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_lane(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.TrafficLight trafficeLight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_trafficelight(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.TimeStamp timeStamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double mileage = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          mileage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.ExpData expData = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_expdata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.DistHeadway distHeadway = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_distheadway(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Control control = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_control(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Planning planning = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_planning(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Acceleration lateral_acc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_lateral_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.Acceleration dec_acc = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_dec_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Grading.EventDetector event_detector = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_event_detector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Grading::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Grading.Speed speed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Acceleration acceleration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.Collision collision = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_collision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timeheadway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Algorithm algorithm = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_algorithm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Lane lane = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.TrafficLight trafficeLight = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trafficelight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.TimeStamp timeStamp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mileage = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.ExpData expData = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_expdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.DistHeadway distHeadway = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_distheadway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Control control = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Planning planning = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_planning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Acceleration lateral_acc = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lateral_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Acceleration dec_acc = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dec_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.EventDetector event_detector = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_event_detector()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Grading::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.Speed speed = 1;
  if (this->has_speed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::speed(this), output);
  }

  // .sim_msg.Grading.Acceleration acceleration = 2;
  if (this->has_acceleration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::acceleration(this), output);
  }

  // repeated .sim_msg.Grading.Collision collision = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collision_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->collision(static_cast<int>(i)),
      output);
  }

  // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
  if (this->has_timeheadway()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::timeheadway(this), output);
  }

  // .sim_msg.Grading.Algorithm algorithm = 5;
  if (this->has_algorithm()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::algorithm(this), output);
  }

  // .sim_msg.Grading.Lane lane = 6;
  if (this->has_lane()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::lane(this), output);
  }

  // .sim_msg.Grading.TrafficLight trafficeLight = 7;
  if (this->has_trafficelight()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::trafficelight(this), output);
  }

  // .sim_msg.Grading.TimeStamp timeStamp = 8;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::timestamp(this), output);
  }

  // double mileage = 9;
  if (!(this->mileage() <= 0 && this->mileage() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->mileage(), output);
  }

  // .sim_msg.Grading.ExpData expData = 10;
  if (this->has_expdata()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::expdata(this), output);
  }

  // .sim_msg.Grading.DistHeadway distHeadway = 11;
  if (this->has_distheadway()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::distheadway(this), output);
  }

  // .sim_msg.Grading.Control control = 12;
  if (this->has_control()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::control(this), output);
  }

  // .sim_msg.Grading.Planning planning = 13;
  if (this->has_planning()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::planning(this), output);
  }

  // .sim_msg.Grading.Acceleration lateral_acc = 14;
  if (this->has_lateral_acc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::lateral_acc(this), output);
  }

  // .sim_msg.Grading.Acceleration dec_acc = 15;
  if (this->has_dec_acc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::dec_acc(this), output);
  }

  // .sim_msg.Grading.EventDetector event_detector = 16;
  if (this->has_event_detector()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::event_detector(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Grading)
}

::PROTOBUF_NAMESPACE_ID::uint8* Grading::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Grading.Speed speed = 1;
  if (this->has_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::speed(this), target);
  }

  // .sim_msg.Grading.Acceleration acceleration = 2;
  if (this->has_acceleration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::acceleration(this), target);
  }

  // repeated .sim_msg.Grading.Collision collision = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->collision_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->collision(static_cast<int>(i)), target);
  }

  // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
  if (this->has_timeheadway()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::timeheadway(this), target);
  }

  // .sim_msg.Grading.Algorithm algorithm = 5;
  if (this->has_algorithm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::algorithm(this), target);
  }

  // .sim_msg.Grading.Lane lane = 6;
  if (this->has_lane()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::lane(this), target);
  }

  // .sim_msg.Grading.TrafficLight trafficeLight = 7;
  if (this->has_trafficelight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::trafficelight(this), target);
  }

  // .sim_msg.Grading.TimeStamp timeStamp = 8;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::timestamp(this), target);
  }

  // double mileage = 9;
  if (!(this->mileage() <= 0 && this->mileage() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->mileage(), target);
  }

  // .sim_msg.Grading.ExpData expData = 10;
  if (this->has_expdata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::expdata(this), target);
  }

  // .sim_msg.Grading.DistHeadway distHeadway = 11;
  if (this->has_distheadway()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::distheadway(this), target);
  }

  // .sim_msg.Grading.Control control = 12;
  if (this->has_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::control(this), target);
  }

  // .sim_msg.Grading.Planning planning = 13;
  if (this->has_planning()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::planning(this), target);
  }

  // .sim_msg.Grading.Acceleration lateral_acc = 14;
  if (this->has_lateral_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::lateral_acc(this), target);
  }

  // .sim_msg.Grading.Acceleration dec_acc = 15;
  if (this->has_dec_acc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::dec_acc(this), target);
  }

  // .sim_msg.Grading.EventDetector event_detector = 16;
  if (this->has_event_detector()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::event_detector(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading)
  return target;
}

size_t Grading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Grading.Collision collision = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->collision_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->collision(static_cast<int>(i)));
    }
  }

  // .sim_msg.Grading.Speed speed = 1;
  if (this->has_speed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *speed_);
  }

  // .sim_msg.Grading.Acceleration acceleration = 2;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
  if (this->has_timeheadway()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeheadway_);
  }

  // .sim_msg.Grading.Algorithm algorithm = 5;
  if (this->has_algorithm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *algorithm_);
  }

  // .sim_msg.Grading.Lane lane = 6;
  if (this->has_lane()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lane_);
  }

  // .sim_msg.Grading.TrafficLight trafficeLight = 7;
  if (this->has_trafficelight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trafficelight_);
  }

  // .sim_msg.Grading.TimeStamp timeStamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .sim_msg.Grading.ExpData expData = 10;
  if (this->has_expdata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expdata_);
  }

  // .sim_msg.Grading.DistHeadway distHeadway = 11;
  if (this->has_distheadway()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distheadway_);
  }

  // .sim_msg.Grading.Control control = 12;
  if (this->has_control()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *control_);
  }

  // .sim_msg.Grading.Planning planning = 13;
  if (this->has_planning()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planning_);
  }

  // .sim_msg.Grading.Acceleration lateral_acc = 14;
  if (this->has_lateral_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lateral_acc_);
  }

  // .sim_msg.Grading.Acceleration dec_acc = 15;
  if (this->has_dec_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dec_acc_);
  }

  // .sim_msg.Grading.EventDetector event_detector = 16;
  if (this->has_event_detector()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_detector_);
  }

  // double mileage = 9;
  if (!(this->mileage() <= 0 && this->mileage() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grading::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grading>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading)
    MergeFrom(*source);
  }
}

void Grading::MergeFrom(const Grading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collision_.MergeFrom(from.collision_);
  if (from.has_speed()) {
    mutable_speed()->::sim_msg::Grading_Speed::MergeFrom(from.speed());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::sim_msg::Grading_Acceleration::MergeFrom(from.acceleration());
  }
  if (from.has_timeheadway()) {
    mutable_timeheadway()->::sim_msg::Grading_TimeHeadway::MergeFrom(from.timeheadway());
  }
  if (from.has_algorithm()) {
    mutable_algorithm()->::sim_msg::Grading_Algorithm::MergeFrom(from.algorithm());
  }
  if (from.has_lane()) {
    mutable_lane()->::sim_msg::Grading_Lane::MergeFrom(from.lane());
  }
  if (from.has_trafficelight()) {
    mutable_trafficelight()->::sim_msg::Grading_TrafficLight::MergeFrom(from.trafficelight());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::sim_msg::Grading_TimeStamp::MergeFrom(from.timestamp());
  }
  if (from.has_expdata()) {
    mutable_expdata()->::sim_msg::Grading_ExpData::MergeFrom(from.expdata());
  }
  if (from.has_distheadway()) {
    mutable_distheadway()->::sim_msg::Grading_DistHeadway::MergeFrom(from.distheadway());
  }
  if (from.has_control()) {
    mutable_control()->::sim_msg::Grading_Control::MergeFrom(from.control());
  }
  if (from.has_planning()) {
    mutable_planning()->::sim_msg::Grading_Planning::MergeFrom(from.planning());
  }
  if (from.has_lateral_acc()) {
    mutable_lateral_acc()->::sim_msg::Grading_Acceleration::MergeFrom(from.lateral_acc());
  }
  if (from.has_dec_acc()) {
    mutable_dec_acc()->::sim_msg::Grading_Acceleration::MergeFrom(from.dec_acc());
  }
  if (from.has_event_detector()) {
    mutable_event_detector()->::sim_msg::Grading_EventDetector::MergeFrom(from.event_detector());
  }
  if (!(from.mileage() <= 0 && from.mileage() >= 0)) {
    set_mileage(from.mileage());
  }
}

void Grading::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading::CopyFrom(const Grading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading::IsInitialized() const {
  return true;
}

void Grading::InternalSwap(Grading* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&collision_)->InternalSwap(CastToBase(&other->collision_));
  swap(speed_, other->speed_);
  swap(acceleration_, other->acceleration_);
  swap(timeheadway_, other->timeheadway_);
  swap(algorithm_, other->algorithm_);
  swap(lane_, other->lane_);
  swap(trafficelight_, other->trafficelight_);
  swap(timestamp_, other->timestamp_);
  swap(expdata_, other->expdata_);
  swap(distheadway_, other->distheadway_);
  swap(control_, other->control_);
  swap(planning_, other->planning_);
  swap(lateral_acc_, other->lateral_acc_);
  swap(dec_acc_, other->dec_acc_);
  swap(event_detector_, other->event_detector_);
  swap(mileage_, other->mileage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Grading::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_TimeStamp* Arena::CreateMaybeMessage< ::sim_msg::Grading_TimeStamp >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_TimeStamp >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Speed* Arena::CreateMaybeMessage< ::sim_msg::Grading_Speed >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Speed >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Acceleration* Arena::CreateMaybeMessage< ::sim_msg::Grading_Acceleration >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Acceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Collision* Arena::CreateMaybeMessage< ::sim_msg::Grading_Collision >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Collision >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_TimeHeadway* Arena::CreateMaybeMessage< ::sim_msg::Grading_TimeHeadway >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_TimeHeadway >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_DistHeadway* Arena::CreateMaybeMessage< ::sim_msg::Grading_DistHeadway >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_DistHeadway >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Algorithm* Arena::CreateMaybeMessage< ::sim_msg::Grading_Algorithm >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Algorithm >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Lane* Arena::CreateMaybeMessage< ::sim_msg::Grading_Lane >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Lane >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_TrafficLight* Arena::CreateMaybeMessage< ::sim_msg::Grading_TrafficLight >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Control* Arena::CreateMaybeMessage< ::sim_msg::Grading_Control >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Control >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Planning* Arena::CreateMaybeMessage< ::sim_msg::Grading_Planning >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Planning >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_CarExpData* Arena::CreateMaybeMessage< ::sim_msg::Grading_CarExpData >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_CarExpData >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_ExpData* Arena::CreateMaybeMessage< ::sim_msg::Grading_ExpData >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_ExpData >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Statistics_DetailItem* Arena::CreateMaybeMessage< ::sim_msg::Grading_Statistics_DetailItem >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Statistics_DetailItem >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Statistics_Detail* Arena::CreateMaybeMessage< ::sim_msg::Grading_Statistics_Detail >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Statistics_Detail >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Statistics_CustomDetail* Arena::CreateMaybeMessage< ::sim_msg::Grading_Statistics_CustomDetail >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Statistics_CustomDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_Statistics* Arena::CreateMaybeMessage< ::sim_msg::Grading_Statistics >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse* Arena::CreateMaybeMessage< ::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_EventDetector_DetectedEvent_AdditionalsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_EventDetector_DetectedEvent* Arena::CreateMaybeMessage< ::sim_msg::Grading_EventDetector_DetectedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_EventDetector_DetectedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse* Arena::CreateMaybeMessage< ::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_EventDetector_DetectedEventsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading_EventDetector* Arena::CreateMaybeMessage< ::sim_msg::Grading_EventDetector >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading_EventDetector >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Grading* Arena::CreateMaybeMessage< ::sim_msg::Grading >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Grading >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
