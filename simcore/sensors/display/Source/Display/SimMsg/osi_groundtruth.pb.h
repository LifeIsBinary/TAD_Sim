// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_groundtruth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fgroundtruth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fgroundtruth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
#include "osi_environment.pb.h"
#include "osi_trafficsign.pb.h"
#include "osi_trafficlight.pb.h"
#include "osi_roadmarking.pb.h"
#include "osi_lane.pb.h"
#include "osi_logicallane.pb.h"
#include "osi_referenceline.pb.h"
#include "osi_object.pb.h"
#include "osi_occupant.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fgroundtruth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fgroundtruth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fgroundtruth_2eproto;
namespace osi3 {
class GroundTruth;
class GroundTruthDefaultTypeInternal;
extern GroundTruthDefaultTypeInternal _GroundTruth_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::GroundTruth* Arena::CreateMaybeMessage<::osi3::GroundTruth>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class GroundTruth :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.GroundTruth) */ {
 public:
  GroundTruth();
  virtual ~GroundTruth();

  GroundTruth(const GroundTruth& from);
  GroundTruth(GroundTruth&& from) noexcept
    : GroundTruth() {
    *this = ::std::move(from);
  }

  inline GroundTruth& operator=(const GroundTruth& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroundTruth& operator=(GroundTruth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GroundTruth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GroundTruth* internal_default_instance() {
    return reinterpret_cast<const GroundTruth*>(
               &_GroundTruth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GroundTruth& a, GroundTruth& b) {
    a.Swap(&b);
  }
  inline void Swap(GroundTruth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GroundTruth* New() const final {
    return CreateMaybeMessage<GroundTruth>(nullptr);
  }

  GroundTruth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GroundTruth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GroundTruth& from);
  void MergeFrom(const GroundTruth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroundTruth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.GroundTruth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fgroundtruth_2eproto);
    return ::descriptor_table_osi_5fgroundtruth_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationaryObjectFieldNumber = 4,
    kMovingObjectFieldNumber = 5,
    kTrafficSignFieldNumber = 6,
    kTrafficLightFieldNumber = 7,
    kRoadMarkingFieldNumber = 8,
    kLaneBoundaryFieldNumber = 9,
    kLaneFieldNumber = 10,
    kOccupantFieldNumber = 11,
    kReferenceLineFieldNumber = 17,
    kLogicalLaneBoundaryFieldNumber = 18,
    kLogicalLaneFieldNumber = 19,
    kProjStringFieldNumber = 14,
    kMapReferenceFieldNumber = 15,
    kModelReferenceFieldNumber = 16,
    kVersionFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kHostVehicleIdFieldNumber = 3,
    kEnvironmentalConditionsFieldNumber = 12,
    kCountryCodeFieldNumber = 13,
  };
  // repeated .osi3.StationaryObject stationary_object = 4;
  int stationary_object_size() const;
  void clear_stationary_object();
  ::osi3::StationaryObject* mutable_stationary_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StationaryObject >*
      mutable_stationary_object();
  const ::osi3::StationaryObject& stationary_object(int index) const;
  ::osi3::StationaryObject* add_stationary_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StationaryObject >&
      stationary_object() const;

  // repeated .osi3.MovingObject moving_object = 5;
  int moving_object_size() const;
  void clear_moving_object();
  ::osi3::MovingObject* mutable_moving_object(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::MovingObject >*
      mutable_moving_object();
  const ::osi3::MovingObject& moving_object(int index) const;
  ::osi3::MovingObject* add_moving_object();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::MovingObject >&
      moving_object() const;

  // repeated .osi3.TrafficSign traffic_sign = 6;
  int traffic_sign_size() const;
  void clear_traffic_sign();
  ::osi3::TrafficSign* mutable_traffic_sign(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficSign >*
      mutable_traffic_sign();
  const ::osi3::TrafficSign& traffic_sign(int index) const;
  ::osi3::TrafficSign* add_traffic_sign();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficSign >&
      traffic_sign() const;

  // repeated .osi3.TrafficLight traffic_light = 7;
  int traffic_light_size() const;
  void clear_traffic_light();
  ::osi3::TrafficLight* mutable_traffic_light(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficLight >*
      mutable_traffic_light();
  const ::osi3::TrafficLight& traffic_light(int index) const;
  ::osi3::TrafficLight* add_traffic_light();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficLight >&
      traffic_light() const;

  // repeated .osi3.RoadMarking road_marking = 8;
  int road_marking_size() const;
  void clear_road_marking();
  ::osi3::RoadMarking* mutable_road_marking(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::RoadMarking >*
      mutable_road_marking();
  const ::osi3::RoadMarking& road_marking(int index) const;
  ::osi3::RoadMarking* add_road_marking();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::RoadMarking >&
      road_marking() const;

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  int lane_boundary_size() const;
  void clear_lane_boundary();
  ::osi3::LaneBoundary* mutable_lane_boundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LaneBoundary >*
      mutable_lane_boundary();
  const ::osi3::LaneBoundary& lane_boundary(int index) const;
  ::osi3::LaneBoundary* add_lane_boundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LaneBoundary >&
      lane_boundary() const;

  // repeated .osi3.Lane lane = 10;
  int lane_size() const;
  void clear_lane();
  ::osi3::Lane* mutable_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Lane >*
      mutable_lane();
  const ::osi3::Lane& lane(int index) const;
  ::osi3::Lane* add_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Lane >&
      lane() const;

  // repeated .osi3.Occupant occupant = 11;
  int occupant_size() const;
  void clear_occupant();
  ::osi3::Occupant* mutable_occupant(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Occupant >*
      mutable_occupant();
  const ::osi3::Occupant& occupant(int index) const;
  ::osi3::Occupant* add_occupant();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Occupant >&
      occupant() const;

  // repeated .osi3.ReferenceLine reference_line = 17;
  int reference_line_size() const;
  void clear_reference_line();
  ::osi3::ReferenceLine* mutable_reference_line(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine >*
      mutable_reference_line();
  const ::osi3::ReferenceLine& reference_line(int index) const;
  ::osi3::ReferenceLine* add_reference_line();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine >&
      reference_line() const;

  // repeated .osi3.LogicalLaneBoundary logical_lane_boundary = 18;
  int logical_lane_boundary_size() const;
  void clear_logical_lane_boundary();
  ::osi3::LogicalLaneBoundary* mutable_logical_lane_boundary(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary >*
      mutable_logical_lane_boundary();
  const ::osi3::LogicalLaneBoundary& logical_lane_boundary(int index) const;
  ::osi3::LogicalLaneBoundary* add_logical_lane_boundary();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary >&
      logical_lane_boundary() const;

  // repeated .osi3.LogicalLane logical_lane = 19;
  int logical_lane_size() const;
  void clear_logical_lane();
  ::osi3::LogicalLane* mutable_logical_lane(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane >*
      mutable_logical_lane();
  const ::osi3::LogicalLane& logical_lane(int index) const;
  ::osi3::LogicalLane* add_logical_lane();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane >&
      logical_lane() const;

  // string proj_string = 14;
  void clear_proj_string();
  const std::string& proj_string() const;
  void set_proj_string(const std::string& value);
  void set_proj_string(std::string&& value);
  void set_proj_string(const char* value);
  void set_proj_string(const char* value, size_t size);
  std::string* mutable_proj_string();
  std::string* release_proj_string();
  void set_allocated_proj_string(std::string* proj_string);

  // string map_reference = 15;
  void clear_map_reference();
  const std::string& map_reference() const;
  void set_map_reference(const std::string& value);
  void set_map_reference(std::string&& value);
  void set_map_reference(const char* value);
  void set_map_reference(const char* value, size_t size);
  std::string* mutable_map_reference();
  std::string* release_map_reference();
  void set_allocated_map_reference(std::string* map_reference);

  // string model_reference = 16;
  void clear_model_reference();
  const std::string& model_reference() const;
  void set_model_reference(const std::string& value);
  void set_model_reference(std::string&& value);
  void set_model_reference(const char* value);
  void set_model_reference(const char* value, size_t size);
  std::string* mutable_model_reference();
  std::string* release_model_reference();
  void set_allocated_model_reference(std::string* model_reference);

  // .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);

  // .osi3.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);

  // .osi3.Identifier host_vehicle_id = 3;
  bool has_host_vehicle_id() const;
  void clear_host_vehicle_id();
  const ::osi3::Identifier& host_vehicle_id() const;
  ::osi3::Identifier* release_host_vehicle_id();
  ::osi3::Identifier* mutable_host_vehicle_id();
  void set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id);

  // .osi3.EnvironmentalConditions environmental_conditions = 12;
  bool has_environmental_conditions() const;
  void clear_environmental_conditions();
  const ::osi3::EnvironmentalConditions& environmental_conditions() const;
  ::osi3::EnvironmentalConditions* release_environmental_conditions();
  ::osi3::EnvironmentalConditions* mutable_environmental_conditions();
  void set_allocated_environmental_conditions(::osi3::EnvironmentalConditions* environmental_conditions);

  // uint32 country_code = 13;
  void clear_country_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 country_code() const;
  void set_country_code(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:osi3.GroundTruth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StationaryObject > stationary_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::MovingObject > moving_object_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficSign > traffic_sign_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficLight > traffic_light_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::RoadMarking > road_marking_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LaneBoundary > lane_boundary_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Lane > lane_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Occupant > occupant_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine > reference_line_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary > logical_lane_boundary_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane > logical_lane_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proj_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr map_reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_reference_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::Identifier* host_vehicle_id_;
  ::osi3::EnvironmentalConditions* environmental_conditions_;
  ::PROTOBUF_NAMESPACE_ID::uint32 country_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fgroundtruth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GroundTruth

// .osi3.InterfaceVersion version = 1;
inline bool GroundTruth::has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline const ::osi3::InterfaceVersion& GroundTruth::version() const {
  const ::osi3::InterfaceVersion* p = version_;
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.version)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::InterfaceVersion*>(
      &::osi3::_InterfaceVersion_default_instance_);
}
inline ::osi3::InterfaceVersion* GroundTruth::release_version() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.version)
  
  ::osi3::InterfaceVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* GroundTruth::mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.version)
  return version_;
}
inline void GroundTruth::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.version)
}

// .osi3.Timestamp timestamp = 2;
inline bool GroundTruth::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const ::osi3::Timestamp& GroundTruth::timestamp() const {
  const ::osi3::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Timestamp*>(
      &::osi3::_Timestamp_default_instance_);
}
inline ::osi3::Timestamp* GroundTruth::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.timestamp)
  
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* GroundTruth::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.timestamp)
  return timestamp_;
}
inline void GroundTruth::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.timestamp)
}

// .osi3.Identifier host_vehicle_id = 3;
inline bool GroundTruth::has_host_vehicle_id() const {
  return this != internal_default_instance() && host_vehicle_id_ != nullptr;
}
inline const ::osi3::Identifier& GroundTruth::host_vehicle_id() const {
  const ::osi3::Identifier* p = host_vehicle_id_;
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.host_vehicle_id)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline ::osi3::Identifier* GroundTruth::release_host_vehicle_id() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.host_vehicle_id)
  
  ::osi3::Identifier* temp = host_vehicle_id_;
  host_vehicle_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* GroundTruth::mutable_host_vehicle_id() {
  
  if (host_vehicle_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    host_vehicle_id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.host_vehicle_id)
  return host_vehicle_id_;
}
inline void GroundTruth::set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_vehicle_id_);
  }
  if (host_vehicle_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host_vehicle_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_vehicle_id, submessage_arena);
    }
    
  } else {
    
  }
  host_vehicle_id_ = host_vehicle_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.host_vehicle_id)
}

// repeated .osi3.StationaryObject stationary_object = 4;
inline int GroundTruth::stationary_object_size() const {
  return stationary_object_.size();
}
inline ::osi3::StationaryObject* GroundTruth::mutable_stationary_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.stationary_object)
  return stationary_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StationaryObject >*
GroundTruth::mutable_stationary_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.stationary_object)
  return &stationary_object_;
}
inline const ::osi3::StationaryObject& GroundTruth::stationary_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.stationary_object)
  return stationary_object_.Get(index);
}
inline ::osi3::StationaryObject* GroundTruth::add_stationary_object() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.stationary_object)
  return stationary_object_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StationaryObject >&
GroundTruth::stationary_object() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.stationary_object)
  return stationary_object_;
}

// repeated .osi3.MovingObject moving_object = 5;
inline int GroundTruth::moving_object_size() const {
  return moving_object_.size();
}
inline ::osi3::MovingObject* GroundTruth::mutable_moving_object(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.moving_object)
  return moving_object_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::MovingObject >*
GroundTruth::mutable_moving_object() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.moving_object)
  return &moving_object_;
}
inline const ::osi3::MovingObject& GroundTruth::moving_object(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.moving_object)
  return moving_object_.Get(index);
}
inline ::osi3::MovingObject* GroundTruth::add_moving_object() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.moving_object)
  return moving_object_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::MovingObject >&
GroundTruth::moving_object() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.moving_object)
  return moving_object_;
}

// repeated .osi3.TrafficSign traffic_sign = 6;
inline int GroundTruth::traffic_sign_size() const {
  return traffic_sign_.size();
}
inline ::osi3::TrafficSign* GroundTruth::mutable_traffic_sign(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficSign >*
GroundTruth::mutable_traffic_sign() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.traffic_sign)
  return &traffic_sign_;
}
inline const ::osi3::TrafficSign& GroundTruth::traffic_sign(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Get(index);
}
inline ::osi3::TrafficSign* GroundTruth::add_traffic_sign() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.traffic_sign)
  return traffic_sign_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficSign >&
GroundTruth::traffic_sign() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.traffic_sign)
  return traffic_sign_;
}

// repeated .osi3.TrafficLight traffic_light = 7;
inline int GroundTruth::traffic_light_size() const {
  return traffic_light_.size();
}
inline ::osi3::TrafficLight* GroundTruth::mutable_traffic_light(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.traffic_light)
  return traffic_light_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficLight >*
GroundTruth::mutable_traffic_light() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.traffic_light)
  return &traffic_light_;
}
inline const ::osi3::TrafficLight& GroundTruth::traffic_light(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.traffic_light)
  return traffic_light_.Get(index);
}
inline ::osi3::TrafficLight* GroundTruth::add_traffic_light() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.traffic_light)
  return traffic_light_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficLight >&
GroundTruth::traffic_light() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.traffic_light)
  return traffic_light_;
}

// repeated .osi3.RoadMarking road_marking = 8;
inline int GroundTruth::road_marking_size() const {
  return road_marking_.size();
}
inline ::osi3::RoadMarking* GroundTruth::mutable_road_marking(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.road_marking)
  return road_marking_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::RoadMarking >*
GroundTruth::mutable_road_marking() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.road_marking)
  return &road_marking_;
}
inline const ::osi3::RoadMarking& GroundTruth::road_marking(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.road_marking)
  return road_marking_.Get(index);
}
inline ::osi3::RoadMarking* GroundTruth::add_road_marking() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.road_marking)
  return road_marking_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::RoadMarking >&
GroundTruth::road_marking() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.road_marking)
  return road_marking_;
}

// repeated .osi3.LaneBoundary lane_boundary = 9;
inline int GroundTruth::lane_boundary_size() const {
  return lane_boundary_.size();
}
inline ::osi3::LaneBoundary* GroundTruth::mutable_lane_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LaneBoundary >*
GroundTruth::mutable_lane_boundary() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.lane_boundary)
  return &lane_boundary_;
}
inline const ::osi3::LaneBoundary& GroundTruth::lane_boundary(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Get(index);
}
inline ::osi3::LaneBoundary* GroundTruth::add_lane_boundary() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.lane_boundary)
  return lane_boundary_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LaneBoundary >&
GroundTruth::lane_boundary() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.lane_boundary)
  return lane_boundary_;
}

// repeated .osi3.Lane lane = 10;
inline int GroundTruth::lane_size() const {
  return lane_.size();
}
inline ::osi3::Lane* GroundTruth::mutable_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.lane)
  return lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Lane >*
GroundTruth::mutable_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.lane)
  return &lane_;
}
inline const ::osi3::Lane& GroundTruth::lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.lane)
  return lane_.Get(index);
}
inline ::osi3::Lane* GroundTruth::add_lane() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.lane)
  return lane_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Lane >&
GroundTruth::lane() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.lane)
  return lane_;
}

// repeated .osi3.Occupant occupant = 11;
inline int GroundTruth::occupant_size() const {
  return occupant_.size();
}
inline ::osi3::Occupant* GroundTruth::mutable_occupant(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.occupant)
  return occupant_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Occupant >*
GroundTruth::mutable_occupant() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.occupant)
  return &occupant_;
}
inline const ::osi3::Occupant& GroundTruth::occupant(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.occupant)
  return occupant_.Get(index);
}
inline ::osi3::Occupant* GroundTruth::add_occupant() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.occupant)
  return occupant_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Occupant >&
GroundTruth::occupant() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.occupant)
  return occupant_;
}

// .osi3.EnvironmentalConditions environmental_conditions = 12;
inline bool GroundTruth::has_environmental_conditions() const {
  return this != internal_default_instance() && environmental_conditions_ != nullptr;
}
inline const ::osi3::EnvironmentalConditions& GroundTruth::environmental_conditions() const {
  const ::osi3::EnvironmentalConditions* p = environmental_conditions_;
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.environmental_conditions)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::EnvironmentalConditions*>(
      &::osi3::_EnvironmentalConditions_default_instance_);
}
inline ::osi3::EnvironmentalConditions* GroundTruth::release_environmental_conditions() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.environmental_conditions)
  
  ::osi3::EnvironmentalConditions* temp = environmental_conditions_;
  environmental_conditions_ = nullptr;
  return temp;
}
inline ::osi3::EnvironmentalConditions* GroundTruth::mutable_environmental_conditions() {
  
  if (environmental_conditions_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::EnvironmentalConditions>(GetArenaNoVirtual());
    environmental_conditions_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.environmental_conditions)
  return environmental_conditions_;
}
inline void GroundTruth::set_allocated_environmental_conditions(::osi3::EnvironmentalConditions* environmental_conditions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(environmental_conditions_);
  }
  if (environmental_conditions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      environmental_conditions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environmental_conditions, submessage_arena);
    }
    
  } else {
    
  }
  environmental_conditions_ = environmental_conditions;
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.environmental_conditions)
}

// uint32 country_code = 13;
inline void GroundTruth::clear_country_code() {
  country_code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GroundTruth::country_code() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.country_code)
  return country_code_;
}
inline void GroundTruth::set_country_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  country_code_ = value;
  // @@protoc_insertion_point(field_set:osi3.GroundTruth.country_code)
}

// string proj_string = 14;
inline void GroundTruth::clear_proj_string() {
  proj_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroundTruth::proj_string() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.proj_string)
  return proj_string_.GetNoArena();
}
inline void GroundTruth::set_proj_string(const std::string& value) {
  
  proj_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.GroundTruth.proj_string)
}
inline void GroundTruth::set_proj_string(std::string&& value) {
  
  proj_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.GroundTruth.proj_string)
}
inline void GroundTruth::set_proj_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  proj_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.GroundTruth.proj_string)
}
inline void GroundTruth::set_proj_string(const char* value, size_t size) {
  
  proj_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.GroundTruth.proj_string)
}
inline std::string* GroundTruth::mutable_proj_string() {
  
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.proj_string)
  return proj_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroundTruth::release_proj_string() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.proj_string)
  
  return proj_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroundTruth::set_allocated_proj_string(std::string* proj_string) {
  if (proj_string != nullptr) {
    
  } else {
    
  }
  proj_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), proj_string);
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.proj_string)
}

// string map_reference = 15;
inline void GroundTruth::clear_map_reference() {
  map_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroundTruth::map_reference() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.map_reference)
  return map_reference_.GetNoArena();
}
inline void GroundTruth::set_map_reference(const std::string& value) {
  
  map_reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.GroundTruth.map_reference)
}
inline void GroundTruth::set_map_reference(std::string&& value) {
  
  map_reference_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.GroundTruth.map_reference)
}
inline void GroundTruth::set_map_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  map_reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.GroundTruth.map_reference)
}
inline void GroundTruth::set_map_reference(const char* value, size_t size) {
  
  map_reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.GroundTruth.map_reference)
}
inline std::string* GroundTruth::mutable_map_reference() {
  
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.map_reference)
  return map_reference_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroundTruth::release_map_reference() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.map_reference)
  
  return map_reference_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroundTruth::set_allocated_map_reference(std::string* map_reference) {
  if (map_reference != nullptr) {
    
  } else {
    
  }
  map_reference_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), map_reference);
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.map_reference)
}

// string model_reference = 16;
inline void GroundTruth::clear_model_reference() {
  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GroundTruth::model_reference() const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.model_reference)
  return model_reference_.GetNoArena();
}
inline void GroundTruth::set_model_reference(const std::string& value) {
  
  model_reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:osi3.GroundTruth.model_reference)
}
inline void GroundTruth::set_model_reference(std::string&& value) {
  
  model_reference_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.GroundTruth.model_reference)
}
inline void GroundTruth::set_model_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  model_reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.GroundTruth.model_reference)
}
inline void GroundTruth::set_model_reference(const char* value, size_t size) {
  
  model_reference_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.GroundTruth.model_reference)
}
inline std::string* GroundTruth::mutable_model_reference() {
  
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.model_reference)
  return model_reference_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GroundTruth::release_model_reference() {
  // @@protoc_insertion_point(field_release:osi3.GroundTruth.model_reference)
  
  return model_reference_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GroundTruth::set_allocated_model_reference(std::string* model_reference) {
  if (model_reference != nullptr) {
    
  } else {
    
  }
  model_reference_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_reference);
  // @@protoc_insertion_point(field_set_allocated:osi3.GroundTruth.model_reference)
}

// repeated .osi3.ReferenceLine reference_line = 17;
inline int GroundTruth::reference_line_size() const {
  return reference_line_.size();
}
inline ::osi3::ReferenceLine* GroundTruth::mutable_reference_line(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.reference_line)
  return reference_line_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine >*
GroundTruth::mutable_reference_line() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.reference_line)
  return &reference_line_;
}
inline const ::osi3::ReferenceLine& GroundTruth::reference_line(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.reference_line)
  return reference_line_.Get(index);
}
inline ::osi3::ReferenceLine* GroundTruth::add_reference_line() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.reference_line)
  return reference_line_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ReferenceLine >&
GroundTruth::reference_line() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.reference_line)
  return reference_line_;
}

// repeated .osi3.LogicalLaneBoundary logical_lane_boundary = 18;
inline int GroundTruth::logical_lane_boundary_size() const {
  return logical_lane_boundary_.size();
}
inline ::osi3::LogicalLaneBoundary* GroundTruth::mutable_logical_lane_boundary(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.logical_lane_boundary)
  return logical_lane_boundary_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary >*
GroundTruth::mutable_logical_lane_boundary() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.logical_lane_boundary)
  return &logical_lane_boundary_;
}
inline const ::osi3::LogicalLaneBoundary& GroundTruth::logical_lane_boundary(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.logical_lane_boundary)
  return logical_lane_boundary_.Get(index);
}
inline ::osi3::LogicalLaneBoundary* GroundTruth::add_logical_lane_boundary() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.logical_lane_boundary)
  return logical_lane_boundary_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLaneBoundary >&
GroundTruth::logical_lane_boundary() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.logical_lane_boundary)
  return logical_lane_boundary_;
}

// repeated .osi3.LogicalLane logical_lane = 19;
inline int GroundTruth::logical_lane_size() const {
  return logical_lane_.size();
}
inline ::osi3::LogicalLane* GroundTruth::mutable_logical_lane(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.GroundTruth.logical_lane)
  return logical_lane_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane >*
GroundTruth::mutable_logical_lane() {
  // @@protoc_insertion_point(field_mutable_list:osi3.GroundTruth.logical_lane)
  return &logical_lane_;
}
inline const ::osi3::LogicalLane& GroundTruth::logical_lane(int index) const {
  // @@protoc_insertion_point(field_get:osi3.GroundTruth.logical_lane)
  return logical_lane_.Get(index);
}
inline ::osi3::LogicalLane* GroundTruth::add_logical_lane() {
  // @@protoc_insertion_point(field_add:osi3.GroundTruth.logical_lane)
  return logical_lane_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalLane >&
GroundTruth::logical_lane() const {
  // @@protoc_insertion_point(field_list:osi3.GroundTruth.logical_lane)
  return logical_lane_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fgroundtruth_2eproto
