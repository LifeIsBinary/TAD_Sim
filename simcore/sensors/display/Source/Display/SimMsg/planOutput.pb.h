// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planOutput.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planOutput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planOutput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "trajectory.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planOutput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planOutput_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planOutput_2eproto;
namespace sim_msg {
class CarInfo;
class CarInfoDefaultTypeInternal;
extern CarInfoDefaultTypeInternal _CarInfo_default_instance_;
class GridMap;
class GridMapDefaultTypeInternal;
extern GridMapDefaultTypeInternal _GridMap_default_instance_;
class PlanOutput;
class PlanOutputDefaultTypeInternal;
extern PlanOutputDefaultTypeInternal _PlanOutput_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::CarInfo* Arena::CreateMaybeMessage<::sim_msg::CarInfo>(Arena*);
template<> ::sim_msg::GridMap* Arena::CreateMaybeMessage<::sim_msg::GridMap>(Arena*);
template<> ::sim_msg::PlanOutput* Arena::CreateMaybeMessage<::sim_msg::PlanOutput>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

// ===================================================================

class GridMap :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.GridMap) */ {
 public:
  GridMap();
  virtual ~GridMap();

  GridMap(const GridMap& from);
  GridMap(GridMap&& from) noexcept
    : GridMap() {
    *this = ::std::move(from);
  }

  inline GridMap& operator=(const GridMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridMap& operator=(GridMap&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridMap* internal_default_instance() {
    return reinterpret_cast<const GridMap*>(
               &_GridMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GridMap& a, GridMap& b) {
    a.Swap(&b);
  }
  inline void Swap(GridMap* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridMap* New() const final {
    return CreateMaybeMessage<GridMap>(nullptr);
  }

  GridMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridMap& from);
  void MergeFrom(const GridMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.GridMap";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planOutput_2eproto);
    return ::descriptor_table_planOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 8,
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
    kWidthFieldNumber = 4,
    kHeightFieldNumber = 5,
    kDxFieldNumber = 6,
    kDyFieldNumber = 7,
  };
  // repeated float data = 8;
  int data_size() const;
  void clear_data();
  float data(int index) const;
  void set_data(int index, float value);
  void add_data(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_data();

  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double theta = 3;
  void clear_theta();
  double theta() const;
  void set_theta(double value);

  // int32 width = 4;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 height = 5;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double dx = 6;
  void clear_dx();
  double dx() const;
  void set_dx(double value);

  // double dy = 7;
  void clear_dy();
  double dy() const;
  void set_dy(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.GridMap)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  double x_;
  double y_;
  double theta_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  double dx_;
  double dy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planOutput_2eproto;
};
// -------------------------------------------------------------------

class CarInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.CarInfo) */ {
 public:
  CarInfo();
  virtual ~CarInfo();

  CarInfo(const CarInfo& from);
  CarInfo(CarInfo&& from) noexcept
    : CarInfo() {
    *this = ::std::move(from);
  }

  inline CarInfo& operator=(const CarInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarInfo& operator=(CarInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CarInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CarInfo* internal_default_instance() {
    return reinterpret_cast<const CarInfo*>(
               &_CarInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CarInfo& a, CarInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CarInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CarInfo* New() const final {
    return CreateMaybeMessage<CarInfo>(nullptr);
  }

  CarInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CarInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CarInfo& from);
  void MergeFrom(const CarInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.CarInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planOutput_2eproto);
    return ::descriptor_table_planOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOptionFieldNumber = 2,
    kSFieldNumber = 3,
    kLFieldNumber = 4,
    kTargetLFieldNumber = 5,
    kFultureLFieldNumber = 6,
    kDFieldNumber = 7,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 option = 2;
  void clear_option();
  ::PROTOBUF_NAMESPACE_ID::int32 option() const;
  void set_option(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double s = 3;
  void clear_s();
  double s() const;
  void set_s(double value);

  // double l = 4;
  void clear_l();
  double l() const;
  void set_l(double value);

  // double targetL = 5;
  void clear_targetl();
  double targetl() const;
  void set_targetl(double value);

  // double fultureL = 6;
  void clear_fulturel();
  double fulturel() const;
  void set_fulturel(double value);

  // double d = 7;
  void clear_d();
  double d() const;
  void set_d(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.CarInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 option_;
  double s_;
  double l_;
  double targetl_;
  double fulturel_;
  double d_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planOutput_2eproto;
};
// -------------------------------------------------------------------

class PlanOutput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PlanOutput) */ {
 public:
  PlanOutput();
  virtual ~PlanOutput();

  PlanOutput(const PlanOutput& from);
  PlanOutput(PlanOutput&& from) noexcept
    : PlanOutput() {
    *this = ::std::move(from);
  }

  inline PlanOutput& operator=(const PlanOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanOutput& operator=(PlanOutput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanOutput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanOutput* internal_default_instance() {
    return reinterpret_cast<const PlanOutput*>(
               &_PlanOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PlanOutput& a, PlanOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanOutput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanOutput* New() const final {
    return CreateMaybeMessage<PlanOutput>(nullptr);
  }

  PlanOutput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanOutput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanOutput& from);
  void MergeFrom(const PlanOutput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanOutput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PlanOutput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planOutput_2eproto);
    return ::descriptor_table_planOutput_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrjFieldNumber = 1,
    kGridFieldNumber = 2,
    kCarFieldNumber = 3,
    kTargetLaneFieldNumber = 4,
    kMainLaneFieldNumber = 5,
    kSFieldNumber = 7,
    kLFieldNumber = 8,
    kLaneChangeFieldNumber = 6,
  };
  // repeated .sim_msg.Trajectory trj = 1;
  int trj_size() const;
  void clear_trj();
  ::sim_msg::Trajectory* mutable_trj(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Trajectory >*
      mutable_trj();
  const ::sim_msg::Trajectory& trj(int index) const;
  ::sim_msg::Trajectory* add_trj();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Trajectory >&
      trj() const;

  // repeated .sim_msg.GridMap grid = 2;
  int grid_size() const;
  void clear_grid();
  ::sim_msg::GridMap* mutable_grid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::GridMap >*
      mutable_grid();
  const ::sim_msg::GridMap& grid(int index) const;
  ::sim_msg::GridMap* add_grid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::GridMap >&
      grid() const;

  // repeated .sim_msg.CarInfo car = 3;
  int car_size() const;
  void clear_car();
  ::sim_msg::CarInfo* mutable_car(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::CarInfo >*
      mutable_car();
  const ::sim_msg::CarInfo& car(int index) const;
  ::sim_msg::CarInfo* add_car();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::CarInfo >&
      car() const;

  // int32 targetLane = 4;
  void clear_targetlane();
  ::PROTOBUF_NAMESPACE_ID::int32 targetlane() const;
  void set_targetlane(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 mainLane = 5;
  void clear_mainlane();
  ::PROTOBUF_NAMESPACE_ID::int32 mainlane() const;
  void set_mainlane(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double s = 7;
  void clear_s();
  double s() const;
  void set_s(double value);

  // double l = 8;
  void clear_l();
  double l() const;
  void set_l(double value);

  // int32 laneChange = 6;
  void clear_lanechange();
  ::PROTOBUF_NAMESPACE_ID::int32 lanechange() const;
  void set_lanechange(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.PlanOutput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Trajectory > trj_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::GridMap > grid_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::CarInfo > car_;
  ::PROTOBUF_NAMESPACE_ID::int32 targetlane_;
  ::PROTOBUF_NAMESPACE_ID::int32 mainlane_;
  double s_;
  double l_;
  ::PROTOBUF_NAMESPACE_ID::int32 lanechange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planOutput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GridMap

// double x = 1;
inline void GridMap::clear_x() {
  x_ = 0;
}
inline double GridMap::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.x)
  return x_;
}
inline void GridMap::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.x)
}

// double y = 2;
inline void GridMap::clear_y() {
  y_ = 0;
}
inline double GridMap::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.y)
  return y_;
}
inline void GridMap::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.y)
}

// double theta = 3;
inline void GridMap::clear_theta() {
  theta_ = 0;
}
inline double GridMap::theta() const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.theta)
  return theta_;
}
inline void GridMap::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.theta)
}

// int32 width = 4;
inline void GridMap::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GridMap::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.width)
  return width_;
}
inline void GridMap::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.width)
}

// int32 height = 5;
inline void GridMap::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GridMap::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.height)
  return height_;
}
inline void GridMap::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.height)
}

// double dx = 6;
inline void GridMap::clear_dx() {
  dx_ = 0;
}
inline double GridMap::dx() const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.dx)
  return dx_;
}
inline void GridMap::set_dx(double value) {
  
  dx_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.dx)
}

// double dy = 7;
inline void GridMap::clear_dy() {
  dy_ = 0;
}
inline double GridMap::dy() const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.dy)
  return dy_;
}
inline void GridMap::set_dy(double value) {
  
  dy_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.dy)
}

// repeated float data = 8;
inline int GridMap::data_size() const {
  return data_.size();
}
inline void GridMap::clear_data() {
  data_.Clear();
}
inline float GridMap::data(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.GridMap.data)
  return data_.Get(index);
}
inline void GridMap::set_data(int index, float value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:sim_msg.GridMap.data)
}
inline void GridMap::add_data(float value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:sim_msg.GridMap.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridMap::data() const {
  // @@protoc_insertion_point(field_list:sim_msg.GridMap.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridMap::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.GridMap.data)
  return &data_;
}

// -------------------------------------------------------------------

// CarInfo

// int32 id = 1;
inline void CarInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.CarInfo.id)
  return id_;
}
inline void CarInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CarInfo.id)
}

// int32 option = 2;
inline void CarInfo::clear_option() {
  option_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CarInfo::option() const {
  // @@protoc_insertion_point(field_get:sim_msg.CarInfo.option)
  return option_;
}
inline void CarInfo::set_option(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  option_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CarInfo.option)
}

// double s = 3;
inline void CarInfo::clear_s() {
  s_ = 0;
}
inline double CarInfo::s() const {
  // @@protoc_insertion_point(field_get:sim_msg.CarInfo.s)
  return s_;
}
inline void CarInfo::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CarInfo.s)
}

// double l = 4;
inline void CarInfo::clear_l() {
  l_ = 0;
}
inline double CarInfo::l() const {
  // @@protoc_insertion_point(field_get:sim_msg.CarInfo.l)
  return l_;
}
inline void CarInfo::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CarInfo.l)
}

// double targetL = 5;
inline void CarInfo::clear_targetl() {
  targetl_ = 0;
}
inline double CarInfo::targetl() const {
  // @@protoc_insertion_point(field_get:sim_msg.CarInfo.targetL)
  return targetl_;
}
inline void CarInfo::set_targetl(double value) {
  
  targetl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CarInfo.targetL)
}

// double fultureL = 6;
inline void CarInfo::clear_fulturel() {
  fulturel_ = 0;
}
inline double CarInfo::fulturel() const {
  // @@protoc_insertion_point(field_get:sim_msg.CarInfo.fultureL)
  return fulturel_;
}
inline void CarInfo::set_fulturel(double value) {
  
  fulturel_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CarInfo.fultureL)
}

// double d = 7;
inline void CarInfo::clear_d() {
  d_ = 0;
}
inline double CarInfo::d() const {
  // @@protoc_insertion_point(field_get:sim_msg.CarInfo.d)
  return d_;
}
inline void CarInfo::set_d(double value) {
  
  d_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.CarInfo.d)
}

// -------------------------------------------------------------------

// PlanOutput

// repeated .sim_msg.Trajectory trj = 1;
inline int PlanOutput::trj_size() const {
  return trj_.size();
}
inline ::sim_msg::Trajectory* PlanOutput::mutable_trj(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanOutput.trj)
  return trj_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Trajectory >*
PlanOutput::mutable_trj() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.PlanOutput.trj)
  return &trj_;
}
inline const ::sim_msg::Trajectory& PlanOutput::trj(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.trj)
  return trj_.Get(index);
}
inline ::sim_msg::Trajectory* PlanOutput::add_trj() {
  // @@protoc_insertion_point(field_add:sim_msg.PlanOutput.trj)
  return trj_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Trajectory >&
PlanOutput::trj() const {
  // @@protoc_insertion_point(field_list:sim_msg.PlanOutput.trj)
  return trj_;
}

// repeated .sim_msg.GridMap grid = 2;
inline int PlanOutput::grid_size() const {
  return grid_.size();
}
inline void PlanOutput::clear_grid() {
  grid_.Clear();
}
inline ::sim_msg::GridMap* PlanOutput::mutable_grid(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanOutput.grid)
  return grid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::GridMap >*
PlanOutput::mutable_grid() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.PlanOutput.grid)
  return &grid_;
}
inline const ::sim_msg::GridMap& PlanOutput::grid(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.grid)
  return grid_.Get(index);
}
inline ::sim_msg::GridMap* PlanOutput::add_grid() {
  // @@protoc_insertion_point(field_add:sim_msg.PlanOutput.grid)
  return grid_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::GridMap >&
PlanOutput::grid() const {
  // @@protoc_insertion_point(field_list:sim_msg.PlanOutput.grid)
  return grid_;
}

// repeated .sim_msg.CarInfo car = 3;
inline int PlanOutput::car_size() const {
  return car_.size();
}
inline void PlanOutput::clear_car() {
  car_.Clear();
}
inline ::sim_msg::CarInfo* PlanOutput::mutable_car(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanOutput.car)
  return car_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::CarInfo >*
PlanOutput::mutable_car() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.PlanOutput.car)
  return &car_;
}
inline const ::sim_msg::CarInfo& PlanOutput::car(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.car)
  return car_.Get(index);
}
inline ::sim_msg::CarInfo* PlanOutput::add_car() {
  // @@protoc_insertion_point(field_add:sim_msg.PlanOutput.car)
  return car_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::CarInfo >&
PlanOutput::car() const {
  // @@protoc_insertion_point(field_list:sim_msg.PlanOutput.car)
  return car_;
}

// int32 targetLane = 4;
inline void PlanOutput::clear_targetlane() {
  targetlane_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanOutput::targetlane() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.targetLane)
  return targetlane_;
}
inline void PlanOutput::set_targetlane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  targetlane_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanOutput.targetLane)
}

// int32 mainLane = 5;
inline void PlanOutput::clear_mainlane() {
  mainlane_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanOutput::mainlane() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.mainLane)
  return mainlane_;
}
inline void PlanOutput::set_mainlane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mainlane_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanOutput.mainLane)
}

// int32 laneChange = 6;
inline void PlanOutput::clear_lanechange() {
  lanechange_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlanOutput::lanechange() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.laneChange)
  return lanechange_;
}
inline void PlanOutput::set_lanechange(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  lanechange_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanOutput.laneChange)
}

// double s = 7;
inline void PlanOutput::clear_s() {
  s_ = 0;
}
inline double PlanOutput::s() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.s)
  return s_;
}
inline void PlanOutput::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanOutput.s)
}

// double l = 8;
inline void PlanOutput::clear_l() {
  l_ = 0;
}
inline double PlanOutput::l() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanOutput.l)
  return l_;
}
inline void PlanOutput::set_l(double value) {
  
  l_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanOutput.l)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planOutput_2eproto
