// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_gps.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fgps_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fgps_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fgps_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fgps_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fgps_2eproto;
namespace osi3 {
class GPS;
class GPSDefaultTypeInternal;
extern GPSDefaultTypeInternal _GPS_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::GPS* Arena::CreateMaybeMessage<::osi3::GPS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class GPS :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.GPS) */ {
 public:
  GPS();
  virtual ~GPS();

  GPS(const GPS& from);
  GPS(GPS&& from) noexcept
    : GPS() {
    *this = ::std::move(from);
  }

  inline GPS& operator=(const GPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPS& operator=(GPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPS* internal_default_instance() {
    return reinterpret_cast<const GPS*>(
               &_GPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GPS& a, GPS& b) {
    a.Swap(&b);
  }
  inline void Swap(GPS* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPS* New() const final {
    return CreateMaybeMessage<GPS>(nullptr);
  }

  GPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPS& from);
  void MergeFrom(const GPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.GPS";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fgps_2eproto);
    return ::descriptor_table_osi_5fgps_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kMountPosFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kLatitudeFieldNumber = 5,
    kHeightFieldNumber = 6,
    kVelHrzFieldNumber = 7,
    kTrackFieldNumber = 8,
    kVelVrtFieldNumber = 9,
    kLatSdtDevFieldNumber = 10,
    kLonSdtDevFieldNumber = 11,
    kHgtSdtDevFieldNumber = 12,
    kSolStFieldNumber = 13,
    kPosTypeFieldNumber = 14,
    kUndulationFieldNumber = 15,
  };
  // .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);

  // .osi3.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);

  // .osi3.MountingPosition mount_pos = 3;
  bool has_mount_pos() const;
  void clear_mount_pos();
  const ::osi3::MountingPosition& mount_pos() const;
  ::osi3::MountingPosition* release_mount_pos();
  ::osi3::MountingPosition* mutable_mount_pos();
  void set_allocated_mount_pos(::osi3::MountingPosition* mount_pos);

  // double longitude = 4;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 5;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);

  // double height = 6;
  void clear_height();
  double height() const;
  void set_height(double value);

  // double vel_hrz = 7;
  void clear_vel_hrz();
  double vel_hrz() const;
  void set_vel_hrz(double value);

  // double track = 8;
  void clear_track();
  double track() const;
  void set_track(double value);

  // double vel_vrt = 9;
  void clear_vel_vrt();
  double vel_vrt() const;
  void set_vel_vrt(double value);

  // double latSdtDev = 10;
  void clear_latsdtdev();
  double latsdtdev() const;
  void set_latsdtdev(double value);

  // double lonSdtDev = 11;
  void clear_lonsdtdev();
  double lonsdtdev() const;
  void set_lonsdtdev(double value);

  // double hgtSdtDev = 12;
  void clear_hgtsdtdev();
  double hgtsdtdev() const;
  void set_hgtsdtdev(double value);

  // uint32 SolSt = 13;
  void clear_solst();
  ::PROTOBUF_NAMESPACE_ID::uint32 solst() const;
  void set_solst(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 PosType = 14;
  void clear_postype();
  ::PROTOBUF_NAMESPACE_ID::uint32 postype() const;
  void set_postype(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // double Undulation = 15;
  void clear_undulation();
  double undulation() const;
  void set_undulation(double value);

  // @@protoc_insertion_point(class_scope:osi3.GPS)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::MountingPosition* mount_pos_;
  double longitude_;
  double latitude_;
  double height_;
  double vel_hrz_;
  double track_;
  double vel_vrt_;
  double latsdtdev_;
  double lonsdtdev_;
  double hgtsdtdev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solst_;
  ::PROTOBUF_NAMESPACE_ID::uint32 postype_;
  double undulation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fgps_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GPS

// .osi3.InterfaceVersion version = 1;
inline bool GPS::has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline const ::osi3::InterfaceVersion& GPS::version() const {
  const ::osi3::InterfaceVersion* p = version_;
  // @@protoc_insertion_point(field_get:osi3.GPS.version)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::InterfaceVersion*>(
      &::osi3::_InterfaceVersion_default_instance_);
}
inline ::osi3::InterfaceVersion* GPS::release_version() {
  // @@protoc_insertion_point(field_release:osi3.GPS.version)
  
  ::osi3::InterfaceVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* GPS::mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GPS.version)
  return version_;
}
inline void GPS::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.GPS.version)
}

// .osi3.Timestamp timestamp = 2;
inline bool GPS::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const ::osi3::Timestamp& GPS::timestamp() const {
  const ::osi3::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:osi3.GPS.timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Timestamp*>(
      &::osi3::_Timestamp_default_instance_);
}
inline ::osi3::Timestamp* GPS::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.GPS.timestamp)
  
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* GPS::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GPS.timestamp)
  return timestamp_;
}
inline void GPS::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.GPS.timestamp)
}

// .osi3.MountingPosition mount_pos = 3;
inline bool GPS::has_mount_pos() const {
  return this != internal_default_instance() && mount_pos_ != nullptr;
}
inline const ::osi3::MountingPosition& GPS::mount_pos() const {
  const ::osi3::MountingPosition* p = mount_pos_;
  // @@protoc_insertion_point(field_get:osi3.GPS.mount_pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::MountingPosition*>(
      &::osi3::_MountingPosition_default_instance_);
}
inline ::osi3::MountingPosition* GPS::release_mount_pos() {
  // @@protoc_insertion_point(field_release:osi3.GPS.mount_pos)
  
  ::osi3::MountingPosition* temp = mount_pos_;
  mount_pos_ = nullptr;
  return temp;
}
inline ::osi3::MountingPosition* GPS::mutable_mount_pos() {
  
  if (mount_pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::MountingPosition>(GetArenaNoVirtual());
    mount_pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:osi3.GPS.mount_pos)
  return mount_pos_;
}
inline void GPS::set_allocated_mount_pos(::osi3::MountingPosition* mount_pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mount_pos_);
  }
  if (mount_pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mount_pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mount_pos, submessage_arena);
    }
    
  } else {
    
  }
  mount_pos_ = mount_pos;
  // @@protoc_insertion_point(field_set_allocated:osi3.GPS.mount_pos)
}

// double longitude = 4;
inline void GPS::clear_longitude() {
  longitude_ = 0;
}
inline double GPS::longitude() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.longitude)
  return longitude_;
}
inline void GPS::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.longitude)
}

// double latitude = 5;
inline void GPS::clear_latitude() {
  latitude_ = 0;
}
inline double GPS::latitude() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.latitude)
  return latitude_;
}
inline void GPS::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.latitude)
}

// double height = 6;
inline void GPS::clear_height() {
  height_ = 0;
}
inline double GPS::height() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.height)
  return height_;
}
inline void GPS::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.height)
}

// double vel_hrz = 7;
inline void GPS::clear_vel_hrz() {
  vel_hrz_ = 0;
}
inline double GPS::vel_hrz() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.vel_hrz)
  return vel_hrz_;
}
inline void GPS::set_vel_hrz(double value) {
  
  vel_hrz_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.vel_hrz)
}

// double track = 8;
inline void GPS::clear_track() {
  track_ = 0;
}
inline double GPS::track() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.track)
  return track_;
}
inline void GPS::set_track(double value) {
  
  track_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.track)
}

// double vel_vrt = 9;
inline void GPS::clear_vel_vrt() {
  vel_vrt_ = 0;
}
inline double GPS::vel_vrt() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.vel_vrt)
  return vel_vrt_;
}
inline void GPS::set_vel_vrt(double value) {
  
  vel_vrt_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.vel_vrt)
}

// double latSdtDev = 10;
inline void GPS::clear_latsdtdev() {
  latsdtdev_ = 0;
}
inline double GPS::latsdtdev() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.latSdtDev)
  return latsdtdev_;
}
inline void GPS::set_latsdtdev(double value) {
  
  latsdtdev_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.latSdtDev)
}

// double lonSdtDev = 11;
inline void GPS::clear_lonsdtdev() {
  lonsdtdev_ = 0;
}
inline double GPS::lonsdtdev() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.lonSdtDev)
  return lonsdtdev_;
}
inline void GPS::set_lonsdtdev(double value) {
  
  lonsdtdev_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.lonSdtDev)
}

// double hgtSdtDev = 12;
inline void GPS::clear_hgtsdtdev() {
  hgtsdtdev_ = 0;
}
inline double GPS::hgtsdtdev() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.hgtSdtDev)
  return hgtsdtdev_;
}
inline void GPS::set_hgtsdtdev(double value) {
  
  hgtsdtdev_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.hgtSdtDev)
}

// uint32 SolSt = 13;
inline void GPS::clear_solst() {
  solst_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPS::solst() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.SolSt)
  return solst_;
}
inline void GPS::set_solst(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  solst_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.SolSt)
}

// uint32 PosType = 14;
inline void GPS::clear_postype() {
  postype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GPS::postype() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.PosType)
  return postype_;
}
inline void GPS::set_postype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  postype_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.PosType)
}

// double Undulation = 15;
inline void GPS::clear_undulation() {
  undulation_ = 0;
}
inline double GPS::undulation() const {
  // @@protoc_insertion_point(field_get:osi3.GPS.Undulation)
  return undulation_;
}
inline void GPS::set_undulation(double value) {
  
  undulation_ = value;
  // @@protoc_insertion_point(field_set:osi3.GPS.Undulation)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fgps_2eproto
