// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vehicle_interaction.proto
#pragma warning (disable : 4125)
#include "vehicle_interaction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activate_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Assign_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Assign_Cruise_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Command_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_LaneChange_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_Overtaking_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Override_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Brake_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Clutch_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Gear_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_ParkingBrake_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_SteeringWheel_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Throttle_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_vehicle_5finteraction_2eproto;
namespace sim_msg {
class ActivateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Activate> _instance;
} _Activate_default_instance_;
class Assign_CruiseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Assign_Cruise> _instance;
} _Assign_Cruise_default_instance_;
class AssignDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Assign> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr none_;
  const ::sim_msg::Assign_Cruise* cruise_;
} _Assign_default_instance_;
class Override_ThrottleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Override_Throttle> _instance;
} _Override_Throttle_default_instance_;
class Override_BrakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Override_Brake> _instance;
} _Override_Brake_default_instance_;
class Override_SteeringWheelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Override_SteeringWheel> _instance;
} _Override_SteeringWheel_default_instance_;
class Override_ParkingBrakeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Override_ParkingBrake> _instance;
} _Override_ParkingBrake_default_instance_;
class Override_ClutchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Override_Clutch> _instance;
} _Override_Clutch_default_instance_;
class Override_GearDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Override_Gear> _instance;
} _Override_Gear_default_instance_;
class OverrideDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Override> _instance;
} _Override_default_instance_;
class Command_LaneChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command_LaneChange> _instance;
} _Command_LaneChange_default_instance_;
class Command_OvertakingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command_Overtaking> _instance;
} _Command_Overtaking_default_instance_;
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_define_;
  const ::sim_msg::Command_LaneChange* lane_change_;
  const ::sim_msg::Command_Overtaking* overtaking_;
  int pull_over_;
  int emergency_stop_;
  double lateral_speed_to_left_;
  double lateral_speed_to_right_;
  double lateral_accel_to_left_;
  double lateral_accel_to_right_;
} _Command_default_instance_;
class StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Status> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_define_;
  int emergency_brake_;
  int vehicle_lost_control_;
  int hands_on_steeringwheel_;
  int eyes_on_road_;
  int lidar_;
  int radar_;
  int ultrasonic_;
  int camera_;
  int gnss_;
  int imu_;
  int localization_;
  int beam_;
  int brake_light_;
  int hazard_light_;
  int left_turn_light_;
  int right_turn_light_;
  int driver_seatbelt_;
  int passenger_seatbelt_;
  int driver_door_;
  int passenger_door_;
  int hood_;
  int trunk_;
  int parkingbrake_;
  int wiper_;
  int gear_;
  int key_;
} _Status_default_instance_;
class VehicleInteractionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VehicleInteraction> _instance;
} _VehicleInteraction_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Activate_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Activate_default_instance_;
    new (ptr) ::sim_msg::Activate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Activate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activate_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Activate_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Assign_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Assign_default_instance_;
    new (ptr) ::sim_msg::Assign();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Assign::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Assign_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Assign_vehicle_5finteraction_2eproto}, {
      &scc_info_Assign_Cruise_vehicle_5finteraction_2eproto.base,}};

static void InitDefaultsscc_info_Assign_Cruise_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Assign_Cruise_default_instance_;
    new (ptr) ::sim_msg::Assign_Cruise();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Assign_Cruise::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Assign_Cruise_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Assign_Cruise_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Command_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Command_default_instance_;
    new (ptr) ::sim_msg::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Command_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Command_vehicle_5finteraction_2eproto}, {
      &scc_info_Command_LaneChange_vehicle_5finteraction_2eproto.base,
      &scc_info_Command_Overtaking_vehicle_5finteraction_2eproto.base,}};

static void InitDefaultsscc_info_Command_LaneChange_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Command_LaneChange_default_instance_;
    new (ptr) ::sim_msg::Command_LaneChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Command_LaneChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_LaneChange_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Command_LaneChange_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Command_Overtaking_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Command_Overtaking_default_instance_;
    new (ptr) ::sim_msg::Command_Overtaking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Command_Overtaking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Command_Overtaking_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Command_Overtaking_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Override_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Override_default_instance_;
    new (ptr) ::sim_msg::Override();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Override::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Override_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, InitDefaultsscc_info_Override_vehicle_5finteraction_2eproto}, {
      &scc_info_Override_Throttle_vehicle_5finteraction_2eproto.base,
      &scc_info_Override_Brake_vehicle_5finteraction_2eproto.base,
      &scc_info_Override_SteeringWheel_vehicle_5finteraction_2eproto.base,
      &scc_info_Override_ParkingBrake_vehicle_5finteraction_2eproto.base,
      &scc_info_Override_Clutch_vehicle_5finteraction_2eproto.base,
      &scc_info_Override_Gear_vehicle_5finteraction_2eproto.base,}};

static void InitDefaultsscc_info_Override_Brake_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Override_Brake_default_instance_;
    new (ptr) ::sim_msg::Override_Brake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Override_Brake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Brake_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Override_Brake_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Override_Clutch_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Override_Clutch_default_instance_;
    new (ptr) ::sim_msg::Override_Clutch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Override_Clutch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Clutch_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Override_Clutch_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Override_Gear_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Override_Gear_default_instance_;
    new (ptr) ::sim_msg::Override_Gear();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Override_Gear::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Gear_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Override_Gear_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Override_ParkingBrake_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Override_ParkingBrake_default_instance_;
    new (ptr) ::sim_msg::Override_ParkingBrake();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Override_ParkingBrake::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_ParkingBrake_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Override_ParkingBrake_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Override_SteeringWheel_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Override_SteeringWheel_default_instance_;
    new (ptr) ::sim_msg::Override_SteeringWheel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Override_SteeringWheel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_SteeringWheel_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Override_SteeringWheel_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Override_Throttle_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Override_Throttle_default_instance_;
    new (ptr) ::sim_msg::Override_Throttle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Override_Throttle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Override_Throttle_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Override_Throttle_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_Status_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Status_default_instance_;
    new (ptr) ::sim_msg::Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Status_vehicle_5finteraction_2eproto}, {}};

static void InitDefaultsscc_info_VehicleInteraction_vehicle_5finteraction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_VehicleInteraction_default_instance_;
    new (ptr) ::sim_msg::VehicleInteraction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::VehicleInteraction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_VehicleInteraction_vehicle_5finteraction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_VehicleInteraction_vehicle_5finteraction_2eproto}, {
      &scc_info_Activate_vehicle_5finteraction_2eproto.base,
      &scc_info_Assign_vehicle_5finteraction_2eproto.base,
      &scc_info_Override_vehicle_5finteraction_2eproto.base,
      &scc_info_Command_vehicle_5finteraction_2eproto.base,
      &scc_info_Status_vehicle_5finteraction_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vehicle_5finteraction_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_vehicle_5finteraction_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vehicle_5finteraction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vehicle_5finteraction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Activate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Activate, automode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign_Cruise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign_Cruise, resume_sw_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign_Cruise, cancel_sw_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign_Cruise, speed_inc_sw_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign_Cruise, speed_dec_sw_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign_Cruise, set_timegap_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign_Cruise, set_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign, controller_name_),
  offsetof(::sim_msg::AssignDefaultTypeInternal, none_),
  offsetof(::sim_msg::AssignDefaultTypeInternal, cruise_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Assign, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Throttle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Throttle, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Throttle, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Brake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Brake, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Brake, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_SteeringWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_SteeringWheel, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_SteeringWheel, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_ParkingBrake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_ParkingBrake, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_ParkingBrake, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Clutch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Clutch, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Clutch, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Gear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Gear, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override_Gear, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override, throttle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override, brake_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override, steering_wheel_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override, parking_brake_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override, clutch_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Override, gear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command_LaneChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command_LaneChange, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command_LaneChange, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command_Overtaking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command_Overtaking, action_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command_Overtaking, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sim_msg::CommandDefaultTypeInternal, user_define_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, lane_change_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, overtaking_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, pull_over_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, emergency_stop_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, lateral_speed_to_left_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, lateral_speed_to_right_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, lateral_accel_to_left_),
  offsetof(::sim_msg::CommandDefaultTypeInternal, lateral_accel_to_right_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Command, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Status, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Status, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::sim_msg::StatusDefaultTypeInternal, user_define_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, emergency_brake_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, vehicle_lost_control_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, hands_on_steeringwheel_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, eyes_on_road_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, lidar_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, radar_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, ultrasonic_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, camera_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, gnss_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, imu_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, localization_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, beam_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, brake_light_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, hazard_light_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, left_turn_light_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, right_turn_light_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, driver_seatbelt_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, passenger_seatbelt_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, driver_door_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, passenger_door_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, hood_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, trunk_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, parkingbrake_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, wiper_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, gear_),
  offsetof(::sim_msg::StatusDefaultTypeInternal, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Status, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleInteraction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleInteraction, activate_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleInteraction, assign_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleInteraction, override_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleInteraction, command_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VehicleInteraction, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Activate)},
  { 6, -1, sizeof(::sim_msg::Assign_Cruise)},
  { 17, -1, sizeof(::sim_msg::Assign)},
  { 26, -1, sizeof(::sim_msg::Override_Throttle)},
  { 33, -1, sizeof(::sim_msg::Override_Brake)},
  { 40, -1, sizeof(::sim_msg::Override_SteeringWheel)},
  { 47, -1, sizeof(::sim_msg::Override_ParkingBrake)},
  { 54, -1, sizeof(::sim_msg::Override_Clutch)},
  { 61, -1, sizeof(::sim_msg::Override_Gear)},
  { 68, -1, sizeof(::sim_msg::Override)},
  { 79, -1, sizeof(::sim_msg::Command_LaneChange)},
  { 86, -1, sizeof(::sim_msg::Command_Overtaking)},
  { 93, -1, sizeof(::sim_msg::Command)},
  { 108, -1, sizeof(::sim_msg::Status)},
  { 141, -1, sizeof(::sim_msg::VehicleInteraction)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Activate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Assign_Cruise_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Assign_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Override_Throttle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Override_Brake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Override_SteeringWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Override_ParkingBrake_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Override_Clutch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Override_Gear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Override_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Command_LaneChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Command_Overtaking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_VehicleInteraction_default_instance_),
};

const char descriptor_table_protodef_vehicle_5finteraction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031vehicle_interaction.proto\022\007sim_msg\032\022sc"
  "ene_common.proto\"\237\001\n\010Activate\022,\n\010automod"
  "e\030\001 \001(\0162\032.sim_msg.Activate.Automode\"e\n\010A"
  "utomode\022\020\n\014AUTOMODE_OFF\020\000\022\024\n\020AUTOMODE_LA"
  "TERAL\020\001\022\031\n\025AUTOMODE_LONGITUDINAL\020\002\022\026\n\022AU"
  "TOMODE_AUTOPILOT\020\003\"\256\002\n\006Assign\022\027\n\017control"
  "ler_name\030\001 \001(\t\022\016\n\004none\030\002 \001(\tH\000\022(\n\006cruise"
  "\030\003 \001(\0132\026.sim_msg.Assign.CruiseH\000\032\302\001\n\006Cru"
  "ise\022!\n\tresume_sw\030\001 \001(\0162\016.sim_msg.OnOff\022!"
  "\n\tcancel_sw\030\002 \001(\0162\016.sim_msg.OnOff\022$\n\014spe"
  "ed_inc_sw\030\003 \001(\0162\016.sim_msg.OnOff\022$\n\014speed"
  "_dec_sw\030\004 \001(\0162\016.sim_msg.OnOff\022\023\n\013set_tim"
  "egap\030\005 \001(\001\022\021\n\tset_speed\030\006 \001(\001B\014\n\npropert"
  "ies\"\256\005\n\010Override\022,\n\010throttle\030\001 \001(\0132\032.sim"
  "_msg.Override.Throttle\022&\n\005brake\030\002 \001(\0132\027."
  "sim_msg.Override.Brake\0227\n\016steering_wheel"
  "\030\003 \001(\0132\037.sim_msg.Override.SteeringWheel\022"
  "5\n\rparking_brake\030\004 \001(\0132\036.sim_msg.Overrid"
  "e.ParkingBrake\022(\n\006clutch\030\005 \001(\0132\030.sim_msg"
  ".Override.Clutch\022$\n\004gear\030\006 \001(\0132\026.sim_msg"
  ".Override.Gear\0329\n\010Throttle\022\036\n\006action\030\001 \001"
  "(\0162\016.sim_msg.OnOff\022\r\n\005value\030\002 \001(\001\0326\n\005Bra"
  "ke\022\036\n\006action\030\001 \001(\0162\016.sim_msg.OnOff\022\r\n\005va"
  "lue\030\002 \001(\001\032>\n\rSteeringWheel\022\036\n\006action\030\001 \001"
  "(\0162\016.sim_msg.OnOff\022\r\n\005value\030\002 \001(\001\032W\n\014Par"
  "kingBrake\022\036\n\006action\030\001 \001(\0162\016.sim_msg.OnOf"
  "f\022\'\n\005value\030\002 \001(\0162\030.sim_msg.ParkingBrakeS"
  "ts\0327\n\006Clutch\022\036\n\006action\030\001 \001(\0162\016.sim_msg.O"
  "nOff\022\r\n\005value\030\002 \001(\001\032G\n\004Gear\022\036\n\006action\030\001 "
  "\001(\0162\016.sim_msg.OnOff\022\037\n\005value\030\002 \001(\0162\020.sim"
  "_msg.GearSts\"\372\003\n\007Command\022\025\n\013user_define\030"
  "\001 \001(\014H\000\0222\n\013lane_change\030\002 \001(\0132\033.sim_msg.C"
  "ommand.LaneChangeH\000\0221\n\novertaking\030\003 \001(\0132"
  "\033.sim_msg.Command.OvertakingH\000\022#\n\tpull_o"
  "ver\030\004 \001(\0162\016.sim_msg.OnOffH\000\022(\n\016emergency"
  "_stop\030\005 \001(\0162\016.sim_msg.OnOffH\000\022\037\n\025lateral"
  "_speed_to_left\030\006 \001(\001H\000\022 \n\026lateral_speed_"
  "to_right\030\007 \001(\001H\000\022\037\n\025lateral_accel_to_lef"
  "t\030\010 \001(\001H\000\022 \n\026lateral_accel_to_right\030\t \001("
  "\001H\000\032I\n\nLaneChange\022\036\n\006action\030\001 \001(\0162\016.sim_"
  "msg.OnOff\022\033\n\005value\030\002 \001(\0162\014.sim_msg.Dir\032I"
  "\n\nOvertaking\022\036\n\006action\030\001 \001(\0162\016.sim_msg.O"
  "nOff\022\033\n\005value\030\002 \001(\0162\014.sim_msg.DirB\006\n\004typ"
  "e\"\230\010\n\006Status\022\025\n\013user_define\030\001 \001(\014H\000\022)\n\017e"
  "mergency_brake\030\002 \001(\0162\016.sim_msg.OnOffH\000\022."
  "\n\024vehicle_lost_control\030\003 \001(\0162\016.sim_msg.O"
  "nOffH\000\0220\n\026hands_on_steeringwheel\030\004 \001(\0162\016"
  ".sim_msg.OnOffH\000\022&\n\014eyes_on_road\030\005 \001(\0162\016"
  ".sim_msg.OnOffH\000\022\037\n\005lidar\030\006 \001(\0162\016.sim_ms"
  "g.OnOffH\000\022\037\n\005radar\030\007 \001(\0162\016.sim_msg.OnOff"
  "H\000\022$\n\nultrasonic\030\010 \001(\0162\016.sim_msg.OnOffH\000"
  "\022 \n\006camera\030\t \001(\0162\016.sim_msg.OnOffH\000\022\036\n\004gn"
  "ss\030\n \001(\0162\016.sim_msg.OnOffH\000\022\035\n\003imu\030\013 \001(\0162"
  "\016.sim_msg.OnOffH\000\022&\n\014localization\030\014 \001(\0162"
  "\016.sim_msg.OnOffH\000\022 \n\004beam\030\r \001(\0162\020.sim_ms"
  "g.BeamStsH\000\022%\n\013brake_light\030\016 \001(\0162\016.sim_m"
  "sg.OnOffH\000\022&\n\014hazard_light\030\017 \001(\0162\016.sim_m"
  "sg.OnOffH\000\022)\n\017left_turn_light\030\020 \001(\0162\016.si"
  "m_msg.OnOffH\000\022*\n\020right_turn_light\030\021 \001(\0162"
  "\016.sim_msg.OnOffH\000\022)\n\017driver_seatbelt\030\022 \001"
  "(\0162\016.sim_msg.OnOffH\000\022,\n\022passenger_seatbe"
  "lt\030\023 \001(\0162\016.sim_msg.OnOffH\000\022%\n\013driver_doo"
  "r\030\024 \001(\0162\016.sim_msg.OnOffH\000\022(\n\016passenger_d"
  "oor\030\025 \001(\0162\016.sim_msg.OnOffH\000\022\036\n\004hood\030\026 \001("
  "\0162\016.sim_msg.OnOffH\000\022\037\n\005trunk\030\027 \001(\0162\016.sim"
  "_msg.OnOffH\000\0220\n\014parkingbrake\030\030 \001(\0162\030.sim"
  "_msg.ParkingBrakeStsH\000\022\"\n\005wiper\030\031 \001(\0162\021."
  "sim_msg.WiperStsH\000\022 \n\004gear\030\032 \001(\0162\020.sim_m"
  "sg.GearStsH\000\022\036\n\003key\030\033 \001(\0162\017.sim_msg.KeyS"
  "tsH\000B\006\n\004type\"\303\001\n\022VehicleInteraction\022#\n\010a"
  "ctivate\030\001 \001(\0132\021.sim_msg.Activate\022\037\n\006assi"
  "gn\030\002 \001(\0132\017.sim_msg.Assign\022#\n\010override\030\003 "
  "\001(\0132\021.sim_msg.Override\022!\n\007command\030\004 \001(\0132"
  "\020.sim_msg.Command\022\037\n\006status\030\005 \001(\0132\017.sim_"
  "msg.Statusb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vehicle_5finteraction_2eproto_deps[1] = {
  &::descriptor_table_scene_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vehicle_5finteraction_2eproto_sccs[15] = {
  &scc_info_Activate_vehicle_5finteraction_2eproto.base,
  &scc_info_Assign_vehicle_5finteraction_2eproto.base,
  &scc_info_Assign_Cruise_vehicle_5finteraction_2eproto.base,
  &scc_info_Command_vehicle_5finteraction_2eproto.base,
  &scc_info_Command_LaneChange_vehicle_5finteraction_2eproto.base,
  &scc_info_Command_Overtaking_vehicle_5finteraction_2eproto.base,
  &scc_info_Override_vehicle_5finteraction_2eproto.base,
  &scc_info_Override_Brake_vehicle_5finteraction_2eproto.base,
  &scc_info_Override_Clutch_vehicle_5finteraction_2eproto.base,
  &scc_info_Override_Gear_vehicle_5finteraction_2eproto.base,
  &scc_info_Override_ParkingBrake_vehicle_5finteraction_2eproto.base,
  &scc_info_Override_SteeringWheel_vehicle_5finteraction_2eproto.base,
  &scc_info_Override_Throttle_vehicle_5finteraction_2eproto.base,
  &scc_info_Status_vehicle_5finteraction_2eproto.base,
  &scc_info_VehicleInteraction_vehicle_5finteraction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vehicle_5finteraction_2eproto_once;
static bool descriptor_table_vehicle_5finteraction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vehicle_5finteraction_2eproto = {
  &descriptor_table_vehicle_5finteraction_2eproto_initialized, descriptor_table_protodef_vehicle_5finteraction_2eproto, "vehicle_interaction.proto", 2978,
  &descriptor_table_vehicle_5finteraction_2eproto_once, descriptor_table_vehicle_5finteraction_2eproto_sccs, descriptor_table_vehicle_5finteraction_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_vehicle_5finteraction_2eproto::offsets,
  file_level_metadata_vehicle_5finteraction_2eproto, 15, file_level_enum_descriptors_vehicle_5finteraction_2eproto, file_level_service_descriptors_vehicle_5finteraction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vehicle_5finteraction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vehicle_5finteraction_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Activate_Automode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_vehicle_5finteraction_2eproto);
  return file_level_enum_descriptors_vehicle_5finteraction_2eproto[0];
}
bool Activate_Automode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Activate_Automode Activate::AUTOMODE_OFF;
constexpr Activate_Automode Activate::AUTOMODE_LATERAL;
constexpr Activate_Automode Activate::AUTOMODE_LONGITUDINAL;
constexpr Activate_Automode Activate::AUTOMODE_AUTOPILOT;
constexpr Activate_Automode Activate::Automode_MIN;
constexpr Activate_Automode Activate::Automode_MAX;
constexpr int Activate::Automode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Activate::InitAsDefaultInstance() {
}
class Activate::_Internal {
 public:
};

Activate::Activate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Activate)
}
Activate::Activate(const Activate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  automode_ = from.automode_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Activate)
}

void Activate::SharedCtor() {
  automode_ = 0;
}

Activate::~Activate() {
  // @@protoc_insertion_point(destructor:sim_msg.Activate)
  SharedDtor();
}

void Activate::SharedDtor() {
}

void Activate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Activate& Activate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Activate_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Activate::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Activate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  automode_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Activate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Activate.Automode automode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_automode(static_cast<::sim_msg::Activate_Automode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Activate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Activate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Activate.Automode automode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_automode(static_cast< ::sim_msg::Activate_Automode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Activate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Activate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Activate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Activate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Activate.Automode automode = 1;
  if (this->automode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->automode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Activate)
}

::PROTOBUF_NAMESPACE_ID::uint8* Activate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Activate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Activate.Automode automode = 1;
  if (this->automode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->automode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Activate)
  return target;
}

size_t Activate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Activate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Activate.Automode automode = 1;
  if (this->automode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->automode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Activate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Activate)
  GOOGLE_DCHECK_NE(&from, this);
  const Activate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Activate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Activate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Activate)
    MergeFrom(*source);
  }
}

void Activate::MergeFrom(const Activate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Activate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.automode() != 0) {
    set_automode(from.automode());
  }
}

void Activate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Activate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activate::CopyFrom(const Activate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Activate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activate::IsInitialized() const {
  return true;
}

void Activate::InternalSwap(Activate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(automode_, other->automode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Activate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Assign_Cruise::InitAsDefaultInstance() {
}
class Assign_Cruise::_Internal {
 public:
};

Assign_Cruise::Assign_Cruise()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Assign.Cruise)
}
Assign_Cruise::Assign_Cruise(const Assign_Cruise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&resume_sw_, &from.resume_sw_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_speed_) -
    reinterpret_cast<char*>(&resume_sw_)) + sizeof(set_speed_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Assign.Cruise)
}

void Assign_Cruise::SharedCtor() {
  ::memset(&resume_sw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_speed_) -
      reinterpret_cast<char*>(&resume_sw_)) + sizeof(set_speed_));
}

Assign_Cruise::~Assign_Cruise() {
  // @@protoc_insertion_point(destructor:sim_msg.Assign.Cruise)
  SharedDtor();
}

void Assign_Cruise::SharedDtor() {
}

void Assign_Cruise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Assign_Cruise& Assign_Cruise::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Assign_Cruise_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Assign_Cruise::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Assign.Cruise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&resume_sw_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_speed_) -
      reinterpret_cast<char*>(&resume_sw_)) + sizeof(set_speed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Assign_Cruise::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff resume_sw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_resume_sw(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff cancel_sw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_cancel_sw(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff speed_inc_sw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_speed_inc_sw(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff speed_dec_sw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_speed_dec_sw(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // double set_timegap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          set_timegap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double set_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          set_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Assign_Cruise::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Assign.Cruise)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff resume_sw = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_resume_sw(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff cancel_sw = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cancel_sw(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff speed_inc_sw = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speed_inc_sw(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff speed_dec_sw = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_speed_dec_sw(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double set_timegap = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &set_timegap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double set_speed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &set_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Assign.Cruise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Assign.Cruise)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Assign_Cruise::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Assign.Cruise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff resume_sw = 1;
  if (this->resume_sw() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->resume_sw(), output);
  }

  // .sim_msg.OnOff cancel_sw = 2;
  if (this->cancel_sw() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->cancel_sw(), output);
  }

  // .sim_msg.OnOff speed_inc_sw = 3;
  if (this->speed_inc_sw() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->speed_inc_sw(), output);
  }

  // .sim_msg.OnOff speed_dec_sw = 4;
  if (this->speed_dec_sw() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->speed_dec_sw(), output);
  }

  // double set_timegap = 5;
  if (!(this->set_timegap() <= 0 && this->set_timegap() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->set_timegap(), output);
  }

  // double set_speed = 6;
  if (!(this->set_speed() <= 0 && this->set_speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->set_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Assign.Cruise)
}

::PROTOBUF_NAMESPACE_ID::uint8* Assign_Cruise::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Assign.Cruise)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff resume_sw = 1;
  if (this->resume_sw() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->resume_sw(), target);
  }

  // .sim_msg.OnOff cancel_sw = 2;
  if (this->cancel_sw() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->cancel_sw(), target);
  }

  // .sim_msg.OnOff speed_inc_sw = 3;
  if (this->speed_inc_sw() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->speed_inc_sw(), target);
  }

  // .sim_msg.OnOff speed_dec_sw = 4;
  if (this->speed_dec_sw() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->speed_dec_sw(), target);
  }

  // double set_timegap = 5;
  if (!(this->set_timegap() <= 0 && this->set_timegap() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->set_timegap(), target);
  }

  // double set_speed = 6;
  if (!(this->set_speed() <= 0 && this->set_speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->set_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Assign.Cruise)
  return target;
}

size_t Assign_Cruise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Assign.Cruise)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.OnOff resume_sw = 1;
  if (this->resume_sw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->resume_sw());
  }

  // .sim_msg.OnOff cancel_sw = 2;
  if (this->cancel_sw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->cancel_sw());
  }

  // .sim_msg.OnOff speed_inc_sw = 3;
  if (this->speed_inc_sw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->speed_inc_sw());
  }

  // .sim_msg.OnOff speed_dec_sw = 4;
  if (this->speed_dec_sw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->speed_dec_sw());
  }

  // double set_timegap = 5;
  if (!(this->set_timegap() <= 0 && this->set_timegap() >= 0)) {
    total_size += 1 + 8;
  }

  // double set_speed = 6;
  if (!(this->set_speed() <= 0 && this->set_speed() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Assign_Cruise::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Assign.Cruise)
  GOOGLE_DCHECK_NE(&from, this);
  const Assign_Cruise* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Assign_Cruise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Assign.Cruise)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Assign.Cruise)
    MergeFrom(*source);
  }
}

void Assign_Cruise::MergeFrom(const Assign_Cruise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Assign.Cruise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.resume_sw() != 0) {
    set_resume_sw(from.resume_sw());
  }
  if (from.cancel_sw() != 0) {
    set_cancel_sw(from.cancel_sw());
  }
  if (from.speed_inc_sw() != 0) {
    set_speed_inc_sw(from.speed_inc_sw());
  }
  if (from.speed_dec_sw() != 0) {
    set_speed_dec_sw(from.speed_dec_sw());
  }
  if (!(from.set_timegap() <= 0 && from.set_timegap() >= 0)) {
    set_set_timegap(from.set_timegap());
  }
  if (!(from.set_speed() <= 0 && from.set_speed() >= 0)) {
    set_set_speed(from.set_speed());
  }
}

void Assign_Cruise::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Assign.Cruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Assign_Cruise::CopyFrom(const Assign_Cruise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Assign.Cruise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Assign_Cruise::IsInitialized() const {
  return true;
}

void Assign_Cruise::InternalSwap(Assign_Cruise* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(resume_sw_, other->resume_sw_);
  swap(cancel_sw_, other->cancel_sw_);
  swap(speed_inc_sw_, other->speed_inc_sw_);
  swap(speed_dec_sw_, other->speed_dec_sw_);
  swap(set_timegap_, other->set_timegap_);
  swap(set_speed_, other->set_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Assign_Cruise::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Assign::InitAsDefaultInstance() {
  ::sim_msg::_Assign_default_instance_.none_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::sim_msg::_Assign_default_instance_.cruise_ = const_cast< ::sim_msg::Assign_Cruise*>(
      ::sim_msg::Assign_Cruise::internal_default_instance());
}
class Assign::_Internal {
 public:
  static const ::sim_msg::Assign_Cruise& cruise(const Assign* msg);
};

const ::sim_msg::Assign_Cruise&
Assign::_Internal::cruise(const Assign* msg) {
  return *msg->properties_.cruise_;
}
void Assign::set_allocated_cruise(::sim_msg::Assign_Cruise* cruise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_properties();
  if (cruise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cruise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cruise, submessage_arena);
    }
    set_has_cruise();
    properties_.cruise_ = cruise;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Assign.cruise)
}
Assign::Assign()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Assign)
}
Assign::Assign(const Assign& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  controller_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.controller_name().empty()) {
    controller_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_name_);
  }
  clear_has_properties();
  switch (from.properties_case()) {
    case kNone: {
      set_none(from.none());
      break;
    }
    case kCruise: {
      mutable_cruise()->::sim_msg::Assign_Cruise::MergeFrom(from.cruise());
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Assign)
}

void Assign::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Assign_vehicle_5finteraction_2eproto.base);
  controller_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_properties();
}

Assign::~Assign() {
  // @@protoc_insertion_point(destructor:sim_msg.Assign)
  SharedDtor();
}

void Assign::SharedDtor() {
  controller_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_properties()) {
    clear_properties();
  }
}

void Assign::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Assign& Assign::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Assign_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Assign::clear_properties() {
// @@protoc_insertion_point(one_of_clear_start:sim_msg.Assign)
  switch (properties_case()) {
    case kNone: {
      properties_.none_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kCruise: {
      delete properties_.cruise_;
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PROPERTIES_NOT_SET;
}


void Assign::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Assign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controller_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_properties();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Assign::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string controller_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_controller_name(), ptr, ctx, "sim_msg.Assign.controller_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string none = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_none(), ptr, ctx, "sim_msg.Assign.none");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Assign.Cruise cruise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cruise(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Assign::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Assign)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string controller_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_controller_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->controller_name().data(), static_cast<int>(this->controller_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Assign.controller_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string none = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_none()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->none().data(), static_cast<int>(this->none().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Assign.none"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Assign.Cruise cruise = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cruise()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Assign)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Assign)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Assign::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Assign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string controller_name = 1;
  if (this->controller_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->controller_name().data(), static_cast<int>(this->controller_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Assign.controller_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->controller_name(), output);
  }

  // string none = 2;
  if (has_none()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->none().data(), static_cast<int>(this->none().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Assign.none");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->none(), output);
  }

  // .sim_msg.Assign.Cruise cruise = 3;
  if (has_cruise()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::cruise(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Assign)
}

::PROTOBUF_NAMESPACE_ID::uint8* Assign::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Assign)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string controller_name = 1;
  if (this->controller_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->controller_name().data(), static_cast<int>(this->controller_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Assign.controller_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->controller_name(), target);
  }

  // string none = 2;
  if (has_none()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->none().data(), static_cast<int>(this->none().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Assign.none");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->none(), target);
  }

  // .sim_msg.Assign.Cruise cruise = 3;
  if (has_cruise()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::cruise(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Assign)
  return target;
}

size_t Assign::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Assign)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string controller_name = 1;
  if (this->controller_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->controller_name());
  }

  switch (properties_case()) {
    // string none = 2;
    case kNone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->none());
      break;
    }
    // .sim_msg.Assign.Cruise cruise = 3;
    case kCruise: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *properties_.cruise_);
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Assign::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Assign)
  GOOGLE_DCHECK_NE(&from, this);
  const Assign* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Assign>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Assign)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Assign)
    MergeFrom(*source);
  }
}

void Assign::MergeFrom(const Assign& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Assign)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.controller_name().size() > 0) {

    controller_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.controller_name_);
  }
  switch (from.properties_case()) {
    case kNone: {
      set_none(from.none());
      break;
    }
    case kCruise: {
      mutable_cruise()->::sim_msg::Assign_Cruise::MergeFrom(from.cruise());
      break;
    }
    case PROPERTIES_NOT_SET: {
      break;
    }
  }
}

void Assign::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Assign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Assign::CopyFrom(const Assign& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Assign)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Assign::IsInitialized() const {
  return true;
}

void Assign::InternalSwap(Assign* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  controller_name_.Swap(&other->controller_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(properties_, other->properties_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Assign::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Override_Throttle::InitAsDefaultInstance() {
}
class Override_Throttle::_Internal {
 public:
};

Override_Throttle::Override_Throttle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Override.Throttle)
}
Override_Throttle::Override_Throttle(const Override_Throttle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&value_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Override.Throttle)
}

void Override_Throttle::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
}

Override_Throttle::~Override_Throttle() {
  // @@protoc_insertion_point(destructor:sim_msg.Override.Throttle)
  SharedDtor();
}

void Override_Throttle::SharedDtor() {
}

void Override_Throttle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Override_Throttle& Override_Throttle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Override_Throttle_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Override_Throttle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Override.Throttle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Override_Throttle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Override_Throttle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Override.Throttle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Override.Throttle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Override.Throttle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Override_Throttle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Override.Throttle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Override.Throttle)
}

::PROTOBUF_NAMESPACE_ID::uint8* Override_Throttle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Override.Throttle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Override.Throttle)
  return target;
}

size_t Override_Throttle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Override.Throttle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Override_Throttle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Override.Throttle)
  GOOGLE_DCHECK_NE(&from, this);
  const Override_Throttle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Override_Throttle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Override.Throttle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Override.Throttle)
    MergeFrom(*source);
  }
}

void Override_Throttle::MergeFrom(const Override_Throttle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Override.Throttle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void Override_Throttle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Override.Throttle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Override_Throttle::CopyFrom(const Override_Throttle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Override.Throttle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Override_Throttle::IsInitialized() const {
  return true;
}

void Override_Throttle::InternalSwap(Override_Throttle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Override_Throttle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Override_Brake::InitAsDefaultInstance() {
}
class Override_Brake::_Internal {
 public:
};

Override_Brake::Override_Brake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Override.Brake)
}
Override_Brake::Override_Brake(const Override_Brake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&value_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Override.Brake)
}

void Override_Brake::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
}

Override_Brake::~Override_Brake() {
  // @@protoc_insertion_point(destructor:sim_msg.Override.Brake)
  SharedDtor();
}

void Override_Brake::SharedDtor() {
}

void Override_Brake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Override_Brake& Override_Brake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Override_Brake_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Override_Brake::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Override.Brake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Override_Brake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Override_Brake::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Override.Brake)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Override.Brake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Override.Brake)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Override_Brake::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Override.Brake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Override.Brake)
}

::PROTOBUF_NAMESPACE_ID::uint8* Override_Brake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Override.Brake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Override.Brake)
  return target;
}

size_t Override_Brake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Override.Brake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Override_Brake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Override.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  const Override_Brake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Override_Brake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Override.Brake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Override.Brake)
    MergeFrom(*source);
  }
}

void Override_Brake::MergeFrom(const Override_Brake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Override.Brake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void Override_Brake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Override.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Override_Brake::CopyFrom(const Override_Brake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Override.Brake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Override_Brake::IsInitialized() const {
  return true;
}

void Override_Brake::InternalSwap(Override_Brake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Override_Brake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Override_SteeringWheel::InitAsDefaultInstance() {
}
class Override_SteeringWheel::_Internal {
 public:
};

Override_SteeringWheel::Override_SteeringWheel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Override.SteeringWheel)
}
Override_SteeringWheel::Override_SteeringWheel(const Override_SteeringWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&value_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Override.SteeringWheel)
}

void Override_SteeringWheel::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
}

Override_SteeringWheel::~Override_SteeringWheel() {
  // @@protoc_insertion_point(destructor:sim_msg.Override.SteeringWheel)
  SharedDtor();
}

void Override_SteeringWheel::SharedDtor() {
}

void Override_SteeringWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Override_SteeringWheel& Override_SteeringWheel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Override_SteeringWheel_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Override_SteeringWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Override.SteeringWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Override_SteeringWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Override_SteeringWheel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Override.SteeringWheel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Override.SteeringWheel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Override.SteeringWheel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Override_SteeringWheel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Override.SteeringWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Override.SteeringWheel)
}

::PROTOBUF_NAMESPACE_ID::uint8* Override_SteeringWheel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Override.SteeringWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Override.SteeringWheel)
  return target;
}

size_t Override_SteeringWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Override.SteeringWheel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Override_SteeringWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Override.SteeringWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const Override_SteeringWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Override_SteeringWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Override.SteeringWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Override.SteeringWheel)
    MergeFrom(*source);
  }
}

void Override_SteeringWheel::MergeFrom(const Override_SteeringWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Override.SteeringWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void Override_SteeringWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Override.SteeringWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Override_SteeringWheel::CopyFrom(const Override_SteeringWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Override.SteeringWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Override_SteeringWheel::IsInitialized() const {
  return true;
}

void Override_SteeringWheel::InternalSwap(Override_SteeringWheel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Override_SteeringWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Override_ParkingBrake::InitAsDefaultInstance() {
}
class Override_ParkingBrake::_Internal {
 public:
};

Override_ParkingBrake::Override_ParkingBrake()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Override.ParkingBrake)
}
Override_ParkingBrake::Override_ParkingBrake(const Override_ParkingBrake& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&action_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Override.ParkingBrake)
}

void Override_ParkingBrake::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
}

Override_ParkingBrake::~Override_ParkingBrake() {
  // @@protoc_insertion_point(destructor:sim_msg.Override.ParkingBrake)
  SharedDtor();
}

void Override_ParkingBrake::SharedDtor() {
}

void Override_ParkingBrake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Override_ParkingBrake& Override_ParkingBrake::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Override_ParkingBrake_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Override_ParkingBrake::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Override.ParkingBrake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Override_ParkingBrake::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.ParkingBrakeSts value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_value(static_cast<::sim_msg::ParkingBrakeSts>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Override_ParkingBrake::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Override.ParkingBrake)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ParkingBrakeSts value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::sim_msg::ParkingBrakeSts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Override.ParkingBrake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Override.ParkingBrake)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Override_ParkingBrake::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Override.ParkingBrake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // .sim_msg.ParkingBrakeSts value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Override.ParkingBrake)
}

::PROTOBUF_NAMESPACE_ID::uint8* Override_ParkingBrake::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Override.ParkingBrake)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // .sim_msg.ParkingBrakeSts value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Override.ParkingBrake)
  return target;
}

size_t Override_ParkingBrake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Override.ParkingBrake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  // .sim_msg.ParkingBrakeSts value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Override_ParkingBrake::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Override.ParkingBrake)
  GOOGLE_DCHECK_NE(&from, this);
  const Override_ParkingBrake* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Override_ParkingBrake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Override.ParkingBrake)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Override.ParkingBrake)
    MergeFrom(*source);
  }
}

void Override_ParkingBrake::MergeFrom(const Override_ParkingBrake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Override.ParkingBrake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Override_ParkingBrake::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Override.ParkingBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Override_ParkingBrake::CopyFrom(const Override_ParkingBrake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Override.ParkingBrake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Override_ParkingBrake::IsInitialized() const {
  return true;
}

void Override_ParkingBrake::InternalSwap(Override_ParkingBrake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Override_ParkingBrake::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Override_Clutch::InitAsDefaultInstance() {
}
class Override_Clutch::_Internal {
 public:
};

Override_Clutch::Override_Clutch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Override.Clutch)
}
Override_Clutch::Override_Clutch(const Override_Clutch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&value_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Override.Clutch)
}

void Override_Clutch::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
}

Override_Clutch::~Override_Clutch() {
  // @@protoc_insertion_point(destructor:sim_msg.Override.Clutch)
  SharedDtor();
}

void Override_Clutch::SharedDtor() {
}

void Override_Clutch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Override_Clutch& Override_Clutch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Override_Clutch_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Override_Clutch::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Override.Clutch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&value_)) + sizeof(action_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Override_Clutch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Override_Clutch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Override.Clutch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Override.Clutch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Override.Clutch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Override_Clutch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Override.Clutch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Override.Clutch)
}

::PROTOBUF_NAMESPACE_ID::uint8* Override_Clutch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Override.Clutch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Override.Clutch)
  return target;
}

size_t Override_Clutch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Override.Clutch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Override_Clutch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Override.Clutch)
  GOOGLE_DCHECK_NE(&from, this);
  const Override_Clutch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Override_Clutch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Override.Clutch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Override.Clutch)
    MergeFrom(*source);
  }
}

void Override_Clutch::MergeFrom(const Override_Clutch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Override.Clutch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void Override_Clutch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Override.Clutch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Override_Clutch::CopyFrom(const Override_Clutch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Override.Clutch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Override_Clutch::IsInitialized() const {
  return true;
}

void Override_Clutch::InternalSwap(Override_Clutch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Override_Clutch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Override_Gear::InitAsDefaultInstance() {
}
class Override_Gear::_Internal {
 public:
};

Override_Gear::Override_Gear()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Override.Gear)
}
Override_Gear::Override_Gear(const Override_Gear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&action_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Override.Gear)
}

void Override_Gear::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
}

Override_Gear::~Override_Gear() {
  // @@protoc_insertion_point(destructor:sim_msg.Override.Gear)
  SharedDtor();
}

void Override_Gear::SharedDtor() {
}

void Override_Gear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Override_Gear& Override_Gear::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Override_Gear_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Override_Gear::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Override.Gear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Override_Gear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.GearSts value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_value(static_cast<::sim_msg::GearSts>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Override_Gear::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Override.Gear)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GearSts value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::sim_msg::GearSts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Override.Gear)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Override.Gear)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Override_Gear::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Override.Gear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // .sim_msg.GearSts value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Override.Gear)
}

::PROTOBUF_NAMESPACE_ID::uint8* Override_Gear::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Override.Gear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // .sim_msg.GearSts value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Override.Gear)
  return target;
}

size_t Override_Gear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Override.Gear)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  // .sim_msg.GearSts value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Override_Gear::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Override.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  const Override_Gear* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Override_Gear>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Override.Gear)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Override.Gear)
    MergeFrom(*source);
  }
}

void Override_Gear::MergeFrom(const Override_Gear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Override.Gear)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Override_Gear::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Override.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Override_Gear::CopyFrom(const Override_Gear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Override.Gear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Override_Gear::IsInitialized() const {
  return true;
}

void Override_Gear::InternalSwap(Override_Gear* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Override_Gear::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Override::InitAsDefaultInstance() {
  ::sim_msg::_Override_default_instance_._instance.get_mutable()->throttle_ = const_cast< ::sim_msg::Override_Throttle*>(
      ::sim_msg::Override_Throttle::internal_default_instance());
  ::sim_msg::_Override_default_instance_._instance.get_mutable()->brake_ = const_cast< ::sim_msg::Override_Brake*>(
      ::sim_msg::Override_Brake::internal_default_instance());
  ::sim_msg::_Override_default_instance_._instance.get_mutable()->steering_wheel_ = const_cast< ::sim_msg::Override_SteeringWheel*>(
      ::sim_msg::Override_SteeringWheel::internal_default_instance());
  ::sim_msg::_Override_default_instance_._instance.get_mutable()->parking_brake_ = const_cast< ::sim_msg::Override_ParkingBrake*>(
      ::sim_msg::Override_ParkingBrake::internal_default_instance());
  ::sim_msg::_Override_default_instance_._instance.get_mutable()->clutch_ = const_cast< ::sim_msg::Override_Clutch*>(
      ::sim_msg::Override_Clutch::internal_default_instance());
  ::sim_msg::_Override_default_instance_._instance.get_mutable()->gear_ = const_cast< ::sim_msg::Override_Gear*>(
      ::sim_msg::Override_Gear::internal_default_instance());
}
class Override::_Internal {
 public:
  static const ::sim_msg::Override_Throttle& throttle(const Override* msg);
  static const ::sim_msg::Override_Brake& brake(const Override* msg);
  static const ::sim_msg::Override_SteeringWheel& steering_wheel(const Override* msg);
  static const ::sim_msg::Override_ParkingBrake& parking_brake(const Override* msg);
  static const ::sim_msg::Override_Clutch& clutch(const Override* msg);
  static const ::sim_msg::Override_Gear& gear(const Override* msg);
};

const ::sim_msg::Override_Throttle&
Override::_Internal::throttle(const Override* msg) {
  return *msg->throttle_;
}
const ::sim_msg::Override_Brake&
Override::_Internal::brake(const Override* msg) {
  return *msg->brake_;
}
const ::sim_msg::Override_SteeringWheel&
Override::_Internal::steering_wheel(const Override* msg) {
  return *msg->steering_wheel_;
}
const ::sim_msg::Override_ParkingBrake&
Override::_Internal::parking_brake(const Override* msg) {
  return *msg->parking_brake_;
}
const ::sim_msg::Override_Clutch&
Override::_Internal::clutch(const Override* msg) {
  return *msg->clutch_;
}
const ::sim_msg::Override_Gear&
Override::_Internal::gear(const Override* msg) {
  return *msg->gear_;
}
Override::Override()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Override)
}
Override::Override(const Override& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_throttle()) {
    throttle_ = new ::sim_msg::Override_Throttle(*from.throttle_);
  } else {
    throttle_ = nullptr;
  }
  if (from.has_brake()) {
    brake_ = new ::sim_msg::Override_Brake(*from.brake_);
  } else {
    brake_ = nullptr;
  }
  if (from.has_steering_wheel()) {
    steering_wheel_ = new ::sim_msg::Override_SteeringWheel(*from.steering_wheel_);
  } else {
    steering_wheel_ = nullptr;
  }
  if (from.has_parking_brake()) {
    parking_brake_ = new ::sim_msg::Override_ParkingBrake(*from.parking_brake_);
  } else {
    parking_brake_ = nullptr;
  }
  if (from.has_clutch()) {
    clutch_ = new ::sim_msg::Override_Clutch(*from.clutch_);
  } else {
    clutch_ = nullptr;
  }
  if (from.has_gear()) {
    gear_ = new ::sim_msg::Override_Gear(*from.gear_);
  } else {
    gear_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Override)
}

void Override::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Override_vehicle_5finteraction_2eproto.base);
  ::memset(&throttle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&throttle_)) + sizeof(gear_));
}

Override::~Override() {
  // @@protoc_insertion_point(destructor:sim_msg.Override)
  SharedDtor();
}

void Override::SharedDtor() {
  if (this != internal_default_instance()) delete throttle_;
  if (this != internal_default_instance()) delete brake_;
  if (this != internal_default_instance()) delete steering_wheel_;
  if (this != internal_default_instance()) delete parking_brake_;
  if (this != internal_default_instance()) delete clutch_;
  if (this != internal_default_instance()) delete gear_;
}

void Override::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Override& Override::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Override_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Override::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Override)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && throttle_ != nullptr) {
    delete throttle_;
  }
  throttle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && brake_ != nullptr) {
    delete brake_;
  }
  brake_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && steering_wheel_ != nullptr) {
    delete steering_wheel_;
  }
  steering_wheel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && parking_brake_ != nullptr) {
    delete parking_brake_;
  }
  parking_brake_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clutch_ != nullptr) {
    delete clutch_;
  }
  clutch_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && gear_ != nullptr) {
    delete gear_;
  }
  gear_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Override::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Override.Throttle throttle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_throttle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Override.Brake brake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_brake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Override.SteeringWheel steering_wheel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_steering_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Override.ParkingBrake parking_brake = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_parking_brake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Override.Clutch clutch = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_clutch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Override.Gear gear = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_gear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Override::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Override)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Override.Throttle throttle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_throttle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Override.Brake brake = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Override.SteeringWheel steering_wheel = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_steering_wheel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Override.ParkingBrake parking_brake = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_parking_brake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Override.Clutch clutch = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clutch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Override.Gear gear = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gear()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Override)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Override)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Override::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Override)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Override.Throttle throttle = 1;
  if (this->has_throttle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::throttle(this), output);
  }

  // .sim_msg.Override.Brake brake = 2;
  if (this->has_brake()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::brake(this), output);
  }

  // .sim_msg.Override.SteeringWheel steering_wheel = 3;
  if (this->has_steering_wheel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::steering_wheel(this), output);
  }

  // .sim_msg.Override.ParkingBrake parking_brake = 4;
  if (this->has_parking_brake()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::parking_brake(this), output);
  }

  // .sim_msg.Override.Clutch clutch = 5;
  if (this->has_clutch()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::clutch(this), output);
  }

  // .sim_msg.Override.Gear gear = 6;
  if (this->has_gear()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::gear(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Override)
}

::PROTOBUF_NAMESPACE_ID::uint8* Override::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Override)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Override.Throttle throttle = 1;
  if (this->has_throttle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::throttle(this), target);
  }

  // .sim_msg.Override.Brake brake = 2;
  if (this->has_brake()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::brake(this), target);
  }

  // .sim_msg.Override.SteeringWheel steering_wheel = 3;
  if (this->has_steering_wheel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::steering_wheel(this), target);
  }

  // .sim_msg.Override.ParkingBrake parking_brake = 4;
  if (this->has_parking_brake()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::parking_brake(this), target);
  }

  // .sim_msg.Override.Clutch clutch = 5;
  if (this->has_clutch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::clutch(this), target);
  }

  // .sim_msg.Override.Gear gear = 6;
  if (this->has_gear()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::gear(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Override)
  return target;
}

size_t Override::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Override)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Override.Throttle throttle = 1;
  if (this->has_throttle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttle_);
  }

  // .sim_msg.Override.Brake brake = 2;
  if (this->has_brake()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *brake_);
  }

  // .sim_msg.Override.SteeringWheel steering_wheel = 3;
  if (this->has_steering_wheel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *steering_wheel_);
  }

  // .sim_msg.Override.ParkingBrake parking_brake = 4;
  if (this->has_parking_brake()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *parking_brake_);
  }

  // .sim_msg.Override.Clutch clutch = 5;
  if (this->has_clutch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clutch_);
  }

  // .sim_msg.Override.Gear gear = 6;
  if (this->has_gear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gear_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Override::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Override)
  GOOGLE_DCHECK_NE(&from, this);
  const Override* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Override>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Override)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Override)
    MergeFrom(*source);
  }
}

void Override::MergeFrom(const Override& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Override)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_throttle()) {
    mutable_throttle()->::sim_msg::Override_Throttle::MergeFrom(from.throttle());
  }
  if (from.has_brake()) {
    mutable_brake()->::sim_msg::Override_Brake::MergeFrom(from.brake());
  }
  if (from.has_steering_wheel()) {
    mutable_steering_wheel()->::sim_msg::Override_SteeringWheel::MergeFrom(from.steering_wheel());
  }
  if (from.has_parking_brake()) {
    mutable_parking_brake()->::sim_msg::Override_ParkingBrake::MergeFrom(from.parking_brake());
  }
  if (from.has_clutch()) {
    mutable_clutch()->::sim_msg::Override_Clutch::MergeFrom(from.clutch());
  }
  if (from.has_gear()) {
    mutable_gear()->::sim_msg::Override_Gear::MergeFrom(from.gear());
  }
}

void Override::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Override)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Override::CopyFrom(const Override& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Override)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Override::IsInitialized() const {
  return true;
}

void Override::InternalSwap(Override* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(throttle_, other->throttle_);
  swap(brake_, other->brake_);
  swap(steering_wheel_, other->steering_wheel_);
  swap(parking_brake_, other->parking_brake_);
  swap(clutch_, other->clutch_);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Override::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command_LaneChange::InitAsDefaultInstance() {
}
class Command_LaneChange::_Internal {
 public:
};

Command_LaneChange::Command_LaneChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Command.LaneChange)
}
Command_LaneChange::Command_LaneChange(const Command_LaneChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&action_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Command.LaneChange)
}

void Command_LaneChange::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
}

Command_LaneChange::~Command_LaneChange() {
  // @@protoc_insertion_point(destructor:sim_msg.Command.LaneChange)
  SharedDtor();
}

void Command_LaneChange::SharedDtor() {
}

void Command_LaneChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command_LaneChange& Command_LaneChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_LaneChange_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Command_LaneChange::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Command.LaneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Command_LaneChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Dir value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_value(static_cast<::sim_msg::Dir>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Command_LaneChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Command.LaneChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Dir value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::sim_msg::Dir >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Command.LaneChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Command.LaneChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Command_LaneChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Command.LaneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // .sim_msg.Dir value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Command.LaneChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* Command_LaneChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Command.LaneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // .sim_msg.Dir value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Command.LaneChange)
  return target;
}

size_t Command_LaneChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Command.LaneChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  // .sim_msg.Dir value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command_LaneChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Command.LaneChange)
  GOOGLE_DCHECK_NE(&from, this);
  const Command_LaneChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command_LaneChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Command.LaneChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Command.LaneChange)
    MergeFrom(*source);
  }
}

void Command_LaneChange::MergeFrom(const Command_LaneChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Command.LaneChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Command_LaneChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Command.LaneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command_LaneChange::CopyFrom(const Command_LaneChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Command.LaneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_LaneChange::IsInitialized() const {
  return true;
}

void Command_LaneChange::InternalSwap(Command_LaneChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_LaneChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command_Overtaking::InitAsDefaultInstance() {
}
class Command_Overtaking::_Internal {
 public:
};

Command_Overtaking::Command_Overtaking()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Command.Overtaking)
}
Command_Overtaking::Command_Overtaking(const Command_Overtaking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&action_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Command.Overtaking)
}

void Command_Overtaking::SharedCtor() {
  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
}

Command_Overtaking::~Command_Overtaking() {
  // @@protoc_insertion_point(destructor:sim_msg.Command.Overtaking)
  SharedDtor();
}

void Command_Overtaking::SharedDtor() {
}

void Command_Overtaking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command_Overtaking& Command_Overtaking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_Overtaking_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Command_Overtaking::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Command.Overtaking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&action_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Command_Overtaking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.OnOff action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_action(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Dir value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_value(static_cast<::sim_msg::Dir>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Command_Overtaking::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Command.Overtaking)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.OnOff action = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Dir value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_value(static_cast< ::sim_msg::Dir >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Command.Overtaking)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Command.Overtaking)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Command_Overtaking::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Command.Overtaking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // .sim_msg.Dir value = 2;
  if (this->value() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Command.Overtaking)
}

::PROTOBUF_NAMESPACE_ID::uint8* Command_Overtaking::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Command.Overtaking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // .sim_msg.Dir value = 2;
  if (this->value() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Command.Overtaking)
  return target;
}

size_t Command_Overtaking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Command.Overtaking)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.OnOff action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  // .sim_msg.Dir value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->value());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command_Overtaking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Command.Overtaking)
  GOOGLE_DCHECK_NE(&from, this);
  const Command_Overtaking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command_Overtaking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Command.Overtaking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Command.Overtaking)
    MergeFrom(*source);
  }
}

void Command_Overtaking::MergeFrom(const Command_Overtaking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Command.Overtaking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.action() != 0) {
    set_action(from.action());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Command_Overtaking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Command.Overtaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command_Overtaking::CopyFrom(const Command_Overtaking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Command.Overtaking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command_Overtaking::IsInitialized() const {
  return true;
}

void Command_Overtaking::InternalSwap(Command_Overtaking* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(action_, other->action_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command_Overtaking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Command::InitAsDefaultInstance() {
  ::sim_msg::_Command_default_instance_.user_define_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::sim_msg::_Command_default_instance_.lane_change_ = const_cast< ::sim_msg::Command_LaneChange*>(
      ::sim_msg::Command_LaneChange::internal_default_instance());
  ::sim_msg::_Command_default_instance_.overtaking_ = const_cast< ::sim_msg::Command_Overtaking*>(
      ::sim_msg::Command_Overtaking::internal_default_instance());
  ::sim_msg::_Command_default_instance_.pull_over_ = 0;
  ::sim_msg::_Command_default_instance_.emergency_stop_ = 0;
  ::sim_msg::_Command_default_instance_.lateral_speed_to_left_ = 0;
  ::sim_msg::_Command_default_instance_.lateral_speed_to_right_ = 0;
  ::sim_msg::_Command_default_instance_.lateral_accel_to_left_ = 0;
  ::sim_msg::_Command_default_instance_.lateral_accel_to_right_ = 0;
}
class Command::_Internal {
 public:
  static const ::sim_msg::Command_LaneChange& lane_change(const Command* msg);
  static const ::sim_msg::Command_Overtaking& overtaking(const Command* msg);
};

const ::sim_msg::Command_LaneChange&
Command::_Internal::lane_change(const Command* msg) {
  return *msg->type_.lane_change_;
}
const ::sim_msg::Command_Overtaking&
Command::_Internal::overtaking(const Command* msg) {
  return *msg->type_.overtaking_;
}
void Command::set_allocated_lane_change(::sim_msg::Command_LaneChange* lane_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (lane_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change, submessage_arena);
    }
    set_has_lane_change();
    type_.lane_change_ = lane_change;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Command.lane_change)
}
void Command::set_allocated_overtaking(::sim_msg::Command_Overtaking* overtaking) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (overtaking) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      overtaking = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overtaking, submessage_arena);
    }
    set_has_overtaking();
    type_.overtaking_ = overtaking;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Command.overtaking)
}
Command::Command()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kUserDefine: {
      set_user_define(from.user_define());
      break;
    }
    case kLaneChange: {
      mutable_lane_change()->::sim_msg::Command_LaneChange::MergeFrom(from.lane_change());
      break;
    }
    case kOvertaking: {
      mutable_overtaking()->::sim_msg::Command_Overtaking::MergeFrom(from.overtaking());
      break;
    }
    case kPullOver: {
      set_pull_over(from.pull_over());
      break;
    }
    case kEmergencyStop: {
      set_emergency_stop(from.emergency_stop());
      break;
    }
    case kLateralSpeedToLeft: {
      set_lateral_speed_to_left(from.lateral_speed_to_left());
      break;
    }
    case kLateralSpeedToRight: {
      set_lateral_speed_to_right(from.lateral_speed_to_right());
      break;
    }
    case kLateralAccelToLeft: {
      set_lateral_accel_to_left(from.lateral_accel_to_left());
      break;
    }
    case kLateralAccelToRight: {
      set_lateral_accel_to_right(from.lateral_accel_to_right());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_vehicle_5finteraction_2eproto.base);
  clear_has_type();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:sim_msg.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Command::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:sim_msg.Command)
  switch (type_case()) {
    case kUserDefine: {
      type_.user_define_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kLaneChange: {
      delete type_.lane_change_;
      break;
    }
    case kOvertaking: {
      delete type_.overtaking_;
      break;
    }
    case kPullOver: {
      // No need to clear
      break;
    }
    case kEmergencyStop: {
      // No need to clear
      break;
    }
    case kLateralSpeedToLeft: {
      // No need to clear
      break;
    }
    case kLateralSpeedToRight: {
      // No need to clear
      break;
    }
    case kLateralAccelToLeft: {
      // No need to clear
      break;
    }
    case kLateralAccelToRight: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes user_define = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_define(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Command.LaneChange lane_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_lane_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Command.Overtaking overtaking = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_overtaking(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff pull_over = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_pull_over(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff emergency_stop = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_emergency_stop(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // double lateral_speed_to_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          set_lateral_speed_to_left(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lateral_speed_to_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          set_lateral_speed_to_right(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lateral_accel_to_left = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          set_lateral_accel_to_left(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lateral_accel_to_right = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          set_lateral_accel_to_right(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Command::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Command)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes user_define = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_define()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Command.LaneChange lane_change = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Command.Overtaking overtaking = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_overtaking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff pull_over = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pull_over(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff emergency_stop = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emergency_stop(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_speed_to_left = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {
          clear_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.lateral_speed_to_left_)));
          set_has_lateral_speed_to_left();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_speed_to_right = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {
          clear_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.lateral_speed_to_right_)));
          set_has_lateral_speed_to_right();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_accel_to_left = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {
          clear_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.lateral_accel_to_left_)));
          set_has_lateral_accel_to_left();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double lateral_accel_to_right = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {
          clear_type();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.lateral_accel_to_right_)));
          set_has_lateral_accel_to_right();
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Command)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Command::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_define = 1;
  if (has_user_define()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_define(), output);
  }

  // .sim_msg.Command.LaneChange lane_change = 2;
  if (has_lane_change()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::lane_change(this), output);
  }

  // .sim_msg.Command.Overtaking overtaking = 3;
  if (has_overtaking()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::overtaking(this), output);
  }

  // .sim_msg.OnOff pull_over = 4;
  if (has_pull_over()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->pull_over(), output);
  }

  // .sim_msg.OnOff emergency_stop = 5;
  if (has_emergency_stop()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->emergency_stop(), output);
  }

  // double lateral_speed_to_left = 6;
  if (has_lateral_speed_to_left()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->lateral_speed_to_left(), output);
  }

  // double lateral_speed_to_right = 7;
  if (has_lateral_speed_to_right()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->lateral_speed_to_right(), output);
  }

  // double lateral_accel_to_left = 8;
  if (has_lateral_accel_to_left()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->lateral_accel_to_left(), output);
  }

  // double lateral_accel_to_right = 9;
  if (has_lateral_accel_to_right()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->lateral_accel_to_right(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Command)
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_define = 1;
  if (has_user_define()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_define(), target);
  }

  // .sim_msg.Command.LaneChange lane_change = 2;
  if (has_lane_change()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::lane_change(this), target);
  }

  // .sim_msg.Command.Overtaking overtaking = 3;
  if (has_overtaking()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::overtaking(this), target);
  }

  // .sim_msg.OnOff pull_over = 4;
  if (has_pull_over()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->pull_over(), target);
  }

  // .sim_msg.OnOff emergency_stop = 5;
  if (has_emergency_stop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->emergency_stop(), target);
  }

  // double lateral_speed_to_left = 6;
  if (has_lateral_speed_to_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->lateral_speed_to_left(), target);
  }

  // double lateral_speed_to_right = 7;
  if (has_lateral_speed_to_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->lateral_speed_to_right(), target);
  }

  // double lateral_accel_to_left = 8;
  if (has_lateral_accel_to_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->lateral_accel_to_left(), target);
  }

  // double lateral_accel_to_right = 9;
  if (has_lateral_accel_to_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->lateral_accel_to_right(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Command)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // bytes user_define = 1;
    case kUserDefine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->user_define());
      break;
    }
    // .sim_msg.Command.LaneChange lane_change = 2;
    case kLaneChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.lane_change_);
      break;
    }
    // .sim_msg.Command.Overtaking overtaking = 3;
    case kOvertaking: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.overtaking_);
      break;
    }
    // .sim_msg.OnOff pull_over = 4;
    case kPullOver: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->pull_over());
      break;
    }
    // .sim_msg.OnOff emergency_stop = 5;
    case kEmergencyStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->emergency_stop());
      break;
    }
    // double lateral_speed_to_left = 6;
    case kLateralSpeedToLeft: {
      total_size += 1 + 8;
      break;
    }
    // double lateral_speed_to_right = 7;
    case kLateralSpeedToRight: {
      total_size += 1 + 8;
      break;
    }
    // double lateral_accel_to_left = 8;
    case kLateralAccelToLeft: {
      total_size += 1 + 8;
      break;
    }
    // double lateral_accel_to_right = 9;
    case kLateralAccelToRight: {
      total_size += 1 + 8;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kUserDefine: {
      set_user_define(from.user_define());
      break;
    }
    case kLaneChange: {
      mutable_lane_change()->::sim_msg::Command_LaneChange::MergeFrom(from.lane_change());
      break;
    }
    case kOvertaking: {
      mutable_overtaking()->::sim_msg::Command_Overtaking::MergeFrom(from.overtaking());
      break;
    }
    case kPullOver: {
      set_pull_over(from.pull_over());
      break;
    }
    case kEmergencyStop: {
      set_emergency_stop(from.emergency_stop());
      break;
    }
    case kLateralSpeedToLeft: {
      set_lateral_speed_to_left(from.lateral_speed_to_left());
      break;
    }
    case kLateralSpeedToRight: {
      set_lateral_speed_to_right(from.lateral_speed_to_right());
      break;
    }
    case kLateralAccelToLeft: {
      set_lateral_accel_to_left(from.lateral_accel_to_left());
      break;
    }
    case kLateralAccelToRight: {
      set_lateral_accel_to_right(from.lateral_accel_to_right());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Status::InitAsDefaultInstance() {
  ::sim_msg::_Status_default_instance_.user_define_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::sim_msg::_Status_default_instance_.emergency_brake_ = 0;
  ::sim_msg::_Status_default_instance_.vehicle_lost_control_ = 0;
  ::sim_msg::_Status_default_instance_.hands_on_steeringwheel_ = 0;
  ::sim_msg::_Status_default_instance_.eyes_on_road_ = 0;
  ::sim_msg::_Status_default_instance_.lidar_ = 0;
  ::sim_msg::_Status_default_instance_.radar_ = 0;
  ::sim_msg::_Status_default_instance_.ultrasonic_ = 0;
  ::sim_msg::_Status_default_instance_.camera_ = 0;
  ::sim_msg::_Status_default_instance_.gnss_ = 0;
  ::sim_msg::_Status_default_instance_.imu_ = 0;
  ::sim_msg::_Status_default_instance_.localization_ = 0;
  ::sim_msg::_Status_default_instance_.beam_ = 0;
  ::sim_msg::_Status_default_instance_.brake_light_ = 0;
  ::sim_msg::_Status_default_instance_.hazard_light_ = 0;
  ::sim_msg::_Status_default_instance_.left_turn_light_ = 0;
  ::sim_msg::_Status_default_instance_.right_turn_light_ = 0;
  ::sim_msg::_Status_default_instance_.driver_seatbelt_ = 0;
  ::sim_msg::_Status_default_instance_.passenger_seatbelt_ = 0;
  ::sim_msg::_Status_default_instance_.driver_door_ = 0;
  ::sim_msg::_Status_default_instance_.passenger_door_ = 0;
  ::sim_msg::_Status_default_instance_.hood_ = 0;
  ::sim_msg::_Status_default_instance_.trunk_ = 0;
  ::sim_msg::_Status_default_instance_.parkingbrake_ = 0;
  ::sim_msg::_Status_default_instance_.wiper_ = 0;
  ::sim_msg::_Status_default_instance_.gear_ = 0;
  ::sim_msg::_Status_default_instance_.key_ = 0;
}
class Status::_Internal {
 public:
};

Status::Status()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Status)
}
Status::Status(const Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kUserDefine: {
      set_user_define(from.user_define());
      break;
    }
    case kEmergencyBrake: {
      set_emergency_brake(from.emergency_brake());
      break;
    }
    case kVehicleLostControl: {
      set_vehicle_lost_control(from.vehicle_lost_control());
      break;
    }
    case kHandsOnSteeringwheel: {
      set_hands_on_steeringwheel(from.hands_on_steeringwheel());
      break;
    }
    case kEyesOnRoad: {
      set_eyes_on_road(from.eyes_on_road());
      break;
    }
    case kLidar: {
      set_lidar(from.lidar());
      break;
    }
    case kRadar: {
      set_radar(from.radar());
      break;
    }
    case kUltrasonic: {
      set_ultrasonic(from.ultrasonic());
      break;
    }
    case kCamera: {
      set_camera(from.camera());
      break;
    }
    case kGnss: {
      set_gnss(from.gnss());
      break;
    }
    case kImu: {
      set_imu(from.imu());
      break;
    }
    case kLocalization: {
      set_localization(from.localization());
      break;
    }
    case kBeam: {
      set_beam(from.beam());
      break;
    }
    case kBrakeLight: {
      set_brake_light(from.brake_light());
      break;
    }
    case kHazardLight: {
      set_hazard_light(from.hazard_light());
      break;
    }
    case kLeftTurnLight: {
      set_left_turn_light(from.left_turn_light());
      break;
    }
    case kRightTurnLight: {
      set_right_turn_light(from.right_turn_light());
      break;
    }
    case kDriverSeatbelt: {
      set_driver_seatbelt(from.driver_seatbelt());
      break;
    }
    case kPassengerSeatbelt: {
      set_passenger_seatbelt(from.passenger_seatbelt());
      break;
    }
    case kDriverDoor: {
      set_driver_door(from.driver_door());
      break;
    }
    case kPassengerDoor: {
      set_passenger_door(from.passenger_door());
      break;
    }
    case kHood: {
      set_hood(from.hood());
      break;
    }
    case kTrunk: {
      set_trunk(from.trunk());
      break;
    }
    case kParkingbrake: {
      set_parkingbrake(from.parkingbrake());
      break;
    }
    case kWiper: {
      set_wiper(from.wiper());
      break;
    }
    case kGear: {
      set_gear(from.gear());
      break;
    }
    case kKey: {
      set_key(from.key());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Status)
}

void Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Status_vehicle_5finteraction_2eproto.base);
  clear_has_type();
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:sim_msg.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Status& Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Status_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void Status::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:sim_msg.Status)
  switch (type_case()) {
    case kUserDefine: {
      type_.user_define_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kEmergencyBrake: {
      // No need to clear
      break;
    }
    case kVehicleLostControl: {
      // No need to clear
      break;
    }
    case kHandsOnSteeringwheel: {
      // No need to clear
      break;
    }
    case kEyesOnRoad: {
      // No need to clear
      break;
    }
    case kLidar: {
      // No need to clear
      break;
    }
    case kRadar: {
      // No need to clear
      break;
    }
    case kUltrasonic: {
      // No need to clear
      break;
    }
    case kCamera: {
      // No need to clear
      break;
    }
    case kGnss: {
      // No need to clear
      break;
    }
    case kImu: {
      // No need to clear
      break;
    }
    case kLocalization: {
      // No need to clear
      break;
    }
    case kBeam: {
      // No need to clear
      break;
    }
    case kBrakeLight: {
      // No need to clear
      break;
    }
    case kHazardLight: {
      // No need to clear
      break;
    }
    case kLeftTurnLight: {
      // No need to clear
      break;
    }
    case kRightTurnLight: {
      // No need to clear
      break;
    }
    case kDriverSeatbelt: {
      // No need to clear
      break;
    }
    case kPassengerSeatbelt: {
      // No need to clear
      break;
    }
    case kDriverDoor: {
      // No need to clear
      break;
    }
    case kPassengerDoor: {
      // No need to clear
      break;
    }
    case kHood: {
      // No need to clear
      break;
    }
    case kTrunk: {
      // No need to clear
      break;
    }
    case kParkingbrake: {
      // No need to clear
      break;
    }
    case kWiper: {
      // No need to clear
      break;
    }
    case kGear: {
      // No need to clear
      break;
    }
    case kKey: {
      // No need to clear
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Status::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes user_define = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_user_define(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff emergency_brake = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_emergency_brake(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff vehicle_lost_control = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_vehicle_lost_control(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff hands_on_steeringwheel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_hands_on_steeringwheel(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff eyes_on_road = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_eyes_on_road(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff lidar = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_lidar(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff radar = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_radar(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff ultrasonic = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ultrasonic(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff camera = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_camera(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff gnss = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gnss(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff imu = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_imu(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff localization = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_localization(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.BeamSts beam = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_beam(static_cast<::sim_msg::BeamSts>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff brake_light = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_brake_light(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff hazard_light = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_hazard_light(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff left_turn_light = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_left_turn_light(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff right_turn_light = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_right_turn_light(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff driver_seatbelt = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_driver_seatbelt(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff passenger_seatbelt = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_passenger_seatbelt(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff driver_door = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_driver_door(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff passenger_door = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_passenger_door(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff hood = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_hood(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.OnOff trunk = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_trunk(static_cast<::sim_msg::OnOff>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.ParkingBrakeSts parkingbrake = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_parkingbrake(static_cast<::sim_msg::ParkingBrakeSts>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.WiperSts wiper = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_wiper(static_cast<::sim_msg::WiperSts>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.GearSts gear = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gear(static_cast<::sim_msg::GearSts>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.KeySts key = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_key(static_cast<::sim_msg::KeySts>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Status::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Status)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes user_define = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_define()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff emergency_brake = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emergency_brake(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff vehicle_lost_control = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_vehicle_lost_control(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff hands_on_steeringwheel = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hands_on_steeringwheel(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff eyes_on_road = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eyes_on_road(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff lidar = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_lidar(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff radar = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_radar(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff ultrasonic = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ultrasonic(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff camera = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_camera(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff gnss = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gnss(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff imu = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_imu(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff localization = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_localization(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.BeamSts beam = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_beam(static_cast< ::sim_msg::BeamSts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff brake_light = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_brake_light(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff hazard_light = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (120 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hazard_light(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff left_turn_light = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_left_turn_light(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff right_turn_light = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_right_turn_light(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff driver_seatbelt = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driver_seatbelt(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff passenger_seatbelt = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_passenger_seatbelt(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff driver_door = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_driver_door(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff passenger_door = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_passenger_door(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff hood = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_hood(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.OnOff trunk = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trunk(static_cast< ::sim_msg::OnOff >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ParkingBrakeSts parkingbrake = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_parkingbrake(static_cast< ::sim_msg::ParkingBrakeSts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.WiperSts wiper = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (200 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_wiper(static_cast< ::sim_msg::WiperSts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GearSts gear = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear(static_cast< ::sim_msg::GearSts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.KeySts key = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key(static_cast< ::sim_msg::KeySts >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Status)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Status::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_define = 1;
  if (has_user_define()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->user_define(), output);
  }

  // .sim_msg.OnOff emergency_brake = 2;
  if (has_emergency_brake()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->emergency_brake(), output);
  }

  // .sim_msg.OnOff vehicle_lost_control = 3;
  if (has_vehicle_lost_control()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->vehicle_lost_control(), output);
  }

  // .sim_msg.OnOff hands_on_steeringwheel = 4;
  if (has_hands_on_steeringwheel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->hands_on_steeringwheel(), output);
  }

  // .sim_msg.OnOff eyes_on_road = 5;
  if (has_eyes_on_road()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->eyes_on_road(), output);
  }

  // .sim_msg.OnOff lidar = 6;
  if (has_lidar()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->lidar(), output);
  }

  // .sim_msg.OnOff radar = 7;
  if (has_radar()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->radar(), output);
  }

  // .sim_msg.OnOff ultrasonic = 8;
  if (has_ultrasonic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->ultrasonic(), output);
  }

  // .sim_msg.OnOff camera = 9;
  if (has_camera()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      9, this->camera(), output);
  }

  // .sim_msg.OnOff gnss = 10;
  if (has_gnss()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      10, this->gnss(), output);
  }

  // .sim_msg.OnOff imu = 11;
  if (has_imu()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->imu(), output);
  }

  // .sim_msg.OnOff localization = 12;
  if (has_localization()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      12, this->localization(), output);
  }

  // .sim_msg.BeamSts beam = 13;
  if (has_beam()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      13, this->beam(), output);
  }

  // .sim_msg.OnOff brake_light = 14;
  if (has_brake_light()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      14, this->brake_light(), output);
  }

  // .sim_msg.OnOff hazard_light = 15;
  if (has_hazard_light()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      15, this->hazard_light(), output);
  }

  // .sim_msg.OnOff left_turn_light = 16;
  if (has_left_turn_light()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      16, this->left_turn_light(), output);
  }

  // .sim_msg.OnOff right_turn_light = 17;
  if (has_right_turn_light()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      17, this->right_turn_light(), output);
  }

  // .sim_msg.OnOff driver_seatbelt = 18;
  if (has_driver_seatbelt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      18, this->driver_seatbelt(), output);
  }

  // .sim_msg.OnOff passenger_seatbelt = 19;
  if (has_passenger_seatbelt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      19, this->passenger_seatbelt(), output);
  }

  // .sim_msg.OnOff driver_door = 20;
  if (has_driver_door()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      20, this->driver_door(), output);
  }

  // .sim_msg.OnOff passenger_door = 21;
  if (has_passenger_door()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      21, this->passenger_door(), output);
  }

  // .sim_msg.OnOff hood = 22;
  if (has_hood()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->hood(), output);
  }

  // .sim_msg.OnOff trunk = 23;
  if (has_trunk()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->trunk(), output);
  }

  // .sim_msg.ParkingBrakeSts parkingbrake = 24;
  if (has_parkingbrake()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      24, this->parkingbrake(), output);
  }

  // .sim_msg.WiperSts wiper = 25;
  if (has_wiper()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      25, this->wiper(), output);
  }

  // .sim_msg.GearSts gear = 26;
  if (has_gear()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      26, this->gear(), output);
  }

  // .sim_msg.KeySts key = 27;
  if (has_key()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      27, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Status)
}

::PROTOBUF_NAMESPACE_ID::uint8* Status::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes user_define = 1;
  if (has_user_define()) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        1, this->user_define(), target);
  }

  // .sim_msg.OnOff emergency_brake = 2;
  if (has_emergency_brake()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->emergency_brake(), target);
  }

  // .sim_msg.OnOff vehicle_lost_control = 3;
  if (has_vehicle_lost_control()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->vehicle_lost_control(), target);
  }

  // .sim_msg.OnOff hands_on_steeringwheel = 4;
  if (has_hands_on_steeringwheel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->hands_on_steeringwheel(), target);
  }

  // .sim_msg.OnOff eyes_on_road = 5;
  if (has_eyes_on_road()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->eyes_on_road(), target);
  }

  // .sim_msg.OnOff lidar = 6;
  if (has_lidar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->lidar(), target);
  }

  // .sim_msg.OnOff radar = 7;
  if (has_radar()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->radar(), target);
  }

  // .sim_msg.OnOff ultrasonic = 8;
  if (has_ultrasonic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->ultrasonic(), target);
  }

  // .sim_msg.OnOff camera = 9;
  if (has_camera()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->camera(), target);
  }

  // .sim_msg.OnOff gnss = 10;
  if (has_gnss()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->gnss(), target);
  }

  // .sim_msg.OnOff imu = 11;
  if (has_imu()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->imu(), target);
  }

  // .sim_msg.OnOff localization = 12;
  if (has_localization()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->localization(), target);
  }

  // .sim_msg.BeamSts beam = 13;
  if (has_beam()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->beam(), target);
  }

  // .sim_msg.OnOff brake_light = 14;
  if (has_brake_light()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->brake_light(), target);
  }

  // .sim_msg.OnOff hazard_light = 15;
  if (has_hazard_light()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->hazard_light(), target);
  }

  // .sim_msg.OnOff left_turn_light = 16;
  if (has_left_turn_light()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->left_turn_light(), target);
  }

  // .sim_msg.OnOff right_turn_light = 17;
  if (has_right_turn_light()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->right_turn_light(), target);
  }

  // .sim_msg.OnOff driver_seatbelt = 18;
  if (has_driver_seatbelt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->driver_seatbelt(), target);
  }

  // .sim_msg.OnOff passenger_seatbelt = 19;
  if (has_passenger_seatbelt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      19, this->passenger_seatbelt(), target);
  }

  // .sim_msg.OnOff driver_door = 20;
  if (has_driver_door()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      20, this->driver_door(), target);
  }

  // .sim_msg.OnOff passenger_door = 21;
  if (has_passenger_door()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->passenger_door(), target);
  }

  // .sim_msg.OnOff hood = 22;
  if (has_hood()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->hood(), target);
  }

  // .sim_msg.OnOff trunk = 23;
  if (has_trunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->trunk(), target);
  }

  // .sim_msg.ParkingBrakeSts parkingbrake = 24;
  if (has_parkingbrake()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->parkingbrake(), target);
  }

  // .sim_msg.WiperSts wiper = 25;
  if (has_wiper()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->wiper(), target);
  }

  // .sim_msg.GearSts gear = 26;
  if (has_gear()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->gear(), target);
  }

  // .sim_msg.KeySts key = 27;
  if (has_key()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Status)
  return target;
}

size_t Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Status)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // bytes user_define = 1;
    case kUserDefine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->user_define());
      break;
    }
    // .sim_msg.OnOff emergency_brake = 2;
    case kEmergencyBrake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->emergency_brake());
      break;
    }
    // .sim_msg.OnOff vehicle_lost_control = 3;
    case kVehicleLostControl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->vehicle_lost_control());
      break;
    }
    // .sim_msg.OnOff hands_on_steeringwheel = 4;
    case kHandsOnSteeringwheel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hands_on_steeringwheel());
      break;
    }
    // .sim_msg.OnOff eyes_on_road = 5;
    case kEyesOnRoad: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->eyes_on_road());
      break;
    }
    // .sim_msg.OnOff lidar = 6;
    case kLidar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->lidar());
      break;
    }
    // .sim_msg.OnOff radar = 7;
    case kRadar: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->radar());
      break;
    }
    // .sim_msg.OnOff ultrasonic = 8;
    case kUltrasonic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ultrasonic());
      break;
    }
    // .sim_msg.OnOff camera = 9;
    case kCamera: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->camera());
      break;
    }
    // .sim_msg.OnOff gnss = 10;
    case kGnss: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gnss());
      break;
    }
    // .sim_msg.OnOff imu = 11;
    case kImu: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->imu());
      break;
    }
    // .sim_msg.OnOff localization = 12;
    case kLocalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->localization());
      break;
    }
    // .sim_msg.BeamSts beam = 13;
    case kBeam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->beam());
      break;
    }
    // .sim_msg.OnOff brake_light = 14;
    case kBrakeLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->brake_light());
      break;
    }
    // .sim_msg.OnOff hazard_light = 15;
    case kHazardLight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hazard_light());
      break;
    }
    // .sim_msg.OnOff left_turn_light = 16;
    case kLeftTurnLight: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->left_turn_light());
      break;
    }
    // .sim_msg.OnOff right_turn_light = 17;
    case kRightTurnLight: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->right_turn_light());
      break;
    }
    // .sim_msg.OnOff driver_seatbelt = 18;
    case kDriverSeatbelt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->driver_seatbelt());
      break;
    }
    // .sim_msg.OnOff passenger_seatbelt = 19;
    case kPassengerSeatbelt: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->passenger_seatbelt());
      break;
    }
    // .sim_msg.OnOff driver_door = 20;
    case kDriverDoor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->driver_door());
      break;
    }
    // .sim_msg.OnOff passenger_door = 21;
    case kPassengerDoor: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->passenger_door());
      break;
    }
    // .sim_msg.OnOff hood = 22;
    case kHood: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hood());
      break;
    }
    // .sim_msg.OnOff trunk = 23;
    case kTrunk: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trunk());
      break;
    }
    // .sim_msg.ParkingBrakeSts parkingbrake = 24;
    case kParkingbrake: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->parkingbrake());
      break;
    }
    // .sim_msg.WiperSts wiper = 25;
    case kWiper: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->wiper());
      break;
    }
    // .sim_msg.GearSts gear = 26;
    case kGear: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
      break;
    }
    // .sim_msg.KeySts key = 27;
    case kKey: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->key());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Status)
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kUserDefine: {
      set_user_define(from.user_define());
      break;
    }
    case kEmergencyBrake: {
      set_emergency_brake(from.emergency_brake());
      break;
    }
    case kVehicleLostControl: {
      set_vehicle_lost_control(from.vehicle_lost_control());
      break;
    }
    case kHandsOnSteeringwheel: {
      set_hands_on_steeringwheel(from.hands_on_steeringwheel());
      break;
    }
    case kEyesOnRoad: {
      set_eyes_on_road(from.eyes_on_road());
      break;
    }
    case kLidar: {
      set_lidar(from.lidar());
      break;
    }
    case kRadar: {
      set_radar(from.radar());
      break;
    }
    case kUltrasonic: {
      set_ultrasonic(from.ultrasonic());
      break;
    }
    case kCamera: {
      set_camera(from.camera());
      break;
    }
    case kGnss: {
      set_gnss(from.gnss());
      break;
    }
    case kImu: {
      set_imu(from.imu());
      break;
    }
    case kLocalization: {
      set_localization(from.localization());
      break;
    }
    case kBeam: {
      set_beam(from.beam());
      break;
    }
    case kBrakeLight: {
      set_brake_light(from.brake_light());
      break;
    }
    case kHazardLight: {
      set_hazard_light(from.hazard_light());
      break;
    }
    case kLeftTurnLight: {
      set_left_turn_light(from.left_turn_light());
      break;
    }
    case kRightTurnLight: {
      set_right_turn_light(from.right_turn_light());
      break;
    }
    case kDriverSeatbelt: {
      set_driver_seatbelt(from.driver_seatbelt());
      break;
    }
    case kPassengerSeatbelt: {
      set_passenger_seatbelt(from.passenger_seatbelt());
      break;
    }
    case kDriverDoor: {
      set_driver_door(from.driver_door());
      break;
    }
    case kPassengerDoor: {
      set_passenger_door(from.passenger_door());
      break;
    }
    case kHood: {
      set_hood(from.hood());
      break;
    }
    case kTrunk: {
      set_trunk(from.trunk());
      break;
    }
    case kParkingbrake: {
      set_parkingbrake(from.parkingbrake());
      break;
    }
    case kWiper: {
      set_wiper(from.wiper());
      break;
    }
    case kGear: {
      set_gear(from.gear());
      break;
    }
    case kKey: {
      set_key(from.key());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {
  return true;
}

void Status::InternalSwap(Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VehicleInteraction::InitAsDefaultInstance() {
  ::sim_msg::_VehicleInteraction_default_instance_._instance.get_mutable()->activate_ = const_cast< ::sim_msg::Activate*>(
      ::sim_msg::Activate::internal_default_instance());
  ::sim_msg::_VehicleInteraction_default_instance_._instance.get_mutable()->assign_ = const_cast< ::sim_msg::Assign*>(
      ::sim_msg::Assign::internal_default_instance());
  ::sim_msg::_VehicleInteraction_default_instance_._instance.get_mutable()->override_ = const_cast< ::sim_msg::Override*>(
      ::sim_msg::Override::internal_default_instance());
  ::sim_msg::_VehicleInteraction_default_instance_._instance.get_mutable()->command_ = const_cast< ::sim_msg::Command*>(
      ::sim_msg::Command::internal_default_instance());
  ::sim_msg::_VehicleInteraction_default_instance_._instance.get_mutable()->status_ = const_cast< ::sim_msg::Status*>(
      ::sim_msg::Status::internal_default_instance());
}
class VehicleInteraction::_Internal {
 public:
  static const ::sim_msg::Activate& activate(const VehicleInteraction* msg);
  static const ::sim_msg::Assign& assign(const VehicleInteraction* msg);
  static const ::sim_msg::Override& override(const VehicleInteraction* msg);
  static const ::sim_msg::Command& command(const VehicleInteraction* msg);
  static const ::sim_msg::Status& status(const VehicleInteraction* msg);
};

const ::sim_msg::Activate&
VehicleInteraction::_Internal::activate(const VehicleInteraction* msg) {
  return *msg->activate_;
}
const ::sim_msg::Assign&
VehicleInteraction::_Internal::assign(const VehicleInteraction* msg) {
  return *msg->assign_;
}
const ::sim_msg::Override&
VehicleInteraction::_Internal::override(const VehicleInteraction* msg) {
  return *msg->override_;
}
const ::sim_msg::Command&
VehicleInteraction::_Internal::command(const VehicleInteraction* msg) {
  return *msg->command_;
}
const ::sim_msg::Status&
VehicleInteraction::_Internal::status(const VehicleInteraction* msg) {
  return *msg->status_;
}
VehicleInteraction::VehicleInteraction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.VehicleInteraction)
}
VehicleInteraction::VehicleInteraction(const VehicleInteraction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_activate()) {
    activate_ = new ::sim_msg::Activate(*from.activate_);
  } else {
    activate_ = nullptr;
  }
  if (from.has_assign()) {
    assign_ = new ::sim_msg::Assign(*from.assign_);
  } else {
    assign_ = nullptr;
  }
  if (from.has_override()) {
    override_ = new ::sim_msg::Override(*from.override_);
  } else {
    override_ = nullptr;
  }
  if (from.has_command()) {
    command_ = new ::sim_msg::Command(*from.command_);
  } else {
    command_ = nullptr;
  }
  if (from.has_status()) {
    status_ = new ::sim_msg::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.VehicleInteraction)
}

void VehicleInteraction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VehicleInteraction_vehicle_5finteraction_2eproto.base);
  ::memset(&activate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&activate_)) + sizeof(status_));
}

VehicleInteraction::~VehicleInteraction() {
  // @@protoc_insertion_point(destructor:sim_msg.VehicleInteraction)
  SharedDtor();
}

void VehicleInteraction::SharedDtor() {
  if (this != internal_default_instance()) delete activate_;
  if (this != internal_default_instance()) delete assign_;
  if (this != internal_default_instance()) delete override_;
  if (this != internal_default_instance()) delete command_;
  if (this != internal_default_instance()) delete status_;
}

void VehicleInteraction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VehicleInteraction& VehicleInteraction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VehicleInteraction_vehicle_5finteraction_2eproto.base);
  return *internal_default_instance();
}


void VehicleInteraction::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.VehicleInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && activate_ != nullptr) {
    delete activate_;
  }
  activate_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && assign_ != nullptr) {
    delete assign_;
  }
  assign_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && override_ != nullptr) {
    delete override_;
  }
  override_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VehicleInteraction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Activate activate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_activate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Assign assign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_assign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Override override = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_override(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Command command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Status status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VehicleInteraction::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.VehicleInteraction)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Activate activate = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Assign assign = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Override override = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_override()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Command command = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Status status = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.VehicleInteraction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.VehicleInteraction)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VehicleInteraction::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.VehicleInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Activate activate = 1;
  if (this->has_activate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::activate(this), output);
  }

  // .sim_msg.Assign assign = 2;
  if (this->has_assign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::assign(this), output);
  }

  // .sim_msg.Override override = 3;
  if (this->has_override()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::override(this), output);
  }

  // .sim_msg.Command command = 4;
  if (this->has_command()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::command(this), output);
  }

  // .sim_msg.Status status = 5;
  if (this->has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.VehicleInteraction)
}

::PROTOBUF_NAMESPACE_ID::uint8* VehicleInteraction::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.VehicleInteraction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Activate activate = 1;
  if (this->has_activate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::activate(this), target);
  }

  // .sim_msg.Assign assign = 2;
  if (this->has_assign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::assign(this), target);
  }

  // .sim_msg.Override override = 3;
  if (this->has_override()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::override(this), target);
  }

  // .sim_msg.Command command = 4;
  if (this->has_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::command(this), target);
  }

  // .sim_msg.Status status = 5;
  if (this->has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.VehicleInteraction)
  return target;
}

size_t VehicleInteraction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.VehicleInteraction)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Activate activate = 1;
  if (this->has_activate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activate_);
  }

  // .sim_msg.Assign assign = 2;
  if (this->has_assign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assign_);
  }

  // .sim_msg.Override override = 3;
  if (this->has_override()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *override_);
  }

  // .sim_msg.Command command = 4;
  if (this->has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  // .sim_msg.Status status = 5;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VehicleInteraction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.VehicleInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  const VehicleInteraction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VehicleInteraction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.VehicleInteraction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.VehicleInteraction)
    MergeFrom(*source);
  }
}

void VehicleInteraction::MergeFrom(const VehicleInteraction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.VehicleInteraction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_activate()) {
    mutable_activate()->::sim_msg::Activate::MergeFrom(from.activate());
  }
  if (from.has_assign()) {
    mutable_assign()->::sim_msg::Assign::MergeFrom(from.assign());
  }
  if (from.has_override()) {
    mutable_override()->::sim_msg::Override::MergeFrom(from.override());
  }
  if (from.has_command()) {
    mutable_command()->::sim_msg::Command::MergeFrom(from.command());
  }
  if (from.has_status()) {
    mutable_status()->::sim_msg::Status::MergeFrom(from.status());
  }
}

void VehicleInteraction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.VehicleInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VehicleInteraction::CopyFrom(const VehicleInteraction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.VehicleInteraction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleInteraction::IsInitialized() const {
  return true;
}

void VehicleInteraction::InternalSwap(VehicleInteraction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(activate_, other->activate_);
  swap(assign_, other->assign_);
  swap(override_, other->override_);
  swap(command_, other->command_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleInteraction::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Activate* Arena::CreateMaybeMessage< ::sim_msg::Activate >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Activate >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Assign_Cruise* Arena::CreateMaybeMessage< ::sim_msg::Assign_Cruise >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Assign_Cruise >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Assign* Arena::CreateMaybeMessage< ::sim_msg::Assign >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Assign >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Override_Throttle* Arena::CreateMaybeMessage< ::sim_msg::Override_Throttle >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Override_Throttle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Override_Brake* Arena::CreateMaybeMessage< ::sim_msg::Override_Brake >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Override_Brake >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Override_SteeringWheel* Arena::CreateMaybeMessage< ::sim_msg::Override_SteeringWheel >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Override_SteeringWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Override_ParkingBrake* Arena::CreateMaybeMessage< ::sim_msg::Override_ParkingBrake >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Override_ParkingBrake >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Override_Clutch* Arena::CreateMaybeMessage< ::sim_msg::Override_Clutch >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Override_Clutch >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Override_Gear* Arena::CreateMaybeMessage< ::sim_msg::Override_Gear >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Override_Gear >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Override* Arena::CreateMaybeMessage< ::sim_msg::Override >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Override >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Command_LaneChange* Arena::CreateMaybeMessage< ::sim_msg::Command_LaneChange >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Command_LaneChange >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Command_Overtaking* Arena::CreateMaybeMessage< ::sim_msg::Command_Overtaking >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Command_Overtaking >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Command* Arena::CreateMaybeMessage< ::sim_msg::Command >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Status* Arena::CreateMaybeMessage< ::sim_msg::Status >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Status >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::VehicleInteraction* Arena::CreateMaybeMessage< ::sim_msg::VehicleInteraction >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::VehicleInteraction >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
