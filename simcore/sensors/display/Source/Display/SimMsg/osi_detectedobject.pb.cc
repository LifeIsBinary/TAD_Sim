// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedobject.proto
#pragma warning (disable : 4125)

#include "osi_detectedobject.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseMoving_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BaseStationary_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorspecific_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraSpecificObjectData_osi_5fsensorspecific_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorspecific_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LidarSpecificObjectData_osi_5fsensorspecific_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Orientation3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorspecific_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarSpecificObjectData_osi_5fsensorspecific_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StationaryObject_Classification_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorspecific_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto;
namespace osi3 {
class DetectedItemHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedItemHeader> _instance;
} _DetectedItemHeader_default_instance_;
class DetectedStationaryObject_CandidateStationaryObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedStationaryObject_CandidateStationaryObject> _instance;
} _DetectedStationaryObject_CandidateStationaryObject_default_instance_;
class DetectedStationaryObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedStationaryObject> _instance;
} _DetectedStationaryObject_default_instance_;
class DetectedMovingObject_CandidateMovingObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedMovingObject_CandidateMovingObject> _instance;
} _DetectedMovingObject_CandidateMovingObject_default_instance_;
class DetectedMovingObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedMovingObject> _instance;
} _DetectedMovingObject_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedItemHeader_default_instance_;
    new (ptr) ::osi3::DetectedItemHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedItemHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedMovingObject_default_instance_;
    new (ptr) ::osi3::DetectedMovingObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedMovingObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto}, {
      &scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base,
      &scc_info_BaseMoving_osi_5fcommon_2eproto.base,
      &scc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,
      &scc_info_RadarSpecificObjectData_osi_5fsensorspecific_2eproto.base,
      &scc_info_LidarSpecificObjectData_osi_5fsensorspecific_2eproto.base,
      &scc_info_CameraSpecificObjectData_osi_5fsensorspecific_2eproto.base,
      &scc_info_UltrasonicSpecificObjectData_osi_5fsensorspecific_2eproto.base,}};

static void InitDefaultsscc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedMovingObject_CandidateMovingObject_default_instance_;
    new (ptr) ::osi3::DetectedMovingObject_CandidateMovingObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedMovingObject_CandidateMovingObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto}, {
      &scc_info_MovingObject_VehicleClassification_osi_5fobject_2eproto.base,
      &scc_info_Orientation3d_osi_5fcommon_2eproto.base,
      &scc_info_MovingObject_MovingObjectClassification_osi_5fobject_2eproto.base,}};

static void InitDefaultsscc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedStationaryObject_default_instance_;
    new (ptr) ::osi3::DetectedStationaryObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedStationaryObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto}, {
      &scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base,
      &scc_info_BaseStationary_osi_5fcommon_2eproto.base,
      &scc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedStationaryObject_CandidateStationaryObject_default_instance_;
    new (ptr) ::osi3::DetectedStationaryObject_CandidateStationaryObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedStationaryObject_CandidateStationaryObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto}, {
      &scc_info_StationaryObject_Classification_osi_5fobject_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fdetectedobject_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fdetectedobject_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedobject_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fdetectedobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, tracking_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, ground_truth_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, age_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, measurement_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedItemHeader, sensor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject_CandidateStationaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject_CandidateStationaryObject, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject_CandidateStationaryObject, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedStationaryObject, color_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, type_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, vehicle_classification_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, head_pose_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, upper_body_pose_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject_CandidateMovingObject, moving_object_classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, base_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, base_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, reference_point_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, movement_state_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, percentage_side_lane_left_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, percentage_side_lane_right_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, color_description_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, radar_specifics_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, lidar_specifics_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, camera_specifics_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedMovingObject, ultrasonic_specifics_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::DetectedItemHeader)},
  { 11, -1, sizeof(::osi3::DetectedStationaryObject_CandidateStationaryObject)},
  { 18, -1, sizeof(::osi3::DetectedStationaryObject)},
  { 28, -1, sizeof(::osi3::DetectedMovingObject_CandidateMovingObject)},
  { 39, -1, sizeof(::osi3::DetectedMovingObject)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedItemHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedStationaryObject_CandidateStationaryObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedStationaryObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedMovingObject_CandidateMovingObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedMovingObject_default_instance_),
};

const char descriptor_table_protodef_osi_5fdetectedobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030osi_detectedobject.proto\022\004osi3\032\020osi_co"
  "mmon.proto\032\020osi_object.proto\032\030osi_sensor"
  "specific.proto\"\217\003\n\022DetectedItemHeader\022%\n"
  "\013tracking_id\030\001 \001(\0132\020.osi3.Identifier\022)\n\017"
  "ground_truth_id\030\002 \003(\0132\020.osi3.Identifier\022"
  "\035\n\025existence_probability\030\003 \001(\001\022\013\n\003age\030\004 "
  "\001(\001\022D\n\021measurement_state\030\005 \001(\0162).osi3.De"
  "tectedItemHeader.MeasurementState\022#\n\tsen"
  "sor_id\030\006 \003(\0132\020.osi3.Identifier\"\217\001\n\020Measu"
  "rementState\022\035\n\031MEASUREMENT_STATE_UNKNOWN"
  "\020\000\022\033\n\027MEASUREMENT_STATE_OTHER\020\001\022\036\n\032MEASU"
  "REMENT_STATE_MEASURED\020\002\022\037\n\033MEASUREMENT_S"
  "TATE_PREDICTED\020\003\"\202\003\n\030DetectedStationaryO"
  "bject\022(\n\006header\030\001 \001(\0132\030.osi3.DetectedIte"
  "mHeader\022\"\n\004base\030\002 \001(\0132\024.osi3.BaseStation"
  "ary\022\'\n\tbase_rmse\030\003 \001(\0132\024.osi3.BaseStatio"
  "nary\022K\n\tcandidate\030\004 \003(\01328.osi3.DetectedS"
  "tationaryObject.CandidateStationaryObjec"
  "t\0221\n\021color_description\030\005 \001(\0132\026.osi3.Colo"
  "rDescription\032o\n\031CandidateStationaryObjec"
  "t\022\023\n\013probability\030\001 \001(\001\022=\n\016classification"
  "\030\002 \001(\0132%.osi3.StationaryObject.Classific"
  "ation\"\214\014\n\024DetectedMovingObject\022(\n\006header"
  "\030\001 \001(\0132\030.osi3.DetectedItemHeader\022\036\n\004base"
  "\030\002 \001(\0132\020.osi3.BaseMoving\022#\n\tbase_rmse\030\003 "
  "\001(\0132\020.osi3.BaseMoving\022B\n\017reference_point"
  "\030\004 \001(\0162).osi3.DetectedMovingObject.Refer"
  "encePoint\022@\n\016movement_state\030\005 \001(\0162(.osi3"
  ".DetectedMovingObject.MovementState\022!\n\031p"
  "ercentage_side_lane_left\030\006 \001(\001\022\"\n\032percen"
  "tage_side_lane_right\030\007 \001(\001\022C\n\tcandidate\030"
  "\010 \003(\01320.osi3.DetectedMovingObject.Candid"
  "ateMovingObject\0221\n\021color_description\030\t \001"
  "(\0132\026.osi3.ColorDescription\0226\n\017radar_spec"
  "ifics\030d \001(\0132\035.osi3.RadarSpecificObjectDa"
  "ta\0226\n\017lidar_specifics\030e \001(\0132\035.osi3.Lidar"
  "SpecificObjectData\0228\n\020camera_specifics\030f"
  " \001(\0132\036.osi3.CameraSpecificObjectData\022@\n\024"
  "ultrasonic_specifics\030g \001(\0132\".osi3.Ultras"
  "onicSpecificObjectData\032\310\002\n\025CandidateMovi"
  "ngObject\022\023\n\013probability\030\001 \001(\001\022%\n\004type\030\002 "
  "\001(\0162\027.osi3.MovingObject.Type\022H\n\026vehicle_"
  "classification\030\003 \001(\0132(.osi3.MovingObject"
  ".VehicleClassification\022&\n\thead_pose\030\004 \001("
  "\0132\023.osi3.Orientation3d\022,\n\017upper_body_pos"
  "e\030\005 \001(\0132\023.osi3.Orientation3d\022S\n\034moving_o"
  "bject_classification\030\006 \001(\0132-.osi3.Moving"
  "Object.MovingObjectClassification\"\352\002\n\016Re"
  "ferencePoint\022\033\n\027REFERENCE_POINT_UNKNOWN\020"
  "\000\022\031\n\025REFERENCE_POINT_OTHER\020\001\022\032\n\026REFERENC"
  "E_POINT_CENTER\020\002\022\037\n\033REFERENCE_POINT_MIDD"
  "LE_LEFT\020\003\022 \n\034REFERENCE_POINT_MIDDLE_RIGH"
  "T\020\004\022\037\n\033REFERENCE_POINT_REAR_MIDDLE\020\005\022\035\n\031"
  "REFERENCE_POINT_REAR_LEFT\020\006\022\036\n\032REFERENCE"
  "_POINT_REAR_RIGHT\020\007\022 \n\034REFERENCE_POINT_F"
  "RONT_MIDDLE\020\010\022\036\n\032REFERENCE_POINT_FRONT_L"
  "EFT\020\t\022\037\n\033REFERENCE_POINT_FRONT_RIGHT\020\n\"\233"
  "\001\n\rMovementState\022\032\n\026MOVEMENT_STATE_UNKNO"
  "WN\020\000\022\030\n\024MOVEMENT_STATE_OTHER\020\001\022\035\n\031MOVEME"
  "NT_STATE_STATIONARY\020\002\022\031\n\025MOVEMENT_STATE_"
  "MOVING\020\003\022\032\n\026MOVEMENT_STATE_STOPPED\020\004B\002H\001"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fdetectedobject_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fobject_2eproto,
  &::descriptor_table_osi_5fsensorspecific_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fdetectedobject_2eproto_sccs[5] = {
  &scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base,
  &scc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto.base,
  &scc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto.base,
  &scc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto.base,
  &scc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fdetectedobject_2eproto_once;
static bool descriptor_table_osi_5fdetectedobject_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedobject_2eproto = {
  &descriptor_table_osi_5fdetectedobject_2eproto_initialized, descriptor_table_protodef_osi_5fdetectedobject_2eproto, "osi_detectedobject.proto", 2448,
  &descriptor_table_osi_5fdetectedobject_2eproto_once, descriptor_table_osi_5fdetectedobject_2eproto_sccs, descriptor_table_osi_5fdetectedobject_2eproto_deps, 5, 3,
  schemas, file_default_instances, TableStruct_osi_5fdetectedobject_2eproto::offsets,
  file_level_metadata_osi_5fdetectedobject_2eproto, 5, file_level_enum_descriptors_osi_5fdetectedobject_2eproto, file_level_service_descriptors_osi_5fdetectedobject_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fdetectedobject_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fdetectedobject_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedItemHeader_MeasurementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedobject_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedobject_2eproto[0];
}
bool DetectedItemHeader_MeasurementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_UNKNOWN;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_OTHER;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_MEASURED;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MEASUREMENT_STATE_PREDICTED;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MeasurementState_MIN;
constexpr DetectedItemHeader_MeasurementState DetectedItemHeader::MeasurementState_MAX;
constexpr int DetectedItemHeader::MeasurementState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedMovingObject_ReferencePoint_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedobject_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedobject_2eproto[1];
}
bool DetectedMovingObject_ReferencePoint_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_UNKNOWN;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_OTHER;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_CENTER;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_MIDDLE_LEFT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_MIDDLE_RIGHT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_MIDDLE;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_LEFT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_REAR_RIGHT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_MIDDLE;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_LEFT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::REFERENCE_POINT_FRONT_RIGHT;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::ReferencePoint_MIN;
constexpr DetectedMovingObject_ReferencePoint DetectedMovingObject::ReferencePoint_MAX;
constexpr int DetectedMovingObject::ReferencePoint_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DetectedMovingObject_MovementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fdetectedobject_2eproto);
  return file_level_enum_descriptors_osi_5fdetectedobject_2eproto[2];
}
bool DetectedMovingObject_MovementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_UNKNOWN;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_OTHER;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_STATIONARY;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_MOVING;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MOVEMENT_STATE_STOPPED;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MovementState_MIN;
constexpr DetectedMovingObject_MovementState DetectedMovingObject::MovementState_MAX;
constexpr int DetectedMovingObject::MovementState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DetectedItemHeader::InitAsDefaultInstance() {
  ::osi3::_DetectedItemHeader_default_instance_._instance.get_mutable()->tracking_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
}
class DetectedItemHeader::_Internal {
 public:
  static const ::osi3::Identifier& tracking_id(const DetectedItemHeader* msg);
};

const ::osi3::Identifier&
DetectedItemHeader::_Internal::tracking_id(const DetectedItemHeader* msg) {
  return *msg->tracking_id_;
}
void DetectedItemHeader::clear_tracking_id() {
  if (GetArenaNoVirtual() == nullptr && tracking_id_ != nullptr) {
    delete tracking_id_;
  }
  tracking_id_ = nullptr;
}
void DetectedItemHeader::clear_ground_truth_id() {
  ground_truth_id_.Clear();
}
void DetectedItemHeader::clear_sensor_id() {
  sensor_id_.Clear();
}
DetectedItemHeader::DetectedItemHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedItemHeader)
}
DetectedItemHeader::DetectedItemHeader(const DetectedItemHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ground_truth_id_(from.ground_truth_id_),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tracking_id()) {
    tracking_id_ = new ::osi3::Identifier(*from.tracking_id_);
  } else {
    tracking_id_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&measurement_state_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(measurement_state_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedItemHeader)
}

void DetectedItemHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base);
  ::memset(&tracking_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measurement_state_) -
      reinterpret_cast<char*>(&tracking_id_)) + sizeof(measurement_state_));
}

DetectedItemHeader::~DetectedItemHeader() {
  // @@protoc_insertion_point(destructor:osi3.DetectedItemHeader)
  SharedDtor();
}

void DetectedItemHeader::SharedDtor() {
  if (this != internal_default_instance()) delete tracking_id_;
}

void DetectedItemHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedItemHeader& DetectedItemHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base);
  return *internal_default_instance();
}


void DetectedItemHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedItemHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ground_truth_id_.Clear();
  sensor_id_.Clear();
  if (GetArenaNoVirtual() == nullptr && tracking_id_ != nullptr) {
    delete tracking_id_;
  }
  tracking_id_ = nullptr;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&measurement_state_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(measurement_state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedItemHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier tracking_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_tracking_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier ground_truth_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_ground_truth_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // double existence_probability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double age = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_measurement_state(static_cast<::osi3::DetectedItemHeader_MeasurementState>(val));
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedItemHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedItemHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier tracking_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_tracking_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier ground_truth_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ground_truth_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double existence_probability = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double age = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_measurement_state(static_cast< ::osi3::DetectedItemHeader_MeasurementState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier sensor_id = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedItemHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedItemHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedItemHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedItemHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier tracking_id = 1;
  if (this->has_tracking_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::tracking_id(this), output);
  }

  // repeated .osi3.Identifier ground_truth_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ground_truth_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->ground_truth_id(static_cast<int>(i)),
      output);
  }

  // double existence_probability = 3;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->existence_probability(), output);
  }

  // double age = 4;
  if (!(this->age() <= 0 && this->age() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->age(), output);
  }

  // .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
  if (this->measurement_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->measurement_state(), output);
  }

  // repeated .osi3.Identifier sensor_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->sensor_id(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedItemHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedItemHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedItemHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier tracking_id = 1;
  if (this->has_tracking_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::tracking_id(this), target);
  }

  // repeated .osi3.Identifier ground_truth_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ground_truth_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->ground_truth_id(static_cast<int>(i)), target);
  }

  // double existence_probability = 3;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->existence_probability(), target);
  }

  // double age = 4;
  if (!(this->age() <= 0 && this->age() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->age(), target);
  }

  // .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
  if (this->measurement_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->measurement_state(), target);
  }

  // repeated .osi3.Identifier sensor_id = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->sensor_id(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedItemHeader)
  return target;
}

size_t DetectedItemHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedItemHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier ground_truth_id = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->ground_truth_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ground_truth_id(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Identifier sensor_id = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_id(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier tracking_id = 1;
  if (this->has_tracking_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tracking_id_);
  }

  // double existence_probability = 3;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double age = 4;
  if (!(this->age() <= 0 && this->age() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.DetectedItemHeader.MeasurementState measurement_state = 5;
  if (this->measurement_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->measurement_state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedItemHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedItemHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedItemHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedItemHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedItemHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedItemHeader)
    MergeFrom(*source);
  }
}

void DetectedItemHeader::MergeFrom(const DetectedItemHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedItemHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ground_truth_id_.MergeFrom(from.ground_truth_id_);
  sensor_id_.MergeFrom(from.sensor_id_);
  if (from.has_tracking_id()) {
    mutable_tracking_id()->::osi3::Identifier::MergeFrom(from.tracking_id());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
  if (!(from.age() <= 0 && from.age() >= 0)) {
    set_age(from.age());
  }
  if (from.measurement_state() != 0) {
    set_measurement_state(from.measurement_state());
  }
}

void DetectedItemHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedItemHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedItemHeader::CopyFrom(const DetectedItemHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedItemHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedItemHeader::IsInitialized() const {
  return true;
}

void DetectedItemHeader::InternalSwap(DetectedItemHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&ground_truth_id_)->InternalSwap(CastToBase(&other->ground_truth_id_));
  CastToBase(&sensor_id_)->InternalSwap(CastToBase(&other->sensor_id_));
  swap(tracking_id_, other->tracking_id_);
  swap(existence_probability_, other->existence_probability_);
  swap(age_, other->age_);
  swap(measurement_state_, other->measurement_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedItemHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedStationaryObject_CandidateStationaryObject::InitAsDefaultInstance() {
  ::osi3::_DetectedStationaryObject_CandidateStationaryObject_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::StationaryObject_Classification*>(
      ::osi3::StationaryObject_Classification::internal_default_instance());
}
class DetectedStationaryObject_CandidateStationaryObject::_Internal {
 public:
  static const ::osi3::StationaryObject_Classification& classification(const DetectedStationaryObject_CandidateStationaryObject* msg);
};

const ::osi3::StationaryObject_Classification&
DetectedStationaryObject_CandidateStationaryObject::_Internal::classification(const DetectedStationaryObject_CandidateStationaryObject* msg) {
  return *msg->classification_;
}
void DetectedStationaryObject_CandidateStationaryObject::clear_classification() {
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
DetectedStationaryObject_CandidateStationaryObject::DetectedStationaryObject_CandidateStationaryObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
}
DetectedStationaryObject_CandidateStationaryObject::DetectedStationaryObject_CandidateStationaryObject(const DetectedStationaryObject_CandidateStationaryObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classification()) {
    classification_ = new ::osi3::StationaryObject_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
}

void DetectedStationaryObject_CandidateStationaryObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto.base);
  ::memset(&classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedStationaryObject_CandidateStationaryObject::~DetectedStationaryObject_CandidateStationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedStationaryObject.CandidateStationaryObject)
  SharedDtor();
}

void DetectedStationaryObject_CandidateStationaryObject::SharedDtor() {
  if (this != internal_default_instance()) delete classification_;
}

void DetectedStationaryObject_CandidateStationaryObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedStationaryObject_CandidateStationaryObject& DetectedStationaryObject_CandidateStationaryObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedStationaryObject_CandidateStationaryObject_osi_5fdetectedobject_2eproto.base);
  return *internal_default_instance();
}


void DetectedStationaryObject_CandidateStationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedStationaryObject_CandidateStationaryObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.StationaryObject.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedStationaryObject_CandidateStationaryObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.StationaryObject.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedStationaryObject.CandidateStationaryObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedStationaryObject.CandidateStationaryObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedStationaryObject_CandidateStationaryObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // .osi3.StationaryObject.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedStationaryObject.CandidateStationaryObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedStationaryObject_CandidateStationaryObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // .osi3.StationaryObject.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedStationaryObject.CandidateStationaryObject)
  return target;
}

size_t DetectedStationaryObject_CandidateStationaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.StationaryObject.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedStationaryObject_CandidateStationaryObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedStationaryObject_CandidateStationaryObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedStationaryObject_CandidateStationaryObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedStationaryObject.CandidateStationaryObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedStationaryObject.CandidateStationaryObject)
    MergeFrom(*source);
  }
}

void DetectedStationaryObject_CandidateStationaryObject::MergeFrom(const DetectedStationaryObject_CandidateStationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classification()) {
    mutable_classification()->::osi3::StationaryObject_Classification::MergeFrom(from.classification());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
}

void DetectedStationaryObject_CandidateStationaryObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedStationaryObject_CandidateStationaryObject::CopyFrom(const DetectedStationaryObject_CandidateStationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedStationaryObject.CandidateStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedStationaryObject_CandidateStationaryObject::IsInitialized() const {
  return true;
}

void DetectedStationaryObject_CandidateStationaryObject::InternalSwap(DetectedStationaryObject_CandidateStationaryObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classification_, other->classification_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedStationaryObject_CandidateStationaryObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedStationaryObject::InitAsDefaultInstance() {
  ::osi3::_DetectedStationaryObject_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::DetectedItemHeader*>(
      ::osi3::DetectedItemHeader::internal_default_instance());
  ::osi3::_DetectedStationaryObject_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_DetectedStationaryObject_default_instance_._instance.get_mutable()->base_rmse_ = const_cast< ::osi3::BaseStationary*>(
      ::osi3::BaseStationary::internal_default_instance());
  ::osi3::_DetectedStationaryObject_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class DetectedStationaryObject::_Internal {
 public:
  static const ::osi3::DetectedItemHeader& header(const DetectedStationaryObject* msg);
  static const ::osi3::BaseStationary& base(const DetectedStationaryObject* msg);
  static const ::osi3::BaseStationary& base_rmse(const DetectedStationaryObject* msg);
  static const ::osi3::ColorDescription& color_description(const DetectedStationaryObject* msg);
};

const ::osi3::DetectedItemHeader&
DetectedStationaryObject::_Internal::header(const DetectedStationaryObject* msg) {
  return *msg->header_;
}
const ::osi3::BaseStationary&
DetectedStationaryObject::_Internal::base(const DetectedStationaryObject* msg) {
  return *msg->base_;
}
const ::osi3::BaseStationary&
DetectedStationaryObject::_Internal::base_rmse(const DetectedStationaryObject* msg) {
  return *msg->base_rmse_;
}
const ::osi3::ColorDescription&
DetectedStationaryObject::_Internal::color_description(const DetectedStationaryObject* msg) {
  return *msg->color_description_;
}
void DetectedStationaryObject::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void DetectedStationaryObject::clear_base_rmse() {
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
}
void DetectedStationaryObject::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
DetectedStationaryObject::DetectedStationaryObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedStationaryObject)
}
DetectedStationaryObject::DetectedStationaryObject(const DetectedStationaryObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseStationary(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseStationary(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedStationaryObject)
}

void DetectedStationaryObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_description_) -
      reinterpret_cast<char*>(&header_)) + sizeof(color_description_));
}

DetectedStationaryObject::~DetectedStationaryObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedStationaryObject)
  SharedDtor();
}

void DetectedStationaryObject::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
  if (this != internal_default_instance()) delete color_description_;
}

void DetectedStationaryObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedStationaryObject& DetectedStationaryObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedStationaryObject_osi_5fdetectedobject_2eproto.base);
  return *internal_default_instance();
}


void DetectedStationaryObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedStationaryObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseStationary base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedStationaryObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedStationaryObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseStationary base_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedStationaryObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedStationaryObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedStationaryObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::base_rmse(this), output);
  }

  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->candidate(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedStationaryObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedStationaryObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedStationaryObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::base_rmse(this), target);
  }

  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->candidate(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedStationaryObject)
  return target;
}

size_t DetectedStationaryObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedStationaryObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedStationaryObject.CandidateStationaryObject candidate = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .osi3.BaseStationary base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.BaseStationary base_rmse = 3;
  if (this->has_base_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_rmse_);
  }

  // .osi3.ColorDescription color_description = 5;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedStationaryObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedStationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedStationaryObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedStationaryObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedStationaryObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedStationaryObject)
    MergeFrom(*source);
  }
}

void DetectedStationaryObject::MergeFrom(const DetectedStationaryObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedStationaryObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  if (from.has_header()) {
    mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseStationary::MergeFrom(from.base());
  }
  if (from.has_base_rmse()) {
    mutable_base_rmse()->::osi3::BaseStationary::MergeFrom(from.base_rmse());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
}

void DetectedStationaryObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedStationaryObject::CopyFrom(const DetectedStationaryObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedStationaryObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedStationaryObject::IsInitialized() const {
  return true;
}

void DetectedStationaryObject::InternalSwap(DetectedStationaryObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  swap(header_, other->header_);
  swap(base_, other->base_);
  swap(base_rmse_, other->base_rmse_);
  swap(color_description_, other->color_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedStationaryObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedMovingObject_CandidateMovingObject::InitAsDefaultInstance() {
  ::osi3::_DetectedMovingObject_CandidateMovingObject_default_instance_._instance.get_mutable()->vehicle_classification_ = const_cast< ::osi3::MovingObject_VehicleClassification*>(
      ::osi3::MovingObject_VehicleClassification::internal_default_instance());
  ::osi3::_DetectedMovingObject_CandidateMovingObject_default_instance_._instance.get_mutable()->head_pose_ = const_cast< ::osi3::Orientation3d*>(
      ::osi3::Orientation3d::internal_default_instance());
  ::osi3::_DetectedMovingObject_CandidateMovingObject_default_instance_._instance.get_mutable()->upper_body_pose_ = const_cast< ::osi3::Orientation3d*>(
      ::osi3::Orientation3d::internal_default_instance());
  ::osi3::_DetectedMovingObject_CandidateMovingObject_default_instance_._instance.get_mutable()->moving_object_classification_ = const_cast< ::osi3::MovingObject_MovingObjectClassification*>(
      ::osi3::MovingObject_MovingObjectClassification::internal_default_instance());
}
class DetectedMovingObject_CandidateMovingObject::_Internal {
 public:
  static const ::osi3::MovingObject_VehicleClassification& vehicle_classification(const DetectedMovingObject_CandidateMovingObject* msg);
  static const ::osi3::Orientation3d& head_pose(const DetectedMovingObject_CandidateMovingObject* msg);
  static const ::osi3::Orientation3d& upper_body_pose(const DetectedMovingObject_CandidateMovingObject* msg);
  static const ::osi3::MovingObject_MovingObjectClassification& moving_object_classification(const DetectedMovingObject_CandidateMovingObject* msg);
};

const ::osi3::MovingObject_VehicleClassification&
DetectedMovingObject_CandidateMovingObject::_Internal::vehicle_classification(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->vehicle_classification_;
}
const ::osi3::Orientation3d&
DetectedMovingObject_CandidateMovingObject::_Internal::head_pose(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->head_pose_;
}
const ::osi3::Orientation3d&
DetectedMovingObject_CandidateMovingObject::_Internal::upper_body_pose(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->upper_body_pose_;
}
const ::osi3::MovingObject_MovingObjectClassification&
DetectedMovingObject_CandidateMovingObject::_Internal::moving_object_classification(const DetectedMovingObject_CandidateMovingObject* msg) {
  return *msg->moving_object_classification_;
}
void DetectedMovingObject_CandidateMovingObject::clear_vehicle_classification() {
  if (GetArenaNoVirtual() == nullptr && vehicle_classification_ != nullptr) {
    delete vehicle_classification_;
  }
  vehicle_classification_ = nullptr;
}
void DetectedMovingObject_CandidateMovingObject::clear_head_pose() {
  if (GetArenaNoVirtual() == nullptr && head_pose_ != nullptr) {
    delete head_pose_;
  }
  head_pose_ = nullptr;
}
void DetectedMovingObject_CandidateMovingObject::clear_upper_body_pose() {
  if (GetArenaNoVirtual() == nullptr && upper_body_pose_ != nullptr) {
    delete upper_body_pose_;
  }
  upper_body_pose_ = nullptr;
}
void DetectedMovingObject_CandidateMovingObject::clear_moving_object_classification() {
  if (GetArenaNoVirtual() == nullptr && moving_object_classification_ != nullptr) {
    delete moving_object_classification_;
  }
  moving_object_classification_ = nullptr;
}
DetectedMovingObject_CandidateMovingObject::DetectedMovingObject_CandidateMovingObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedMovingObject.CandidateMovingObject)
}
DetectedMovingObject_CandidateMovingObject::DetectedMovingObject_CandidateMovingObject(const DetectedMovingObject_CandidateMovingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_classification()) {
    vehicle_classification_ = new ::osi3::MovingObject_VehicleClassification(*from.vehicle_classification_);
  } else {
    vehicle_classification_ = nullptr;
  }
  if (from.has_head_pose()) {
    head_pose_ = new ::osi3::Orientation3d(*from.head_pose_);
  } else {
    head_pose_ = nullptr;
  }
  if (from.has_upper_body_pose()) {
    upper_body_pose_ = new ::osi3::Orientation3d(*from.upper_body_pose_);
  } else {
    upper_body_pose_ = nullptr;
  }
  if (from.has_moving_object_classification()) {
    moving_object_classification_ = new ::osi3::MovingObject_MovingObjectClassification(*from.moving_object_classification_);
  } else {
    moving_object_classification_ = nullptr;
  }
  ::memcpy(&probability_, &from.probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&probability_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedMovingObject.CandidateMovingObject)
}

void DetectedMovingObject_CandidateMovingObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto.base);
  ::memset(&vehicle_classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&vehicle_classification_)) + sizeof(type_));
}

DetectedMovingObject_CandidateMovingObject::~DetectedMovingObject_CandidateMovingObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedMovingObject.CandidateMovingObject)
  SharedDtor();
}

void DetectedMovingObject_CandidateMovingObject::SharedDtor() {
  if (this != internal_default_instance()) delete vehicle_classification_;
  if (this != internal_default_instance()) delete head_pose_;
  if (this != internal_default_instance()) delete upper_body_pose_;
  if (this != internal_default_instance()) delete moving_object_classification_;
}

void DetectedMovingObject_CandidateMovingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedMovingObject_CandidateMovingObject& DetectedMovingObject_CandidateMovingObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedMovingObject_CandidateMovingObject_osi_5fdetectedobject_2eproto.base);
  return *internal_default_instance();
}


void DetectedMovingObject_CandidateMovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedMovingObject.CandidateMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && vehicle_classification_ != nullptr) {
    delete vehicle_classification_;
  }
  vehicle_classification_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && head_pose_ != nullptr) {
    delete head_pose_;
  }
  head_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && upper_body_pose_ != nullptr) {
    delete upper_body_pose_;
  }
  upper_body_pose_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && moving_object_classification_ != nullptr) {
    delete moving_object_classification_;
  }
  moving_object_classification_ = nullptr;
  ::memset(&probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&probability_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedMovingObject_CandidateMovingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::osi3::MovingObject_Type>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_vehicle_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Orientation3d head_pose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_head_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Orientation3d upper_body_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_upper_body_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_moving_object_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedMovingObject_CandidateMovingObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedMovingObject.CandidateMovingObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.Type type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::osi3::MovingObject_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_vehicle_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Orientation3d head_pose = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_head_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Orientation3d upper_body_pose = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_upper_body_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_moving_object_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedMovingObject.CandidateMovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedMovingObject.CandidateMovingObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedMovingObject_CandidateMovingObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedMovingObject.CandidateMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // .osi3.MovingObject.Type type = 2;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
  if (this->has_vehicle_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::vehicle_classification(this), output);
  }

  // .osi3.Orientation3d head_pose = 4;
  if (this->has_head_pose()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::head_pose(this), output);
  }

  // .osi3.Orientation3d upper_body_pose = 5;
  if (this->has_upper_body_pose()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::upper_body_pose(this), output);
  }

  // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
  if (this->has_moving_object_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::moving_object_classification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedMovingObject.CandidateMovingObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedMovingObject_CandidateMovingObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedMovingObject.CandidateMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // .osi3.MovingObject.Type type = 2;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
  if (this->has_vehicle_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::vehicle_classification(this), target);
  }

  // .osi3.Orientation3d head_pose = 4;
  if (this->has_head_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::head_pose(this), target);
  }

  // .osi3.Orientation3d upper_body_pose = 5;
  if (this->has_upper_body_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::upper_body_pose(this), target);
  }

  // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
  if (this->has_moving_object_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::moving_object_classification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedMovingObject.CandidateMovingObject)
  return target;
}

size_t DetectedMovingObject_CandidateMovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedMovingObject.CandidateMovingObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.MovingObject.VehicleClassification vehicle_classification = 3;
  if (this->has_vehicle_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vehicle_classification_);
  }

  // .osi3.Orientation3d head_pose = 4;
  if (this->has_head_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_pose_);
  }

  // .osi3.Orientation3d upper_body_pose = 5;
  if (this->has_upper_body_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upper_body_pose_);
  }

  // .osi3.MovingObject.MovingObjectClassification moving_object_classification = 6;
  if (this->has_moving_object_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *moving_object_classification_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.MovingObject.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedMovingObject_CandidateMovingObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedMovingObject_CandidateMovingObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedMovingObject_CandidateMovingObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedMovingObject.CandidateMovingObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedMovingObject.CandidateMovingObject)
    MergeFrom(*source);
  }
}

void DetectedMovingObject_CandidateMovingObject::MergeFrom(const DetectedMovingObject_CandidateMovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vehicle_classification()) {
    mutable_vehicle_classification()->::osi3::MovingObject_VehicleClassification::MergeFrom(from.vehicle_classification());
  }
  if (from.has_head_pose()) {
    mutable_head_pose()->::osi3::Orientation3d::MergeFrom(from.head_pose());
  }
  if (from.has_upper_body_pose()) {
    mutable_upper_body_pose()->::osi3::Orientation3d::MergeFrom(from.upper_body_pose());
  }
  if (from.has_moving_object_classification()) {
    mutable_moving_object_classification()->::osi3::MovingObject_MovingObjectClassification::MergeFrom(from.moving_object_classification());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DetectedMovingObject_CandidateMovingObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedMovingObject_CandidateMovingObject::CopyFrom(const DetectedMovingObject_CandidateMovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedMovingObject.CandidateMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedMovingObject_CandidateMovingObject::IsInitialized() const {
  return true;
}

void DetectedMovingObject_CandidateMovingObject::InternalSwap(DetectedMovingObject_CandidateMovingObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(vehicle_classification_, other->vehicle_classification_);
  swap(head_pose_, other->head_pose_);
  swap(upper_body_pose_, other->upper_body_pose_);
  swap(moving_object_classification_, other->moving_object_classification_);
  swap(probability_, other->probability_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedMovingObject_CandidateMovingObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedMovingObject::InitAsDefaultInstance() {
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::DetectedItemHeader*>(
      ::osi3::DetectedItemHeader::internal_default_instance());
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->base_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->base_rmse_ = const_cast< ::osi3::BaseMoving*>(
      ::osi3::BaseMoving::internal_default_instance());
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->radar_specifics_ = const_cast< ::osi3::RadarSpecificObjectData*>(
      ::osi3::RadarSpecificObjectData::internal_default_instance());
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->lidar_specifics_ = const_cast< ::osi3::LidarSpecificObjectData*>(
      ::osi3::LidarSpecificObjectData::internal_default_instance());
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->camera_specifics_ = const_cast< ::osi3::CameraSpecificObjectData*>(
      ::osi3::CameraSpecificObjectData::internal_default_instance());
  ::osi3::_DetectedMovingObject_default_instance_._instance.get_mutable()->ultrasonic_specifics_ = const_cast< ::osi3::UltrasonicSpecificObjectData*>(
      ::osi3::UltrasonicSpecificObjectData::internal_default_instance());
}
class DetectedMovingObject::_Internal {
 public:
  static const ::osi3::DetectedItemHeader& header(const DetectedMovingObject* msg);
  static const ::osi3::BaseMoving& base(const DetectedMovingObject* msg);
  static const ::osi3::BaseMoving& base_rmse(const DetectedMovingObject* msg);
  static const ::osi3::ColorDescription& color_description(const DetectedMovingObject* msg);
  static const ::osi3::RadarSpecificObjectData& radar_specifics(const DetectedMovingObject* msg);
  static const ::osi3::LidarSpecificObjectData& lidar_specifics(const DetectedMovingObject* msg);
  static const ::osi3::CameraSpecificObjectData& camera_specifics(const DetectedMovingObject* msg);
  static const ::osi3::UltrasonicSpecificObjectData& ultrasonic_specifics(const DetectedMovingObject* msg);
};

const ::osi3::DetectedItemHeader&
DetectedMovingObject::_Internal::header(const DetectedMovingObject* msg) {
  return *msg->header_;
}
const ::osi3::BaseMoving&
DetectedMovingObject::_Internal::base(const DetectedMovingObject* msg) {
  return *msg->base_;
}
const ::osi3::BaseMoving&
DetectedMovingObject::_Internal::base_rmse(const DetectedMovingObject* msg) {
  return *msg->base_rmse_;
}
const ::osi3::ColorDescription&
DetectedMovingObject::_Internal::color_description(const DetectedMovingObject* msg) {
  return *msg->color_description_;
}
const ::osi3::RadarSpecificObjectData&
DetectedMovingObject::_Internal::radar_specifics(const DetectedMovingObject* msg) {
  return *msg->radar_specifics_;
}
const ::osi3::LidarSpecificObjectData&
DetectedMovingObject::_Internal::lidar_specifics(const DetectedMovingObject* msg) {
  return *msg->lidar_specifics_;
}
const ::osi3::CameraSpecificObjectData&
DetectedMovingObject::_Internal::camera_specifics(const DetectedMovingObject* msg) {
  return *msg->camera_specifics_;
}
const ::osi3::UltrasonicSpecificObjectData&
DetectedMovingObject::_Internal::ultrasonic_specifics(const DetectedMovingObject* msg) {
  return *msg->ultrasonic_specifics_;
}
void DetectedMovingObject::clear_base() {
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
}
void DetectedMovingObject::clear_base_rmse() {
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
}
void DetectedMovingObject::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
void DetectedMovingObject::clear_radar_specifics() {
  if (GetArenaNoVirtual() == nullptr && radar_specifics_ != nullptr) {
    delete radar_specifics_;
  }
  radar_specifics_ = nullptr;
}
void DetectedMovingObject::clear_lidar_specifics() {
  if (GetArenaNoVirtual() == nullptr && lidar_specifics_ != nullptr) {
    delete lidar_specifics_;
  }
  lidar_specifics_ = nullptr;
}
void DetectedMovingObject::clear_camera_specifics() {
  if (GetArenaNoVirtual() == nullptr && camera_specifics_ != nullptr) {
    delete camera_specifics_;
  }
  camera_specifics_ = nullptr;
}
void DetectedMovingObject::clear_ultrasonic_specifics() {
  if (GetArenaNoVirtual() == nullptr && ultrasonic_specifics_ != nullptr) {
    delete ultrasonic_specifics_;
  }
  ultrasonic_specifics_ = nullptr;
}
DetectedMovingObject::DetectedMovingObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedMovingObject)
}
DetectedMovingObject::DetectedMovingObject(const DetectedMovingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::osi3::BaseMoving(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_base_rmse()) {
    base_rmse_ = new ::osi3::BaseMoving(*from.base_rmse_);
  } else {
    base_rmse_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  if (from.has_radar_specifics()) {
    radar_specifics_ = new ::osi3::RadarSpecificObjectData(*from.radar_specifics_);
  } else {
    radar_specifics_ = nullptr;
  }
  if (from.has_lidar_specifics()) {
    lidar_specifics_ = new ::osi3::LidarSpecificObjectData(*from.lidar_specifics_);
  } else {
    lidar_specifics_ = nullptr;
  }
  if (from.has_camera_specifics()) {
    camera_specifics_ = new ::osi3::CameraSpecificObjectData(*from.camera_specifics_);
  } else {
    camera_specifics_ = nullptr;
  }
  if (from.has_ultrasonic_specifics()) {
    ultrasonic_specifics_ = new ::osi3::UltrasonicSpecificObjectData(*from.ultrasonic_specifics_);
  } else {
    ultrasonic_specifics_ = nullptr;
  }
  ::memcpy(&reference_point_, &from.reference_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&percentage_side_lane_right_) -
    reinterpret_cast<char*>(&reference_point_)) + sizeof(percentage_side_lane_right_));
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedMovingObject)
}

void DetectedMovingObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_side_lane_right_) -
      reinterpret_cast<char*>(&header_)) + sizeof(percentage_side_lane_right_));
}

DetectedMovingObject::~DetectedMovingObject() {
  // @@protoc_insertion_point(destructor:osi3.DetectedMovingObject)
  SharedDtor();
}

void DetectedMovingObject::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete base_rmse_;
  if (this != internal_default_instance()) delete color_description_;
  if (this != internal_default_instance()) delete radar_specifics_;
  if (this != internal_default_instance()) delete lidar_specifics_;
  if (this != internal_default_instance()) delete camera_specifics_;
  if (this != internal_default_instance()) delete ultrasonic_specifics_;
}

void DetectedMovingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedMovingObject& DetectedMovingObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedMovingObject_osi_5fdetectedobject_2eproto.base);
  return *internal_default_instance();
}


void DetectedMovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_ != nullptr) {
    delete base_;
  }
  base_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && base_rmse_ != nullptr) {
    delete base_rmse_;
  }
  base_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && radar_specifics_ != nullptr) {
    delete radar_specifics_;
  }
  radar_specifics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && lidar_specifics_ != nullptr) {
    delete lidar_specifics_;
  }
  lidar_specifics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && camera_specifics_ != nullptr) {
    delete camera_specifics_;
  }
  camera_specifics_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ultrasonic_specifics_ != nullptr) {
    delete ultrasonic_specifics_;
  }
  ultrasonic_specifics_ = nullptr;
  ::memset(&reference_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&percentage_side_lane_right_) -
      reinterpret_cast<char*>(&reference_point_)) + sizeof(percentage_side_lane_right_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedMovingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseMoving base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.BaseMoving base_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_base_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_reference_point(static_cast<::osi3::DetectedMovingObject_ReferencePoint>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.DetectedMovingObject.MovementState movement_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_movement_state(static_cast<::osi3::DetectedMovingObject_MovementState>(val));
        } else goto handle_unusual;
        continue;
      // double percentage_side_lane_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          percentage_side_lane_left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double percentage_side_lane_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          percentage_side_lane_right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.RadarSpecificObjectData radar_specifics = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_radar_specifics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.LidarSpecificObjectData lidar_specifics = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_lidar_specifics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.CameraSpecificObjectData camera_specifics = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_camera_specifics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ultrasonic_specifics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedMovingObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedMovingObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.BaseMoving base_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_reference_point(static_cast< ::osi3::DetectedMovingObject_ReferencePoint >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.DetectedMovingObject.MovementState movement_state = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_movement_state(static_cast< ::osi3::DetectedMovingObject_MovementState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double percentage_side_lane_left = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_side_lane_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double percentage_side_lane_right = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &percentage_side_lane_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.RadarSpecificObjectData radar_specifics = 100;
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (802 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_radar_specifics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LidarSpecificObjectData lidar_specifics = 101;
      case 101: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (810 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lidar_specifics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.CameraSpecificObjectData camera_specifics = 102;
      case 102: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (818 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_camera_specifics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
      case 103: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (826 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ultrasonic_specifics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedMovingObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedMovingObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedMovingObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // .osi3.BaseMoving base_rmse = 3;
  if (this->has_base_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::base_rmse(this), output);
  }

  // .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
  if (this->reference_point() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->reference_point(), output);
  }

  // .osi3.DetectedMovingObject.MovementState movement_state = 5;
  if (this->movement_state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->movement_state(), output);
  }

  // double percentage_side_lane_left = 6;
  if (!(this->percentage_side_lane_left() <= 0 && this->percentage_side_lane_left() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->percentage_side_lane_left(), output);
  }

  // double percentage_side_lane_right = 7;
  if (!(this->percentage_side_lane_right() <= 0 && this->percentage_side_lane_right() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->percentage_side_lane_right(), output);
  }

  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->candidate(static_cast<int>(i)),
      output);
  }

  // .osi3.ColorDescription color_description = 9;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::color_description(this), output);
  }

  // .osi3.RadarSpecificObjectData radar_specifics = 100;
  if (this->has_radar_specifics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, _Internal::radar_specifics(this), output);
  }

  // .osi3.LidarSpecificObjectData lidar_specifics = 101;
  if (this->has_lidar_specifics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, _Internal::lidar_specifics(this), output);
  }

  // .osi3.CameraSpecificObjectData camera_specifics = 102;
  if (this->has_camera_specifics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      102, _Internal::camera_specifics(this), output);
  }

  // .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
  if (this->has_ultrasonic_specifics()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, _Internal::ultrasonic_specifics(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedMovingObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedMovingObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedMovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // .osi3.BaseMoving base_rmse = 3;
  if (this->has_base_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::base_rmse(this), target);
  }

  // .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
  if (this->reference_point() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->reference_point(), target);
  }

  // .osi3.DetectedMovingObject.MovementState movement_state = 5;
  if (this->movement_state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->movement_state(), target);
  }

  // double percentage_side_lane_left = 6;
  if (!(this->percentage_side_lane_left() <= 0 && this->percentage_side_lane_left() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->percentage_side_lane_left(), target);
  }

  // double percentage_side_lane_right = 7;
  if (!(this->percentage_side_lane_right() <= 0 && this->percentage_side_lane_right() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->percentage_side_lane_right(), target);
  }

  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->candidate(static_cast<int>(i)), target);
  }

  // .osi3.ColorDescription color_description = 9;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::color_description(this), target);
  }

  // .osi3.RadarSpecificObjectData radar_specifics = 100;
  if (this->has_radar_specifics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, _Internal::radar_specifics(this), target);
  }

  // .osi3.LidarSpecificObjectData lidar_specifics = 101;
  if (this->has_lidar_specifics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, _Internal::lidar_specifics(this), target);
  }

  // .osi3.CameraSpecificObjectData camera_specifics = 102;
  if (this->has_camera_specifics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        102, _Internal::camera_specifics(this), target);
  }

  // .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
  if (this->has_ultrasonic_specifics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, _Internal::ultrasonic_specifics(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedMovingObject)
  return target;
}

size_t DetectedMovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedMovingObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedMovingObject.CandidateMovingObject candidate = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .osi3.BaseMoving base = 2;
  if (this->has_base()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  // .osi3.BaseMoving base_rmse = 3;
  if (this->has_base_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_rmse_);
  }

  // .osi3.ColorDescription color_description = 9;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  // .osi3.RadarSpecificObjectData radar_specifics = 100;
  if (this->has_radar_specifics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *radar_specifics_);
  }

  // .osi3.LidarSpecificObjectData lidar_specifics = 101;
  if (this->has_lidar_specifics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lidar_specifics_);
  }

  // .osi3.CameraSpecificObjectData camera_specifics = 102;
  if (this->has_camera_specifics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_specifics_);
  }

  // .osi3.UltrasonicSpecificObjectData ultrasonic_specifics = 103;
  if (this->has_ultrasonic_specifics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ultrasonic_specifics_);
  }

  // .osi3.DetectedMovingObject.ReferencePoint reference_point = 4;
  if (this->reference_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->reference_point());
  }

  // .osi3.DetectedMovingObject.MovementState movement_state = 5;
  if (this->movement_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->movement_state());
  }

  // double percentage_side_lane_left = 6;
  if (!(this->percentage_side_lane_left() <= 0 && this->percentage_side_lane_left() >= 0)) {
    total_size += 1 + 8;
  }

  // double percentage_side_lane_right = 7;
  if (!(this->percentage_side_lane_right() <= 0 && this->percentage_side_lane_right() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedMovingObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedMovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedMovingObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedMovingObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedMovingObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedMovingObject)
    MergeFrom(*source);
  }
}

void DetectedMovingObject::MergeFrom(const DetectedMovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedMovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  if (from.has_header()) {
    mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
  }
  if (from.has_base()) {
    mutable_base()->::osi3::BaseMoving::MergeFrom(from.base());
  }
  if (from.has_base_rmse()) {
    mutable_base_rmse()->::osi3::BaseMoving::MergeFrom(from.base_rmse());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
  if (from.has_radar_specifics()) {
    mutable_radar_specifics()->::osi3::RadarSpecificObjectData::MergeFrom(from.radar_specifics());
  }
  if (from.has_lidar_specifics()) {
    mutable_lidar_specifics()->::osi3::LidarSpecificObjectData::MergeFrom(from.lidar_specifics());
  }
  if (from.has_camera_specifics()) {
    mutable_camera_specifics()->::osi3::CameraSpecificObjectData::MergeFrom(from.camera_specifics());
  }
  if (from.has_ultrasonic_specifics()) {
    mutable_ultrasonic_specifics()->::osi3::UltrasonicSpecificObjectData::MergeFrom(from.ultrasonic_specifics());
  }
  if (from.reference_point() != 0) {
    set_reference_point(from.reference_point());
  }
  if (from.movement_state() != 0) {
    set_movement_state(from.movement_state());
  }
  if (!(from.percentage_side_lane_left() <= 0 && from.percentage_side_lane_left() >= 0)) {
    set_percentage_side_lane_left(from.percentage_side_lane_left());
  }
  if (!(from.percentage_side_lane_right() <= 0 && from.percentage_side_lane_right() >= 0)) {
    set_percentage_side_lane_right(from.percentage_side_lane_right());
  }
}

void DetectedMovingObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedMovingObject::CopyFrom(const DetectedMovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedMovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedMovingObject::IsInitialized() const {
  return true;
}

void DetectedMovingObject::InternalSwap(DetectedMovingObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  swap(header_, other->header_);
  swap(base_, other->base_);
  swap(base_rmse_, other->base_rmse_);
  swap(color_description_, other->color_description_);
  swap(radar_specifics_, other->radar_specifics_);
  swap(lidar_specifics_, other->lidar_specifics_);
  swap(camera_specifics_, other->camera_specifics_);
  swap(ultrasonic_specifics_, other->ultrasonic_specifics_);
  swap(reference_point_, other->reference_point_);
  swap(movement_state_, other->movement_state_);
  swap(percentage_side_lane_left_, other->percentage_side_lane_left_);
  swap(percentage_side_lane_right_, other->percentage_side_lane_right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedMovingObject::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedItemHeader* Arena::CreateMaybeMessage< ::osi3::DetectedItemHeader >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedItemHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedStationaryObject_CandidateStationaryObject* Arena::CreateMaybeMessage< ::osi3::DetectedStationaryObject_CandidateStationaryObject >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedStationaryObject_CandidateStationaryObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedStationaryObject* Arena::CreateMaybeMessage< ::osi3::DetectedStationaryObject >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedStationaryObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedMovingObject_CandidateMovingObject* Arena::CreateMaybeMessage< ::osi3::DetectedMovingObject_CandidateMovingObject >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedMovingObject_CandidateMovingObject >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedMovingObject* Arena::CreateMaybeMessage< ::osi3::DetectedMovingObject >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedMovingObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
