// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorviewconfiguration.proto
#pragma warning (disable : 4125)

#include "osi_sensorviewconfiguration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorviewconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorviewconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorviewconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MountingPosition_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorviewconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorviewconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarSensorViewConfiguration_AntennaDiagramEntry_osi_5fsensorviewconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensorviewconfiguration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WavelengthData_osi_5fcommon_2eproto;
namespace osi3 {
class SensorViewConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorViewConfiguration> _instance;
} _SensorViewConfiguration_default_instance_;
class GenericSensorViewConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericSensorViewConfiguration> _instance;
} _GenericSensorViewConfiguration_default_instance_;
class RadarSensorViewConfiguration_AntennaDiagramEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarSensorViewConfiguration_AntennaDiagramEntry> _instance;
} _RadarSensorViewConfiguration_AntennaDiagramEntry_default_instance_;
class RadarSensorViewConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarSensorViewConfiguration> _instance;
} _RadarSensorViewConfiguration_default_instance_;
class LidarSensorViewConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LidarSensorViewConfiguration> _instance;
} _LidarSensorViewConfiguration_default_instance_;
class CameraSensorViewConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraSensorViewConfiguration> _instance;
} _CameraSensorViewConfiguration_default_instance_;
class UltrasonicSensorViewConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UltrasonicSensorViewConfiguration> _instance;
} _UltrasonicSensorViewConfiguration_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_CameraSensorViewConfiguration_default_instance_;
    new (ptr) ::osi3::CameraSensorViewConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::CameraSensorViewConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,
      &scc_info_WavelengthData_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_GenericSensorViewConfiguration_default_instance_;
    new (ptr) ::osi3::GenericSensorViewConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::GenericSensorViewConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LidarSensorViewConfiguration_default_instance_;
    new (ptr) ::osi3::LidarSensorViewConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LidarSensorViewConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_RadarSensorViewConfiguration_default_instance_;
    new (ptr) ::osi3::RadarSensorViewConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarSensorViewConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,
      &scc_info_RadarSensorViewConfiguration_AntennaDiagramEntry_osi_5fsensorviewconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_RadarSensorViewConfiguration_AntennaDiagramEntry_osi_5fsensorviewconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_RadarSensorViewConfiguration_AntennaDiagramEntry_default_instance_;
    new (ptr) ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarSensorViewConfiguration_AntennaDiagramEntry_osi_5fsensorviewconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RadarSensorViewConfiguration_AntennaDiagramEntry_osi_5fsensorviewconfiguration_2eproto}, {}};

static void InitDefaultsscc_info_SensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_SensorViewConfiguration_default_instance_;
    new (ptr) ::osi3::SensorViewConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::SensorViewConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_SensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsscc_info_SensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
      &scc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
      &scc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
      &scc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
      &scc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,}};

static void InitDefaultsscc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_UltrasonicSensorViewConfiguration_default_instance_;
    new (ptr) ::osi3::UltrasonicSensorViewConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::UltrasonicSensorViewConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_MountingPosition_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fsensorviewconfiguration_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fsensorviewconfiguration_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fsensorviewconfiguration_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fsensorviewconfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, range_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, update_cycle_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, update_cycle_offset_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, simulation_start_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, omit_static_information_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, generic_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, radar_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, lidar_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, camera_sensor_view_configuration_),
  PROTOBUF_FIELD_OFFSET(::osi3::SensorViewConfiguration, ultrasonic_sensor_view_configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::GenericSensorViewConfiguration, field_of_view_vertical_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, horizontal_angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, vertical_angle_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, number_of_rays_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, number_of_rays_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, max_number_of_interactions_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, emitter_frequency_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, tx_antenna_diagram_),
  PROTOBUF_FIELD_OFFSET(::osi3::RadarSensorViewConfiguration, rx_antenna_diagram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, number_of_rays_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, number_of_rays_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, max_number_of_interactions_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, emitter_frequency_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, num_of_pixels_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, directions_),
  PROTOBUF_FIELD_OFFSET(::osi3::LidarSensorViewConfiguration, timings_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, field_of_view_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, number_of_pixels_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, number_of_pixels_vertical_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, channel_format_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, samples_per_pixel_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, max_number_of_interactions_),
  PROTOBUF_FIELD_OFFSET(::osi3::CameraSensorViewConfiguration, wavelength_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, mounting_position_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, mounting_position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, field_of_view_horizontal_),
  PROTOBUF_FIELD_OFFSET(::osi3::UltrasonicSensorViewConfiguration, field_of_view_vertical_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::SensorViewConfiguration)},
  { 21, -1, sizeof(::osi3::GenericSensorViewConfiguration)},
  { 31, -1, sizeof(::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry)},
  { 39, -1, sizeof(::osi3::RadarSensorViewConfiguration)},
  { 55, -1, sizeof(::osi3::LidarSensorViewConfiguration)},
  { 72, -1, sizeof(::osi3::CameraSensorViewConfiguration)},
  { 88, -1, sizeof(::osi3::UltrasonicSensorViewConfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_GenericSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RadarSensorViewConfiguration_AntennaDiagramEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_RadarSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LidarSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_CameraSensorViewConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_UltrasonicSensorViewConfiguration_default_instance_),
};

const char descriptor_table_protodef_osi_5fsensorviewconfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!osi_sensorviewconfiguration.proto\022\004osi"
  "3\032\020osi_common.proto\032\021osi_version.proto\"\344"
  "\006\n\027SensorViewConfiguration\022\'\n\007version\030\001 "
  "\001(\0132\026.osi3.InterfaceVersion\022#\n\tsensor_id"
  "\030\002 \001(\0132\020.osi3.Identifier\0221\n\021mounting_pos"
  "ition\030\003 \001(\0132\026.osi3.MountingPosition\0226\n\026m"
  "ounting_position_rmse\030\004 \001(\0132\026.osi3.Mount"
  "ingPosition\022 \n\030field_of_view_horizontal\030"
  "\005 \001(\001\022\036\n\026field_of_view_vertical\030\006 \001(\001\022\r\n"
  "\005range\030\007 \001(\001\022*\n\021update_cycle_time\030\010 \001(\0132"
  "\017.osi3.Timestamp\022,\n\023update_cycle_offset\030"
  "\t \001(\0132\017.osi3.Timestamp\022.\n\025simulation_sta"
  "rt_time\030\n \001(\0132\017.osi3.Timestamp\022\037\n\027omit_s"
  "tatic_information\030\013 \001(\010\022P\n!generic_senso"
  "r_view_configuration\030\350\007 \003(\0132$.osi3.Gener"
  "icSensorViewConfiguration\022L\n\037radar_senso"
  "r_view_configuration\030\351\007 \003(\0132\".osi3.Radar"
  "SensorViewConfiguration\022L\n\037lidar_sensor_"
  "view_configuration\030\352\007 \003(\0132\".osi3.LidarSe"
  "nsorViewConfiguration\022N\n camera_sensor_v"
  "iew_configuration\030\353\007 \003(\0132#.osi3.CameraSe"
  "nsorViewConfiguration\022V\n$ultrasonic_sens"
  "or_view_configuration\030\354\007 \003(\0132\'.osi3.Ultr"
  "asonicSensorViewConfiguration\"\362\001\n\036Generi"
  "cSensorViewConfiguration\022#\n\tsensor_id\030\001 "
  "\001(\0132\020.osi3.Identifier\0221\n\021mounting_positi"
  "on\030\002 \001(\0132\026.osi3.MountingPosition\0226\n\026moun"
  "ting_position_rmse\030\003 \001(\0132\026.osi3.Mounting"
  "Position\022 \n\030field_of_view_horizontal\030\004 \001"
  "(\001\022\036\n\026field_of_view_vertical\030\005 \001(\001\"\366\004\n\034R"
  "adarSensorViewConfiguration\022#\n\tsensor_id"
  "\030\001 \001(\0132\020.osi3.Identifier\0221\n\021mounting_pos"
  "ition\030\002 \001(\0132\026.osi3.MountingPosition\0226\n\026m"
  "ounting_position_rmse\030\003 \001(\0132\026.osi3.Mount"
  "ingPosition\022 \n\030field_of_view_horizontal\030"
  "\004 \001(\001\022\036\n\026field_of_view_vertical\030\005 \001(\001\022!\n"
  "\031number_of_rays_horizontal\030\006 \001(\r\022\037\n\027numb"
  "er_of_rays_vertical\030\007 \001(\r\022\"\n\032max_number_"
  "of_interactions\030\010 \001(\r\022\031\n\021emitter_frequen"
  "cy\030\t \001(\001\022R\n\022tx_antenna_diagram\030\n \003(\01326.o"
  "si3.RadarSensorViewConfiguration.Antenna"
  "DiagramEntry\022R\n\022rx_antenna_diagram\030\013 \003(\013"
  "26.osi3.RadarSensorViewConfiguration.Ant"
  "ennaDiagramEntry\032Y\n\023AntennaDiagramEntry\022"
  "\030\n\020horizontal_angle\030\001 \001(\001\022\026\n\016vertical_an"
  "gle\030\002 \001(\001\022\020\n\010response\030\003 \001(\001\"\277\003\n\034LidarSen"
  "sorViewConfiguration\022#\n\tsensor_id\030\001 \001(\0132"
  "\020.osi3.Identifier\0221\n\021mounting_position\030\002"
  " \001(\0132\026.osi3.MountingPosition\0226\n\026mounting"
  "_position_rmse\030\003 \001(\0132\026.osi3.MountingPosi"
  "tion\022 \n\030field_of_view_horizontal\030\004 \001(\001\022\036"
  "\n\026field_of_view_vertical\030\005 \001(\001\022!\n\031number"
  "_of_rays_horizontal\030\006 \001(\r\022\037\n\027number_of_r"
  "ays_vertical\030\007 \001(\r\022\"\n\032max_number_of_inte"
  "ractions\030\010 \001(\r\022\031\n\021emitter_frequency\030\t \001("
  "\001\022\025\n\rnum_of_pixels\030\n \001(\r\022\"\n\ndirections\030\013"
  " \003(\0132\016.osi3.Vector3d\022\017\n\007timings\030\014 \003(\r\"\370\n"
  "\n\035CameraSensorViewConfiguration\022#\n\tsenso"
  "r_id\030\001 \001(\0132\020.osi3.Identifier\0221\n\021mounting"
  "_position\030\002 \001(\0132\026.osi3.MountingPosition\022"
  "6\n\026mounting_position_rmse\030\003 \001(\0132\026.osi3.M"
  "ountingPosition\022 \n\030field_of_view_horizon"
  "tal\030\004 \001(\001\022\036\n\026field_of_view_vertical\030\005 \001("
  "\001\022#\n\033number_of_pixels_horizontal\030\006 \001(\r\022!"
  "\n\031number_of_pixels_vertical\030\007 \001(\r\022I\n\016cha"
  "nnel_format\030\010 \003(\01621.osi3.CameraSensorVie"
  "wConfiguration.ChannelFormat\022\031\n\021samples_"
  "per_pixel\030\t \001(\r\022\"\n\032max_number_of_interac"
  "tions\030\n \001(\r\022-\n\017wavelength_data\030\013 \003(\0132\024.o"
  "si3.WavelengthData\"\203\007\n\rChannelFormat\022\032\n\026"
  "CHANNEL_FORMAT_UNKNOWN\020\000\022\030\n\024CHANNEL_FORM"
  "AT_OTHER\020\001\022\036\n\032CHANNEL_FORMAT_MONO_U8_LIN"
  "\020\002\022\037\n\033CHANNEL_FORMAT_MONO_U16_LIN\020\003\022\037\n\033C"
  "HANNEL_FORMAT_MONO_U32_LIN\020\004\022\037\n\033CHANNEL_"
  "FORMAT_MONO_F32_LIN\020\005\022\035\n\031CHANNEL_FORMAT_"
  "RGB_U8_LIN\020\006\022\036\n\032CHANNEL_FORMAT_RGB_U16_L"
  "IN\020\007\022\036\n\032CHANNEL_FORMAT_RGB_U32_LIN\020\010\022\036\n\032"
  "CHANNEL_FORMAT_RGB_F32_LIN\020\t\022$\n CHANNEL_"
  "FORMAT_BAYER_BGGR_U8_LIN\020\n\022%\n!CHANNEL_FO"
  "RMAT_BAYER_BGGR_U16_LIN\020\013\022%\n!CHANNEL_FOR"
  "MAT_BAYER_BGGR_U32_LIN\020\014\022%\n!CHANNEL_FORM"
  "AT_BAYER_BGGR_F32_LIN\020\r\022$\n CHANNEL_FORMA"
  "T_BAYER_RGGB_U8_LIN\020\016\022%\n!CHANNEL_FORMAT_"
  "BAYER_RGGB_U16_LIN\020\017\022%\n!CHANNEL_FORMAT_B"
  "AYER_RGGB_U32_LIN\020\020\022%\n!CHANNEL_FORMAT_BA"
  "YER_RGGB_F32_LIN\020\021\022\036\n\032CHANNEL_FORMAT_RCC"
  "C_U8_LIN\020\022\022\037\n\033CHANNEL_FORMAT_RCCC_U16_LI"
  "N\020\023\022\037\n\033CHANNEL_FORMAT_RCCC_U32_LIN\020\024\022\037\n\033"
  "CHANNEL_FORMAT_RCCC_F32_LIN\020\025\022\036\n\032CHANNEL"
  "_FORMAT_RCCB_U8_LIN\020\026\022\037\n\033CHANNEL_FORMAT_"
  "RCCB_U16_LIN\020\027\022\037\n\033CHANNEL_FORMAT_RCCB_U3"
  "2_LIN\020\030\022\037\n\033CHANNEL_FORMAT_RCCB_F32_LIN\020\031"
  "\"\365\001\n!UltrasonicSensorViewConfiguration\022#"
  "\n\tsensor_id\030\001 \001(\0132\020.osi3.Identifier\0221\n\021m"
  "ounting_position\030\002 \001(\0132\026.osi3.MountingPo"
  "sition\0226\n\026mounting_position_rmse\030\003 \001(\0132\026"
  ".osi3.MountingPosition\022 \n\030field_of_view_"
  "horizontal\030\004 \001(\001\022\036\n\026field_of_view_vertic"
  "al\030\005 \001(\001B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fsensorviewconfiguration_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fsensorviewconfiguration_2eproto_sccs[7] = {
  &scc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
  &scc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
  &scc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
  &scc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
  &scc_info_RadarSensorViewConfiguration_AntennaDiagramEntry_osi_5fsensorviewconfiguration_2eproto.base,
  &scc_info_SensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
  &scc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fsensorviewconfiguration_2eproto_once;
static bool descriptor_table_osi_5fsensorviewconfiguration_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fsensorviewconfiguration_2eproto = {
  &descriptor_table_osi_5fsensorviewconfiguration_2eproto_initialized, descriptor_table_protodef_osi_5fsensorviewconfiguration_2eproto, "osi_sensorviewconfiguration.proto", 3940,
  &descriptor_table_osi_5fsensorviewconfiguration_2eproto_once, descriptor_table_osi_5fsensorviewconfiguration_2eproto_sccs, descriptor_table_osi_5fsensorviewconfiguration_2eproto_deps, 7, 2,
  schemas, file_default_instances, TableStruct_osi_5fsensorviewconfiguration_2eproto::offsets,
  file_level_metadata_osi_5fsensorviewconfiguration_2eproto, 7, file_level_enum_descriptors_osi_5fsensorviewconfiguration_2eproto, file_level_service_descriptors_osi_5fsensorviewconfiguration_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fsensorviewconfiguration_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fsensorviewconfiguration_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraSensorViewConfiguration_ChannelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fsensorviewconfiguration_2eproto);
  return file_level_enum_descriptors_osi_5fsensorviewconfiguration_2eproto[0];
}
bool CameraSensorViewConfiguration_ChannelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_UNKNOWN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_OTHER;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_MONO_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RGB_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_BGGR_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_BAYER_RGGB_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCC_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_U8_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_U16_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_U32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::CHANNEL_FORMAT_RCCB_F32_LIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::ChannelFormat_MIN;
constexpr CameraSensorViewConfiguration_ChannelFormat CameraSensorViewConfiguration::ChannelFormat_MAX;
constexpr int CameraSensorViewConfiguration::ChannelFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SensorViewConfiguration::InitAsDefaultInstance() {
  ::osi3::_SensorViewConfiguration_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_SensorViewConfiguration_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_SensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_SensorViewConfiguration_default_instance_._instance.get_mutable()->update_cycle_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorViewConfiguration_default_instance_._instance.get_mutable()->update_cycle_offset_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_SensorViewConfiguration_default_instance_._instance.get_mutable()->simulation_start_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
}
class SensorViewConfiguration::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const SensorViewConfiguration* msg);
  static const ::osi3::Identifier& sensor_id(const SensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position(const SensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const SensorViewConfiguration* msg);
  static const ::osi3::Timestamp& update_cycle_time(const SensorViewConfiguration* msg);
  static const ::osi3::Timestamp& update_cycle_offset(const SensorViewConfiguration* msg);
  static const ::osi3::Timestamp& simulation_start_time(const SensorViewConfiguration* msg);
};

const ::osi3::InterfaceVersion&
SensorViewConfiguration::_Internal::version(const SensorViewConfiguration* msg) {
  return *msg->version_;
}
const ::osi3::Identifier&
SensorViewConfiguration::_Internal::sensor_id(const SensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
SensorViewConfiguration::_Internal::mounting_position(const SensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
SensorViewConfiguration::_Internal::mounting_position_rmse(const SensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
const ::osi3::Timestamp&
SensorViewConfiguration::_Internal::update_cycle_time(const SensorViewConfiguration* msg) {
  return *msg->update_cycle_time_;
}
const ::osi3::Timestamp&
SensorViewConfiguration::_Internal::update_cycle_offset(const SensorViewConfiguration* msg) {
  return *msg->update_cycle_offset_;
}
const ::osi3::Timestamp&
SensorViewConfiguration::_Internal::simulation_start_time(const SensorViewConfiguration* msg) {
  return *msg->simulation_start_time_;
}
void SensorViewConfiguration::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void SensorViewConfiguration::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
void SensorViewConfiguration::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void SensorViewConfiguration::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
void SensorViewConfiguration::clear_update_cycle_time() {
  if (GetArenaNoVirtual() == nullptr && update_cycle_time_ != nullptr) {
    delete update_cycle_time_;
  }
  update_cycle_time_ = nullptr;
}
void SensorViewConfiguration::clear_update_cycle_offset() {
  if (GetArenaNoVirtual() == nullptr && update_cycle_offset_ != nullptr) {
    delete update_cycle_offset_;
  }
  update_cycle_offset_ = nullptr;
}
void SensorViewConfiguration::clear_simulation_start_time() {
  if (GetArenaNoVirtual() == nullptr && simulation_start_time_ != nullptr) {
    delete simulation_start_time_;
  }
  simulation_start_time_ = nullptr;
}
SensorViewConfiguration::SensorViewConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorViewConfiguration)
}
SensorViewConfiguration::SensorViewConfiguration(const SensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      generic_sensor_view_configuration_(from.generic_sensor_view_configuration_),
      radar_sensor_view_configuration_(from.radar_sensor_view_configuration_),
      lidar_sensor_view_configuration_(from.lidar_sensor_view_configuration_),
      camera_sensor_view_configuration_(from.camera_sensor_view_configuration_),
      ultrasonic_sensor_view_configuration_(from.ultrasonic_sensor_view_configuration_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  if (from.has_update_cycle_time()) {
    update_cycle_time_ = new ::osi3::Timestamp(*from.update_cycle_time_);
  } else {
    update_cycle_time_ = nullptr;
  }
  if (from.has_update_cycle_offset()) {
    update_cycle_offset_ = new ::osi3::Timestamp(*from.update_cycle_offset_);
  } else {
    update_cycle_offset_ = nullptr;
  }
  if (from.has_simulation_start_time()) {
    simulation_start_time_ = new ::osi3::Timestamp(*from.simulation_start_time_);
  } else {
    simulation_start_time_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&omit_static_information_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(omit_static_information_));
  // @@protoc_insertion_point(copy_constructor:osi3.SensorViewConfiguration)
}

void SensorViewConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omit_static_information_) -
      reinterpret_cast<char*>(&version_)) + sizeof(omit_static_information_));
}

SensorViewConfiguration::~SensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.SensorViewConfiguration)
  SharedDtor();
}

void SensorViewConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
  if (this != internal_default_instance()) delete update_cycle_time_;
  if (this != internal_default_instance()) delete update_cycle_offset_;
  if (this != internal_default_instance()) delete simulation_start_time_;
}

void SensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorViewConfiguration& SensorViewConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  return *internal_default_instance();
}


void SensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  generic_sensor_view_configuration_.Clear();
  radar_sensor_view_configuration_.Clear();
  lidar_sensor_view_configuration_.Clear();
  camera_sensor_view_configuration_.Clear();
  ultrasonic_sensor_view_configuration_.Clear();
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_cycle_time_ != nullptr) {
    delete update_cycle_time_;
  }
  update_cycle_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_cycle_offset_ != nullptr) {
    delete update_cycle_offset_;
  }
  update_cycle_offset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && simulation_start_time_ != nullptr) {
    delete simulation_start_time_;
  }
  simulation_start_time_ = nullptr;
  ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omit_static_information_) -
      reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(omit_static_information_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier sensor_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double field_of_view_horizontal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double field_of_view_vertical = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp update_cycle_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_update_cycle_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp update_cycle_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_update_cycle_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp simulation_start_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_simulation_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool omit_static_information = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          omit_static_information_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_generic_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 16066);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_radar_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 16074);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_lidar_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 16082);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_camera_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 16090);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_ultrasonic_sensor_view_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 16098);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorViewConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorViewConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier sensor_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_horizontal = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_vertical = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double range = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp update_cycle_time = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_cycle_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp update_cycle_offset = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_update_cycle_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp simulation_start_time = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_simulation_start_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool omit_static_information = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &omit_static_information_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
      case 1000: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8002 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_generic_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
      case 1001: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8010 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_radar_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
      case 1002: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8018 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lidar_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
      case 1003: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8026 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_camera_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
      case 1004: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8034 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_ultrasonic_sensor_view_configuration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorViewConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorViewConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // .osi3.Identifier sensor_id = 2;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::sensor_id(this), output);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::mounting_position_rmse(this), output);
  }

  // double field_of_view_horizontal = 5;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->field_of_view_horizontal(), output);
  }

  // double field_of_view_vertical = 6;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->field_of_view_vertical(), output);
  }

  // double range = 7;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->range(), output);
  }

  // .osi3.Timestamp update_cycle_time = 8;
  if (this->has_update_cycle_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::update_cycle_time(this), output);
  }

  // .osi3.Timestamp update_cycle_offset = 9;
  if (this->has_update_cycle_offset()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::update_cycle_offset(this), output);
  }

  // .osi3.Timestamp simulation_start_time = 10;
  if (this->has_simulation_start_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::simulation_start_time(this), output);
  }

  // bool omit_static_information = 11;
  if (this->omit_static_information() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(11, this->omit_static_information(), output);
  }

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_sensor_view_configuration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000,
      this->generic_sensor_view_configuration(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radar_sensor_view_configuration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001,
      this->radar_sensor_view_configuration(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_sensor_view_configuration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1002,
      this->lidar_sensor_view_configuration(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_sensor_view_configuration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1003,
      this->camera_sensor_view_configuration(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ultrasonic_sensor_view_configuration_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1004,
      this->ultrasonic_sensor_view_configuration(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorViewConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // .osi3.Identifier sensor_id = 2;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::sensor_id(this), target);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::mounting_position_rmse(this), target);
  }

  // double field_of_view_horizontal = 5;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_horizontal(), target);
  }

  // double field_of_view_vertical = 6;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->field_of_view_vertical(), target);
  }

  // double range = 7;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->range(), target);
  }

  // .osi3.Timestamp update_cycle_time = 8;
  if (this->has_update_cycle_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::update_cycle_time(this), target);
  }

  // .osi3.Timestamp update_cycle_offset = 9;
  if (this->has_update_cycle_offset()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::update_cycle_offset(this), target);
  }

  // .osi3.Timestamp simulation_start_time = 10;
  if (this->has_simulation_start_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::simulation_start_time(this), target);
  }

  // bool omit_static_information = 11;
  if (this->omit_static_information() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->omit_static_information(), target);
  }

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->generic_sensor_view_configuration_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, this->generic_sensor_view_configuration(static_cast<int>(i)), target);
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->radar_sensor_view_configuration_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1001, this->radar_sensor_view_configuration(static_cast<int>(i)), target);
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lidar_sensor_view_configuration_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1002, this->lidar_sensor_view_configuration(static_cast<int>(i)), target);
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->camera_sensor_view_configuration_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1003, this->camera_sensor_view_configuration(static_cast<int>(i)), target);
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->ultrasonic_sensor_view_configuration_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1004, this->ultrasonic_sensor_view_configuration(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorViewConfiguration)
  return target;
}

size_t SensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorViewConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.GenericSensorViewConfiguration generic_sensor_view_configuration = 1000;
  {
    unsigned int count = static_cast<unsigned int>(this->generic_sensor_view_configuration_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->generic_sensor_view_configuration(static_cast<int>(i)));
    }
  }

  // repeated .osi3.RadarSensorViewConfiguration radar_sensor_view_configuration = 1001;
  {
    unsigned int count = static_cast<unsigned int>(this->radar_sensor_view_configuration_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->radar_sensor_view_configuration(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LidarSensorViewConfiguration lidar_sensor_view_configuration = 1002;
  {
    unsigned int count = static_cast<unsigned int>(this->lidar_sensor_view_configuration_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lidar_sensor_view_configuration(static_cast<int>(i)));
    }
  }

  // repeated .osi3.CameraSensorViewConfiguration camera_sensor_view_configuration = 1003;
  {
    unsigned int count = static_cast<unsigned int>(this->camera_sensor_view_configuration_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->camera_sensor_view_configuration(static_cast<int>(i)));
    }
  }

  // repeated .osi3.UltrasonicSensorViewConfiguration ultrasonic_sensor_view_configuration = 1004;
  {
    unsigned int count = static_cast<unsigned int>(this->ultrasonic_sensor_view_configuration_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->ultrasonic_sensor_view_configuration(static_cast<int>(i)));
    }
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .osi3.Identifier sensor_id = 2;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 3;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 4;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // .osi3.Timestamp update_cycle_time = 8;
  if (this->has_update_cycle_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_cycle_time_);
  }

  // .osi3.Timestamp update_cycle_offset = 9;
  if (this->has_update_cycle_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_cycle_offset_);
  }

  // .osi3.Timestamp simulation_start_time = 10;
  if (this->has_simulation_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *simulation_start_time_);
  }

  // double field_of_view_horizontal = 5;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double field_of_view_vertical = 6;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  // double range = 7;
  if (!(this->range() <= 0 && this->range() >= 0)) {
    total_size += 1 + 8;
  }

  // bool omit_static_information = 11;
  if (this->omit_static_information() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorViewConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorViewConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorViewConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorViewConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorViewConfiguration)
    MergeFrom(*source);
  }
}

void SensorViewConfiguration::MergeFrom(const SensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  generic_sensor_view_configuration_.MergeFrom(from.generic_sensor_view_configuration_);
  radar_sensor_view_configuration_.MergeFrom(from.radar_sensor_view_configuration_);
  lidar_sensor_view_configuration_.MergeFrom(from.lidar_sensor_view_configuration_);
  camera_sensor_view_configuration_.MergeFrom(from.camera_sensor_view_configuration_);
  ultrasonic_sensor_view_configuration_.MergeFrom(from.ultrasonic_sensor_view_configuration_);
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (from.has_update_cycle_time()) {
    mutable_update_cycle_time()->::osi3::Timestamp::MergeFrom(from.update_cycle_time());
  }
  if (from.has_update_cycle_offset()) {
    mutable_update_cycle_offset()->::osi3::Timestamp::MergeFrom(from.update_cycle_offset());
  }
  if (from.has_simulation_start_time()) {
    mutable_simulation_start_time()->::osi3::Timestamp::MergeFrom(from.simulation_start_time());
  }
  if (!(from.field_of_view_horizontal() <= 0 && from.field_of_view_horizontal() >= 0)) {
    set_field_of_view_horizontal(from.field_of_view_horizontal());
  }
  if (!(from.field_of_view_vertical() <= 0 && from.field_of_view_vertical() >= 0)) {
    set_field_of_view_vertical(from.field_of_view_vertical());
  }
  if (!(from.range() <= 0 && from.range() >= 0)) {
    set_range(from.range());
  }
  if (from.omit_static_information() != 0) {
    set_omit_static_information(from.omit_static_information());
  }
}

void SensorViewConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorViewConfiguration::CopyFrom(const SensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorViewConfiguration::IsInitialized() const {
  return true;
}

void SensorViewConfiguration::InternalSwap(SensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&generic_sensor_view_configuration_)->InternalSwap(CastToBase(&other->generic_sensor_view_configuration_));
  CastToBase(&radar_sensor_view_configuration_)->InternalSwap(CastToBase(&other->radar_sensor_view_configuration_));
  CastToBase(&lidar_sensor_view_configuration_)->InternalSwap(CastToBase(&other->lidar_sensor_view_configuration_));
  CastToBase(&camera_sensor_view_configuration_)->InternalSwap(CastToBase(&other->camera_sensor_view_configuration_));
  CastToBase(&ultrasonic_sensor_view_configuration_)->InternalSwap(CastToBase(&other->ultrasonic_sensor_view_configuration_));
  swap(version_, other->version_);
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(update_cycle_time_, other->update_cycle_time_);
  swap(update_cycle_offset_, other->update_cycle_offset_);
  swap(simulation_start_time_, other->simulation_start_time_);
  swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  swap(field_of_view_vertical_, other->field_of_view_vertical_);
  swap(range_, other->range_);
  swap(omit_static_information_, other->omit_static_information_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorViewConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericSensorViewConfiguration::InitAsDefaultInstance() {
  ::osi3::_GenericSensorViewConfiguration_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_GenericSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_GenericSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
}
class GenericSensorViewConfiguration::_Internal {
 public:
  static const ::osi3::Identifier& sensor_id(const GenericSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position(const GenericSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const GenericSensorViewConfiguration* msg);
};

const ::osi3::Identifier&
GenericSensorViewConfiguration::_Internal::sensor_id(const GenericSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
GenericSensorViewConfiguration::_Internal::mounting_position(const GenericSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
GenericSensorViewConfiguration::_Internal::mounting_position_rmse(const GenericSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void GenericSensorViewConfiguration::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
void GenericSensorViewConfiguration::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void GenericSensorViewConfiguration::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
GenericSensorViewConfiguration::GenericSensorViewConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.GenericSensorViewConfiguration)
}
GenericSensorViewConfiguration::GenericSensorViewConfiguration(const GenericSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_of_view_vertical_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  // @@protoc_insertion_point(copy_constructor:osi3.GenericSensorViewConfiguration)
}

void GenericSensorViewConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_of_view_vertical_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(field_of_view_vertical_));
}

GenericSensorViewConfiguration::~GenericSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.GenericSensorViewConfiguration)
  SharedDtor();
}

void GenericSensorViewConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void GenericSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericSensorViewConfiguration& GenericSensorViewConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  return *internal_default_instance();
}


void GenericSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GenericSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_of_view_vertical_) -
      reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GenericSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GenericSensorViewConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.GenericSensorViewConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier sensor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_horizontal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_vertical = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.GenericSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.GenericSensorViewConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GenericSensorViewConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.GenericSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sensor_id(this), output);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mounting_position_rmse(this), output);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.GenericSensorViewConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GenericSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sensor_id(this), target);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mounting_position_rmse(this), target);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GenericSensorViewConfiguration)
  return target;
}

size_t GenericSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GenericSensorViewConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericSensorViewConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.GenericSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericSensorViewConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericSensorViewConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.GenericSensorViewConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.GenericSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void GenericSensorViewConfiguration::MergeFrom(const GenericSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GenericSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (!(from.field_of_view_horizontal() <= 0 && from.field_of_view_horizontal() >= 0)) {
    set_field_of_view_horizontal(from.field_of_view_horizontal());
  }
  if (!(from.field_of_view_vertical() <= 0 && from.field_of_view_vertical() >= 0)) {
    set_field_of_view_vertical(from.field_of_view_vertical());
  }
}

void GenericSensorViewConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.GenericSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericSensorViewConfiguration::CopyFrom(const GenericSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GenericSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericSensorViewConfiguration::IsInitialized() const {
  return true;
}

void GenericSensorViewConfiguration::InternalSwap(GenericSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  swap(field_of_view_vertical_, other->field_of_view_vertical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericSensorViewConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarSensorViewConfiguration_AntennaDiagramEntry::InitAsDefaultInstance() {
}
class RadarSensorViewConfiguration_AntennaDiagramEntry::_Internal {
 public:
};

RadarSensorViewConfiguration_AntennaDiagramEntry::RadarSensorViewConfiguration_AntennaDiagramEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}
RadarSensorViewConfiguration_AntennaDiagramEntry::RadarSensorViewConfiguration_AntennaDiagramEntry(const RadarSensorViewConfiguration_AntennaDiagramEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&horizontal_angle_, &from.horizontal_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SharedCtor() {
  ::memset(&horizontal_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(response_));
}

RadarSensorViewConfiguration_AntennaDiagramEntry::~RadarSensorViewConfiguration_AntennaDiagramEntry() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  SharedDtor();
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SharedDtor() {
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarSensorViewConfiguration_AntennaDiagramEntry& RadarSensorViewConfiguration_AntennaDiagramEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarSensorViewConfiguration_AntennaDiagramEntry_osi_5fsensorviewconfiguration_2eproto.base);
  return *internal_default_instance();
}


void RadarSensorViewConfiguration_AntennaDiagramEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&horizontal_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&horizontal_angle_)) + sizeof(response_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RadarSensorViewConfiguration_AntennaDiagramEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double horizontal_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          horizontal_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vertical_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          vertical_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          response_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RadarSensorViewConfiguration_AntennaDiagramEntry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double horizontal_angle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vertical_angle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double response = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RadarSensorViewConfiguration_AntennaDiagramEntry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal_angle = 1;
  if (!(this->horizontal_angle() <= 0 && this->horizontal_angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->horizontal_angle(), output);
  }

  // double vertical_angle = 2;
  if (!(this->vertical_angle() <= 0 && this->vertical_angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->vertical_angle(), output);
  }

  // double response = 3;
  if (!(this->response() <= 0 && this->response() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarSensorViewConfiguration_AntennaDiagramEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal_angle = 1;
  if (!(this->horizontal_angle() <= 0 && this->horizontal_angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->horizontal_angle(), target);
  }

  // double vertical_angle = 2;
  if (!(this->vertical_angle() <= 0 && this->vertical_angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->vertical_angle(), target);
  }

  // double response = 3;
  if (!(this->response() <= 0 && this->response() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  return target;
}

size_t RadarSensorViewConfiguration_AntennaDiagramEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double horizontal_angle = 1;
  if (!(this->horizontal_angle() <= 0 && this->horizontal_angle() >= 0)) {
    total_size += 1 + 8;
  }

  // double vertical_angle = 2;
  if (!(this->vertical_angle() <= 0 && this->vertical_angle() >= 0)) {
    total_size += 1 + 8;
  }

  // double response = 3;
  if (!(this->response() <= 0 && this->response() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarSensorViewConfiguration_AntennaDiagramEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarSensorViewConfiguration_AntennaDiagramEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
    MergeFrom(*source);
  }
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::MergeFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.horizontal_angle() <= 0 && from.horizontal_angle() >= 0)) {
    set_horizontal_angle(from.horizontal_angle());
  }
  if (!(from.vertical_angle() <= 0 && from.vertical_angle() >= 0)) {
    set_vertical_angle(from.vertical_angle());
  }
  if (!(from.response() <= 0 && from.response() >= 0)) {
    set_response(from.response());
  }
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::CopyFrom(const RadarSensorViewConfiguration_AntennaDiagramEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorViewConfiguration.AntennaDiagramEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorViewConfiguration_AntennaDiagramEntry::IsInitialized() const {
  return true;
}

void RadarSensorViewConfiguration_AntennaDiagramEntry::InternalSwap(RadarSensorViewConfiguration_AntennaDiagramEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(horizontal_angle_, other->horizontal_angle_);
  swap(vertical_angle_, other->vertical_angle_);
  swap(response_, other->response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSensorViewConfiguration_AntennaDiagramEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarSensorViewConfiguration::InitAsDefaultInstance() {
  ::osi3::_RadarSensorViewConfiguration_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_RadarSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_RadarSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
}
class RadarSensorViewConfiguration::_Internal {
 public:
  static const ::osi3::Identifier& sensor_id(const RadarSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position(const RadarSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const RadarSensorViewConfiguration* msg);
};

const ::osi3::Identifier&
RadarSensorViewConfiguration::_Internal::sensor_id(const RadarSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
RadarSensorViewConfiguration::_Internal::mounting_position(const RadarSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
RadarSensorViewConfiguration::_Internal::mounting_position_rmse(const RadarSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void RadarSensorViewConfiguration::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
void RadarSensorViewConfiguration::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void RadarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
RadarSensorViewConfiguration::RadarSensorViewConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.RadarSensorViewConfiguration)
}
RadarSensorViewConfiguration::RadarSensorViewConfiguration(const RadarSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tx_antenna_diagram_(from.tx_antenna_diagram_),
      rx_antenna_diagram_(from.rx_antenna_diagram_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_interactions_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(max_number_of_interactions_));
  // @@protoc_insertion_point(copy_constructor:osi3.RadarSensorViewConfiguration)
}

void RadarSensorViewConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_interactions_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(max_number_of_interactions_));
}

RadarSensorViewConfiguration::~RadarSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.RadarSensorViewConfiguration)
  SharedDtor();
}

void RadarSensorViewConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void RadarSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarSensorViewConfiguration& RadarSensorViewConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  return *internal_default_instance();
}


void RadarSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.RadarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tx_antenna_diagram_.Clear();
  rx_antenna_diagram_.Clear();
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_interactions_) -
      reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(max_number_of_interactions_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RadarSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_rays_horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_of_rays_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_rays_vertical = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_of_rays_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_number_of_interactions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_number_of_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double emitter_frequency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          emitter_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_tx_antenna_diagram(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_rx_antenna_diagram(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RadarSensorViewConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.RadarSensorViewConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier sensor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_horizontal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_vertical = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_rays_horizontal = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_rays_vertical = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_number_of_interactions = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_interactions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double emitter_frequency = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &emitter_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_tx_antenna_diagram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_rx_antenna_diagram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.RadarSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.RadarSensorViewConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RadarSensorViewConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.RadarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sensor_id(this), output);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mounting_position_rmse(this), output);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  // uint32 number_of_rays_horizontal = 6;
  if (this->number_of_rays_horizontal() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->number_of_rays_horizontal(), output);
  }

  // uint32 number_of_rays_vertical = 7;
  if (this->number_of_rays_vertical() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->number_of_rays_vertical(), output);
  }

  // uint32 max_number_of_interactions = 8;
  if (this->max_number_of_interactions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->max_number_of_interactions(), output);
  }

  // double emitter_frequency = 9;
  if (!(this->emitter_frequency() <= 0 && this->emitter_frequency() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->emitter_frequency(), output);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_antenna_diagram_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->tx_antenna_diagram(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rx_antenna_diagram_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->rx_antenna_diagram(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.RadarSensorViewConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.RadarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sensor_id(this), target);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mounting_position_rmse(this), target);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  // uint32 number_of_rays_horizontal = 6;
  if (this->number_of_rays_horizontal() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_rays_horizontal(), target);
  }

  // uint32 number_of_rays_vertical = 7;
  if (this->number_of_rays_vertical() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_rays_vertical(), target);
  }

  // uint32 max_number_of_interactions = 8;
  if (this->max_number_of_interactions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_number_of_interactions(), target);
  }

  // double emitter_frequency = 9;
  if (!(this->emitter_frequency() <= 0 && this->emitter_frequency() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->emitter_frequency(), target);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tx_antenna_diagram_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->tx_antenna_diagram(static_cast<int>(i)), target);
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rx_antenna_diagram_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->rx_antenna_diagram(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.RadarSensorViewConfiguration)
  return target;
}

size_t RadarSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.RadarSensorViewConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry tx_antenna_diagram = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->tx_antenna_diagram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->tx_antenna_diagram(static_cast<int>(i)));
    }
  }

  // repeated .osi3.RadarSensorViewConfiguration.AntennaDiagramEntry rx_antenna_diagram = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->rx_antenna_diagram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->rx_antenna_diagram(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 number_of_rays_horizontal = 6;
  if (this->number_of_rays_horizontal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_rays_horizontal());
  }

  // uint32 number_of_rays_vertical = 7;
  if (this->number_of_rays_vertical() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_rays_vertical());
  }

  // double emitter_frequency = 9;
  if (!(this->emitter_frequency() <= 0 && this->emitter_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 max_number_of_interactions = 8;
  if (this->max_number_of_interactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_number_of_interactions());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarSensorViewConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.RadarSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarSensorViewConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarSensorViewConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.RadarSensorViewConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.RadarSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void RadarSensorViewConfiguration::MergeFrom(const RadarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.RadarSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tx_antenna_diagram_.MergeFrom(from.tx_antenna_diagram_);
  rx_antenna_diagram_.MergeFrom(from.rx_antenna_diagram_);
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (!(from.field_of_view_horizontal() <= 0 && from.field_of_view_horizontal() >= 0)) {
    set_field_of_view_horizontal(from.field_of_view_horizontal());
  }
  if (!(from.field_of_view_vertical() <= 0 && from.field_of_view_vertical() >= 0)) {
    set_field_of_view_vertical(from.field_of_view_vertical());
  }
  if (from.number_of_rays_horizontal() != 0) {
    set_number_of_rays_horizontal(from.number_of_rays_horizontal());
  }
  if (from.number_of_rays_vertical() != 0) {
    set_number_of_rays_vertical(from.number_of_rays_vertical());
  }
  if (!(from.emitter_frequency() <= 0 && from.emitter_frequency() >= 0)) {
    set_emitter_frequency(from.emitter_frequency());
  }
  if (from.max_number_of_interactions() != 0) {
    set_max_number_of_interactions(from.max_number_of_interactions());
  }
}

void RadarSensorViewConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.RadarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSensorViewConfiguration::CopyFrom(const RadarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.RadarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSensorViewConfiguration::IsInitialized() const {
  return true;
}

void RadarSensorViewConfiguration::InternalSwap(RadarSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&tx_antenna_diagram_)->InternalSwap(CastToBase(&other->tx_antenna_diagram_));
  CastToBase(&rx_antenna_diagram_)->InternalSwap(CastToBase(&other->rx_antenna_diagram_));
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  swap(field_of_view_vertical_, other->field_of_view_vertical_);
  swap(number_of_rays_horizontal_, other->number_of_rays_horizontal_);
  swap(number_of_rays_vertical_, other->number_of_rays_vertical_);
  swap(emitter_frequency_, other->emitter_frequency_);
  swap(max_number_of_interactions_, other->max_number_of_interactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSensorViewConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LidarSensorViewConfiguration::InitAsDefaultInstance() {
  ::osi3::_LidarSensorViewConfiguration_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LidarSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_LidarSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
}
class LidarSensorViewConfiguration::_Internal {
 public:
  static const ::osi3::Identifier& sensor_id(const LidarSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position(const LidarSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const LidarSensorViewConfiguration* msg);
};

const ::osi3::Identifier&
LidarSensorViewConfiguration::_Internal::sensor_id(const LidarSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
LidarSensorViewConfiguration::_Internal::mounting_position(const LidarSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
LidarSensorViewConfiguration::_Internal::mounting_position_rmse(const LidarSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void LidarSensorViewConfiguration::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
void LidarSensorViewConfiguration::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void LidarSensorViewConfiguration::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
void LidarSensorViewConfiguration::clear_directions() {
  directions_.Clear();
}
LidarSensorViewConfiguration::LidarSensorViewConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LidarSensorViewConfiguration)
}
LidarSensorViewConfiguration::LidarSensorViewConfiguration(const LidarSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      directions_(from.directions_),
      timings_(from.timings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_of_pixels_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(num_of_pixels_));
  // @@protoc_insertion_point(copy_constructor:osi3.LidarSensorViewConfiguration)
}

void LidarSensorViewConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_pixels_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(num_of_pixels_));
}

LidarSensorViewConfiguration::~LidarSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.LidarSensorViewConfiguration)
  SharedDtor();
}

void LidarSensorViewConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void LidarSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LidarSensorViewConfiguration& LidarSensorViewConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LidarSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  return *internal_default_instance();
}


void LidarSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LidarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directions_.Clear();
  timings_.Clear();
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_pixels_) -
      reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(num_of_pixels_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LidarSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_rays_horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_of_rays_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_rays_vertical = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_of_rays_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_number_of_interactions = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_number_of_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double emitter_frequency = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          emitter_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 num_of_pixels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          num_of_pixels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Vector3d directions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_directions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // repeated uint32 timings = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_timings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          add_timings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LidarSensorViewConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LidarSensorViewConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier sensor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_horizontal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_vertical = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_rays_horizontal = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_rays_vertical = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_rays_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_number_of_interactions = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_interactions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double emitter_frequency = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &emitter_frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 num_of_pixels = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_of_pixels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Vector3d directions = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_directions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 timings = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_timings())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (96 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98u, input, this->mutable_timings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LidarSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LidarSensorViewConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LidarSensorViewConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LidarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sensor_id(this), output);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mounting_position_rmse(this), output);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  // uint32 number_of_rays_horizontal = 6;
  if (this->number_of_rays_horizontal() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->number_of_rays_horizontal(), output);
  }

  // uint32 number_of_rays_vertical = 7;
  if (this->number_of_rays_vertical() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->number_of_rays_vertical(), output);
  }

  // uint32 max_number_of_interactions = 8;
  if (this->max_number_of_interactions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->max_number_of_interactions(), output);
  }

  // double emitter_frequency = 9;
  if (!(this->emitter_frequency() <= 0 && this->emitter_frequency() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->emitter_frequency(), output);
  }

  // uint32 num_of_pixels = 10;
  if (this->num_of_pixels() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->num_of_pixels(), output);
  }

  // repeated .osi3.Vector3d directions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->directions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->directions(static_cast<int>(i)),
      output);
  }

  // repeated uint32 timings = 12;
  if (this->timings_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(12, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_timings_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->timings_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->timings(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LidarSensorViewConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LidarSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sensor_id(this), target);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mounting_position_rmse(this), target);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  // uint32 number_of_rays_horizontal = 6;
  if (this->number_of_rays_horizontal() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_rays_horizontal(), target);
  }

  // uint32 number_of_rays_vertical = 7;
  if (this->number_of_rays_vertical() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_rays_vertical(), target);
  }

  // uint32 max_number_of_interactions = 8;
  if (this->max_number_of_interactions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->max_number_of_interactions(), target);
  }

  // double emitter_frequency = 9;
  if (!(this->emitter_frequency() <= 0 && this->emitter_frequency() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->emitter_frequency(), target);
  }

  // uint32 num_of_pixels = 10;
  if (this->num_of_pixels() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->num_of_pixels(), target);
  }

  // repeated .osi3.Vector3d directions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->directions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->directions(static_cast<int>(i)), target);
  }

  // repeated uint32 timings = 12;
  if (this->timings_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      12,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _timings_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->timings_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LidarSensorViewConfiguration)
  return target;
}

size_t LidarSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LidarSensorViewConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Vector3d directions = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->directions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->directions(static_cast<int>(i)));
    }
  }

  // repeated uint32 timings = 12;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->timings_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _timings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 number_of_rays_horizontal = 6;
  if (this->number_of_rays_horizontal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_rays_horizontal());
  }

  // uint32 number_of_rays_vertical = 7;
  if (this->number_of_rays_vertical() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_rays_vertical());
  }

  // double emitter_frequency = 9;
  if (!(this->emitter_frequency() <= 0 && this->emitter_frequency() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 max_number_of_interactions = 8;
  if (this->max_number_of_interactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_number_of_interactions());
  }

  // uint32 num_of_pixels = 10;
  if (this->num_of_pixels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->num_of_pixels());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarSensorViewConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LidarSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarSensorViewConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarSensorViewConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LidarSensorViewConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LidarSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void LidarSensorViewConfiguration::MergeFrom(const LidarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LidarSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  directions_.MergeFrom(from.directions_);
  timings_.MergeFrom(from.timings_);
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (!(from.field_of_view_horizontal() <= 0 && from.field_of_view_horizontal() >= 0)) {
    set_field_of_view_horizontal(from.field_of_view_horizontal());
  }
  if (!(from.field_of_view_vertical() <= 0 && from.field_of_view_vertical() >= 0)) {
    set_field_of_view_vertical(from.field_of_view_vertical());
  }
  if (from.number_of_rays_horizontal() != 0) {
    set_number_of_rays_horizontal(from.number_of_rays_horizontal());
  }
  if (from.number_of_rays_vertical() != 0) {
    set_number_of_rays_vertical(from.number_of_rays_vertical());
  }
  if (!(from.emitter_frequency() <= 0 && from.emitter_frequency() >= 0)) {
    set_emitter_frequency(from.emitter_frequency());
  }
  if (from.max_number_of_interactions() != 0) {
    set_max_number_of_interactions(from.max_number_of_interactions());
  }
  if (from.num_of_pixels() != 0) {
    set_num_of_pixels(from.num_of_pixels());
  }
}

void LidarSensorViewConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LidarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarSensorViewConfiguration::CopyFrom(const LidarSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LidarSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarSensorViewConfiguration::IsInitialized() const {
  return true;
}

void LidarSensorViewConfiguration::InternalSwap(LidarSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&directions_)->InternalSwap(CastToBase(&other->directions_));
  timings_.InternalSwap(&other->timings_);
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  swap(field_of_view_vertical_, other->field_of_view_vertical_);
  swap(number_of_rays_horizontal_, other->number_of_rays_horizontal_);
  swap(number_of_rays_vertical_, other->number_of_rays_vertical_);
  swap(emitter_frequency_, other->emitter_frequency_);
  swap(max_number_of_interactions_, other->max_number_of_interactions_);
  swap(num_of_pixels_, other->num_of_pixels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarSensorViewConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraSensorViewConfiguration::InitAsDefaultInstance() {
  ::osi3::_CameraSensorViewConfiguration_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_CameraSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_CameraSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
}
class CameraSensorViewConfiguration::_Internal {
 public:
  static const ::osi3::Identifier& sensor_id(const CameraSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position(const CameraSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const CameraSensorViewConfiguration* msg);
};

const ::osi3::Identifier&
CameraSensorViewConfiguration::_Internal::sensor_id(const CameraSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
CameraSensorViewConfiguration::_Internal::mounting_position(const CameraSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
CameraSensorViewConfiguration::_Internal::mounting_position_rmse(const CameraSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void CameraSensorViewConfiguration::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
void CameraSensorViewConfiguration::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void CameraSensorViewConfiguration::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
void CameraSensorViewConfiguration::clear_wavelength_data() {
  wavelength_data_.Clear();
}
CameraSensorViewConfiguration::CameraSensorViewConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.CameraSensorViewConfiguration)
}
CameraSensorViewConfiguration::CameraSensorViewConfiguration(const CameraSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channel_format_(from.channel_format_),
      wavelength_data_(from.wavelength_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_interactions_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(max_number_of_interactions_));
  // @@protoc_insertion_point(copy_constructor:osi3.CameraSensorViewConfiguration)
}

void CameraSensorViewConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_interactions_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(max_number_of_interactions_));
}

CameraSensorViewConfiguration::~CameraSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.CameraSensorViewConfiguration)
  SharedDtor();
}

void CameraSensorViewConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void CameraSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraSensorViewConfiguration& CameraSensorViewConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  return *internal_default_instance();
}


void CameraSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.CameraSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_format_.Clear();
  wavelength_data_.Clear();
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_interactions_) -
      reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(max_number_of_interactions_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CameraSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_pixels_horizontal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          number_of_pixels_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 number_of_pixels_vertical = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          number_of_pixels_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_channel_format(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_channel_format(static_cast<::osi3::CameraSensorViewConfiguration_ChannelFormat>(val));
        } else goto handle_unusual;
        continue;
      // uint32 samples_per_pixel = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          samples_per_pixel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_number_of_interactions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          max_number_of_interactions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.WavelengthData wavelength_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_wavelength_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CameraSensorViewConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.CameraSensorViewConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier sensor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_horizontal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_vertical = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_pixels_horizontal = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_pixels_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_pixels_vertical = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_pixels_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_channel_format(static_cast< ::osi3::CameraSensorViewConfiguration_ChannelFormat >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_channel_format(static_cast< ::osi3::CameraSensorViewConfiguration_ChannelFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 samples_per_pixel = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samples_per_pixel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 max_number_of_interactions = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_number_of_interactions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.WavelengthData wavelength_data = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_wavelength_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.CameraSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.CameraSensorViewConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CameraSensorViewConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.CameraSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sensor_id(this), output);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mounting_position_rmse(this), output);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  // uint32 number_of_pixels_horizontal = 6;
  if (this->number_of_pixels_horizontal() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->number_of_pixels_horizontal(), output);
  }

  // uint32 number_of_pixels_vertical = 7;
  if (this->number_of_pixels_vertical() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->number_of_pixels_vertical(), output);
  }

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  if (this->channel_format_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      8,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_channel_format_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->channel_format_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->channel_format(i), output);
  }

  // uint32 samples_per_pixel = 9;
  if (this->samples_per_pixel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->samples_per_pixel(), output);
  }

  // uint32 max_number_of_interactions = 10;
  if (this->max_number_of_interactions() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(10, this->max_number_of_interactions(), output);
  }

  // repeated .osi3.WavelengthData wavelength_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wavelength_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->wavelength_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.CameraSensorViewConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.CameraSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sensor_id(this), target);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mounting_position_rmse(this), target);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  // uint32 number_of_pixels_horizontal = 6;
  if (this->number_of_pixels_horizontal() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->number_of_pixels_horizontal(), target);
  }

  // uint32 number_of_pixels_vertical = 7;
  if (this->number_of_pixels_vertical() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->number_of_pixels_vertical(), target);
  }

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  if (this->channel_format_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      8,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _channel_format_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->channel_format_, target);
  }

  // uint32 samples_per_pixel = 9;
  if (this->samples_per_pixel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->samples_per_pixel(), target);
  }

  // uint32 max_number_of_interactions = 10;
  if (this->max_number_of_interactions() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->max_number_of_interactions(), target);
  }

  // repeated .osi3.WavelengthData wavelength_data = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->wavelength_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->wavelength_data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.CameraSensorViewConfiguration)
  return target;
}

size_t CameraSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.CameraSensorViewConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.CameraSensorViewConfiguration.ChannelFormat channel_format = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->channel_format_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->channel_format(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channel_format_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .osi3.WavelengthData wavelength_data = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->wavelength_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->wavelength_data(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 number_of_pixels_horizontal = 6;
  if (this->number_of_pixels_horizontal() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_pixels_horizontal());
  }

  // uint32 number_of_pixels_vertical = 7;
  if (this->number_of_pixels_vertical() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_pixels_vertical());
  }

  // uint32 samples_per_pixel = 9;
  if (this->samples_per_pixel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->samples_per_pixel());
  }

  // uint32 max_number_of_interactions = 10;
  if (this->max_number_of_interactions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->max_number_of_interactions());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraSensorViewConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.CameraSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraSensorViewConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraSensorViewConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.CameraSensorViewConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.CameraSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void CameraSensorViewConfiguration::MergeFrom(const CameraSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.CameraSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_format_.MergeFrom(from.channel_format_);
  wavelength_data_.MergeFrom(from.wavelength_data_);
  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (!(from.field_of_view_horizontal() <= 0 && from.field_of_view_horizontal() >= 0)) {
    set_field_of_view_horizontal(from.field_of_view_horizontal());
  }
  if (!(from.field_of_view_vertical() <= 0 && from.field_of_view_vertical() >= 0)) {
    set_field_of_view_vertical(from.field_of_view_vertical());
  }
  if (from.number_of_pixels_horizontal() != 0) {
    set_number_of_pixels_horizontal(from.number_of_pixels_horizontal());
  }
  if (from.number_of_pixels_vertical() != 0) {
    set_number_of_pixels_vertical(from.number_of_pixels_vertical());
  }
  if (from.samples_per_pixel() != 0) {
    set_samples_per_pixel(from.samples_per_pixel());
  }
  if (from.max_number_of_interactions() != 0) {
    set_max_number_of_interactions(from.max_number_of_interactions());
  }
}

void CameraSensorViewConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.CameraSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraSensorViewConfiguration::CopyFrom(const CameraSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.CameraSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraSensorViewConfiguration::IsInitialized() const {
  return true;
}

void CameraSensorViewConfiguration::InternalSwap(CameraSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_format_.InternalSwap(&other->channel_format_);
  CastToBase(&wavelength_data_)->InternalSwap(CastToBase(&other->wavelength_data_));
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  swap(field_of_view_vertical_, other->field_of_view_vertical_);
  swap(number_of_pixels_horizontal_, other->number_of_pixels_horizontal_);
  swap(number_of_pixels_vertical_, other->number_of_pixels_vertical_);
  swap(samples_per_pixel_, other->samples_per_pixel_);
  swap(max_number_of_interactions_, other->max_number_of_interactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraSensorViewConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UltrasonicSensorViewConfiguration::InitAsDefaultInstance() {
  ::osi3::_UltrasonicSensorViewConfiguration_default_instance_._instance.get_mutable()->sensor_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_UltrasonicSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
  ::osi3::_UltrasonicSensorViewConfiguration_default_instance_._instance.get_mutable()->mounting_position_rmse_ = const_cast< ::osi3::MountingPosition*>(
      ::osi3::MountingPosition::internal_default_instance());
}
class UltrasonicSensorViewConfiguration::_Internal {
 public:
  static const ::osi3::Identifier& sensor_id(const UltrasonicSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position(const UltrasonicSensorViewConfiguration* msg);
  static const ::osi3::MountingPosition& mounting_position_rmse(const UltrasonicSensorViewConfiguration* msg);
};

const ::osi3::Identifier&
UltrasonicSensorViewConfiguration::_Internal::sensor_id(const UltrasonicSensorViewConfiguration* msg) {
  return *msg->sensor_id_;
}
const ::osi3::MountingPosition&
UltrasonicSensorViewConfiguration::_Internal::mounting_position(const UltrasonicSensorViewConfiguration* msg) {
  return *msg->mounting_position_;
}
const ::osi3::MountingPosition&
UltrasonicSensorViewConfiguration::_Internal::mounting_position_rmse(const UltrasonicSensorViewConfiguration* msg) {
  return *msg->mounting_position_rmse_;
}
void UltrasonicSensorViewConfiguration::clear_sensor_id() {
  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
}
void UltrasonicSensorViewConfiguration::clear_mounting_position() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
}
void UltrasonicSensorViewConfiguration::clear_mounting_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
}
UltrasonicSensorViewConfiguration::UltrasonicSensorViewConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.UltrasonicSensorViewConfiguration)
}
UltrasonicSensorViewConfiguration::UltrasonicSensorViewConfiguration(const UltrasonicSensorViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sensor_id()) {
    sensor_id_ = new ::osi3::Identifier(*from.sensor_id_);
  } else {
    sensor_id_ = nullptr;
  }
  if (from.has_mounting_position()) {
    mounting_position_ = new ::osi3::MountingPosition(*from.mounting_position_);
  } else {
    mounting_position_ = nullptr;
  }
  if (from.has_mounting_position_rmse()) {
    mounting_position_rmse_ = new ::osi3::MountingPosition(*from.mounting_position_rmse_);
  } else {
    mounting_position_rmse_ = nullptr;
  }
  ::memcpy(&field_of_view_horizontal_, &from.field_of_view_horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_of_view_vertical_) -
    reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  // @@protoc_insertion_point(copy_constructor:osi3.UltrasonicSensorViewConfiguration)
}

void UltrasonicSensorViewConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_of_view_vertical_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(field_of_view_vertical_));
}

UltrasonicSensorViewConfiguration::~UltrasonicSensorViewConfiguration() {
  // @@protoc_insertion_point(destructor:osi3.UltrasonicSensorViewConfiguration)
  SharedDtor();
}

void UltrasonicSensorViewConfiguration::SharedDtor() {
  if (this != internal_default_instance()) delete sensor_id_;
  if (this != internal_default_instance()) delete mounting_position_;
  if (this != internal_default_instance()) delete mounting_position_rmse_;
}

void UltrasonicSensorViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UltrasonicSensorViewConfiguration& UltrasonicSensorViewConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UltrasonicSensorViewConfiguration_osi_5fsensorviewconfiguration_2eproto.base);
  return *internal_default_instance();
}


void UltrasonicSensorViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.UltrasonicSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sensor_id_ != nullptr) {
    delete sensor_id_;
  }
  sensor_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_ != nullptr) {
    delete mounting_position_;
  }
  mounting_position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mounting_position_rmse_ != nullptr) {
    delete mounting_position_rmse_;
  }
  mounting_position_rmse_ = nullptr;
  ::memset(&field_of_view_horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_of_view_vertical_) -
      reinterpret_cast<char*>(&field_of_view_horizontal_)) + sizeof(field_of_view_vertical_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UltrasonicSensorViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Identifier sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sensor_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_mounting_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_mounting_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double field_of_view_horizontal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          field_of_view_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double field_of_view_vertical = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          field_of_view_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UltrasonicSensorViewConfiguration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.UltrasonicSensorViewConfiguration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Identifier sensor_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.MountingPosition mounting_position_rmse = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mounting_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_horizontal = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double field_of_view_vertical = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &field_of_view_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.UltrasonicSensorViewConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.UltrasonicSensorViewConfiguration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UltrasonicSensorViewConfiguration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.UltrasonicSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sensor_id(this), output);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::mounting_position(this), output);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::mounting_position_rmse(this), output);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->field_of_view_horizontal(), output);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->field_of_view_vertical(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.UltrasonicSensorViewConfiguration)
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicSensorViewConfiguration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.UltrasonicSensorViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sensor_id(this), target);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::mounting_position(this), target);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::mounting_position_rmse(this), target);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->field_of_view_horizontal(), target);
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->field_of_view_vertical(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.UltrasonicSensorViewConfiguration)
  return target;
}

size_t UltrasonicSensorViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.UltrasonicSensorViewConfiguration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Identifier sensor_id = 1;
  if (this->has_sensor_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_id_);
  }

  // .osi3.MountingPosition mounting_position = 2;
  if (this->has_mounting_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_);
  }

  // .osi3.MountingPosition mounting_position_rmse = 3;
  if (this->has_mounting_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mounting_position_rmse_);
  }

  // double field_of_view_horizontal = 4;
  if (!(this->field_of_view_horizontal() <= 0 && this->field_of_view_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double field_of_view_vertical = 5;
  if (!(this->field_of_view_vertical() <= 0 && this->field_of_view_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UltrasonicSensorViewConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.UltrasonicSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const UltrasonicSensorViewConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UltrasonicSensorViewConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.UltrasonicSensorViewConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.UltrasonicSensorViewConfiguration)
    MergeFrom(*source);
  }
}

void UltrasonicSensorViewConfiguration::MergeFrom(const UltrasonicSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.UltrasonicSensorViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sensor_id()) {
    mutable_sensor_id()->::osi3::Identifier::MergeFrom(from.sensor_id());
  }
  if (from.has_mounting_position()) {
    mutable_mounting_position()->::osi3::MountingPosition::MergeFrom(from.mounting_position());
  }
  if (from.has_mounting_position_rmse()) {
    mutable_mounting_position_rmse()->::osi3::MountingPosition::MergeFrom(from.mounting_position_rmse());
  }
  if (!(from.field_of_view_horizontal() <= 0 && from.field_of_view_horizontal() >= 0)) {
    set_field_of_view_horizontal(from.field_of_view_horizontal());
  }
  if (!(from.field_of_view_vertical() <= 0 && from.field_of_view_vertical() >= 0)) {
    set_field_of_view_vertical(from.field_of_view_vertical());
  }
}

void UltrasonicSensorViewConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.UltrasonicSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UltrasonicSensorViewConfiguration::CopyFrom(const UltrasonicSensorViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.UltrasonicSensorViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicSensorViewConfiguration::IsInitialized() const {
  return true;
}

void UltrasonicSensorViewConfiguration::InternalSwap(UltrasonicSensorViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sensor_id_, other->sensor_id_);
  swap(mounting_position_, other->mounting_position_);
  swap(mounting_position_rmse_, other->mounting_position_rmse_);
  swap(field_of_view_horizontal_, other->field_of_view_horizontal_);
  swap(field_of_view_vertical_, other->field_of_view_vertical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicSensorViewConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::SensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::SensorViewConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::SensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::GenericSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::GenericSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::GenericSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry* Arena::CreateMaybeMessage< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::RadarSensorViewConfiguration_AntennaDiagramEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::RadarSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::RadarSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::RadarSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LidarSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::LidarSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LidarSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::CameraSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::CameraSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::CameraSensorViewConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::UltrasonicSensorViewConfiguration* Arena::CreateMaybeMessage< ::osi3::UltrasonicSensorViewConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::UltrasonicSensorViewConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
