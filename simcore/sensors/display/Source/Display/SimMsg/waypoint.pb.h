// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waypoint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_waypoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_waypoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
#include "scene_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_waypoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_waypoint_2eproto;
namespace sim_msg {
class GeoPosition;
class GeoPositionDefaultTypeInternal;
extern GeoPositionDefaultTypeInternal _GeoPosition_default_instance_;
class Orientation;
class OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class PositionLane;
class PositionLaneDefaultTypeInternal;
extern PositionLaneDefaultTypeInternal _PositionLane_default_instance_;
class PositionRelativeLane;
class PositionRelativeLaneDefaultTypeInternal;
extern PositionRelativeLaneDefaultTypeInternal _PositionRelativeLane_default_instance_;
class PositionRelativeObject;
class PositionRelativeObjectDefaultTypeInternal;
extern PositionRelativeObjectDefaultTypeInternal _PositionRelativeObject_default_instance_;
class PositionRelativeRoad;
class PositionRelativeRoadDefaultTypeInternal;
extern PositionRelativeRoadDefaultTypeInternal _PositionRelativeRoad_default_instance_;
class PositionRelativeWorld;
class PositionRelativeWorldDefaultTypeInternal;
extern PositionRelativeWorldDefaultTypeInternal _PositionRelativeWorld_default_instance_;
class PositionRoad;
class PositionRoadDefaultTypeInternal;
extern PositionRoadDefaultTypeInternal _PositionRoad_default_instance_;
class PositionRoute;
class PositionRouteDefaultTypeInternal;
extern PositionRouteDefaultTypeInternal _PositionRoute_default_instance_;
class PositionWorld;
class PositionWorldDefaultTypeInternal;
extern PositionWorldDefaultTypeInternal _PositionWorld_default_instance_;
class TrajectoryPosition;
class TrajectoryPositionDefaultTypeInternal;
extern TrajectoryPositionDefaultTypeInternal _TrajectoryPosition_default_instance_;
class Waypoint;
class WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::GeoPosition* Arena::CreateMaybeMessage<::sim_msg::GeoPosition>(Arena*);
template<> ::sim_msg::Orientation* Arena::CreateMaybeMessage<::sim_msg::Orientation>(Arena*);
template<> ::sim_msg::Position* Arena::CreateMaybeMessage<::sim_msg::Position>(Arena*);
template<> ::sim_msg::PositionLane* Arena::CreateMaybeMessage<::sim_msg::PositionLane>(Arena*);
template<> ::sim_msg::PositionRelativeLane* Arena::CreateMaybeMessage<::sim_msg::PositionRelativeLane>(Arena*);
template<> ::sim_msg::PositionRelativeObject* Arena::CreateMaybeMessage<::sim_msg::PositionRelativeObject>(Arena*);
template<> ::sim_msg::PositionRelativeRoad* Arena::CreateMaybeMessage<::sim_msg::PositionRelativeRoad>(Arena*);
template<> ::sim_msg::PositionRelativeWorld* Arena::CreateMaybeMessage<::sim_msg::PositionRelativeWorld>(Arena*);
template<> ::sim_msg::PositionRoad* Arena::CreateMaybeMessage<::sim_msg::PositionRoad>(Arena*);
template<> ::sim_msg::PositionRoute* Arena::CreateMaybeMessage<::sim_msg::PositionRoute>(Arena*);
template<> ::sim_msg::PositionWorld* Arena::CreateMaybeMessage<::sim_msg::PositionWorld>(Arena*);
template<> ::sim_msg::TrajectoryPosition* Arena::CreateMaybeMessage<::sim_msg::TrajectoryPosition>(Arena*);
template<> ::sim_msg::Waypoint* Arena::CreateMaybeMessage<::sim_msg::Waypoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

// ===================================================================

class Orientation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Orientation) */ {
 public:
  Orientation();
  virtual ~Orientation();

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Orientation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation* New() const final {
    return CreateMaybeMessage<Orientation>(nullptr);
  }

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Orientation& from);
  void MergeFrom(const Orientation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Orientation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHFieldNumber = 1,
    kPFieldNumber = 2,
    kRFieldNumber = 3,
  };
  // double h = 1;
  void clear_h();
  double h() const;
  void set_h(double value);

  // double p = 2;
  void clear_p();
  double p() const;
  void set_p(double value);

  // double r = 3;
  void clear_r();
  double r() const;
  void set_r(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Orientation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double h_;
  double p_;
  double r_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionWorld) */ {
 public:
  PositionWorld();
  virtual ~PositionWorld();

  PositionWorld(const PositionWorld& from);
  PositionWorld(PositionWorld&& from) noexcept
    : PositionWorld() {
    *this = ::std::move(from);
  }

  inline PositionWorld& operator=(const PositionWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionWorld& operator=(PositionWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionWorld* internal_default_instance() {
    return reinterpret_cast<const PositionWorld*>(
               &_PositionWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PositionWorld& a, PositionWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionWorld* New() const final {
    return CreateMaybeMessage<PositionWorld>(nullptr);
  }

  PositionWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionWorld& from);
  void MergeFrom(const PositionWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kHFieldNumber = 4,
    kPFieldNumber = 5,
    kRFieldNumber = 6,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);

  // double h = 4;
  void clear_h();
  double h() const;
  void set_h(double value);

  // double p = 5;
  void clear_p();
  double p() const;
  void set_p(double value);

  // double r = 6;
  void clear_r();
  double r() const;
  void set_r(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double x_;
  double y_;
  double z_;
  double h_;
  double p_;
  double r_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionRelativeWorld :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionRelativeWorld) */ {
 public:
  PositionRelativeWorld();
  virtual ~PositionRelativeWorld();

  PositionRelativeWorld(const PositionRelativeWorld& from);
  PositionRelativeWorld(PositionRelativeWorld&& from) noexcept
    : PositionRelativeWorld() {
    *this = ::std::move(from);
  }

  inline PositionRelativeWorld& operator=(const PositionRelativeWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionRelativeWorld& operator=(PositionRelativeWorld&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionRelativeWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionRelativeWorld* internal_default_instance() {
    return reinterpret_cast<const PositionRelativeWorld*>(
               &_PositionRelativeWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PositionRelativeWorld& a, PositionRelativeWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionRelativeWorld* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionRelativeWorld* New() const final {
    return CreateMaybeMessage<PositionRelativeWorld>(nullptr);
  }

  PositionRelativeWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionRelativeWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionRelativeWorld& from);
  void MergeFrom(const PositionRelativeWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionRelativeWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionRelativeWorld";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityRefFieldNumber = 1,
    kOrientationFieldNumber = 5,
    kDxFieldNumber = 2,
    kDyFieldNumber = 3,
    kDzFieldNumber = 4,
  };
  // string entity_ref = 1;
  void clear_entity_ref();
  const std::string& entity_ref() const;
  void set_entity_ref(const std::string& value);
  void set_entity_ref(std::string&& value);
  void set_entity_ref(const char* value);
  void set_entity_ref(const char* value, size_t size);
  std::string* mutable_entity_ref();
  std::string* release_entity_ref();
  void set_allocated_entity_ref(std::string* entity_ref);

  // .sim_msg.Orientation orientation = 5;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // double dx = 2;
  void clear_dx();
  double dx() const;
  void set_dx(double value);

  // double dy = 3;
  void clear_dy();
  double dy() const;
  void set_dy(double value);

  // double dz = 4;
  void clear_dz();
  double dz() const;
  void set_dz(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionRelativeWorld)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_ref_;
  ::sim_msg::Orientation* orientation_;
  double dx_;
  double dy_;
  double dz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionRelativeObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionRelativeObject) */ {
 public:
  PositionRelativeObject();
  virtual ~PositionRelativeObject();

  PositionRelativeObject(const PositionRelativeObject& from);
  PositionRelativeObject(PositionRelativeObject&& from) noexcept
    : PositionRelativeObject() {
    *this = ::std::move(from);
  }

  inline PositionRelativeObject& operator=(const PositionRelativeObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionRelativeObject& operator=(PositionRelativeObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionRelativeObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionRelativeObject* internal_default_instance() {
    return reinterpret_cast<const PositionRelativeObject*>(
               &_PositionRelativeObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PositionRelativeObject& a, PositionRelativeObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionRelativeObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionRelativeObject* New() const final {
    return CreateMaybeMessage<PositionRelativeObject>(nullptr);
  }

  PositionRelativeObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionRelativeObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionRelativeObject& from);
  void MergeFrom(const PositionRelativeObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionRelativeObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionRelativeObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityRefFieldNumber = 1,
    kOrientationFieldNumber = 5,
    kDxFieldNumber = 2,
    kDyFieldNumber = 3,
    kDzFieldNumber = 4,
  };
  // string entity_ref = 1;
  void clear_entity_ref();
  const std::string& entity_ref() const;
  void set_entity_ref(const std::string& value);
  void set_entity_ref(std::string&& value);
  void set_entity_ref(const char* value);
  void set_entity_ref(const char* value, size_t size);
  std::string* mutable_entity_ref();
  std::string* release_entity_ref();
  void set_allocated_entity_ref(std::string* entity_ref);

  // .sim_msg.Orientation orientation = 5;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // double dx = 2;
  void clear_dx();
  double dx() const;
  void set_dx(double value);

  // double dy = 3;
  void clear_dy();
  double dy() const;
  void set_dy(double value);

  // double dz = 4;
  void clear_dz();
  double dz() const;
  void set_dz(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionRelativeObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_ref_;
  ::sim_msg::Orientation* orientation_;
  double dx_;
  double dy_;
  double dz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionRoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionRoad) */ {
 public:
  PositionRoad();
  virtual ~PositionRoad();

  PositionRoad(const PositionRoad& from);
  PositionRoad(PositionRoad&& from) noexcept
    : PositionRoad() {
    *this = ::std::move(from);
  }

  inline PositionRoad& operator=(const PositionRoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionRoad& operator=(PositionRoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionRoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionRoad* internal_default_instance() {
    return reinterpret_cast<const PositionRoad*>(
               &_PositionRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PositionRoad& a, PositionRoad& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionRoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionRoad* New() const final {
    return CreateMaybeMessage<PositionRoad>(nullptr);
  }

  PositionRoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionRoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionRoad& from);
  void MergeFrom(const PositionRoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionRoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionRoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 5,
    kRoadIdFieldNumber = 1,
    kSFieldNumber = 2,
    kTFieldNumber = 3,
  };
  // .sim_msg.Orientation orientation = 5;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // uint64 road_id = 1;
  void clear_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 road_id() const;
  void set_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // double s = 2;
  void clear_s();
  double s() const;
  void set_s(double value);

  // double t = 3;
  void clear_t();
  double t() const;
  void set_t(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionRoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Orientation* orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 road_id_;
  double s_;
  double t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionRelativeRoad :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionRelativeRoad) */ {
 public:
  PositionRelativeRoad();
  virtual ~PositionRelativeRoad();

  PositionRelativeRoad(const PositionRelativeRoad& from);
  PositionRelativeRoad(PositionRelativeRoad&& from) noexcept
    : PositionRelativeRoad() {
    *this = ::std::move(from);
  }

  inline PositionRelativeRoad& operator=(const PositionRelativeRoad& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionRelativeRoad& operator=(PositionRelativeRoad&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionRelativeRoad& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionRelativeRoad* internal_default_instance() {
    return reinterpret_cast<const PositionRelativeRoad*>(
               &_PositionRelativeRoad_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PositionRelativeRoad& a, PositionRelativeRoad& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionRelativeRoad* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionRelativeRoad* New() const final {
    return CreateMaybeMessage<PositionRelativeRoad>(nullptr);
  }

  PositionRelativeRoad* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionRelativeRoad>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionRelativeRoad& from);
  void MergeFrom(const PositionRelativeRoad& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionRelativeRoad* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionRelativeRoad";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityRefFieldNumber = 1,
    kOrientationFieldNumber = 4,
    kDsFieldNumber = 2,
    kDtFieldNumber = 3,
  };
  // string entity_ref = 1;
  void clear_entity_ref();
  const std::string& entity_ref() const;
  void set_entity_ref(const std::string& value);
  void set_entity_ref(std::string&& value);
  void set_entity_ref(const char* value);
  void set_entity_ref(const char* value, size_t size);
  std::string* mutable_entity_ref();
  std::string* release_entity_ref();
  void set_allocated_entity_ref(std::string* entity_ref);

  // .sim_msg.Orientation orientation = 4;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // double ds = 2;
  void clear_ds();
  double ds() const;
  void set_ds(double value);

  // double dt = 3;
  void clear_dt();
  double dt() const;
  void set_dt(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionRelativeRoad)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_ref_;
  ::sim_msg::Orientation* orientation_;
  double ds_;
  double dt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionLane) */ {
 public:
  PositionLane();
  virtual ~PositionLane();

  PositionLane(const PositionLane& from);
  PositionLane(PositionLane&& from) noexcept
    : PositionLane() {
    *this = ::std::move(from);
  }

  inline PositionLane& operator=(const PositionLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionLane& operator=(PositionLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionLane* internal_default_instance() {
    return reinterpret_cast<const PositionLane*>(
               &_PositionLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PositionLane& a, PositionLane& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionLane* New() const final {
    return CreateMaybeMessage<PositionLane>(nullptr);
  }

  PositionLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionLane& from);
  void MergeFrom(const PositionLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 6,
    kRoadIdFieldNumber = 1,
    kLaneIdFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kSFieldNumber = 5,
  };
  // .sim_msg.Orientation orientation = 6;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // uint64 road_id = 1;
  void clear_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 road_id() const;
  void set_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // int64 lane_id = 3;
  void clear_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 lane_id() const;
  void set_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);

  // double offset = 4;
  void clear_offset();
  double offset() const;
  void set_offset(double value);

  // double s = 5;
  void clear_s();
  double s() const;
  void set_s(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Orientation* orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 road_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 lane_id_;
  double offset_;
  double s_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionRelativeLane :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionRelativeLane) */ {
 public:
  PositionRelativeLane();
  virtual ~PositionRelativeLane();

  PositionRelativeLane(const PositionRelativeLane& from);
  PositionRelativeLane(PositionRelativeLane&& from) noexcept
    : PositionRelativeLane() {
    *this = ::std::move(from);
  }

  inline PositionRelativeLane& operator=(const PositionRelativeLane& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionRelativeLane& operator=(PositionRelativeLane&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionRelativeLane& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionRelativeLane* internal_default_instance() {
    return reinterpret_cast<const PositionRelativeLane*>(
               &_PositionRelativeLane_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PositionRelativeLane& a, PositionRelativeLane& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionRelativeLane* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionRelativeLane* New() const final {
    return CreateMaybeMessage<PositionRelativeLane>(nullptr);
  }

  PositionRelativeLane* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionRelativeLane>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionRelativeLane& from);
  void MergeFrom(const PositionRelativeLane& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionRelativeLane* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionRelativeLane";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityRefFieldNumber = 1,
    kOrientationFieldNumber = 5,
    kDsFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kDlaneFieldNumber = 2,
  };
  // string entity_ref = 1;
  void clear_entity_ref();
  const std::string& entity_ref() const;
  void set_entity_ref(const std::string& value);
  void set_entity_ref(std::string&& value);
  void set_entity_ref(const char* value);
  void set_entity_ref(const char* value, size_t size);
  std::string* mutable_entity_ref();
  std::string* release_entity_ref();
  void set_allocated_entity_ref(std::string* entity_ref);

  // .sim_msg.Orientation orientation = 5;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // double ds = 3;
  void clear_ds();
  double ds() const;
  void set_ds(double value);

  // double offset = 4;
  void clear_offset();
  double offset() const;
  void set_offset(double value);

  // int32 dlane = 2;
  void clear_dlane();
  ::PROTOBUF_NAMESPACE_ID::int32 dlane() const;
  void set_dlane(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionRelativeLane)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_ref_;
  ::sim_msg::Orientation* orientation_;
  double ds_;
  double offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 dlane_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class PositionRoute :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PositionRoute) */ {
 public:
  PositionRoute();
  virtual ~PositionRoute();

  PositionRoute(const PositionRoute& from);
  PositionRoute(PositionRoute&& from) noexcept
    : PositionRoute() {
    *this = ::std::move(from);
  }

  inline PositionRoute& operator=(const PositionRoute& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionRoute& operator=(PositionRoute&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionRoute& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionRoute* internal_default_instance() {
    return reinterpret_cast<const PositionRoute*>(
               &_PositionRoute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PositionRoute& a, PositionRoute& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionRoute* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionRoute* New() const final {
    return CreateMaybeMessage<PositionRoute>(nullptr);
  }

  PositionRoute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionRoute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionRoute& from);
  void MergeFrom(const PositionRoute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionRoute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PositionRoute";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 2,
    kRouteRefFieldNumber = 1,
  };
  // .sim_msg.Orientation orientation = 2;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // uint64 route_ref = 1;
  void clear_route_ref();
  ::PROTOBUF_NAMESPACE_ID::uint64 route_ref() const;
  void set_route_ref(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:sim_msg.PositionRoute)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Orientation* orientation_;
  ::PROTOBUF_NAMESPACE_ID::uint64 route_ref_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class GeoPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.GeoPosition) */ {
 public:
  GeoPosition();
  virtual ~GeoPosition();

  GeoPosition(const GeoPosition& from);
  GeoPosition(GeoPosition&& from) noexcept
    : GeoPosition() {
    *this = ::std::move(from);
  }

  inline GeoPosition& operator=(const GeoPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPosition& operator=(GeoPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoPosition* internal_default_instance() {
    return reinterpret_cast<const GeoPosition*>(
               &_GeoPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GeoPosition& a, GeoPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoPosition* New() const final {
    return CreateMaybeMessage<GeoPosition>(nullptr);
  }

  GeoPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoPosition& from);
  void MergeFrom(const GeoPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.GeoPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 4,
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // .sim_msg.Orientation orientation = 4;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.GeoPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Orientation* orientation_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPosition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrajectoryPosition) */ {
 public:
  TrajectoryPosition();
  virtual ~TrajectoryPosition();

  TrajectoryPosition(const TrajectoryPosition& from);
  TrajectoryPosition(TrajectoryPosition&& from) noexcept
    : TrajectoryPosition() {
    *this = ::std::move(from);
  }

  inline TrajectoryPosition& operator=(const TrajectoryPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPosition& operator=(TrajectoryPosition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPosition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPosition* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPosition*>(
               &_TrajectoryPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TrajectoryPosition& a, TrajectoryPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPosition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPosition* New() const final {
    return CreateMaybeMessage<TrajectoryPosition>(nullptr);
  }

  TrajectoryPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPosition& from);
  void MergeFrom(const TrajectoryPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrajectoryPosition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 3,
    kSFieldNumber = 1,
    kTFieldNumber = 2,
  };
  // .sim_msg.Orientation orientation = 3;
  bool has_orientation() const;
  void clear_orientation();
  const ::sim_msg::Orientation& orientation() const;
  ::sim_msg::Orientation* release_orientation();
  ::sim_msg::Orientation* mutable_orientation();
  void set_allocated_orientation(::sim_msg::Orientation* orientation);

  // double s = 1;
  void clear_s();
  double s() const;
  void set_s(double value);

  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.TrajectoryPosition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Orientation* orientation_;
  double s_;
  double t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldFieldNumber = 1,
    kRelativeWorldFieldNumber = 2,
    kRelativeObjectFieldNumber = 3,
    kRoadFieldNumber = 4,
    kRelativeRoadFieldNumber = 5,
    kLaneFieldNumber = 6,
    kRelativeLaneFieldNumber = 7,
    kRouteFieldNumber = 8,
    kGeoFieldNumber = 9,
    kTrajectoryFieldNumber = 10,
  };
  // .sim_msg.PositionWorld world = 1;
  bool has_world() const;
  void clear_world();
  const ::sim_msg::PositionWorld& world() const;
  ::sim_msg::PositionWorld* release_world();
  ::sim_msg::PositionWorld* mutable_world();
  void set_allocated_world(::sim_msg::PositionWorld* world);

  // .sim_msg.PositionRelativeWorld relative_world = 2;
  bool has_relative_world() const;
  void clear_relative_world();
  const ::sim_msg::PositionRelativeWorld& relative_world() const;
  ::sim_msg::PositionRelativeWorld* release_relative_world();
  ::sim_msg::PositionRelativeWorld* mutable_relative_world();
  void set_allocated_relative_world(::sim_msg::PositionRelativeWorld* relative_world);

  // .sim_msg.PositionRelativeObject relative_object = 3;
  bool has_relative_object() const;
  void clear_relative_object();
  const ::sim_msg::PositionRelativeObject& relative_object() const;
  ::sim_msg::PositionRelativeObject* release_relative_object();
  ::sim_msg::PositionRelativeObject* mutable_relative_object();
  void set_allocated_relative_object(::sim_msg::PositionRelativeObject* relative_object);

  // .sim_msg.PositionRoad road = 4;
  bool has_road() const;
  void clear_road();
  const ::sim_msg::PositionRoad& road() const;
  ::sim_msg::PositionRoad* release_road();
  ::sim_msg::PositionRoad* mutable_road();
  void set_allocated_road(::sim_msg::PositionRoad* road);

  // .sim_msg.PositionRelativeRoad relative_road = 5;
  bool has_relative_road() const;
  void clear_relative_road();
  const ::sim_msg::PositionRelativeRoad& relative_road() const;
  ::sim_msg::PositionRelativeRoad* release_relative_road();
  ::sim_msg::PositionRelativeRoad* mutable_relative_road();
  void set_allocated_relative_road(::sim_msg::PositionRelativeRoad* relative_road);

  // .sim_msg.PositionLane lane = 6;
  bool has_lane() const;
  void clear_lane();
  const ::sim_msg::PositionLane& lane() const;
  ::sim_msg::PositionLane* release_lane();
  ::sim_msg::PositionLane* mutable_lane();
  void set_allocated_lane(::sim_msg::PositionLane* lane);

  // .sim_msg.PositionRelativeLane relative_lane = 7;
  bool has_relative_lane() const;
  void clear_relative_lane();
  const ::sim_msg::PositionRelativeLane& relative_lane() const;
  ::sim_msg::PositionRelativeLane* release_relative_lane();
  ::sim_msg::PositionRelativeLane* mutable_relative_lane();
  void set_allocated_relative_lane(::sim_msg::PositionRelativeLane* relative_lane);

  // .sim_msg.PositionRoute route = 8;
  bool has_route() const;
  void clear_route();
  const ::sim_msg::PositionRoute& route() const;
  ::sim_msg::PositionRoute* release_route();
  ::sim_msg::PositionRoute* mutable_route();
  void set_allocated_route(::sim_msg::PositionRoute* route);

  // .sim_msg.GeoPosition geo = 9;
  bool has_geo() const;
  void clear_geo();
  const ::sim_msg::GeoPosition& geo() const;
  ::sim_msg::GeoPosition* release_geo();
  ::sim_msg::GeoPosition* mutable_geo();
  void set_allocated_geo(::sim_msg::GeoPosition* geo);

  // .sim_msg.TrajectoryPosition trajectory = 10;
  bool has_trajectory() const;
  void clear_trajectory();
  const ::sim_msg::TrajectoryPosition& trajectory() const;
  ::sim_msg::TrajectoryPosition* release_trajectory();
  ::sim_msg::TrajectoryPosition* mutable_trajectory();
  void set_allocated_trajectory(::sim_msg::TrajectoryPosition* trajectory);

  // @@protoc_insertion_point(class_scope:sim_msg.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::PositionWorld* world_;
  ::sim_msg::PositionRelativeWorld* relative_world_;
  ::sim_msg::PositionRelativeObject* relative_object_;
  ::sim_msg::PositionRoad* road_;
  ::sim_msg::PositionRelativeRoad* relative_road_;
  ::sim_msg::PositionLane* lane_;
  ::sim_msg::PositionRelativeLane* relative_lane_;
  ::sim_msg::PositionRoute* route_;
  ::sim_msg::GeoPosition* geo_;
  ::sim_msg::TrajectoryPosition* trajectory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// -------------------------------------------------------------------

class Waypoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Waypoint) */ {
 public:
  Waypoint();
  virtual ~Waypoint();

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint* New() const final {
    return CreateMaybeMessage<Waypoint>(nullptr);
  }

  Waypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Waypoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_waypoint_2eproto);
    return ::descriptor_table_waypoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kAccelFieldNumber = 4,
    kHeadingAngleFieldNumber = 5,
    kFrontWheelSteerAngleFieldNumber = 6,
    kIdFieldNumber = 1,
    kGearFieldNumber = 7,
  };
  // .sim_msg.Position position = 2;
  bool has_position() const;
  void clear_position();
  const ::sim_msg::Position& position() const;
  ::sim_msg::Position* release_position();
  ::sim_msg::Position* mutable_position();
  void set_allocated_position(::sim_msg::Position* position);

  // .google.protobuf.DoubleValue speed = 3;
  bool has_speed() const;
  void clear_speed();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& speed() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_speed();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_speed();
  void set_allocated_speed(PROTOBUF_NAMESPACE_ID::DoubleValue* speed);

  // .google.protobuf.DoubleValue accel = 4;
  bool has_accel() const;
  void clear_accel();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& accel() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_accel();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_accel();
  void set_allocated_accel(PROTOBUF_NAMESPACE_ID::DoubleValue* accel);

  // .google.protobuf.DoubleValue heading_angle = 5;
  bool has_heading_angle() const;
  void clear_heading_angle();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& heading_angle() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_heading_angle();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_heading_angle();
  void set_allocated_heading_angle(PROTOBUF_NAMESPACE_ID::DoubleValue* heading_angle);

  // .google.protobuf.DoubleValue front_wheel_steer_angle = 6;
  bool has_front_wheel_steer_angle() const;
  void clear_front_wheel_steer_angle();
  const PROTOBUF_NAMESPACE_ID::DoubleValue& front_wheel_steer_angle() const;
  PROTOBUF_NAMESPACE_ID::DoubleValue* release_front_wheel_steer_angle();
  PROTOBUF_NAMESPACE_ID::DoubleValue* mutable_front_wheel_steer_angle();
  void set_allocated_front_wheel_steer_angle(PROTOBUF_NAMESPACE_ID::DoubleValue* front_wheel_steer_angle);

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .sim_msg.GearSts gear = 7;
  void clear_gear();
  ::sim_msg::GearSts gear() const;
  void set_gear(::sim_msg::GearSts value);

  // @@protoc_insertion_point(class_scope:sim_msg.Waypoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Position* position_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* speed_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* accel_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* heading_angle_;
  PROTOBUF_NAMESPACE_ID::DoubleValue* front_wheel_steer_angle_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int gear_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_waypoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Orientation

// double h = 1;
inline void Orientation::clear_h() {
  h_ = 0;
}
inline double Orientation::h() const {
  // @@protoc_insertion_point(field_get:sim_msg.Orientation.h)
  return h_;
}
inline void Orientation::set_h(double value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Orientation.h)
}

// double p = 2;
inline void Orientation::clear_p() {
  p_ = 0;
}
inline double Orientation::p() const {
  // @@protoc_insertion_point(field_get:sim_msg.Orientation.p)
  return p_;
}
inline void Orientation::set_p(double value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Orientation.p)
}

// double r = 3;
inline void Orientation::clear_r() {
  r_ = 0;
}
inline double Orientation::r() const {
  // @@protoc_insertion_point(field_get:sim_msg.Orientation.r)
  return r_;
}
inline void Orientation::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Orientation.r)
}

// -------------------------------------------------------------------

// PositionWorld

// double x = 1;
inline void PositionWorld::clear_x() {
  x_ = 0;
}
inline double PositionWorld::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionWorld.x)
  return x_;
}
inline void PositionWorld::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionWorld.x)
}

// double y = 2;
inline void PositionWorld::clear_y() {
  y_ = 0;
}
inline double PositionWorld::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionWorld.y)
  return y_;
}
inline void PositionWorld::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionWorld.y)
}

// double z = 3;
inline void PositionWorld::clear_z() {
  z_ = 0;
}
inline double PositionWorld::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionWorld.z)
  return z_;
}
inline void PositionWorld::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionWorld.z)
}

// double h = 4;
inline void PositionWorld::clear_h() {
  h_ = 0;
}
inline double PositionWorld::h() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionWorld.h)
  return h_;
}
inline void PositionWorld::set_h(double value) {
  
  h_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionWorld.h)
}

// double p = 5;
inline void PositionWorld::clear_p() {
  p_ = 0;
}
inline double PositionWorld::p() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionWorld.p)
  return p_;
}
inline void PositionWorld::set_p(double value) {
  
  p_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionWorld.p)
}

// double r = 6;
inline void PositionWorld::clear_r() {
  r_ = 0;
}
inline double PositionWorld::r() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionWorld.r)
  return r_;
}
inline void PositionWorld::set_r(double value) {
  
  r_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionWorld.r)
}

// -------------------------------------------------------------------

// PositionRelativeWorld

// string entity_ref = 1;
inline void PositionRelativeWorld::clear_entity_ref() {
  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PositionRelativeWorld::entity_ref() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeWorld.entity_ref)
  return entity_ref_.GetNoArena();
}
inline void PositionRelativeWorld::set_entity_ref(const std::string& value) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeWorld.entity_ref)
}
inline void PositionRelativeWorld::set_entity_ref(std::string&& value) {
  
  entity_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.PositionRelativeWorld.entity_ref)
}
inline void PositionRelativeWorld::set_entity_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.PositionRelativeWorld.entity_ref)
}
inline void PositionRelativeWorld::set_entity_ref(const char* value, size_t size) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.PositionRelativeWorld.entity_ref)
}
inline std::string* PositionRelativeWorld::mutable_entity_ref() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeWorld.entity_ref)
  return entity_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PositionRelativeWorld::release_entity_ref() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeWorld.entity_ref)
  
  return entity_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PositionRelativeWorld::set_allocated_entity_ref(std::string* entity_ref) {
  if (entity_ref != nullptr) {
    
  } else {
    
  }
  entity_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_ref);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeWorld.entity_ref)
}

// double dx = 2;
inline void PositionRelativeWorld::clear_dx() {
  dx_ = 0;
}
inline double PositionRelativeWorld::dx() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeWorld.dx)
  return dx_;
}
inline void PositionRelativeWorld::set_dx(double value) {
  
  dx_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeWorld.dx)
}

// double dy = 3;
inline void PositionRelativeWorld::clear_dy() {
  dy_ = 0;
}
inline double PositionRelativeWorld::dy() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeWorld.dy)
  return dy_;
}
inline void PositionRelativeWorld::set_dy(double value) {
  
  dy_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeWorld.dy)
}

// double dz = 4;
inline void PositionRelativeWorld::clear_dz() {
  dz_ = 0;
}
inline double PositionRelativeWorld::dz() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeWorld.dz)
  return dz_;
}
inline void PositionRelativeWorld::set_dz(double value) {
  
  dz_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeWorld.dz)
}

// .sim_msg.Orientation orientation = 5;
inline bool PositionRelativeWorld::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void PositionRelativeWorld::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& PositionRelativeWorld::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeWorld.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* PositionRelativeWorld::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeWorld.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* PositionRelativeWorld::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeWorld.orientation)
  return orientation_;
}
inline void PositionRelativeWorld::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeWorld.orientation)
}

// -------------------------------------------------------------------

// PositionRelativeObject

// string entity_ref = 1;
inline void PositionRelativeObject::clear_entity_ref() {
  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PositionRelativeObject::entity_ref() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeObject.entity_ref)
  return entity_ref_.GetNoArena();
}
inline void PositionRelativeObject::set_entity_ref(const std::string& value) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeObject.entity_ref)
}
inline void PositionRelativeObject::set_entity_ref(std::string&& value) {
  
  entity_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.PositionRelativeObject.entity_ref)
}
inline void PositionRelativeObject::set_entity_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.PositionRelativeObject.entity_ref)
}
inline void PositionRelativeObject::set_entity_ref(const char* value, size_t size) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.PositionRelativeObject.entity_ref)
}
inline std::string* PositionRelativeObject::mutable_entity_ref() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeObject.entity_ref)
  return entity_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PositionRelativeObject::release_entity_ref() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeObject.entity_ref)
  
  return entity_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PositionRelativeObject::set_allocated_entity_ref(std::string* entity_ref) {
  if (entity_ref != nullptr) {
    
  } else {
    
  }
  entity_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_ref);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeObject.entity_ref)
}

// double dx = 2;
inline void PositionRelativeObject::clear_dx() {
  dx_ = 0;
}
inline double PositionRelativeObject::dx() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeObject.dx)
  return dx_;
}
inline void PositionRelativeObject::set_dx(double value) {
  
  dx_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeObject.dx)
}

// double dy = 3;
inline void PositionRelativeObject::clear_dy() {
  dy_ = 0;
}
inline double PositionRelativeObject::dy() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeObject.dy)
  return dy_;
}
inline void PositionRelativeObject::set_dy(double value) {
  
  dy_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeObject.dy)
}

// double dz = 4;
inline void PositionRelativeObject::clear_dz() {
  dz_ = 0;
}
inline double PositionRelativeObject::dz() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeObject.dz)
  return dz_;
}
inline void PositionRelativeObject::set_dz(double value) {
  
  dz_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeObject.dz)
}

// .sim_msg.Orientation orientation = 5;
inline bool PositionRelativeObject::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void PositionRelativeObject::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& PositionRelativeObject::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeObject.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* PositionRelativeObject::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeObject.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* PositionRelativeObject::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeObject.orientation)
  return orientation_;
}
inline void PositionRelativeObject::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeObject.orientation)
}

// -------------------------------------------------------------------

// PositionRoad

// uint64 road_id = 1;
inline void PositionRoad::clear_road_id() {
  road_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionRoad::road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRoad.road_id)
  return road_id_;
}
inline void PositionRoad::set_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRoad.road_id)
}

// double s = 2;
inline void PositionRoad::clear_s() {
  s_ = 0;
}
inline double PositionRoad::s() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRoad.s)
  return s_;
}
inline void PositionRoad::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRoad.s)
}

// double t = 3;
inline void PositionRoad::clear_t() {
  t_ = 0;
}
inline double PositionRoad::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRoad.t)
  return t_;
}
inline void PositionRoad::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRoad.t)
}

// .sim_msg.Orientation orientation = 5;
inline bool PositionRoad::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void PositionRoad::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& PositionRoad::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.PositionRoad.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* PositionRoad::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRoad.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* PositionRoad::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRoad.orientation)
  return orientation_;
}
inline void PositionRoad::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRoad.orientation)
}

// -------------------------------------------------------------------

// PositionRelativeRoad

// string entity_ref = 1;
inline void PositionRelativeRoad::clear_entity_ref() {
  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PositionRelativeRoad::entity_ref() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeRoad.entity_ref)
  return entity_ref_.GetNoArena();
}
inline void PositionRelativeRoad::set_entity_ref(const std::string& value) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeRoad.entity_ref)
}
inline void PositionRelativeRoad::set_entity_ref(std::string&& value) {
  
  entity_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.PositionRelativeRoad.entity_ref)
}
inline void PositionRelativeRoad::set_entity_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.PositionRelativeRoad.entity_ref)
}
inline void PositionRelativeRoad::set_entity_ref(const char* value, size_t size) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.PositionRelativeRoad.entity_ref)
}
inline std::string* PositionRelativeRoad::mutable_entity_ref() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeRoad.entity_ref)
  return entity_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PositionRelativeRoad::release_entity_ref() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeRoad.entity_ref)
  
  return entity_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PositionRelativeRoad::set_allocated_entity_ref(std::string* entity_ref) {
  if (entity_ref != nullptr) {
    
  } else {
    
  }
  entity_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_ref);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeRoad.entity_ref)
}

// double ds = 2;
inline void PositionRelativeRoad::clear_ds() {
  ds_ = 0;
}
inline double PositionRelativeRoad::ds() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeRoad.ds)
  return ds_;
}
inline void PositionRelativeRoad::set_ds(double value) {
  
  ds_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeRoad.ds)
}

// double dt = 3;
inline void PositionRelativeRoad::clear_dt() {
  dt_ = 0;
}
inline double PositionRelativeRoad::dt() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeRoad.dt)
  return dt_;
}
inline void PositionRelativeRoad::set_dt(double value) {
  
  dt_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeRoad.dt)
}

// .sim_msg.Orientation orientation = 4;
inline bool PositionRelativeRoad::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void PositionRelativeRoad::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& PositionRelativeRoad::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeRoad.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* PositionRelativeRoad::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeRoad.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* PositionRelativeRoad::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeRoad.orientation)
  return orientation_;
}
inline void PositionRelativeRoad::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeRoad.orientation)
}

// -------------------------------------------------------------------

// PositionLane

// uint64 road_id = 1;
inline void PositionLane::clear_road_id() {
  road_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionLane::road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionLane.road_id)
  return road_id_;
}
inline void PositionLane::set_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionLane.road_id)
}

// int64 lane_id = 3;
inline void PositionLane::clear_lane_id() {
  lane_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PositionLane::lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionLane.lane_id)
  return lane_id_;
}
inline void PositionLane::set_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionLane.lane_id)
}

// double offset = 4;
inline void PositionLane::clear_offset() {
  offset_ = 0;
}
inline double PositionLane::offset() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionLane.offset)
  return offset_;
}
inline void PositionLane::set_offset(double value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionLane.offset)
}

// double s = 5;
inline void PositionLane::clear_s() {
  s_ = 0;
}
inline double PositionLane::s() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionLane.s)
  return s_;
}
inline void PositionLane::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionLane.s)
}

// .sim_msg.Orientation orientation = 6;
inline bool PositionLane::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void PositionLane::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& PositionLane::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.PositionLane.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* PositionLane::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionLane.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* PositionLane::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionLane.orientation)
  return orientation_;
}
inline void PositionLane::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionLane.orientation)
}

// -------------------------------------------------------------------

// PositionRelativeLane

// string entity_ref = 1;
inline void PositionRelativeLane::clear_entity_ref() {
  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PositionRelativeLane::entity_ref() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeLane.entity_ref)
  return entity_ref_.GetNoArena();
}
inline void PositionRelativeLane::set_entity_ref(const std::string& value) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeLane.entity_ref)
}
inline void PositionRelativeLane::set_entity_ref(std::string&& value) {
  
  entity_ref_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.PositionRelativeLane.entity_ref)
}
inline void PositionRelativeLane::set_entity_ref(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.PositionRelativeLane.entity_ref)
}
inline void PositionRelativeLane::set_entity_ref(const char* value, size_t size) {
  
  entity_ref_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.PositionRelativeLane.entity_ref)
}
inline std::string* PositionRelativeLane::mutable_entity_ref() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeLane.entity_ref)
  return entity_ref_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PositionRelativeLane::release_entity_ref() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeLane.entity_ref)
  
  return entity_ref_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PositionRelativeLane::set_allocated_entity_ref(std::string* entity_ref) {
  if (entity_ref != nullptr) {
    
  } else {
    
  }
  entity_ref_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity_ref);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeLane.entity_ref)
}

// int32 dlane = 2;
inline void PositionRelativeLane::clear_dlane() {
  dlane_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PositionRelativeLane::dlane() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeLane.dlane)
  return dlane_;
}
inline void PositionRelativeLane::set_dlane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dlane_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeLane.dlane)
}

// double ds = 3;
inline void PositionRelativeLane::clear_ds() {
  ds_ = 0;
}
inline double PositionRelativeLane::ds() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeLane.ds)
  return ds_;
}
inline void PositionRelativeLane::set_ds(double value) {
  
  ds_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeLane.ds)
}

// double offset = 4;
inline void PositionRelativeLane::clear_offset() {
  offset_ = 0;
}
inline double PositionRelativeLane::offset() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeLane.offset)
  return offset_;
}
inline void PositionRelativeLane::set_offset(double value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRelativeLane.offset)
}

// .sim_msg.Orientation orientation = 5;
inline bool PositionRelativeLane::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void PositionRelativeLane::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& PositionRelativeLane::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.PositionRelativeLane.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* PositionRelativeLane::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRelativeLane.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* PositionRelativeLane::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRelativeLane.orientation)
  return orientation_;
}
inline void PositionRelativeLane::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRelativeLane.orientation)
}

// -------------------------------------------------------------------

// PositionRoute

// uint64 route_ref = 1;
inline void PositionRoute::clear_route_ref() {
  route_ref_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PositionRoute::route_ref() const {
  // @@protoc_insertion_point(field_get:sim_msg.PositionRoute.route_ref)
  return route_ref_;
}
inline void PositionRoute::set_route_ref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  route_ref_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PositionRoute.route_ref)
}

// .sim_msg.Orientation orientation = 2;
inline bool PositionRoute::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void PositionRoute::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& PositionRoute::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.PositionRoute.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* PositionRoute::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.PositionRoute.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* PositionRoute::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PositionRoute.orientation)
  return orientation_;
}
inline void PositionRoute::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PositionRoute.orientation)
}

// -------------------------------------------------------------------

// GeoPosition

// double longitude = 1;
inline void GeoPosition::clear_longitude() {
  longitude_ = 0;
}
inline double GeoPosition::longitude() const {
  // @@protoc_insertion_point(field_get:sim_msg.GeoPosition.longitude)
  return longitude_;
}
inline void GeoPosition::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GeoPosition.longitude)
}

// double latitude = 2;
inline void GeoPosition::clear_latitude() {
  latitude_ = 0;
}
inline double GeoPosition::latitude() const {
  // @@protoc_insertion_point(field_get:sim_msg.GeoPosition.latitude)
  return latitude_;
}
inline void GeoPosition::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GeoPosition.latitude)
}

// double altitude = 3;
inline void GeoPosition::clear_altitude() {
  altitude_ = 0;
}
inline double GeoPosition::altitude() const {
  // @@protoc_insertion_point(field_get:sim_msg.GeoPosition.altitude)
  return altitude_;
}
inline void GeoPosition::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.GeoPosition.altitude)
}

// .sim_msg.Orientation orientation = 4;
inline bool GeoPosition::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void GeoPosition::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& GeoPosition::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.GeoPosition.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* GeoPosition::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.GeoPosition.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* GeoPosition::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.GeoPosition.orientation)
  return orientation_;
}
inline void GeoPosition::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.GeoPosition.orientation)
}

// -------------------------------------------------------------------

// TrajectoryPosition

// double s = 1;
inline void TrajectoryPosition::clear_s() {
  s_ = 0;
}
inline double TrajectoryPosition::s() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPosition.s)
  return s_;
}
inline void TrajectoryPosition::set_s(double value) {
  
  s_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPosition.s)
}

// double t = 2;
inline void TrajectoryPosition::clear_t() {
  t_ = 0;
}
inline double TrajectoryPosition::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPosition.t)
  return t_;
}
inline void TrajectoryPosition::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPosition.t)
}

// .sim_msg.Orientation orientation = 3;
inline bool TrajectoryPosition::has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline void TrajectoryPosition::clear_orientation() {
  if (GetArenaNoVirtual() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::sim_msg::Orientation& TrajectoryPosition::orientation() const {
  const ::sim_msg::Orientation* p = orientation_;
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPosition.orientation)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Orientation*>(
      &::sim_msg::_Orientation_default_instance_);
}
inline ::sim_msg::Orientation* TrajectoryPosition::release_orientation() {
  // @@protoc_insertion_point(field_release:sim_msg.TrajectoryPosition.orientation)
  
  ::sim_msg::Orientation* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::sim_msg::Orientation* TrajectoryPosition::mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Orientation>(GetArenaNoVirtual());
    orientation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.TrajectoryPosition.orientation)
  return orientation_;
}
inline void TrajectoryPosition::set_allocated_orientation(::sim_msg::Orientation* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.TrajectoryPosition.orientation)
}

// -------------------------------------------------------------------

// Position

// .sim_msg.PositionWorld world = 1;
inline bool Position::has_world() const {
  return this != internal_default_instance() && world_ != nullptr;
}
inline void Position::clear_world() {
  if (GetArenaNoVirtual() == nullptr && world_ != nullptr) {
    delete world_;
  }
  world_ = nullptr;
}
inline const ::sim_msg::PositionWorld& Position::world() const {
  const ::sim_msg::PositionWorld* p = world_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.world)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionWorld*>(
      &::sim_msg::_PositionWorld_default_instance_);
}
inline ::sim_msg::PositionWorld* Position::release_world() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.world)
  
  ::sim_msg::PositionWorld* temp = world_;
  world_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionWorld* Position::mutable_world() {
  
  if (world_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionWorld>(GetArenaNoVirtual());
    world_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.world)
  return world_;
}
inline void Position::set_allocated_world(::sim_msg::PositionWorld* world) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete world_;
  }
  if (world) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      world = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world, submessage_arena);
    }
    
  } else {
    
  }
  world_ = world;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.world)
}

// .sim_msg.PositionRelativeWorld relative_world = 2;
inline bool Position::has_relative_world() const {
  return this != internal_default_instance() && relative_world_ != nullptr;
}
inline void Position::clear_relative_world() {
  if (GetArenaNoVirtual() == nullptr && relative_world_ != nullptr) {
    delete relative_world_;
  }
  relative_world_ = nullptr;
}
inline const ::sim_msg::PositionRelativeWorld& Position::relative_world() const {
  const ::sim_msg::PositionRelativeWorld* p = relative_world_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.relative_world)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionRelativeWorld*>(
      &::sim_msg::_PositionRelativeWorld_default_instance_);
}
inline ::sim_msg::PositionRelativeWorld* Position::release_relative_world() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.relative_world)
  
  ::sim_msg::PositionRelativeWorld* temp = relative_world_;
  relative_world_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionRelativeWorld* Position::mutable_relative_world() {
  
  if (relative_world_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionRelativeWorld>(GetArenaNoVirtual());
    relative_world_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.relative_world)
  return relative_world_;
}
inline void Position::set_allocated_relative_world(::sim_msg::PositionRelativeWorld* relative_world) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relative_world_;
  }
  if (relative_world) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_world = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_world, submessage_arena);
    }
    
  } else {
    
  }
  relative_world_ = relative_world;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.relative_world)
}

// .sim_msg.PositionRelativeObject relative_object = 3;
inline bool Position::has_relative_object() const {
  return this != internal_default_instance() && relative_object_ != nullptr;
}
inline void Position::clear_relative_object() {
  if (GetArenaNoVirtual() == nullptr && relative_object_ != nullptr) {
    delete relative_object_;
  }
  relative_object_ = nullptr;
}
inline const ::sim_msg::PositionRelativeObject& Position::relative_object() const {
  const ::sim_msg::PositionRelativeObject* p = relative_object_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.relative_object)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionRelativeObject*>(
      &::sim_msg::_PositionRelativeObject_default_instance_);
}
inline ::sim_msg::PositionRelativeObject* Position::release_relative_object() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.relative_object)
  
  ::sim_msg::PositionRelativeObject* temp = relative_object_;
  relative_object_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionRelativeObject* Position::mutable_relative_object() {
  
  if (relative_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionRelativeObject>(GetArenaNoVirtual());
    relative_object_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.relative_object)
  return relative_object_;
}
inline void Position::set_allocated_relative_object(::sim_msg::PositionRelativeObject* relative_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relative_object_;
  }
  if (relative_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_object, submessage_arena);
    }
    
  } else {
    
  }
  relative_object_ = relative_object;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.relative_object)
}

// .sim_msg.PositionRoad road = 4;
inline bool Position::has_road() const {
  return this != internal_default_instance() && road_ != nullptr;
}
inline void Position::clear_road() {
  if (GetArenaNoVirtual() == nullptr && road_ != nullptr) {
    delete road_;
  }
  road_ = nullptr;
}
inline const ::sim_msg::PositionRoad& Position::road() const {
  const ::sim_msg::PositionRoad* p = road_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.road)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionRoad*>(
      &::sim_msg::_PositionRoad_default_instance_);
}
inline ::sim_msg::PositionRoad* Position::release_road() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.road)
  
  ::sim_msg::PositionRoad* temp = road_;
  road_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionRoad* Position::mutable_road() {
  
  if (road_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionRoad>(GetArenaNoVirtual());
    road_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.road)
  return road_;
}
inline void Position::set_allocated_road(::sim_msg::PositionRoad* road) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete road_;
  }
  if (road) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      road = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, road, submessage_arena);
    }
    
  } else {
    
  }
  road_ = road;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.road)
}

// .sim_msg.PositionRelativeRoad relative_road = 5;
inline bool Position::has_relative_road() const {
  return this != internal_default_instance() && relative_road_ != nullptr;
}
inline void Position::clear_relative_road() {
  if (GetArenaNoVirtual() == nullptr && relative_road_ != nullptr) {
    delete relative_road_;
  }
  relative_road_ = nullptr;
}
inline const ::sim_msg::PositionRelativeRoad& Position::relative_road() const {
  const ::sim_msg::PositionRelativeRoad* p = relative_road_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.relative_road)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionRelativeRoad*>(
      &::sim_msg::_PositionRelativeRoad_default_instance_);
}
inline ::sim_msg::PositionRelativeRoad* Position::release_relative_road() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.relative_road)
  
  ::sim_msg::PositionRelativeRoad* temp = relative_road_;
  relative_road_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionRelativeRoad* Position::mutable_relative_road() {
  
  if (relative_road_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionRelativeRoad>(GetArenaNoVirtual());
    relative_road_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.relative_road)
  return relative_road_;
}
inline void Position::set_allocated_relative_road(::sim_msg::PositionRelativeRoad* relative_road) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relative_road_;
  }
  if (relative_road) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_road = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_road, submessage_arena);
    }
    
  } else {
    
  }
  relative_road_ = relative_road;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.relative_road)
}

// .sim_msg.PositionLane lane = 6;
inline bool Position::has_lane() const {
  return this != internal_default_instance() && lane_ != nullptr;
}
inline void Position::clear_lane() {
  if (GetArenaNoVirtual() == nullptr && lane_ != nullptr) {
    delete lane_;
  }
  lane_ = nullptr;
}
inline const ::sim_msg::PositionLane& Position::lane() const {
  const ::sim_msg::PositionLane* p = lane_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.lane)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionLane*>(
      &::sim_msg::_PositionLane_default_instance_);
}
inline ::sim_msg::PositionLane* Position::release_lane() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.lane)
  
  ::sim_msg::PositionLane* temp = lane_;
  lane_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionLane* Position::mutable_lane() {
  
  if (lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionLane>(GetArenaNoVirtual());
    lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.lane)
  return lane_;
}
inline void Position::set_allocated_lane(::sim_msg::PositionLane* lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_;
  }
  if (lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane, submessage_arena);
    }
    
  } else {
    
  }
  lane_ = lane;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.lane)
}

// .sim_msg.PositionRelativeLane relative_lane = 7;
inline bool Position::has_relative_lane() const {
  return this != internal_default_instance() && relative_lane_ != nullptr;
}
inline void Position::clear_relative_lane() {
  if (GetArenaNoVirtual() == nullptr && relative_lane_ != nullptr) {
    delete relative_lane_;
  }
  relative_lane_ = nullptr;
}
inline const ::sim_msg::PositionRelativeLane& Position::relative_lane() const {
  const ::sim_msg::PositionRelativeLane* p = relative_lane_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.relative_lane)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionRelativeLane*>(
      &::sim_msg::_PositionRelativeLane_default_instance_);
}
inline ::sim_msg::PositionRelativeLane* Position::release_relative_lane() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.relative_lane)
  
  ::sim_msg::PositionRelativeLane* temp = relative_lane_;
  relative_lane_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionRelativeLane* Position::mutable_relative_lane() {
  
  if (relative_lane_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionRelativeLane>(GetArenaNoVirtual());
    relative_lane_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.relative_lane)
  return relative_lane_;
}
inline void Position::set_allocated_relative_lane(::sim_msg::PositionRelativeLane* relative_lane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete relative_lane_;
  }
  if (relative_lane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_lane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_lane, submessage_arena);
    }
    
  } else {
    
  }
  relative_lane_ = relative_lane;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.relative_lane)
}

// .sim_msg.PositionRoute route = 8;
inline bool Position::has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline void Position::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::sim_msg::PositionRoute& Position::route() const {
  const ::sim_msg::PositionRoute* p = route_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.route)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::PositionRoute*>(
      &::sim_msg::_PositionRoute_default_instance_);
}
inline ::sim_msg::PositionRoute* Position::release_route() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.route)
  
  ::sim_msg::PositionRoute* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::sim_msg::PositionRoute* Position::mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::PositionRoute>(GetArenaNoVirtual());
    route_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.route)
  return route_;
}
inline void Position::set_allocated_route(::sim_msg::PositionRoute* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.route)
}

// .sim_msg.GeoPosition geo = 9;
inline bool Position::has_geo() const {
  return this != internal_default_instance() && geo_ != nullptr;
}
inline void Position::clear_geo() {
  if (GetArenaNoVirtual() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
}
inline const ::sim_msg::GeoPosition& Position::geo() const {
  const ::sim_msg::GeoPosition* p = geo_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.geo)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::GeoPosition*>(
      &::sim_msg::_GeoPosition_default_instance_);
}
inline ::sim_msg::GeoPosition* Position::release_geo() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.geo)
  
  ::sim_msg::GeoPosition* temp = geo_;
  geo_ = nullptr;
  return temp;
}
inline ::sim_msg::GeoPosition* Position::mutable_geo() {
  
  if (geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::GeoPosition>(GetArenaNoVirtual());
    geo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.geo)
  return geo_;
}
inline void Position::set_allocated_geo(::sim_msg::GeoPosition* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geo_;
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.geo)
}

// .sim_msg.TrajectoryPosition trajectory = 10;
inline bool Position::has_trajectory() const {
  return this != internal_default_instance() && trajectory_ != nullptr;
}
inline void Position::clear_trajectory() {
  if (GetArenaNoVirtual() == nullptr && trajectory_ != nullptr) {
    delete trajectory_;
  }
  trajectory_ = nullptr;
}
inline const ::sim_msg::TrajectoryPosition& Position::trajectory() const {
  const ::sim_msg::TrajectoryPosition* p = trajectory_;
  // @@protoc_insertion_point(field_get:sim_msg.Position.trajectory)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::TrajectoryPosition*>(
      &::sim_msg::_TrajectoryPosition_default_instance_);
}
inline ::sim_msg::TrajectoryPosition* Position::release_trajectory() {
  // @@protoc_insertion_point(field_release:sim_msg.Position.trajectory)
  
  ::sim_msg::TrajectoryPosition* temp = trajectory_;
  trajectory_ = nullptr;
  return temp;
}
inline ::sim_msg::TrajectoryPosition* Position::mutable_trajectory() {
  
  if (trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::TrajectoryPosition>(GetArenaNoVirtual());
    trajectory_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Position.trajectory)
  return trajectory_;
}
inline void Position::set_allocated_trajectory(::sim_msg::TrajectoryPosition* trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trajectory_;
  }
  if (trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trajectory, submessage_arena);
    }
    
  } else {
    
  }
  trajectory_ = trajectory;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Position.trajectory)
}

// -------------------------------------------------------------------

// Waypoint

// int32 id = 1;
inline void Waypoint::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Waypoint::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Waypoint.id)
  return id_;
}
inline void Waypoint::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Waypoint.id)
}

// .sim_msg.Position position = 2;
inline bool Waypoint::has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline void Waypoint::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::sim_msg::Position& Waypoint::position() const {
  const ::sim_msg::Position* p = position_;
  // @@protoc_insertion_point(field_get:sim_msg.Waypoint.position)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::Position*>(
      &::sim_msg::_Position_default_instance_);
}
inline ::sim_msg::Position* Waypoint::release_position() {
  // @@protoc_insertion_point(field_release:sim_msg.Waypoint.position)
  
  ::sim_msg::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::sim_msg::Position* Waypoint::mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Waypoint.position)
  return position_;
}
inline void Waypoint::set_allocated_position(::sim_msg::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Waypoint.position)
}

// .google.protobuf.DoubleValue speed = 3;
inline bool Waypoint::has_speed() const {
  return this != internal_default_instance() && speed_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Waypoint::speed() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = speed_;
  // @@protoc_insertion_point(field_get:sim_msg.Waypoint.speed)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::release_speed() {
  // @@protoc_insertion_point(field_release:sim_msg.Waypoint.speed)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = speed_;
  speed_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::mutable_speed() {
  
  if (speed_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaNoVirtual());
    speed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Waypoint.speed)
  return speed_;
}
inline void Waypoint::set_allocated_speed(PROTOBUF_NAMESPACE_ID::DoubleValue* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed_);
  }
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(speed)->GetArena();
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    
  } else {
    
  }
  speed_ = speed;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Waypoint.speed)
}

// .google.protobuf.DoubleValue accel = 4;
inline bool Waypoint::has_accel() const {
  return this != internal_default_instance() && accel_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Waypoint::accel() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = accel_;
  // @@protoc_insertion_point(field_get:sim_msg.Waypoint.accel)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::release_accel() {
  // @@protoc_insertion_point(field_release:sim_msg.Waypoint.accel)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = accel_;
  accel_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::mutable_accel() {
  
  if (accel_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaNoVirtual());
    accel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Waypoint.accel)
  return accel_;
}
inline void Waypoint::set_allocated_accel(PROTOBUF_NAMESPACE_ID::DoubleValue* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel_);
  }
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(accel)->GetArena();
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    
  } else {
    
  }
  accel_ = accel;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Waypoint.accel)
}

// .google.protobuf.DoubleValue heading_angle = 5;
inline bool Waypoint::has_heading_angle() const {
  return this != internal_default_instance() && heading_angle_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Waypoint::heading_angle() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = heading_angle_;
  // @@protoc_insertion_point(field_get:sim_msg.Waypoint.heading_angle)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::release_heading_angle() {
  // @@protoc_insertion_point(field_release:sim_msg.Waypoint.heading_angle)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = heading_angle_;
  heading_angle_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::mutable_heading_angle() {
  
  if (heading_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaNoVirtual());
    heading_angle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Waypoint.heading_angle)
  return heading_angle_;
}
inline void Waypoint::set_allocated_heading_angle(PROTOBUF_NAMESPACE_ID::DoubleValue* heading_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_angle_);
  }
  if (heading_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(heading_angle)->GetArena();
    if (message_arena != submessage_arena) {
      heading_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heading_angle, submessage_arena);
    }
    
  } else {
    
  }
  heading_angle_ = heading_angle;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Waypoint.heading_angle)
}

// .google.protobuf.DoubleValue front_wheel_steer_angle = 6;
inline bool Waypoint::has_front_wheel_steer_angle() const {
  return this != internal_default_instance() && front_wheel_steer_angle_ != nullptr;
}
inline const PROTOBUF_NAMESPACE_ID::DoubleValue& Waypoint::front_wheel_steer_angle() const {
  const PROTOBUF_NAMESPACE_ID::DoubleValue* p = front_wheel_steer_angle_;
  // @@protoc_insertion_point(field_get:sim_msg.Waypoint.front_wheel_steer_angle)
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::DoubleValue*>(
      &PROTOBUF_NAMESPACE_ID::_DoubleValue_default_instance_);
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::release_front_wheel_steer_angle() {
  // @@protoc_insertion_point(field_release:sim_msg.Waypoint.front_wheel_steer_angle)
  
  PROTOBUF_NAMESPACE_ID::DoubleValue* temp = front_wheel_steer_angle_;
  front_wheel_steer_angle_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::DoubleValue* Waypoint::mutable_front_wheel_steer_angle() {
  
  if (front_wheel_steer_angle_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::DoubleValue>(GetArenaNoVirtual());
    front_wheel_steer_angle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Waypoint.front_wheel_steer_angle)
  return front_wheel_steer_angle_;
}
inline void Waypoint::set_allocated_front_wheel_steer_angle(PROTOBUF_NAMESPACE_ID::DoubleValue* front_wheel_steer_angle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_wheel_steer_angle_);
  }
  if (front_wheel_steer_angle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(front_wheel_steer_angle)->GetArena();
    if (message_arena != submessage_arena) {
      front_wheel_steer_angle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, front_wheel_steer_angle, submessage_arena);
    }
    
  } else {
    
  }
  front_wheel_steer_angle_ = front_wheel_steer_angle;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Waypoint.front_wheel_steer_angle)
}

// .sim_msg.GearSts gear = 7;
inline void Waypoint::clear_gear() {
  gear_ = 0;
}
inline ::sim_msg::GearSts Waypoint::gear() const {
  // @@protoc_insertion_point(field_get:sim_msg.Waypoint.gear)
  return static_cast< ::sim_msg::GearSts >(gear_);
}
inline void Waypoint::set_gear(::sim_msg::GearSts value) {
  
  gear_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Waypoint.gear)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_waypoint_2eproto
