// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_groundtruth.proto
#pragma warning (disable : 4125)

#include "osi_groundtruth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fenvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EnvironmentalConditions_osi_5fenvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Lane_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LaneBoundary_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicallane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LogicalLane_osi_5flogicallane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicallane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_MovingObject_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5foccupant_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Occupant_osi_5foccupant_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5freferenceline_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReferenceLine_osi_5freferenceline_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5froadmarking_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_RoadMarking_osi_5froadmarking_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_StationaryObject_osi_5fobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficlight_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_TrafficLight_osi_5ftrafficlight_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficsign_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TrafficSign_osi_5ftrafficsign_2eproto;
namespace osi3 {
class GroundTruthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GroundTruth> _instance;
} _GroundTruth_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_GroundTruth_osi_5fgroundtruth_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_GroundTruth_default_instance_;
    new (ptr) ::osi3::GroundTruth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::GroundTruth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<15> scc_info_GroundTruth_osi_5fgroundtruth_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 15, InitDefaultsscc_info_GroundTruth_osi_5fgroundtruth_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_StationaryObject_osi_5fobject_2eproto.base,
      &scc_info_MovingObject_osi_5fobject_2eproto.base,
      &scc_info_TrafficSign_osi_5ftrafficsign_2eproto.base,
      &scc_info_TrafficLight_osi_5ftrafficlight_2eproto.base,
      &scc_info_RoadMarking_osi_5froadmarking_2eproto.base,
      &scc_info_LaneBoundary_osi_5flane_2eproto.base,
      &scc_info_Lane_osi_5flane_2eproto.base,
      &scc_info_Occupant_osi_5foccupant_2eproto.base,
      &scc_info_EnvironmentalConditions_osi_5fenvironment_2eproto.base,
      &scc_info_ReferenceLine_osi_5freferenceline_2eproto.base,
      &scc_info_LogicalLaneBoundary_osi_5flogicallane_2eproto.base,
      &scc_info_LogicalLane_osi_5flogicallane_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fgroundtruth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fgroundtruth_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fgroundtruth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fgroundtruth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, host_vehicle_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, stationary_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, moving_object_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, traffic_sign_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, traffic_light_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, road_marking_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, lane_boundary_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, lane_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, occupant_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, environmental_conditions_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, country_code_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, proj_string_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, map_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, model_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, reference_line_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, logical_lane_boundary_),
  PROTOBUF_FIELD_OFFSET(::osi3::GroundTruth, logical_lane_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::GroundTruth)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_GroundTruth_default_instance_),
};

const char descriptor_table_protodef_osi_5fgroundtruth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_groundtruth.proto\022\004osi3\032\021osi_versi"
  "on.proto\032\020osi_common.proto\032\025osi_environm"
  "ent.proto\032\025osi_trafficsign.proto\032\026osi_tr"
  "afficlight.proto\032\025osi_roadmarking.proto\032"
  "\016osi_lane.proto\032\025osi_logicallane.proto\032\027"
  "osi_referenceline.proto\032\020osi_object.prot"
  "o\032\022osi_occupant.proto\"\363\005\n\013GroundTruth\022\'\n"
  "\007version\030\001 \001(\0132\026.osi3.InterfaceVersion\022\""
  "\n\ttimestamp\030\002 \001(\0132\017.osi3.Timestamp\022)\n\017ho"
  "st_vehicle_id\030\003 \001(\0132\020.osi3.Identifier\0221\n"
  "\021stationary_object\030\004 \003(\0132\026.osi3.Stationa"
  "ryObject\022)\n\rmoving_object\030\005 \003(\0132\022.osi3.M"
  "ovingObject\022\'\n\014traffic_sign\030\006 \003(\0132\021.osi3"
  ".TrafficSign\022)\n\rtraffic_light\030\007 \003(\0132\022.os"
  "i3.TrafficLight\022\'\n\014road_marking\030\010 \003(\0132\021."
  "osi3.RoadMarking\022)\n\rlane_boundary\030\t \003(\0132"
  "\022.osi3.LaneBoundary\022\030\n\004lane\030\n \003(\0132\n.osi3"
  ".Lane\022 \n\010occupant\030\013 \003(\0132\016.osi3.Occupant\022"
  "\?\n\030environmental_conditions\030\014 \001(\0132\035.osi3"
  ".EnvironmentalConditions\022\024\n\014country_code"
  "\030\r \001(\r\022\023\n\013proj_string\030\016 \001(\t\022\025\n\rmap_refer"
  "ence\030\017 \001(\t\022\027\n\017model_reference\030\020 \001(\t\022+\n\016r"
  "eference_line\030\021 \003(\0132\023.osi3.ReferenceLine"
  "\0228\n\025logical_lane_boundary\030\022 \003(\0132\031.osi3.L"
  "ogicalLaneBoundary\022\'\n\014logical_lane\030\023 \003(\013"
  "2\021.osi3.LogicalLaneB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fgroundtruth_2eproto_deps[11] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fenvironment_2eproto,
  &::descriptor_table_osi_5flane_2eproto,
  &::descriptor_table_osi_5flogicallane_2eproto,
  &::descriptor_table_osi_5fobject_2eproto,
  &::descriptor_table_osi_5foccupant_2eproto,
  &::descriptor_table_osi_5freferenceline_2eproto,
  &::descriptor_table_osi_5froadmarking_2eproto,
  &::descriptor_table_osi_5ftrafficlight_2eproto,
  &::descriptor_table_osi_5ftrafficsign_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fgroundtruth_2eproto_sccs[1] = {
  &scc_info_GroundTruth_osi_5fgroundtruth_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fgroundtruth_2eproto_once;
static bool descriptor_table_osi_5fgroundtruth_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fgroundtruth_2eproto = {
  &descriptor_table_osi_5fgroundtruth_2eproto_initialized, descriptor_table_protodef_osi_5fgroundtruth_2eproto, "osi_groundtruth.proto", 1031,
  &descriptor_table_osi_5fgroundtruth_2eproto_once, descriptor_table_osi_5fgroundtruth_2eproto_sccs, descriptor_table_osi_5fgroundtruth_2eproto_deps, 1, 11,
  schemas, file_default_instances, TableStruct_osi_5fgroundtruth_2eproto::offsets,
  file_level_metadata_osi_5fgroundtruth_2eproto, 1, file_level_enum_descriptors_osi_5fgroundtruth_2eproto, file_level_service_descriptors_osi_5fgroundtruth_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fgroundtruth_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fgroundtruth_2eproto), true);
namespace osi3 {

// ===================================================================

void GroundTruth::InitAsDefaultInstance() {
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->host_vehicle_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_GroundTruth_default_instance_._instance.get_mutable()->environmental_conditions_ = const_cast< ::osi3::EnvironmentalConditions*>(
      ::osi3::EnvironmentalConditions::internal_default_instance());
}
class GroundTruth::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const GroundTruth* msg);
  static const ::osi3::Timestamp& timestamp(const GroundTruth* msg);
  static const ::osi3::Identifier& host_vehicle_id(const GroundTruth* msg);
  static const ::osi3::EnvironmentalConditions& environmental_conditions(const GroundTruth* msg);
};

const ::osi3::InterfaceVersion&
GroundTruth::_Internal::version(const GroundTruth* msg) {
  return *msg->version_;
}
const ::osi3::Timestamp&
GroundTruth::_Internal::timestamp(const GroundTruth* msg) {
  return *msg->timestamp_;
}
const ::osi3::Identifier&
GroundTruth::_Internal::host_vehicle_id(const GroundTruth* msg) {
  return *msg->host_vehicle_id_;
}
const ::osi3::EnvironmentalConditions&
GroundTruth::_Internal::environmental_conditions(const GroundTruth* msg) {
  return *msg->environmental_conditions_;
}
void GroundTruth::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
void GroundTruth::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void GroundTruth::clear_host_vehicle_id() {
  if (GetArenaNoVirtual() == nullptr && host_vehicle_id_ != nullptr) {
    delete host_vehicle_id_;
  }
  host_vehicle_id_ = nullptr;
}
void GroundTruth::clear_stationary_object() {
  stationary_object_.Clear();
}
void GroundTruth::clear_moving_object() {
  moving_object_.Clear();
}
void GroundTruth::clear_traffic_sign() {
  traffic_sign_.Clear();
}
void GroundTruth::clear_traffic_light() {
  traffic_light_.Clear();
}
void GroundTruth::clear_road_marking() {
  road_marking_.Clear();
}
void GroundTruth::clear_lane_boundary() {
  lane_boundary_.Clear();
}
void GroundTruth::clear_lane() {
  lane_.Clear();
}
void GroundTruth::clear_occupant() {
  occupant_.Clear();
}
void GroundTruth::clear_environmental_conditions() {
  if (GetArenaNoVirtual() == nullptr && environmental_conditions_ != nullptr) {
    delete environmental_conditions_;
  }
  environmental_conditions_ = nullptr;
}
void GroundTruth::clear_reference_line() {
  reference_line_.Clear();
}
void GroundTruth::clear_logical_lane_boundary() {
  logical_lane_boundary_.Clear();
}
void GroundTruth::clear_logical_lane() {
  logical_lane_.Clear();
}
GroundTruth::GroundTruth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.GroundTruth)
}
GroundTruth::GroundTruth(const GroundTruth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      stationary_object_(from.stationary_object_),
      moving_object_(from.moving_object_),
      traffic_sign_(from.traffic_sign_),
      traffic_light_(from.traffic_light_),
      road_marking_(from.road_marking_),
      lane_boundary_(from.lane_boundary_),
      lane_(from.lane_),
      occupant_(from.occupant_),
      reference_line_(from.reference_line_),
      logical_lane_boundary_(from.logical_lane_boundary_),
      logical_lane_(from.logical_lane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  proj_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.proj_string().empty()) {
    proj_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proj_string_);
  }
  map_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.map_reference().empty()) {
    map_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_reference_);
  }
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_reference().empty()) {
    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::osi3::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from.has_host_vehicle_id()) {
    host_vehicle_id_ = new ::osi3::Identifier(*from.host_vehicle_id_);
  } else {
    host_vehicle_id_ = nullptr;
  }
  if (from.has_environmental_conditions()) {
    environmental_conditions_ = new ::osi3::EnvironmentalConditions(*from.environmental_conditions_);
  } else {
    environmental_conditions_ = nullptr;
  }
  country_code_ = from.country_code_;
  // @@protoc_insertion_point(copy_constructor:osi3.GroundTruth)
}

void GroundTruth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GroundTruth_osi_5fgroundtruth_2eproto.base);
  proj_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_reference_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&country_code_) -
      reinterpret_cast<char*>(&version_)) + sizeof(country_code_));
}

GroundTruth::~GroundTruth() {
  // @@protoc_insertion_point(destructor:osi3.GroundTruth)
  SharedDtor();
}

void GroundTruth::SharedDtor() {
  proj_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_reference_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete host_vehicle_id_;
  if (this != internal_default_instance()) delete environmental_conditions_;
}

void GroundTruth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroundTruth& GroundTruth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GroundTruth_osi_5fgroundtruth_2eproto.base);
  return *internal_default_instance();
}


void GroundTruth::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stationary_object_.Clear();
  moving_object_.Clear();
  traffic_sign_.Clear();
  traffic_light_.Clear();
  road_marking_.Clear();
  lane_boundary_.Clear();
  lane_.Clear();
  occupant_.Clear();
  reference_line_.Clear();
  logical_lane_boundary_.Clear();
  logical_lane_.Clear();
  proj_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_reference_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && host_vehicle_id_ != nullptr) {
    delete host_vehicle_id_;
  }
  host_vehicle_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && environmental_conditions_ != nullptr) {
    delete environmental_conditions_;
  }
  environmental_conditions_ = nullptr;
  country_code_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* GroundTruth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier host_vehicle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_host_vehicle_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.StationaryObject stationary_object = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_stationary_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.MovingObject moving_object = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_moving_object(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.TrafficSign traffic_sign = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_traffic_sign(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.TrafficLight traffic_light = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_traffic_light(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.RoadMarking road_marking = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_road_marking(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary lane_boundary = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Lane lane = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Occupant occupant = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_occupant(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 90);
        } else goto handle_unusual;
        continue;
      // .osi3.EnvironmentalConditions environmental_conditions = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_environmental_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 country_code = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          country_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string proj_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_proj_string(), ptr, ctx, "osi3.GroundTruth.proj_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string map_reference = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_map_reference(), ptr, ctx, "osi3.GroundTruth.map_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_reference = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_reference(), ptr, ctx, "osi3.GroundTruth.model_reference");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ReferenceLine reference_line = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_reference_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 394);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLaneBoundary logical_lane_boundary = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_logical_lane_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 402);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalLane logical_lane = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(add_logical_lane(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint16>(ptr) == 410);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool GroundTruth::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.GroundTruth)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Timestamp timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier host_vehicle_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_host_vehicle_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.StationaryObject stationary_object = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_stationary_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.MovingObject moving_object = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_moving_object()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficSign traffic_sign = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.TrafficLight traffic_light = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_traffic_light()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.RoadMarking road_marking = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_road_marking()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LaneBoundary lane_boundary = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Lane lane = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Occupant occupant = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_occupant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions environmental_conditions = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_environmental_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 country_code = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &country_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string proj_string = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_proj_string()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->proj_string().data(), static_cast<int>(this->proj_string().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.GroundTruth.proj_string"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map_reference = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_map_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->map_reference().data(), static_cast<int>(this->map_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.GroundTruth.map_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_reference = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_reference()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_reference().data(), static_cast<int>(this->model_reference().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "osi3.GroundTruth.model_reference"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ReferenceLine reference_line = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_reference_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLaneBoundary logical_lane_boundary = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane_boundary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalLane logical_lane = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.GroundTruth)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.GroundTruth)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void GroundTruth::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::timestamp(this), output);
  }

  // .osi3.Identifier host_vehicle_id = 3;
  if (this->has_host_vehicle_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::host_vehicle_id(this), output);
  }

  // repeated .osi3.StationaryObject stationary_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->stationary_object(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->moving_object(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->traffic_sign(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->traffic_light(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->road_marking(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->lane_boundary(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Lane lane = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->lane(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.Occupant occupant = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11,
      this->occupant(static_cast<int>(i)),
      output);
  }

  // .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (this->has_environmental_conditions()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::environmental_conditions(this), output);
  }

  // uint32 country_code = 13;
  if (this->country_code() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(13, this->country_code(), output);
  }

  // string proj_string = 14;
  if (this->proj_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->proj_string().data(), static_cast<int>(this->proj_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.proj_string");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->proj_string(), output);
  }

  // string map_reference = 15;
  if (this->map_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->map_reference().data(), static_cast<int>(this->map_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.map_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->map_reference(), output);
  }

  // string model_reference = 16;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.model_reference");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->model_reference(), output);
  }

  // repeated .osi3.ReferenceLine reference_line = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_line_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->reference_line(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LogicalLaneBoundary logical_lane_boundary = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_boundary_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->logical_lane_boundary(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LogicalLane logical_lane = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->logical_lane(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.GroundTruth)
}

::PROTOBUF_NAMESPACE_ID::uint8* GroundTruth::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.GroundTruth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::timestamp(this), target);
  }

  // .osi3.Identifier host_vehicle_id = 3;
  if (this->has_host_vehicle_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::host_vehicle_id(this), target);
  }

  // repeated .osi3.StationaryObject stationary_object = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->stationary_object_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->stationary_object(static_cast<int>(i)), target);
  }

  // repeated .osi3.MovingObject moving_object = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->moving_object_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->moving_object(static_cast<int>(i)), target);
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_sign_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->traffic_sign(static_cast<int>(i)), target);
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->traffic_light_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->traffic_light(static_cast<int>(i)), target);
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->road_marking_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->road_marking(static_cast<int>(i)), target);
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_boundary_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->lane_boundary(static_cast<int>(i)), target);
  }

  // repeated .osi3.Lane lane = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->lane(static_cast<int>(i)), target);
  }

  // repeated .osi3.Occupant occupant = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->occupant_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->occupant(static_cast<int>(i)), target);
  }

  // .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (this->has_environmental_conditions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::environmental_conditions(this), target);
  }

  // uint32 country_code = 13;
  if (this->country_code() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->country_code(), target);
  }

  // string proj_string = 14;
  if (this->proj_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->proj_string().data(), static_cast<int>(this->proj_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.proj_string");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        14, this->proj_string(), target);
  }

  // string map_reference = 15;
  if (this->map_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->map_reference().data(), static_cast<int>(this->map_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.map_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->map_reference(), target);
  }

  // string model_reference = 16;
  if (this->model_reference().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_reference().data(), static_cast<int>(this->model_reference().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osi3.GroundTruth.model_reference");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        16, this->model_reference(), target);
  }

  // repeated .osi3.ReferenceLine reference_line = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->reference_line_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->reference_line(static_cast<int>(i)), target);
  }

  // repeated .osi3.LogicalLaneBoundary logical_lane_boundary = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_boundary_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->logical_lane_boundary(static_cast<int>(i)), target);
  }

  // repeated .osi3.LogicalLane logical_lane = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_lane_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->logical_lane(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.GroundTruth)
  return target;
}

size_t GroundTruth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.GroundTruth)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.StationaryObject stationary_object = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->stationary_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->stationary_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.MovingObject moving_object = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->moving_object_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->moving_object(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficSign traffic_sign = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_sign_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->traffic_sign(static_cast<int>(i)));
    }
  }

  // repeated .osi3.TrafficLight traffic_light = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->traffic_light_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->traffic_light(static_cast<int>(i)));
    }
  }

  // repeated .osi3.RoadMarking road_marking = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->road_marking_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->road_marking(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LaneBoundary lane_boundary = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_boundary_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane_boundary(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Lane lane = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->lane_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->lane(static_cast<int>(i)));
    }
  }

  // repeated .osi3.Occupant occupant = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->occupant_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->occupant(static_cast<int>(i)));
    }
  }

  // repeated .osi3.ReferenceLine reference_line = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->reference_line_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->reference_line(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLaneBoundary logical_lane_boundary = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_boundary_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane_boundary(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LogicalLane logical_lane = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_lane_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_lane(static_cast<int>(i)));
    }
  }

  // string proj_string = 14;
  if (this->proj_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->proj_string());
  }

  // string map_reference = 15;
  if (this->map_reference().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->map_reference());
  }

  // string model_reference = 16;
  if (this->model_reference().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_reference());
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .osi3.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .osi3.Identifier host_vehicle_id = 3;
  if (this->has_host_vehicle_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *host_vehicle_id_);
  }

  // .osi3.EnvironmentalConditions environmental_conditions = 12;
  if (this->has_environmental_conditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *environmental_conditions_);
  }

  // uint32 country_code = 13;
  if (this->country_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->country_code());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroundTruth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  const GroundTruth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GroundTruth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.GroundTruth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.GroundTruth)
    MergeFrom(*source);
  }
}

void GroundTruth::MergeFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.GroundTruth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stationary_object_.MergeFrom(from.stationary_object_);
  moving_object_.MergeFrom(from.moving_object_);
  traffic_sign_.MergeFrom(from.traffic_sign_);
  traffic_light_.MergeFrom(from.traffic_light_);
  road_marking_.MergeFrom(from.road_marking_);
  lane_boundary_.MergeFrom(from.lane_boundary_);
  lane_.MergeFrom(from.lane_);
  occupant_.MergeFrom(from.occupant_);
  reference_line_.MergeFrom(from.reference_line_);
  logical_lane_boundary_.MergeFrom(from.logical_lane_boundary_);
  logical_lane_.MergeFrom(from.logical_lane_);
  if (from.proj_string().size() > 0) {

    proj_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.proj_string_);
  }
  if (from.map_reference().size() > 0) {

    map_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.map_reference_);
  }
  if (from.model_reference().size() > 0) {

    model_reference_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_reference_);
  }
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::osi3::Timestamp::MergeFrom(from.timestamp());
  }
  if (from.has_host_vehicle_id()) {
    mutable_host_vehicle_id()->::osi3::Identifier::MergeFrom(from.host_vehicle_id());
  }
  if (from.has_environmental_conditions()) {
    mutable_environmental_conditions()->::osi3::EnvironmentalConditions::MergeFrom(from.environmental_conditions());
  }
  if (from.country_code() != 0) {
    set_country_code(from.country_code());
  }
}

void GroundTruth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroundTruth::CopyFrom(const GroundTruth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.GroundTruth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroundTruth::IsInitialized() const {
  return true;
}

void GroundTruth::InternalSwap(GroundTruth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&stationary_object_)->InternalSwap(CastToBase(&other->stationary_object_));
  CastToBase(&moving_object_)->InternalSwap(CastToBase(&other->moving_object_));
  CastToBase(&traffic_sign_)->InternalSwap(CastToBase(&other->traffic_sign_));
  CastToBase(&traffic_light_)->InternalSwap(CastToBase(&other->traffic_light_));
  CastToBase(&road_marking_)->InternalSwap(CastToBase(&other->road_marking_));
  CastToBase(&lane_boundary_)->InternalSwap(CastToBase(&other->lane_boundary_));
  CastToBase(&lane_)->InternalSwap(CastToBase(&other->lane_));
  CastToBase(&occupant_)->InternalSwap(CastToBase(&other->occupant_));
  CastToBase(&reference_line_)->InternalSwap(CastToBase(&other->reference_line_));
  CastToBase(&logical_lane_boundary_)->InternalSwap(CastToBase(&other->logical_lane_boundary_));
  CastToBase(&logical_lane_)->InternalSwap(CastToBase(&other->logical_lane_));
  proj_string_.Swap(&other->proj_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  map_reference_.Swap(&other->map_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  model_reference_.Swap(&other->model_reference_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(timestamp_, other->timestamp_);
  swap(host_vehicle_id_, other->host_vehicle_id_);
  swap(environmental_conditions_, other->environmental_conditions_);
  swap(country_code_, other->country_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroundTruth::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::GroundTruth* Arena::CreateMaybeMessage< ::osi3::GroundTruth >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::GroundTruth >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
