// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planStatus.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_planStatus_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_planStatus_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planStatus_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_planStatus_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_planStatus_2eproto;
namespace sim_msg {
class AccelerationExpectation;
class AccelerationExpectationDefaultTypeInternal;
extern AccelerationExpectationDefaultTypeInternal _AccelerationExpectation_default_instance_;
class PlanStatus;
class PlanStatusDefaultTypeInternal;
extern PlanStatusDefaultTypeInternal _PlanStatus_default_instance_;
class SpeedExpectation;
class SpeedExpectationDefaultTypeInternal;
extern SpeedExpectationDefaultTypeInternal _SpeedExpectation_default_instance_;
class SteeringExpectation;
class SteeringExpectationDefaultTypeInternal;
extern SteeringExpectationDefaultTypeInternal _SteeringExpectation_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::AccelerationExpectation* Arena::CreateMaybeMessage<::sim_msg::AccelerationExpectation>(Arena*);
template<> ::sim_msg::PlanStatus* Arena::CreateMaybeMessage<::sim_msg::PlanStatus>(Arena*);
template<> ::sim_msg::SpeedExpectation* Arena::CreateMaybeMessage<::sim_msg::SpeedExpectation>(Arena*);
template<> ::sim_msg::SteeringExpectation* Arena::CreateMaybeMessage<::sim_msg::SteeringExpectation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum IndicatorState : int {
  INDICATOR_STATE_UNKNOWN = 0,
  INDICATOR_STATE_OFF = 1,
  INDICATOR_STATE_LEFT = 2,
  INDICATOR_STATE_RIGHT = 3,
  INDICATOR_STATE_WARNING = 4,
  IndicatorState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IndicatorState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IndicatorState_IsValid(int value);
constexpr IndicatorState IndicatorState_MIN = INDICATOR_STATE_UNKNOWN;
constexpr IndicatorState IndicatorState_MAX = INDICATOR_STATE_WARNING;
constexpr int IndicatorState_ARRAYSIZE = IndicatorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IndicatorState_descriptor();
template<typename T>
inline const std::string& IndicatorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IndicatorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IndicatorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IndicatorState_descriptor(), enum_t_value);
}
inline bool IndicatorState_Parse(
    const std::string& name, IndicatorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IndicatorState>(
    IndicatorState_descriptor(), name, value);
}
enum PlanMode : int {
  PLAN_MODE_FOLLOW_LANE = 0,
  PLAN_MODE_CHANGE_LANE = 1,
  PLAN_MODE_MANUAL = 2,
  PlanMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlanMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlanMode_IsValid(int value);
constexpr PlanMode PlanMode_MIN = PLAN_MODE_FOLLOW_LANE;
constexpr PlanMode PlanMode_MAX = PLAN_MODE_MANUAL;
constexpr int PlanMode_ARRAYSIZE = PlanMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanMode_descriptor();
template<typename T>
inline const std::string& PlanMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanMode_descriptor(), enum_t_value);
}
inline bool PlanMode_Parse(
    const std::string& name, PlanMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanMode>(
    PlanMode_descriptor(), name, value);
}
enum PlanClassification : int {
  PLAN_GO_STRAIGHT = 0,
  PLAN_TURN_LEFT = 1,
  PLAN_TURN_RIGHT = 2,
  PLAN_CHANGE_LANE_LEFT = 3,
  PLAN_CHANGE_LANE_RIGHT = 4,
  PLAN_PULL_OVER = 5,
  PLAN_TURN_AROUND = 6,
  PLAN_BREAK_THROUGH = 7,
  PLAN_CHANGE_LANE_LEFT_PREPARE = 8,
  PLAN_CHANGE_LANE_RIGHT_PREPARE = 9,
  PLAN_CHANGE_LANE_LEFT_HOLD = 10,
  PLAN_CHANGE_LANE_RIGHT_HOLD = 11,
  PLAN_CHANGE_LANE_LEFT_CANCEL = 12,
  PLAN_CHANGE_LANE_RIGHT_CANCEL = 13,
  PlanClassification_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlanClassification_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlanClassification_IsValid(int value);
constexpr PlanClassification PlanClassification_MIN = PLAN_GO_STRAIGHT;
constexpr PlanClassification PlanClassification_MAX = PLAN_CHANGE_LANE_RIGHT_CANCEL;
constexpr int PlanClassification_ARRAYSIZE = PlanClassification_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlanClassification_descriptor();
template<typename T>
inline const std::string& PlanClassification_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlanClassification>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlanClassification_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlanClassification_descriptor(), enum_t_value);
}
inline bool PlanClassification_Parse(
    const std::string& name, PlanClassification* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlanClassification>(
    PlanClassification_descriptor(), name, value);
}
// ===================================================================

class SteeringExpectation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.SteeringExpectation) */ {
 public:
  SteeringExpectation();
  virtual ~SteeringExpectation();

  SteeringExpectation(const SteeringExpectation& from);
  SteeringExpectation(SteeringExpectation&& from) noexcept
    : SteeringExpectation() {
    *this = ::std::move(from);
  }

  inline SteeringExpectation& operator=(const SteeringExpectation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SteeringExpectation& operator=(SteeringExpectation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SteeringExpectation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SteeringExpectation* internal_default_instance() {
    return reinterpret_cast<const SteeringExpectation*>(
               &_SteeringExpectation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SteeringExpectation& a, SteeringExpectation& b) {
    a.Swap(&b);
  }
  inline void Swap(SteeringExpectation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SteeringExpectation* New() const final {
    return CreateMaybeMessage<SteeringExpectation>(nullptr);
  }

  SteeringExpectation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SteeringExpectation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SteeringExpectation& from);
  void MergeFrom(const SteeringExpectation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SteeringExpectation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.SteeringExpectation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planStatus_2eproto);
    return ::descriptor_table_planStatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
  };
  // double angle = 1;
  void clear_angle();
  double angle() const;
  void set_angle(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.SteeringExpectation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planStatus_2eproto;
};
// -------------------------------------------------------------------

class AccelerationExpectation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.AccelerationExpectation) */ {
 public:
  AccelerationExpectation();
  virtual ~AccelerationExpectation();

  AccelerationExpectation(const AccelerationExpectation& from);
  AccelerationExpectation(AccelerationExpectation&& from) noexcept
    : AccelerationExpectation() {
    *this = ::std::move(from);
  }

  inline AccelerationExpectation& operator=(const AccelerationExpectation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccelerationExpectation& operator=(AccelerationExpectation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccelerationExpectation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccelerationExpectation* internal_default_instance() {
    return reinterpret_cast<const AccelerationExpectation*>(
               &_AccelerationExpectation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccelerationExpectation& a, AccelerationExpectation& b) {
    a.Swap(&b);
  }
  inline void Swap(AccelerationExpectation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccelerationExpectation* New() const final {
    return CreateMaybeMessage<AccelerationExpectation>(nullptr);
  }

  AccelerationExpectation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccelerationExpectation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccelerationExpectation& from);
  void MergeFrom(const AccelerationExpectation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccelerationExpectation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.AccelerationExpectation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planStatus_2eproto);
    return ::descriptor_table_planStatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFieldNumber = 1,
  };
  // double acc = 1;
  void clear_acc();
  double acc() const;
  void set_acc(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.AccelerationExpectation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double acc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planStatus_2eproto;
};
// -------------------------------------------------------------------

class SpeedExpectation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.SpeedExpectation) */ {
 public:
  SpeedExpectation();
  virtual ~SpeedExpectation();

  SpeedExpectation(const SpeedExpectation& from);
  SpeedExpectation(SpeedExpectation&& from) noexcept
    : SpeedExpectation() {
    *this = ::std::move(from);
  }

  inline SpeedExpectation& operator=(const SpeedExpectation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeedExpectation& operator=(SpeedExpectation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpeedExpectation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpeedExpectation* internal_default_instance() {
    return reinterpret_cast<const SpeedExpectation*>(
               &_SpeedExpectation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SpeedExpectation& a, SpeedExpectation& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeedExpectation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpeedExpectation* New() const final {
    return CreateMaybeMessage<SpeedExpectation>(nullptr);
  }

  SpeedExpectation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpeedExpectation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpeedExpectation& from);
  void MergeFrom(const SpeedExpectation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpeedExpectation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.SpeedExpectation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planStatus_2eproto);
    return ::descriptor_table_planStatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeedFieldNumber = 1,
  };
  // double speed = 1;
  void clear_speed();
  double speed() const;
  void set_speed(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.SpeedExpectation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planStatus_2eproto;
};
// -------------------------------------------------------------------

class PlanStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.PlanStatus) */ {
 public:
  PlanStatus();
  virtual ~PlanStatus();

  PlanStatus(const PlanStatus& from);
  PlanStatus(PlanStatus&& from) noexcept
    : PlanStatus() {
    *this = ::std::move(from);
  }

  inline PlanStatus& operator=(const PlanStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlanStatus& operator=(PlanStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlanStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanStatus* internal_default_instance() {
    return reinterpret_cast<const PlanStatus*>(
               &_PlanStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlanStatus& a, PlanStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PlanStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlanStatus* New() const final {
    return CreateMaybeMessage<PlanStatus>(nullptr);
  }

  PlanStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlanStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlanStatus& from);
  void MergeFrom(const PlanStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.PlanStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_planStatus_2eproto);
    return ::descriptor_table_planStatus_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpectSteeringFieldNumber = 4,
    kExpectAccFieldNumber = 5,
    kExpectSpeedFieldNumber = 6,
    kIndicatorStateFieldNumber = 1,
    kModeFieldNumber = 2,
    kClassFieldNumber = 3,
  };
  // .sim_msg.SteeringExpectation expect_steering = 4;
  bool has_expect_steering() const;
  void clear_expect_steering();
  const ::sim_msg::SteeringExpectation& expect_steering() const;
  ::sim_msg::SteeringExpectation* release_expect_steering();
  ::sim_msg::SteeringExpectation* mutable_expect_steering();
  void set_allocated_expect_steering(::sim_msg::SteeringExpectation* expect_steering);

  // .sim_msg.AccelerationExpectation expect_acc = 5;
  bool has_expect_acc() const;
  void clear_expect_acc();
  const ::sim_msg::AccelerationExpectation& expect_acc() const;
  ::sim_msg::AccelerationExpectation* release_expect_acc();
  ::sim_msg::AccelerationExpectation* mutable_expect_acc();
  void set_allocated_expect_acc(::sim_msg::AccelerationExpectation* expect_acc);

  // .sim_msg.SpeedExpectation expect_speed = 6;
  bool has_expect_speed() const;
  void clear_expect_speed();
  const ::sim_msg::SpeedExpectation& expect_speed() const;
  ::sim_msg::SpeedExpectation* release_expect_speed();
  ::sim_msg::SpeedExpectation* mutable_expect_speed();
  void set_allocated_expect_speed(::sim_msg::SpeedExpectation* expect_speed);

  // .sim_msg.IndicatorState indicator_state = 1;
  void clear_indicator_state();
  ::sim_msg::IndicatorState indicator_state() const;
  void set_indicator_state(::sim_msg::IndicatorState value);

  // .sim_msg.PlanMode mode = 2;
  void clear_mode();
  ::sim_msg::PlanMode mode() const;
  void set_mode(::sim_msg::PlanMode value);

  // .sim_msg.PlanClassification class = 3;
  void clear_class_();
  ::sim_msg::PlanClassification class_() const;
  void set_class_(::sim_msg::PlanClassification value);

  // @@protoc_insertion_point(class_scope:sim_msg.PlanStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::SteeringExpectation* expect_steering_;
  ::sim_msg::AccelerationExpectation* expect_acc_;
  ::sim_msg::SpeedExpectation* expect_speed_;
  int indicator_state_;
  int mode_;
  int class__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_planStatus_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SteeringExpectation

// double angle = 1;
inline void SteeringExpectation::clear_angle() {
  angle_ = 0;
}
inline double SteeringExpectation::angle() const {
  // @@protoc_insertion_point(field_get:sim_msg.SteeringExpectation.angle)
  return angle_;
}
inline void SteeringExpectation::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SteeringExpectation.angle)
}

// -------------------------------------------------------------------

// AccelerationExpectation

// double acc = 1;
inline void AccelerationExpectation::clear_acc() {
  acc_ = 0;
}
inline double AccelerationExpectation::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.AccelerationExpectation.acc)
  return acc_;
}
inline void AccelerationExpectation::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.AccelerationExpectation.acc)
}

// -------------------------------------------------------------------

// SpeedExpectation

// double speed = 1;
inline void SpeedExpectation::clear_speed() {
  speed_ = 0;
}
inline double SpeedExpectation::speed() const {
  // @@protoc_insertion_point(field_get:sim_msg.SpeedExpectation.speed)
  return speed_;
}
inline void SpeedExpectation::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SpeedExpectation.speed)
}

// -------------------------------------------------------------------

// PlanStatus

// .sim_msg.IndicatorState indicator_state = 1;
inline void PlanStatus::clear_indicator_state() {
  indicator_state_ = 0;
}
inline ::sim_msg::IndicatorState PlanStatus::indicator_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.indicator_state)
  return static_cast< ::sim_msg::IndicatorState >(indicator_state_);
}
inline void PlanStatus::set_indicator_state(::sim_msg::IndicatorState value) {
  
  indicator_state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanStatus.indicator_state)
}

// .sim_msg.PlanMode mode = 2;
inline void PlanStatus::clear_mode() {
  mode_ = 0;
}
inline ::sim_msg::PlanMode PlanStatus::mode() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.mode)
  return static_cast< ::sim_msg::PlanMode >(mode_);
}
inline void PlanStatus::set_mode(::sim_msg::PlanMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanStatus.mode)
}

// .sim_msg.PlanClassification class = 3;
inline void PlanStatus::clear_class_() {
  class__ = 0;
}
inline ::sim_msg::PlanClassification PlanStatus::class_() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.class)
  return static_cast< ::sim_msg::PlanClassification >(class__);
}
inline void PlanStatus::set_class_(::sim_msg::PlanClassification value) {
  
  class__ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanStatus.class)
}

// .sim_msg.SteeringExpectation expect_steering = 4;
inline bool PlanStatus::has_expect_steering() const {
  return this != internal_default_instance() && expect_steering_ != nullptr;
}
inline void PlanStatus::clear_expect_steering() {
  if (GetArenaNoVirtual() == nullptr && expect_steering_ != nullptr) {
    delete expect_steering_;
  }
  expect_steering_ = nullptr;
}
inline const ::sim_msg::SteeringExpectation& PlanStatus::expect_steering() const {
  const ::sim_msg::SteeringExpectation* p = expect_steering_;
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.expect_steering)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::SteeringExpectation*>(
      &::sim_msg::_SteeringExpectation_default_instance_);
}
inline ::sim_msg::SteeringExpectation* PlanStatus::release_expect_steering() {
  // @@protoc_insertion_point(field_release:sim_msg.PlanStatus.expect_steering)
  
  ::sim_msg::SteeringExpectation* temp = expect_steering_;
  expect_steering_ = nullptr;
  return temp;
}
inline ::sim_msg::SteeringExpectation* PlanStatus::mutable_expect_steering() {
  
  if (expect_steering_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::SteeringExpectation>(GetArenaNoVirtual());
    expect_steering_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanStatus.expect_steering)
  return expect_steering_;
}
inline void PlanStatus::set_allocated_expect_steering(::sim_msg::SteeringExpectation* expect_steering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expect_steering_;
  }
  if (expect_steering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expect_steering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expect_steering, submessage_arena);
    }
    
  } else {
    
  }
  expect_steering_ = expect_steering;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PlanStatus.expect_steering)
}

// .sim_msg.AccelerationExpectation expect_acc = 5;
inline bool PlanStatus::has_expect_acc() const {
  return this != internal_default_instance() && expect_acc_ != nullptr;
}
inline void PlanStatus::clear_expect_acc() {
  if (GetArenaNoVirtual() == nullptr && expect_acc_ != nullptr) {
    delete expect_acc_;
  }
  expect_acc_ = nullptr;
}
inline const ::sim_msg::AccelerationExpectation& PlanStatus::expect_acc() const {
  const ::sim_msg::AccelerationExpectation* p = expect_acc_;
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.expect_acc)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::AccelerationExpectation*>(
      &::sim_msg::_AccelerationExpectation_default_instance_);
}
inline ::sim_msg::AccelerationExpectation* PlanStatus::release_expect_acc() {
  // @@protoc_insertion_point(field_release:sim_msg.PlanStatus.expect_acc)
  
  ::sim_msg::AccelerationExpectation* temp = expect_acc_;
  expect_acc_ = nullptr;
  return temp;
}
inline ::sim_msg::AccelerationExpectation* PlanStatus::mutable_expect_acc() {
  
  if (expect_acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::AccelerationExpectation>(GetArenaNoVirtual());
    expect_acc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanStatus.expect_acc)
  return expect_acc_;
}
inline void PlanStatus::set_allocated_expect_acc(::sim_msg::AccelerationExpectation* expect_acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expect_acc_;
  }
  if (expect_acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expect_acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expect_acc, submessage_arena);
    }
    
  } else {
    
  }
  expect_acc_ = expect_acc;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PlanStatus.expect_acc)
}

// .sim_msg.SpeedExpectation expect_speed = 6;
inline bool PlanStatus::has_expect_speed() const {
  return this != internal_default_instance() && expect_speed_ != nullptr;
}
inline void PlanStatus::clear_expect_speed() {
  if (GetArenaNoVirtual() == nullptr && expect_speed_ != nullptr) {
    delete expect_speed_;
  }
  expect_speed_ = nullptr;
}
inline const ::sim_msg::SpeedExpectation& PlanStatus::expect_speed() const {
  const ::sim_msg::SpeedExpectation* p = expect_speed_;
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.expect_speed)
  return p != nullptr ? *p : *reinterpret_cast<const ::sim_msg::SpeedExpectation*>(
      &::sim_msg::_SpeedExpectation_default_instance_);
}
inline ::sim_msg::SpeedExpectation* PlanStatus::release_expect_speed() {
  // @@protoc_insertion_point(field_release:sim_msg.PlanStatus.expect_speed)
  
  ::sim_msg::SpeedExpectation* temp = expect_speed_;
  expect_speed_ = nullptr;
  return temp;
}
inline ::sim_msg::SpeedExpectation* PlanStatus::mutable_expect_speed() {
  
  if (expect_speed_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::SpeedExpectation>(GetArenaNoVirtual());
    expect_speed_ = p;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanStatus.expect_speed)
  return expect_speed_;
}
inline void PlanStatus::set_allocated_expect_speed(::sim_msg::SpeedExpectation* expect_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expect_speed_;
  }
  if (expect_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expect_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expect_speed, submessage_arena);
    }
    
  } else {
    
  }
  expect_speed_ = expect_speed;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PlanStatus.expect_speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::IndicatorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::IndicatorState>() {
  return ::sim_msg::IndicatorState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::PlanMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::PlanMode>() {
  return ::sim_msg::PlanMode_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::PlanClassification> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::PlanClassification>() {
  return ::sim_msg::PlanClassification_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_planStatus_2eproto
