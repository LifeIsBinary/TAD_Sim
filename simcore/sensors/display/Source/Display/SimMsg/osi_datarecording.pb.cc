// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_datarecording.proto
#pragma warning (disable : 4125)

#include "osi_datarecording.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fsensordata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<17> scc_info_SensorData_osi_5fsensordata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdatarecording_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorDataSeries_osi_5fdatarecording_2eproto;
namespace osi3 {
class SensorDataSeriesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorDataSeries> _instance;
} _SensorDataSeries_default_instance_;
class SensorDataSeriesListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SensorDataSeriesList> _instance;
} _SensorDataSeriesList_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_SensorDataSeries_osi_5fdatarecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_SensorDataSeries_default_instance_;
    new (ptr) ::osi3::SensorDataSeries();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::SensorDataSeries::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorDataSeries_osi_5fdatarecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorDataSeries_osi_5fdatarecording_2eproto}, {
      &scc_info_SensorData_osi_5fsensordata_2eproto.base,}};

static void InitDefaultsscc_info_SensorDataSeriesList_osi_5fdatarecording_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_SensorDataSeriesList_default_instance_;
    new (ptr) ::osi3::SensorDataSeriesList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::SensorDataSeriesList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorDataSeriesList_osi_5fdatarecording_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_SensorDataSeriesList_osi_5fdatarecording_2eproto}, {
      &scc_info_SensorDataSeries_osi_5fdatarecording_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fdatarecording_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fdatarecording_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fdatarecording_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fdatarecording_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDataSeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDataSeries, sensor_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDataSeriesList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::SensorDataSeriesList, sensor_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::SensorDataSeries)},
  { 6, -1, sizeof(::osi3::SensorDataSeriesList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SensorDataSeries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_SensorDataSeriesList_default_instance_),
};

const char descriptor_table_protodef_osi_5fdatarecording_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027osi_datarecording.proto\022\004osi3\032\024osi_sen"
  "sordata.proto\"9\n\020SensorDataSeries\022%\n\013sen"
  "sor_data\030\001 \003(\0132\020.osi3.SensorData\">\n\024Sens"
  "orDataSeriesList\022&\n\006sensor\030\001 \003(\0132\026.osi3."
  "SensorDataSeriesB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fdatarecording_2eproto_deps[1] = {
  &::descriptor_table_osi_5fsensordata_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fdatarecording_2eproto_sccs[2] = {
  &scc_info_SensorDataSeries_osi_5fdatarecording_2eproto.base,
  &scc_info_SensorDataSeriesList_osi_5fdatarecording_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fdatarecording_2eproto_once;
static bool descriptor_table_osi_5fdatarecording_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdatarecording_2eproto = {
  &descriptor_table_osi_5fdatarecording_2eproto_initialized, descriptor_table_protodef_osi_5fdatarecording_2eproto, "osi_datarecording.proto", 188,
  &descriptor_table_osi_5fdatarecording_2eproto_once, descriptor_table_osi_5fdatarecording_2eproto_sccs, descriptor_table_osi_5fdatarecording_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_osi_5fdatarecording_2eproto::offsets,
  file_level_metadata_osi_5fdatarecording_2eproto, 2, file_level_enum_descriptors_osi_5fdatarecording_2eproto, file_level_service_descriptors_osi_5fdatarecording_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fdatarecording_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fdatarecording_2eproto), true);
namespace osi3 {

// ===================================================================

void SensorDataSeries::InitAsDefaultInstance() {
}
class SensorDataSeries::_Internal {
 public:
};

void SensorDataSeries::clear_sensor_data() {
  sensor_data_.Clear();
}
SensorDataSeries::SensorDataSeries()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorDataSeries)
}
SensorDataSeries::SensorDataSeries(const SensorDataSeries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_data_(from.sensor_data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.SensorDataSeries)
}

void SensorDataSeries::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorDataSeries_osi_5fdatarecording_2eproto.base);
}

SensorDataSeries::~SensorDataSeries() {
  // @@protoc_insertion_point(destructor:osi3.SensorDataSeries)
  SharedDtor();
}

void SensorDataSeries::SharedDtor() {
}

void SensorDataSeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorDataSeries& SensorDataSeries::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorDataSeries_osi_5fdatarecording_2eproto.base);
  return *internal_default_instance();
}


void SensorDataSeries::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorDataSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_data_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorDataSeries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.SensorData sensor_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorDataSeries::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorDataSeries)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.SensorData sensor_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorDataSeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorDataSeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorDataSeries::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorDataSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.SensorData sensor_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_data_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor_data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorDataSeries)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorDataSeries::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorDataSeries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.SensorData sensor_data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_data_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor_data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorDataSeries)
  return target;
}

size_t SensorDataSeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorDataSeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.SensorData sensor_data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_data(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorDataSeries::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorDataSeries)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorDataSeries* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorDataSeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorDataSeries)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorDataSeries)
    MergeFrom(*source);
  }
}

void SensorDataSeries::MergeFrom(const SensorDataSeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorDataSeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_data_.MergeFrom(from.sensor_data_);
}

void SensorDataSeries::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorDataSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDataSeries::CopyFrom(const SensorDataSeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorDataSeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataSeries::IsInitialized() const {
  return true;
}

void SensorDataSeries::InternalSwap(SensorDataSeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensor_data_)->InternalSwap(CastToBase(&other->sensor_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorDataSeries::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SensorDataSeriesList::InitAsDefaultInstance() {
}
class SensorDataSeriesList::_Internal {
 public:
};

SensorDataSeriesList::SensorDataSeriesList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.SensorDataSeriesList)
}
SensorDataSeriesList::SensorDataSeriesList(const SensorDataSeriesList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_(from.sensor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:osi3.SensorDataSeriesList)
}

void SensorDataSeriesList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SensorDataSeriesList_osi_5fdatarecording_2eproto.base);
}

SensorDataSeriesList::~SensorDataSeriesList() {
  // @@protoc_insertion_point(destructor:osi3.SensorDataSeriesList)
  SharedDtor();
}

void SensorDataSeriesList::SharedDtor() {
}

void SensorDataSeriesList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorDataSeriesList& SensorDataSeriesList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SensorDataSeriesList_osi_5fdatarecording_2eproto.base);
  return *internal_default_instance();
}


void SensorDataSeriesList::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.SensorDataSeriesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorDataSeriesList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .osi3.SensorDataSeries sensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorDataSeriesList::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.SensorDataSeriesList)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .osi3.SensorDataSeries sensor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.SensorDataSeriesList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.SensorDataSeriesList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorDataSeriesList::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.SensorDataSeriesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.SensorDataSeries sensor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sensor(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.SensorDataSeriesList)
}

::PROTOBUF_NAMESPACE_ID::uint8* SensorDataSeriesList::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.SensorDataSeriesList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .osi3.SensorDataSeries sensor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sensor(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.SensorDataSeriesList)
  return target;
}

size_t SensorDataSeriesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.SensorDataSeriesList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.SensorDataSeries sensor = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorDataSeriesList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.SensorDataSeriesList)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorDataSeriesList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SensorDataSeriesList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.SensorDataSeriesList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.SensorDataSeriesList)
    MergeFrom(*source);
  }
}

void SensorDataSeriesList::MergeFrom(const SensorDataSeriesList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.SensorDataSeriesList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_.MergeFrom(from.sensor_);
}

void SensorDataSeriesList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.SensorDataSeriesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorDataSeriesList::CopyFrom(const SensorDataSeriesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.SensorDataSeriesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorDataSeriesList::IsInitialized() const {
  return true;
}

void SensorDataSeriesList::InternalSwap(SensorDataSeriesList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensor_)->InternalSwap(CastToBase(&other->sensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SensorDataSeriesList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::SensorDataSeries* Arena::CreateMaybeMessage< ::osi3::SensorDataSeries >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::SensorDataSeries >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::SensorDataSeriesList* Arena::CreateMaybeMessage< ::osi3::SensorDataSeriesList >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::SensorDataSeriesList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
