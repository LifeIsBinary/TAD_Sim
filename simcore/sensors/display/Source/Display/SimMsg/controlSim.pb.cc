// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controlSim.proto
#pragma warning (disable : 4125)
#include "controlSim.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_controlSim_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Car2Sim_controlSim_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_controlSim_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sim2Car_controlSim_2eproto;
namespace sim_msg {
class Sim2CarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Sim2Car> _instance;
} _Sim2Car_default_instance_;
class Car2SimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Car2Sim> _instance;
} _Car2Sim_default_instance_;
class ControlSimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ControlSim> _instance;
} _ControlSim_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Car2Sim_controlSim_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Car2Sim_default_instance_;
    new (ptr) ::sim_msg::Car2Sim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Car2Sim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Car2Sim_controlSim_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Car2Sim_controlSim_2eproto}, {}};

static void InitDefaultsscc_info_ControlSim_controlSim_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ControlSim_default_instance_;
    new (ptr) ::sim_msg::ControlSim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ControlSim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ControlSim_controlSim_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_ControlSim_controlSim_2eproto}, {
      &scc_info_Sim2Car_controlSim_2eproto.base,
      &scc_info_Car2Sim_controlSim_2eproto.base,}};

static void InitDefaultsscc_info_Sim2Car_controlSim_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Sim2Car_default_instance_;
    new (ptr) ::sim_msg::Sim2Car();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Sim2Car::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Sim2Car_controlSim_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Sim2Car_controlSim_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_controlSim_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_controlSim_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_controlSim_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_controlSim_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sim2Car, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sim2Car, en_angle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sim2Car, angle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Sim2Car, gear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, drive_mode_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, process_mode_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, steering_angle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, steering_torque_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, brake_pressure_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, throttle_value_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car2Sim, gear_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSim, sim2car_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSim, car2sim_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Sim2Car)},
  { 8, -1, sizeof(::sim_msg::Car2Sim)},
  { 20, -1, sizeof(::sim_msg::ControlSim)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Sim2Car_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Car2Sim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ControlSim_default_instance_),
};

const char descriptor_table_protodef_controlSim_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020controlSim.proto\022\007sim_msg\"K\n\007Sim2Car\022\020"
  "\n\010en_angle\030\001 \001(\010\022\r\n\005angle\030\002 \001(\001\022\037\n\004gear\030"
  "\003 \001(\0162\021.sim_msg.GearMode\"\337\001\n\007Car2Sim\022&\n\n"
  "drive_mode\030\001 \001(\0162\022.sim_msg.DriveMode\022*\n\014"
  "process_mode\030\002 \001(\0162\024.sim_msg.ProcessMode"
  "\022\026\n\016steering_angle\030\003 \001(\001\022\027\n\017steering_tor"
  "que\030\004 \001(\001\022\026\n\016brake_pressure\030\005 \001(\001\022\026\n\016thr"
  "ottle_value\030\006 \001(\001\022\037\n\004gear\030\007 \001(\0162\021.sim_ms"
  "g.GearMode\"R\n\nControlSim\022!\n\007sim2car\030\001 \001("
  "\0132\020.sim_msg.Sim2Car\022!\n\007car2sim\030\002 \001(\0132\020.s"
  "im_msg.Car2Sim* \n\tDriveMode\022\t\n\005HUMAN\020\000\022\010"
  "\n\004AUTO\020\001*8\n\013ProcessMode\022\t\n\005START\020\000\022\010\n\004ST"
  "OP\020\001\022\t\n\005PAUSE\020\002\022\t\n\005RESET\020\003*9\n\010GearMode\022\t"
  "\n\005DRIVE\020\000\022\013\n\007REVERSE\020\001\022\010\n\004PARK\020\002\022\013\n\007NEUT"
  "RAL\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_controlSim_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_controlSim_2eproto_sccs[3] = {
  &scc_info_Car2Sim_controlSim_2eproto.base,
  &scc_info_ControlSim_controlSim_2eproto.base,
  &scc_info_Sim2Car_controlSim_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_controlSim_2eproto_once;
static bool descriptor_table_controlSim_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controlSim_2eproto = {
  &descriptor_table_controlSim_2eproto_initialized, descriptor_table_protodef_controlSim_2eproto, "controlSim.proto", 573,
  &descriptor_table_controlSim_2eproto_once, descriptor_table_controlSim_2eproto_sccs, descriptor_table_controlSim_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_controlSim_2eproto::offsets,
  file_level_metadata_controlSim_2eproto, 3, file_level_enum_descriptors_controlSim_2eproto, file_level_service_descriptors_controlSim_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_controlSim_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_controlSim_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controlSim_2eproto);
  return file_level_enum_descriptors_controlSim_2eproto[0];
}
bool DriveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controlSim_2eproto);
  return file_level_enum_descriptors_controlSim_2eproto[1];
}
bool ProcessMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GearMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controlSim_2eproto);
  return file_level_enum_descriptors_controlSim_2eproto[2];
}
bool GearMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Sim2Car::InitAsDefaultInstance() {
}
class Sim2Car::_Internal {
 public:
};

Sim2Car::Sim2Car()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Sim2Car)
}
Sim2Car::Sim2Car(const Sim2Car& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&angle_, &from.angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_) -
    reinterpret_cast<char*>(&angle_)) + sizeof(gear_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Sim2Car)
}

void Sim2Car::SharedCtor() {
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(gear_));
}

Sim2Car::~Sim2Car() {
  // @@protoc_insertion_point(destructor:sim_msg.Sim2Car)
  SharedDtor();
}

void Sim2Car::SharedDtor() {
}

void Sim2Car::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Sim2Car& Sim2Car::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Sim2Car_controlSim_2eproto.base);
  return *internal_default_instance();
}


void Sim2Car::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Sim2Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(gear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Sim2Car::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool en_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          en_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GearMode gear = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gear(static_cast<::sim_msg::GearMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Sim2Car::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Sim2Car)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool en_angle = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &en_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GearMode gear = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear(static_cast< ::sim_msg::GearMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Sim2Car)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Sim2Car)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Sim2Car::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Sim2Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool en_angle = 1;
  if (this->en_angle() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->en_angle(), output);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->angle(), output);
  }

  // .sim_msg.GearMode gear = 3;
  if (this->gear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->gear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Sim2Car)
}

::PROTOBUF_NAMESPACE_ID::uint8* Sim2Car::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Sim2Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool en_angle = 1;
  if (this->en_angle() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->en_angle(), target);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->angle(), target);
  }

  // .sim_msg.GearMode gear = 3;
  if (this->gear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->gear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Sim2Car)
  return target;
}

size_t Sim2Car::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Sim2Car)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  // bool en_angle = 1;
  if (this->en_angle() != 0) {
    total_size += 1 + 1;
  }

  // .sim_msg.GearMode gear = 3;
  if (this->gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Sim2Car::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Sim2Car)
  GOOGLE_DCHECK_NE(&from, this);
  const Sim2Car* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Sim2Car>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Sim2Car)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Sim2Car)
    MergeFrom(*source);
  }
}

void Sim2Car::MergeFrom(const Sim2Car& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Sim2Car)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
  if (from.en_angle() != 0) {
    set_en_angle(from.en_angle());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
}

void Sim2Car::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Sim2Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sim2Car::CopyFrom(const Sim2Car& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Sim2Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sim2Car::IsInitialized() const {
  return true;
}

void Sim2Car::InternalSwap(Sim2Car* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
  swap(en_angle_, other->en_angle_);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sim2Car::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Car2Sim::InitAsDefaultInstance() {
}
class Car2Sim::_Internal {
 public:
};

Car2Sim::Car2Sim()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Car2Sim)
}
Car2Sim::Car2Sim(const Car2Sim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&drive_mode_, &from.drive_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_) -
    reinterpret_cast<char*>(&drive_mode_)) + sizeof(gear_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Car2Sim)
}

void Car2Sim::SharedCtor() {
  ::memset(&drive_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&drive_mode_)) + sizeof(gear_));
}

Car2Sim::~Car2Sim() {
  // @@protoc_insertion_point(destructor:sim_msg.Car2Sim)
  SharedDtor();
}

void Car2Sim::SharedDtor() {
}

void Car2Sim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Car2Sim& Car2Sim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Car2Sim_controlSim_2eproto.base);
  return *internal_default_instance();
}


void Car2Sim::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Car2Sim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&drive_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_) -
      reinterpret_cast<char*>(&drive_mode_)) + sizeof(gear_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Car2Sim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.DriveMode drive_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_drive_mode(static_cast<::sim_msg::DriveMode>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.ProcessMode process_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_process_mode(static_cast<::sim_msg::ProcessMode>(val));
        } else goto handle_unusual;
        continue;
      // double steering_angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          steering_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steering_torque = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          steering_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double brake_pressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          brake_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double throttle_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          throttle_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.GearMode gear = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_gear(static_cast<::sim_msg::GearMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Car2Sim::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Car2Sim)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.DriveMode drive_mode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_drive_mode(static_cast< ::sim_msg::DriveMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ProcessMode process_mode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_process_mode(static_cast< ::sim_msg::ProcessMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_angle = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steering_torque = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_torque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake_pressure = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle_value = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GearMode gear = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear(static_cast< ::sim_msg::GearMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Car2Sim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Car2Sim)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Car2Sim::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Car2Sim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.DriveMode drive_mode = 1;
  if (this->drive_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->drive_mode(), output);
  }

  // .sim_msg.ProcessMode process_mode = 2;
  if (this->process_mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->process_mode(), output);
  }

  // double steering_angle = 3;
  if (!(this->steering_angle() <= 0 && this->steering_angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->steering_angle(), output);
  }

  // double steering_torque = 4;
  if (!(this->steering_torque() <= 0 && this->steering_torque() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->steering_torque(), output);
  }

  // double brake_pressure = 5;
  if (!(this->brake_pressure() <= 0 && this->brake_pressure() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->brake_pressure(), output);
  }

  // double throttle_value = 6;
  if (!(this->throttle_value() <= 0 && this->throttle_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->throttle_value(), output);
  }

  // .sim_msg.GearMode gear = 7;
  if (this->gear() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->gear(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Car2Sim)
}

::PROTOBUF_NAMESPACE_ID::uint8* Car2Sim::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Car2Sim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.DriveMode drive_mode = 1;
  if (this->drive_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->drive_mode(), target);
  }

  // .sim_msg.ProcessMode process_mode = 2;
  if (this->process_mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->process_mode(), target);
  }

  // double steering_angle = 3;
  if (!(this->steering_angle() <= 0 && this->steering_angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->steering_angle(), target);
  }

  // double steering_torque = 4;
  if (!(this->steering_torque() <= 0 && this->steering_torque() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->steering_torque(), target);
  }

  // double brake_pressure = 5;
  if (!(this->brake_pressure() <= 0 && this->brake_pressure() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->brake_pressure(), target);
  }

  // double throttle_value = 6;
  if (!(this->throttle_value() <= 0 && this->throttle_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->throttle_value(), target);
  }

  // .sim_msg.GearMode gear = 7;
  if (this->gear() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->gear(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Car2Sim)
  return target;
}

size_t Car2Sim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Car2Sim)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.DriveMode drive_mode = 1;
  if (this->drive_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->drive_mode());
  }

  // .sim_msg.ProcessMode process_mode = 2;
  if (this->process_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->process_mode());
  }

  // double steering_angle = 3;
  if (!(this->steering_angle() <= 0 && this->steering_angle() >= 0)) {
    total_size += 1 + 8;
  }

  // double steering_torque = 4;
  if (!(this->steering_torque() <= 0 && this->steering_torque() >= 0)) {
    total_size += 1 + 8;
  }

  // double brake_pressure = 5;
  if (!(this->brake_pressure() <= 0 && this->brake_pressure() >= 0)) {
    total_size += 1 + 8;
  }

  // double throttle_value = 6;
  if (!(this->throttle_value() <= 0 && this->throttle_value() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.GearMode gear = 7;
  if (this->gear() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->gear());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Car2Sim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Car2Sim)
  GOOGLE_DCHECK_NE(&from, this);
  const Car2Sim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Car2Sim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Car2Sim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Car2Sim)
    MergeFrom(*source);
  }
}

void Car2Sim::MergeFrom(const Car2Sim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Car2Sim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.drive_mode() != 0) {
    set_drive_mode(from.drive_mode());
  }
  if (from.process_mode() != 0) {
    set_process_mode(from.process_mode());
  }
  if (!(from.steering_angle() <= 0 && from.steering_angle() >= 0)) {
    set_steering_angle(from.steering_angle());
  }
  if (!(from.steering_torque() <= 0 && from.steering_torque() >= 0)) {
    set_steering_torque(from.steering_torque());
  }
  if (!(from.brake_pressure() <= 0 && from.brake_pressure() >= 0)) {
    set_brake_pressure(from.brake_pressure());
  }
  if (!(from.throttle_value() <= 0 && from.throttle_value() >= 0)) {
    set_throttle_value(from.throttle_value());
  }
  if (from.gear() != 0) {
    set_gear(from.gear());
  }
}

void Car2Sim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Car2Sim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Car2Sim::CopyFrom(const Car2Sim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Car2Sim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Car2Sim::IsInitialized() const {
  return true;
}

void Car2Sim::InternalSwap(Car2Sim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(drive_mode_, other->drive_mode_);
  swap(process_mode_, other->process_mode_);
  swap(steering_angle_, other->steering_angle_);
  swap(steering_torque_, other->steering_torque_);
  swap(brake_pressure_, other->brake_pressure_);
  swap(throttle_value_, other->throttle_value_);
  swap(gear_, other->gear_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Car2Sim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ControlSim::InitAsDefaultInstance() {
  ::sim_msg::_ControlSim_default_instance_._instance.get_mutable()->sim2car_ = const_cast< ::sim_msg::Sim2Car*>(
      ::sim_msg::Sim2Car::internal_default_instance());
  ::sim_msg::_ControlSim_default_instance_._instance.get_mutable()->car2sim_ = const_cast< ::sim_msg::Car2Sim*>(
      ::sim_msg::Car2Sim::internal_default_instance());
}
class ControlSim::_Internal {
 public:
  static const ::sim_msg::Sim2Car& sim2car(const ControlSim* msg);
  static const ::sim_msg::Car2Sim& car2sim(const ControlSim* msg);
};

const ::sim_msg::Sim2Car&
ControlSim::_Internal::sim2car(const ControlSim* msg) {
  return *msg->sim2car_;
}
const ::sim_msg::Car2Sim&
ControlSim::_Internal::car2sim(const ControlSim* msg) {
  return *msg->car2sim_;
}
ControlSim::ControlSim()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ControlSim)
}
ControlSim::ControlSim(const ControlSim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sim2car()) {
    sim2car_ = new ::sim_msg::Sim2Car(*from.sim2car_);
  } else {
    sim2car_ = nullptr;
  }
  if (from.has_car2sim()) {
    car2sim_ = new ::sim_msg::Car2Sim(*from.car2sim_);
  } else {
    car2sim_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.ControlSim)
}

void ControlSim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ControlSim_controlSim_2eproto.base);
  ::memset(&sim2car_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&car2sim_) -
      reinterpret_cast<char*>(&sim2car_)) + sizeof(car2sim_));
}

ControlSim::~ControlSim() {
  // @@protoc_insertion_point(destructor:sim_msg.ControlSim)
  SharedDtor();
}

void ControlSim::SharedDtor() {
  if (this != internal_default_instance()) delete sim2car_;
  if (this != internal_default_instance()) delete car2sim_;
}

void ControlSim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ControlSim& ControlSim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ControlSim_controlSim_2eproto.base);
  return *internal_default_instance();
}


void ControlSim::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ControlSim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && sim2car_ != nullptr) {
    delete sim2car_;
  }
  sim2car_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && car2sim_ != nullptr) {
    delete car2sim_;
  }
  car2sim_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ControlSim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Sim2Car sim2car = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sim2car(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Car2Sim car2sim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_car2sim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ControlSim::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ControlSim)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Sim2Car sim2car = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sim2car()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Car2Sim car2sim = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_car2sim()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ControlSim)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ControlSim)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ControlSim::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ControlSim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Sim2Car sim2car = 1;
  if (this->has_sim2car()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sim2car(this), output);
  }

  // .sim_msg.Car2Sim car2sim = 2;
  if (this->has_car2sim()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::car2sim(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ControlSim)
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlSim::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ControlSim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Sim2Car sim2car = 1;
  if (this->has_sim2car()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sim2car(this), target);
  }

  // .sim_msg.Car2Sim car2sim = 2;
  if (this->has_car2sim()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::car2sim(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ControlSim)
  return target;
}

size_t ControlSim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ControlSim)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Sim2Car sim2car = 1;
  if (this->has_sim2car()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sim2car_);
  }

  // .sim_msg.Car2Sim car2sim = 2;
  if (this->has_car2sim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *car2sim_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlSim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ControlSim)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlSim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlSim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ControlSim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ControlSim)
    MergeFrom(*source);
  }
}

void ControlSim::MergeFrom(const ControlSim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ControlSim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sim2car()) {
    mutable_sim2car()->::sim_msg::Sim2Car::MergeFrom(from.sim2car());
  }
  if (from.has_car2sim()) {
    mutable_car2sim()->::sim_msg::Car2Sim::MergeFrom(from.car2sim());
  }
}

void ControlSim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ControlSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlSim::CopyFrom(const ControlSim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ControlSim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSim::IsInitialized() const {
  return true;
}

void ControlSim::InternalSwap(ControlSim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sim2car_, other->sim2car_);
  swap(car2sim_, other->car2sim_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSim::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Sim2Car* Arena::CreateMaybeMessage< ::sim_msg::Sim2Car >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Sim2Car >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Car2Sim* Arena::CreateMaybeMessage< ::sim_msg::Car2Sim >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Car2Sim >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ControlSim* Arena::CreateMaybeMessage< ::sim_msg::ControlSim >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ControlSim >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
