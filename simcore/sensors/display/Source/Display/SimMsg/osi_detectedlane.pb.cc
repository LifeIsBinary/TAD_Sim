// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedlane.proto
#pragma warning (disable : 4125)

#include "osi_detectedlane.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ColorDescription_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedobject_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedlane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedlane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Lane_Classification_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flane_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LaneBoundary_Classification_osi_5flane_2eproto;
namespace osi3 {
class DetectedLane_CandidateLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedLane_CandidateLane> _instance;
} _DetectedLane_CandidateLane_default_instance_;
class DetectedLaneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedLane> _instance;
} _DetectedLane_default_instance_;
class DetectedLaneBoundary_CandidateLaneBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedLaneBoundary_CandidateLaneBoundary> _instance;
} _DetectedLaneBoundary_CandidateLaneBoundary_default_instance_;
class DetectedLaneBoundaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DetectedLaneBoundary> _instance;
} _DetectedLaneBoundary_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_DetectedLane_osi_5fdetectedlane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedLane_default_instance_;
    new (ptr) ::osi3::DetectedLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DetectedLane_osi_5fdetectedlane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_DetectedLane_osi_5fdetectedlane_2eproto}, {
      &scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base,
      &scc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto.base,}};

static void InitDefaultsscc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedLane_CandidateLane_default_instance_;
    new (ptr) ::osi3::DetectedLane_CandidateLane();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedLane_CandidateLane::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto}, {
      &scc_info_Lane_Classification_osi_5flane_2eproto.base,}};

static void InitDefaultsscc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedLaneBoundary_default_instance_;
    new (ptr) ::osi3::DetectedLaneBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedLaneBoundary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto}, {
      &scc_info_DetectedItemHeader_osi_5fdetectedobject_2eproto.base,
      &scc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto.base,
      &scc_info_LaneBoundary_BoundaryPoint_osi_5flane_2eproto.base,
      &scc_info_ColorDescription_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_DetectedLaneBoundary_CandidateLaneBoundary_default_instance_;
    new (ptr) ::osi3::DetectedLaneBoundary_CandidateLaneBoundary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::DetectedLaneBoundary_CandidateLaneBoundary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto}, {
      &scc_info_LaneBoundary_Classification_osi_5flane_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fdetectedlane_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_osi_5fdetectedlane_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fdetectedlane_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fdetectedlane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane_CandidateLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane_CandidateLane, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane_CandidateLane, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLane, candidate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary_CandidateLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary_CandidateLaneBoundary, probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary_CandidateLaneBoundary, classification_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, candidate_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, boundary_line_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, boundary_line_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, boundary_line_confidences_),
  PROTOBUF_FIELD_OFFSET(::osi3::DetectedLaneBoundary, color_description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::DetectedLane_CandidateLane)},
  { 7, -1, sizeof(::osi3::DetectedLane)},
  { 14, -1, sizeof(::osi3::DetectedLaneBoundary_CandidateLaneBoundary)},
  { 21, -1, sizeof(::osi3::DetectedLaneBoundary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedLane_CandidateLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedLane_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedLaneBoundary_CandidateLaneBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_DetectedLaneBoundary_default_instance_),
};

const char descriptor_table_protodef_osi_5fdetectedlane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026osi_detectedlane.proto\022\004osi3\032\016osi_lane"
  ".proto\032\030osi_detectedobject.proto\032\020osi_co"
  "mmon.proto\"\306\001\n\014DetectedLane\022(\n\006header\030\001 "
  "\001(\0132\030.osi3.DetectedItemHeader\0223\n\tcandida"
  "te\030\002 \003(\0132 .osi3.DetectedLane.CandidateLa"
  "ne\032W\n\rCandidateLane\022\023\n\013probability\030\001 \001(\001"
  "\0221\n\016classification\030\002 \001(\0132\031.osi3.Lane.Cla"
  "ssification\"\273\003\n\024DetectedLaneBoundary\022(\n\006"
  "header\030\001 \001(\0132\030.osi3.DetectedItemHeader\022C"
  "\n\tcandidate\030\002 \003(\01320.osi3.DetectedLaneBou"
  "ndary.CandidateLaneBoundary\0227\n\rboundary_"
  "line\030\003 \003(\0132 .osi3.LaneBoundary.BoundaryP"
  "oint\022<\n\022boundary_line_rmse\030\004 \003(\0132 .osi3."
  "LaneBoundary.BoundaryPoint\022!\n\031boundary_l"
  "ine_confidences\030\005 \003(\001\0221\n\021color_descripti"
  "on\030\006 \001(\0132\026.osi3.ColorDescription\032g\n\025Cand"
  "idateLaneBoundary\022\023\n\013probability\030\001 \001(\001\0229"
  "\n\016classification\030\002 \001(\0132!.osi3.LaneBounda"
  "ry.ClassificationB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fdetectedlane_2eproto_deps[3] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fdetectedobject_2eproto,
  &::descriptor_table_osi_5flane_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fdetectedlane_2eproto_sccs[4] = {
  &scc_info_DetectedLane_osi_5fdetectedlane_2eproto.base,
  &scc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto.base,
  &scc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto.base,
  &scc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fdetectedlane_2eproto_once;
static bool descriptor_table_osi_5fdetectedlane_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedlane_2eproto = {
  &descriptor_table_osi_5fdetectedlane_2eproto_initialized, descriptor_table_protodef_osi_5fdetectedlane_2eproto, "osi_detectedlane.proto", 749,
  &descriptor_table_osi_5fdetectedlane_2eproto_once, descriptor_table_osi_5fdetectedlane_2eproto_sccs, descriptor_table_osi_5fdetectedlane_2eproto_deps, 4, 3,
  schemas, file_default_instances, TableStruct_osi_5fdetectedlane_2eproto::offsets,
  file_level_metadata_osi_5fdetectedlane_2eproto, 4, file_level_enum_descriptors_osi_5fdetectedlane_2eproto, file_level_service_descriptors_osi_5fdetectedlane_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fdetectedlane_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fdetectedlane_2eproto), true);
namespace osi3 {

// ===================================================================

void DetectedLane_CandidateLane::InitAsDefaultInstance() {
  ::osi3::_DetectedLane_CandidateLane_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::Lane_Classification*>(
      ::osi3::Lane_Classification::internal_default_instance());
}
class DetectedLane_CandidateLane::_Internal {
 public:
  static const ::osi3::Lane_Classification& classification(const DetectedLane_CandidateLane* msg);
};

const ::osi3::Lane_Classification&
DetectedLane_CandidateLane::_Internal::classification(const DetectedLane_CandidateLane* msg) {
  return *msg->classification_;
}
void DetectedLane_CandidateLane::clear_classification() {
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
DetectedLane_CandidateLane::DetectedLane_CandidateLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLane.CandidateLane)
}
DetectedLane_CandidateLane::DetectedLane_CandidateLane(const DetectedLane_CandidateLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classification()) {
    classification_ = new ::osi3::Lane_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLane.CandidateLane)
}

void DetectedLane_CandidateLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto.base);
  ::memset(&classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedLane_CandidateLane::~DetectedLane_CandidateLane() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLane.CandidateLane)
  SharedDtor();
}

void DetectedLane_CandidateLane::SharedDtor() {
  if (this != internal_default_instance()) delete classification_;
}

void DetectedLane_CandidateLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedLane_CandidateLane& DetectedLane_CandidateLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedLane_CandidateLane_osi_5fdetectedlane_2eproto.base);
  return *internal_default_instance();
}


void DetectedLane_CandidateLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLane.CandidateLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedLane_CandidateLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Lane.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedLane_CandidateLane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLane.CandidateLane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Lane.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLane.CandidateLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLane.CandidateLane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedLane_CandidateLane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLane.CandidateLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLane.CandidateLane)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedLane_CandidateLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLane.CandidateLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLane.CandidateLane)
  return target;
}

size_t DetectedLane_CandidateLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLane.CandidateLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.Lane.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedLane_CandidateLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLane.CandidateLane)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedLane_CandidateLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedLane_CandidateLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLane.CandidateLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLane.CandidateLane)
    MergeFrom(*source);
  }
}

void DetectedLane_CandidateLane::MergeFrom(const DetectedLane_CandidateLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLane.CandidateLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classification()) {
    mutable_classification()->::osi3::Lane_Classification::MergeFrom(from.classification());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
}

void DetectedLane_CandidateLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLane.CandidateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLane_CandidateLane::CopyFrom(const DetectedLane_CandidateLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLane.CandidateLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLane_CandidateLane::IsInitialized() const {
  return true;
}

void DetectedLane_CandidateLane::InternalSwap(DetectedLane_CandidateLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classification_, other->classification_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLane_CandidateLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedLane::InitAsDefaultInstance() {
  ::osi3::_DetectedLane_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::DetectedItemHeader*>(
      ::osi3::DetectedItemHeader::internal_default_instance());
}
class DetectedLane::_Internal {
 public:
  static const ::osi3::DetectedItemHeader& header(const DetectedLane* msg);
};

const ::osi3::DetectedItemHeader&
DetectedLane::_Internal::header(const DetectedLane* msg) {
  return *msg->header_;
}
void DetectedLane::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
DetectedLane::DetectedLane()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLane)
}
DetectedLane::DetectedLane(const DetectedLane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candidate_(from.candidate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLane)
}

void DetectedLane::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedLane_osi_5fdetectedlane_2eproto.base);
  header_ = nullptr;
}

DetectedLane::~DetectedLane() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLane)
  SharedDtor();
}

void DetectedLane::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void DetectedLane::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedLane& DetectedLane::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedLane_osi_5fdetectedlane_2eproto.base);
  return *internal_default_instance();
}


void DetectedLane::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedLane::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedLane::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLane)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLane)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedLane::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->candidate(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLane)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedLane::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLane)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->candidate(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLane)
  return target;
}

size_t DetectedLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLane)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedLane.CandidateLane candidate = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedLane::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLane)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedLane* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedLane>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLane)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLane)
    MergeFrom(*source);
  }
}

void DetectedLane::MergeFrom(const DetectedLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  if (from.has_header()) {
    mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
  }
}

void DetectedLane::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLane::CopyFrom(const DetectedLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLane::IsInitialized() const {
  return true;
}

void DetectedLane::InternalSwap(DetectedLane* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLane::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedLaneBoundary_CandidateLaneBoundary::InitAsDefaultInstance() {
  ::osi3::_DetectedLaneBoundary_CandidateLaneBoundary_default_instance_._instance.get_mutable()->classification_ = const_cast< ::osi3::LaneBoundary_Classification*>(
      ::osi3::LaneBoundary_Classification::internal_default_instance());
}
class DetectedLaneBoundary_CandidateLaneBoundary::_Internal {
 public:
  static const ::osi3::LaneBoundary_Classification& classification(const DetectedLaneBoundary_CandidateLaneBoundary* msg);
};

const ::osi3::LaneBoundary_Classification&
DetectedLaneBoundary_CandidateLaneBoundary::_Internal::classification(const DetectedLaneBoundary_CandidateLaneBoundary* msg) {
  return *msg->classification_;
}
void DetectedLaneBoundary_CandidateLaneBoundary::clear_classification() {
  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
}
DetectedLaneBoundary_CandidateLaneBoundary::DetectedLaneBoundary_CandidateLaneBoundary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}
DetectedLaneBoundary_CandidateLaneBoundary::DetectedLaneBoundary_CandidateLaneBoundary(const DetectedLaneBoundary_CandidateLaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_classification()) {
    classification_ = new ::osi3::LaneBoundary_Classification(*from.classification_);
  } else {
    classification_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}

void DetectedLaneBoundary_CandidateLaneBoundary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto.base);
  ::memset(&classification_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&classification_)) + sizeof(probability_));
}

DetectedLaneBoundary_CandidateLaneBoundary::~DetectedLaneBoundary_CandidateLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  SharedDtor();
}

void DetectedLaneBoundary_CandidateLaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete classification_;
}

void DetectedLaneBoundary_CandidateLaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedLaneBoundary_CandidateLaneBoundary& DetectedLaneBoundary_CandidateLaneBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedLaneBoundary_CandidateLaneBoundary_osi_5fdetectedlane_2eproto.base);
  return *internal_default_instance();
}


void DetectedLaneBoundary_CandidateLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && classification_ != nullptr) {
    delete classification_;
  }
  classification_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedLaneBoundary_CandidateLaneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.LaneBoundary.Classification classification = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_classification(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedLaneBoundary_CandidateLaneBoundary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LaneBoundary.Classification classification = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_classification()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedLaneBoundary_CandidateLaneBoundary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->probability(), output);
  }

  // .osi3.LaneBoundary.Classification classification = 2;
  if (this->has_classification()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::classification(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedLaneBoundary_CandidateLaneBoundary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->probability(), target);
  }

  // .osi3.LaneBoundary.Classification classification = 2;
  if (this->has_classification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::classification(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  return target;
}

size_t DetectedLaneBoundary_CandidateLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.LaneBoundary.Classification classification = 2;
  if (this->has_classification()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *classification_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedLaneBoundary_CandidateLaneBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedLaneBoundary_CandidateLaneBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedLaneBoundary_CandidateLaneBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
    MergeFrom(*source);
  }
}

void DetectedLaneBoundary_CandidateLaneBoundary::MergeFrom(const DetectedLaneBoundary_CandidateLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_classification()) {
    mutable_classification()->::osi3::LaneBoundary_Classification::MergeFrom(from.classification());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    set_probability(from.probability());
  }
}

void DetectedLaneBoundary_CandidateLaneBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLaneBoundary_CandidateLaneBoundary::CopyFrom(const DetectedLaneBoundary_CandidateLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLaneBoundary.CandidateLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLaneBoundary_CandidateLaneBoundary::IsInitialized() const {
  return true;
}

void DetectedLaneBoundary_CandidateLaneBoundary::InternalSwap(DetectedLaneBoundary_CandidateLaneBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(classification_, other->classification_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLaneBoundary_CandidateLaneBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DetectedLaneBoundary::InitAsDefaultInstance() {
  ::osi3::_DetectedLaneBoundary_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::DetectedItemHeader*>(
      ::osi3::DetectedItemHeader::internal_default_instance());
  ::osi3::_DetectedLaneBoundary_default_instance_._instance.get_mutable()->color_description_ = const_cast< ::osi3::ColorDescription*>(
      ::osi3::ColorDescription::internal_default_instance());
}
class DetectedLaneBoundary::_Internal {
 public:
  static const ::osi3::DetectedItemHeader& header(const DetectedLaneBoundary* msg);
  static const ::osi3::ColorDescription& color_description(const DetectedLaneBoundary* msg);
};

const ::osi3::DetectedItemHeader&
DetectedLaneBoundary::_Internal::header(const DetectedLaneBoundary* msg) {
  return *msg->header_;
}
const ::osi3::ColorDescription&
DetectedLaneBoundary::_Internal::color_description(const DetectedLaneBoundary* msg) {
  return *msg->color_description_;
}
void DetectedLaneBoundary::clear_header() {
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
void DetectedLaneBoundary::clear_boundary_line() {
  boundary_line_.Clear();
}
void DetectedLaneBoundary::clear_boundary_line_rmse() {
  boundary_line_rmse_.Clear();
}
void DetectedLaneBoundary::clear_color_description() {
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
}
DetectedLaneBoundary::DetectedLaneBoundary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.DetectedLaneBoundary)
}
DetectedLaneBoundary::DetectedLaneBoundary(const DetectedLaneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      candidate_(from.candidate_),
      boundary_line_(from.boundary_line_),
      boundary_line_rmse_(from.boundary_line_rmse_),
      boundary_line_confidences_(from.boundary_line_confidences_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::osi3::DetectedItemHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from.has_color_description()) {
    color_description_ = new ::osi3::ColorDescription(*from.color_description_);
  } else {
    color_description_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.DetectedLaneBoundary)
}

void DetectedLaneBoundary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_description_) -
      reinterpret_cast<char*>(&header_)) + sizeof(color_description_));
}

DetectedLaneBoundary::~DetectedLaneBoundary() {
  // @@protoc_insertion_point(destructor:osi3.DetectedLaneBoundary)
  SharedDtor();
}

void DetectedLaneBoundary::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete color_description_;
}

void DetectedLaneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DetectedLaneBoundary& DetectedLaneBoundary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DetectedLaneBoundary_osi_5fdetectedlane_2eproto.base);
  return *internal_default_instance();
}


void DetectedLaneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.DetectedLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidate_.Clear();
  boundary_line_.Clear();
  boundary_line_rmse_.Clear();
  boundary_line_confidences_.Clear();
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && color_description_ != nullptr) {
    delete color_description_;
  }
  color_description_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DetectedLaneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.DetectedItemHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_candidate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_boundary_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_boundary_line_rmse(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated double boundary_line_confidences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(mutable_boundary_line_confidences(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          add_boundary_line_confidences(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.ColorDescription color_description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_color_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DetectedLaneBoundary::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.DetectedLaneBoundary)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.DetectedItemHeader header = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_candidate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_boundary_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_boundary_line_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double boundary_line_confidences = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_boundary_line_confidences())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 42u, input, this->mutable_boundary_line_confidences())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.ColorDescription color_description = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_color_description()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.DetectedLaneBoundary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.DetectedLaneBoundary)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DetectedLaneBoundary::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.DetectedLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::header(this), output);
  }

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->candidate(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->boundary_line(static_cast<int>(i)),
      output);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_rmse_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->boundary_line_rmse(static_cast<int>(i)),
      output);
  }

  // repeated double boundary_line_confidences = 5;
  if (this->boundary_line_confidences_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_boundary_line_confidences_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleArray(
      this->boundary_line_confidences().data(), this->boundary_line_confidences_size(), output);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::color_description(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.DetectedLaneBoundary)
}

::PROTOBUF_NAMESPACE_ID::uint8* DetectedLaneBoundary::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.DetectedLaneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::header(this), target);
  }

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->candidate_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->candidate(static_cast<int>(i)), target);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->boundary_line(static_cast<int>(i)), target);
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->boundary_line_rmse_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->boundary_line_rmse(static_cast<int>(i)), target);
  }

  // repeated double boundary_line_confidences = 5;
  if (this->boundary_line_confidences_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _boundary_line_confidences_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->boundary_line_confidences_, target);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::color_description(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.DetectedLaneBoundary)
  return target;
}

size_t DetectedLaneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.DetectedLaneBoundary)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.DetectedLaneBoundary.CandidateLaneBoundary candidate = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->candidate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->candidate(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_line_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->boundary_line(static_cast<int>(i)));
    }
  }

  // repeated .osi3.LaneBoundary.BoundaryPoint boundary_line_rmse = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_line_rmse_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->boundary_line_rmse(static_cast<int>(i)));
    }
  }

  // repeated double boundary_line_confidences = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->boundary_line_confidences_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _boundary_line_confidences_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .osi3.DetectedItemHeader header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .osi3.ColorDescription color_description = 6;
  if (this->has_color_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_description_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DetectedLaneBoundary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.DetectedLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  const DetectedLaneBoundary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DetectedLaneBoundary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.DetectedLaneBoundary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.DetectedLaneBoundary)
    MergeFrom(*source);
  }
}

void DetectedLaneBoundary::MergeFrom(const DetectedLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.DetectedLaneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  candidate_.MergeFrom(from.candidate_);
  boundary_line_.MergeFrom(from.boundary_line_);
  boundary_line_rmse_.MergeFrom(from.boundary_line_rmse_);
  boundary_line_confidences_.MergeFrom(from.boundary_line_confidences_);
  if (from.has_header()) {
    mutable_header()->::osi3::DetectedItemHeader::MergeFrom(from.header());
  }
  if (from.has_color_description()) {
    mutable_color_description()->::osi3::ColorDescription::MergeFrom(from.color_description());
  }
}

void DetectedLaneBoundary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.DetectedLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectedLaneBoundary::CopyFrom(const DetectedLaneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.DetectedLaneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectedLaneBoundary::IsInitialized() const {
  return true;
}

void DetectedLaneBoundary::InternalSwap(DetectedLaneBoundary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&candidate_)->InternalSwap(CastToBase(&other->candidate_));
  CastToBase(&boundary_line_)->InternalSwap(CastToBase(&other->boundary_line_));
  CastToBase(&boundary_line_rmse_)->InternalSwap(CastToBase(&other->boundary_line_rmse_));
  boundary_line_confidences_.InternalSwap(&other->boundary_line_confidences_);
  swap(header_, other->header_);
  swap(color_description_, other->color_description_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetectedLaneBoundary::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::DetectedLane_CandidateLane* Arena::CreateMaybeMessage< ::osi3::DetectedLane_CandidateLane >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedLane_CandidateLane >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedLane* Arena::CreateMaybeMessage< ::osi3::DetectedLane >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedLane >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedLaneBoundary_CandidateLaneBoundary* Arena::CreateMaybeMessage< ::osi3::DetectedLaneBoundary_CandidateLaneBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedLaneBoundary_CandidateLaneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::DetectedLaneBoundary* Arena::CreateMaybeMessage< ::osi3::DetectedLaneBoundary >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::DetectedLaneBoundary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
