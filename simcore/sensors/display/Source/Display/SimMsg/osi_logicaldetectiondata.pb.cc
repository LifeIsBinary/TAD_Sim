// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_logicaldetectiondata.proto

#pragma warning (disable : 4125)
#include "osi_logicaldetectiondata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Identifier_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fversion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterfaceVersion_osi_5fversion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicaldetectiondata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5flogicaldetectiondata_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_osi_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3d_osi_5fcommon_2eproto;
namespace osi3 {
class LogicalDetectionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalDetectionData> _instance;
} _LogicalDetectionData_default_instance_;
class LogicalDetectionDataHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalDetectionDataHeader> _instance;
} _LogicalDetectionDataHeader_default_instance_;
class LogicalDetectionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogicalDetection> _instance;
} _LogicalDetection_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalDetection_default_instance_;
    new (ptr) ::osi3::LogicalDetection();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalDetection::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto}, {
      &scc_info_Identifier_osi_5fcommon_2eproto.base,
      &scc_info_Vector3d_osi_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalDetectionData_default_instance_;
    new (ptr) ::osi3::LogicalDetectionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalDetectionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto}, {
      &scc_info_InterfaceVersion_osi_5fversion_2eproto.base,
      &scc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto.base,
      &scc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto.base,}};

static void InitDefaultsscc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_LogicalDetectionDataHeader_default_instance_;
    new (ptr) ::osi3::LogicalDetectionDataHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::LogicalDetectionDataHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto}, {
      &scc_info_Timestamp_osi_5fcommon_2eproto.base,
      &scc_info_Identifier_osi_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5flogicaldetectiondata_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5flogicaldetectiondata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5flogicaldetectiondata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, version_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, header_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionData, logical_detection_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, logical_detection_time_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, data_qualifier_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, number_of_valid_logical_detections_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetectionDataHeader, sensor_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, existence_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, object_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, position_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, position_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, velocity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, velocity_rmse_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, intensity_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, snr_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, point_target_probability_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::osi3::LogicalDetection, classification_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::LogicalDetectionData)},
  { 8, -1, sizeof(::osi3::LogicalDetectionDataHeader)},
  { 17, -1, sizeof(::osi3::LogicalDetection)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalDetectionData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalDetectionDataHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_LogicalDetection_default_instance_),
};

const char descriptor_table_protodef_osi_5flogicaldetectiondata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036osi_logicaldetectiondata.proto\022\004osi3\032\021"
  "osi_version.proto\032\020osi_common.proto\"\244\001\n\024"
  "LogicalDetectionData\022\'\n\007version\030\001 \001(\0132\026."
  "osi3.InterfaceVersion\0220\n\006header\030\002 \001(\0132 ."
  "osi3.LogicalDetectionDataHeader\0221\n\021logic"
  "al_detection\030\003 \003(\0132\026.osi3.LogicalDetecti"
  "on\"\366\003\n\032LogicalDetectionDataHeader\022/\n\026log"
  "ical_detection_time\030\001 \001(\0132\017.osi3.Timesta"
  "mp\022F\n\016data_qualifier\030\002 \001(\0162..osi3.Logica"
  "lDetectionDataHeader.DataQualifier\022*\n\"nu"
  "mber_of_valid_logical_detections\030\003 \001(\r\022#"
  "\n\tsensor_id\030\004 \003(\0132\020.osi3.Identifier\"\215\002\n\r"
  "DataQualifier\022\032\n\026DATA_QUALIFIER_UNKNOWN\020"
  "\000\022\030\n\024DATA_QUALIFIER_OTHER\020\001\022\034\n\030DATA_QUAL"
  "IFIER_AVAILABLE\020\002\022$\n DATA_QUALIFIER_AVAI"
  "LABLE_REDUCED\020\003\022 \n\034DATA_QUALIFIER_NOT_AV"
  "AILABLE\020\004\022\034\n\030DATA_QUALIFIER_BLINDNESS\020\005\022"
  "&\n\"DATA_QUALIFIER_TEMPORARY_AVAILABLE\020\006\022"
  "\032\n\026DATA_QUALIFIER_INVALID\020\007\"\215\003\n\020LogicalD"
  "etection\022\035\n\025existence_probability\030\001 \001(\001\022"
  "#\n\tobject_id\030\002 \001(\0132\020.osi3.Identifier\022 \n\010"
  "position\030\003 \001(\0132\016.osi3.Vector3d\022%\n\rpositi"
  "on_rmse\030\004 \001(\0132\016.osi3.Vector3d\022 \n\010velocit"
  "y\030\005 \001(\0132\016.osi3.Vector3d\022%\n\rvelocity_rmse"
  "\030\006 \001(\0132\016.osi3.Vector3d\022\021\n\tintensity\030\007 \001("
  "\001\022\013\n\003snr\030\010 \001(\001\022 \n\030point_target_probabili"
  "ty\030\t \001(\001\022#\n\tsensor_id\030\n \003(\0132\020.osi3.Ident"
  "ifier\022<\n\016classification\030\013 \001(\0162$.osi3.Log"
  "icalDetectionClassification*\275\002\n\036LogicalD"
  "etectionClassification\022,\n(LOGICAL_DETECT"
  "ION_CLASSIFICATION_UNKNOWN\020\000\022*\n&LOGICAL_"
  "DETECTION_CLASSIFICATION_OTHER\020\001\022,\n(LOGI"
  "CAL_DETECTION_CLASSIFICATION_INVALID\020\002\022,"
  "\n(LOGICAL_DETECTION_CLASSIFICATION_CLUTT"
  "ER\020\003\0221\n-LOGICAL_DETECTION_CLASSIFICATION"
  "_OVERDRIVABLE\020\004\0222\n.LOGICAL_DETECTION_CLA"
  "SSIFICATION_UNDERDRIVABLE\020\005B\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5flogicaldetectiondata_2eproto_deps[2] = {
  &::descriptor_table_osi_5fcommon_2eproto,
  &::descriptor_table_osi_5fversion_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5flogicaldetectiondata_2eproto_sccs[3] = {
  &scc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto.base,
  &scc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto.base,
  &scc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5flogicaldetectiondata_2eproto_once;
static bool descriptor_table_osi_5flogicaldetectiondata_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5flogicaldetectiondata_2eproto = {
  &descriptor_table_osi_5flogicaldetectiondata_2eproto_initialized, descriptor_table_protodef_osi_5flogicaldetectiondata_2eproto, "osi_logicaldetectiondata.proto", 1479,
  &descriptor_table_osi_5flogicaldetectiondata_2eproto_once, descriptor_table_osi_5flogicaldetectiondata_2eproto_sccs, descriptor_table_osi_5flogicaldetectiondata_2eproto_deps, 3, 2,
  schemas, file_default_instances, TableStruct_osi_5flogicaldetectiondata_2eproto::offsets,
  file_level_metadata_osi_5flogicaldetectiondata_2eproto, 3, file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto, file_level_service_descriptors_osi_5flogicaldetectiondata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5flogicaldetectiondata_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5flogicaldetectiondata_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionDataHeader_DataQualifier_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
  return file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[0];
}
bool LogicalDetectionDataHeader_DataQualifier_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_UNKNOWN;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_OTHER;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_AVAILABLE_REDUCED;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_NOT_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_BLINDNESS;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_TEMPORARY_AVAILABLE;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DATA_QUALIFIER_INVALID;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DataQualifier_MIN;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::DataQualifier_MAX;
constexpr int LogicalDetectionDataHeader::DataQualifier_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionClassification_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5flogicaldetectiondata_2eproto);
  return file_level_enum_descriptors_osi_5flogicaldetectiondata_2eproto[1];
}
bool LogicalDetectionClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void LogicalDetectionData::InitAsDefaultInstance() {
  ::osi3::_LogicalDetectionData_default_instance_._instance.get_mutable()->version_ = const_cast< ::osi3::InterfaceVersion*>(
      ::osi3::InterfaceVersion::internal_default_instance());
  ::osi3::_LogicalDetectionData_default_instance_._instance.get_mutable()->header_ = const_cast< ::osi3::LogicalDetectionDataHeader*>(
      ::osi3::LogicalDetectionDataHeader::internal_default_instance());
}
class LogicalDetectionData::_Internal {
 public:
  static const ::osi3::InterfaceVersion& version(const LogicalDetectionData* msg);
  static const ::osi3::LogicalDetectionDataHeader& header(const LogicalDetectionData* msg);
};

const ::osi3::InterfaceVersion&
LogicalDetectionData::_Internal::version(const LogicalDetectionData* msg) {
  return *msg->version_;
}
const ::osi3::LogicalDetectionDataHeader&
LogicalDetectionData::_Internal::header(const LogicalDetectionData* msg) {
  return *msg->header_;
}
void LogicalDetectionData::clear_version() {
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
LogicalDetectionData::LogicalDetectionData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalDetectionData)
}
LogicalDetectionData::LogicalDetectionData(const LogicalDetectionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      logical_detection_(from.logical_detection_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_version()) {
    version_ = new ::osi3::InterfaceVersion(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from.has_header()) {
    header_ = new ::osi3::LogicalDetectionDataHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetectionData)
}

void LogicalDetectionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto.base);
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&header_) -
      reinterpret_cast<char*>(&version_)) + sizeof(header_));
}

LogicalDetectionData::~LogicalDetectionData() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetectionData)
  SharedDtor();
}

void LogicalDetectionData::SharedDtor() {
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete header_;
}

void LogicalDetectionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalDetectionData& LogicalDetectionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalDetectionData_osi_5flogicaldetectiondata_2eproto.base);
  return *internal_default_instance();
}


void LogicalDetectionData::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_detection_.Clear();
  if (GetArenaNoVirtual() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalDetectionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.InterfaceVersion version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.LogicalDetectionDataHeader header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.LogicalDetection logical_detection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_logical_detection(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalDetectionData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalDetectionData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.InterfaceVersion version = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LogicalDetectionDataHeader header = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.LogicalDetection logical_detection = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_logical_detection()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalDetectionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalDetectionData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalDetectionData::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::version(this), output);
  }

  // .osi3.LogicalDetectionDataHeader header = 2;
  if (this->has_header()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::header(this), output);
  }

  // repeated .osi3.LogicalDetection logical_detection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_detection_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->logical_detection(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalDetectionData)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalDetectionData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetectionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::version(this), target);
  }

  // .osi3.LogicalDetectionDataHeader header = 2;
  if (this->has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::header(this), target);
  }

  // repeated .osi3.LogicalDetection logical_detection = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logical_detection_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->logical_detection(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetectionData)
  return target;
}

size_t LogicalDetectionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetectionData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.LogicalDetection logical_detection = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->logical_detection_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->logical_detection(static_cast<int>(i)));
    }
  }

  // .osi3.InterfaceVersion version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  // .osi3.LogicalDetectionDataHeader header = 2;
  if (this->has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalDetectionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalDetectionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalDetectionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalDetectionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalDetectionData)
    MergeFrom(*source);
  }
}

void LogicalDetectionData::MergeFrom(const LogicalDetectionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetectionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logical_detection_.MergeFrom(from.logical_detection_);
  if (from.has_version()) {
    mutable_version()->::osi3::InterfaceVersion::MergeFrom(from.version());
  }
  if (from.has_header()) {
    mutable_header()->::osi3::LogicalDetectionDataHeader::MergeFrom(from.header());
  }
}

void LogicalDetectionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalDetectionData::CopyFrom(const LogicalDetectionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetectionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetectionData::IsInitialized() const {
  return true;
}

void LogicalDetectionData::InternalSwap(LogicalDetectionData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&logical_detection_)->InternalSwap(CastToBase(&other->logical_detection_));
  swap(version_, other->version_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetectionData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalDetectionDataHeader::InitAsDefaultInstance() {
  ::osi3::_LogicalDetectionDataHeader_default_instance_._instance.get_mutable()->logical_detection_time_ = const_cast< ::osi3::Timestamp*>(
      ::osi3::Timestamp::internal_default_instance());
}
class LogicalDetectionDataHeader::_Internal {
 public:
  static const ::osi3::Timestamp& logical_detection_time(const LogicalDetectionDataHeader* msg);
};

const ::osi3::Timestamp&
LogicalDetectionDataHeader::_Internal::logical_detection_time(const LogicalDetectionDataHeader* msg) {
  return *msg->logical_detection_time_;
}
void LogicalDetectionDataHeader::clear_logical_detection_time() {
  if (GetArenaNoVirtual() == nullptr && logical_detection_time_ != nullptr) {
    delete logical_detection_time_;
  }
  logical_detection_time_ = nullptr;
}
void LogicalDetectionDataHeader::clear_sensor_id() {
  sensor_id_.Clear();
}
LogicalDetectionDataHeader::LogicalDetectionDataHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalDetectionDataHeader)
}
LogicalDetectionDataHeader::LogicalDetectionDataHeader(const LogicalDetectionDataHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logical_detection_time()) {
    logical_detection_time_ = new ::osi3::Timestamp(*from.logical_detection_time_);
  } else {
    logical_detection_time_ = nullptr;
  }
  ::memcpy(&data_qualifier_, &from.data_qualifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_of_valid_logical_detections_) -
    reinterpret_cast<char*>(&data_qualifier_)) + sizeof(number_of_valid_logical_detections_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetectionDataHeader)
}

void LogicalDetectionDataHeader::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto.base);
  ::memset(&logical_detection_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_valid_logical_detections_) -
      reinterpret_cast<char*>(&logical_detection_time_)) + sizeof(number_of_valid_logical_detections_));
}

LogicalDetectionDataHeader::~LogicalDetectionDataHeader() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetectionDataHeader)
  SharedDtor();
}

void LogicalDetectionDataHeader::SharedDtor() {
  if (this != internal_default_instance()) delete logical_detection_time_;
}

void LogicalDetectionDataHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalDetectionDataHeader& LogicalDetectionDataHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalDetectionDataHeader_osi_5flogicaldetectiondata_2eproto.base);
  return *internal_default_instance();
}


void LogicalDetectionDataHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetectionDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  if (GetArenaNoVirtual() == nullptr && logical_detection_time_ != nullptr) {
    delete logical_detection_time_;
  }
  logical_detection_time_ = nullptr;
  ::memset(&data_qualifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&number_of_valid_logical_detections_) -
      reinterpret_cast<char*>(&data_qualifier_)) + sizeof(number_of_valid_logical_detections_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalDetectionDataHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.Timestamp logical_detection_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_logical_detection_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_data_qualifier(static_cast<::osi3::LogicalDetectionDataHeader_DataQualifier>(val));
        } else goto handle_unusual;
        continue;
      // uint32 number_of_valid_logical_detections = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          number_of_valid_logical_detections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalDetectionDataHeader::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalDetectionDataHeader)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.Timestamp logical_detection_time = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logical_detection_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_data_qualifier(static_cast< ::osi3::LogicalDetectionDataHeader_DataQualifier >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 number_of_valid_logical_detections = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_of_valid_logical_detections_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier sensor_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalDetectionDataHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalDetectionDataHeader)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalDetectionDataHeader::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalDetectionDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp logical_detection_time = 1;
  if (this->has_logical_detection_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::logical_detection_time(this), output);
  }

  // .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
  if (this->data_qualifier() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->data_qualifier(), output);
  }

  // uint32 number_of_valid_logical_detections = 3;
  if (this->number_of_valid_logical_detections() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->number_of_valid_logical_detections(), output);
  }

  // repeated .osi3.Identifier sensor_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->sensor_id(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalDetectionDataHeader)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalDetectionDataHeader::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetectionDataHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.Timestamp logical_detection_time = 1;
  if (this->has_logical_detection_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::logical_detection_time(this), target);
  }

  // .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
  if (this->data_qualifier() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_qualifier(), target);
  }

  // uint32 number_of_valid_logical_detections = 3;
  if (this->number_of_valid_logical_detections() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->number_of_valid_logical_detections(), target);
  }

  // repeated .osi3.Identifier sensor_id = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sensor_id(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetectionDataHeader)
  return target;
}

size_t LogicalDetectionDataHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetectionDataHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier sensor_id = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_id(static_cast<int>(i)));
    }
  }

  // .osi3.Timestamp logical_detection_time = 1;
  if (this->has_logical_detection_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logical_detection_time_);
  }

  // .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
  if (this->data_qualifier() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->data_qualifier());
  }

  // uint32 number_of_valid_logical_detections = 3;
  if (this->number_of_valid_logical_detections() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->number_of_valid_logical_detections());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalDetectionDataHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalDetectionDataHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalDetectionDataHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalDetectionDataHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalDetectionDataHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalDetectionDataHeader)
    MergeFrom(*source);
  }
}

void LogicalDetectionDataHeader::MergeFrom(const LogicalDetectionDataHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetectionDataHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
  if (from.has_logical_detection_time()) {
    mutable_logical_detection_time()->::osi3::Timestamp::MergeFrom(from.logical_detection_time());
  }
  if (from.data_qualifier() != 0) {
    set_data_qualifier(from.data_qualifier());
  }
  if (from.number_of_valid_logical_detections() != 0) {
    set_number_of_valid_logical_detections(from.number_of_valid_logical_detections());
  }
}

void LogicalDetectionDataHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalDetectionDataHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalDetectionDataHeader::CopyFrom(const LogicalDetectionDataHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetectionDataHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetectionDataHeader::IsInitialized() const {
  return true;
}

void LogicalDetectionDataHeader::InternalSwap(LogicalDetectionDataHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensor_id_)->InternalSwap(CastToBase(&other->sensor_id_));
  swap(logical_detection_time_, other->logical_detection_time_);
  swap(data_qualifier_, other->data_qualifier_);
  swap(number_of_valid_logical_detections_, other->number_of_valid_logical_detections_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetectionDataHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogicalDetection::InitAsDefaultInstance() {
  ::osi3::_LogicalDetection_default_instance_._instance.get_mutable()->object_id_ = const_cast< ::osi3::Identifier*>(
      ::osi3::Identifier::internal_default_instance());
  ::osi3::_LogicalDetection_default_instance_._instance.get_mutable()->position_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_LogicalDetection_default_instance_._instance.get_mutable()->position_rmse_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_LogicalDetection_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
  ::osi3::_LogicalDetection_default_instance_._instance.get_mutable()->velocity_rmse_ = const_cast< ::osi3::Vector3d*>(
      ::osi3::Vector3d::internal_default_instance());
}
class LogicalDetection::_Internal {
 public:
  static const ::osi3::Identifier& object_id(const LogicalDetection* msg);
  static const ::osi3::Vector3d& position(const LogicalDetection* msg);
  static const ::osi3::Vector3d& position_rmse(const LogicalDetection* msg);
  static const ::osi3::Vector3d& velocity(const LogicalDetection* msg);
  static const ::osi3::Vector3d& velocity_rmse(const LogicalDetection* msg);
};

const ::osi3::Identifier&
LogicalDetection::_Internal::object_id(const LogicalDetection* msg) {
  return *msg->object_id_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::position(const LogicalDetection* msg) {
  return *msg->position_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::position_rmse(const LogicalDetection* msg) {
  return *msg->position_rmse_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::velocity(const LogicalDetection* msg) {
  return *msg->velocity_;
}
const ::osi3::Vector3d&
LogicalDetection::_Internal::velocity_rmse(const LogicalDetection* msg) {
  return *msg->velocity_rmse_;
}
void LogicalDetection::clear_object_id() {
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
}
void LogicalDetection::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void LogicalDetection::clear_position_rmse() {
  if (GetArenaNoVirtual() == nullptr && position_rmse_ != nullptr) {
    delete position_rmse_;
  }
  position_rmse_ = nullptr;
}
void LogicalDetection::clear_velocity() {
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void LogicalDetection::clear_velocity_rmse() {
  if (GetArenaNoVirtual() == nullptr && velocity_rmse_ != nullptr) {
    delete velocity_rmse_;
  }
  velocity_rmse_ = nullptr;
}
void LogicalDetection::clear_sensor_id() {
  sensor_id_.Clear();
}
LogicalDetection::LogicalDetection()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.LogicalDetection)
}
LogicalDetection::LogicalDetection(const LogicalDetection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sensor_id_(from.sensor_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_object_id()) {
    object_id_ = new ::osi3::Identifier(*from.object_id_);
  } else {
    object_id_ = nullptr;
  }
  if (from.has_position()) {
    position_ = new ::osi3::Vector3d(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from.has_position_rmse()) {
    position_rmse_ = new ::osi3::Vector3d(*from.position_rmse_);
  } else {
    position_rmse_ = nullptr;
  }
  if (from.has_velocity()) {
    velocity_ = new ::osi3::Vector3d(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from.has_velocity_rmse()) {
    velocity_rmse_ = new ::osi3::Vector3d(*from.velocity_rmse_);
  } else {
    velocity_rmse_ = nullptr;
  }
  ::memcpy(&existence_probability_, &from.existence_probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&classification_) -
    reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  // @@protoc_insertion_point(copy_constructor:osi3.LogicalDetection)
}

void LogicalDetection::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto.base);
  ::memset(&object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&object_id_)) + sizeof(classification_));
}

LogicalDetection::~LogicalDetection() {
  // @@protoc_insertion_point(destructor:osi3.LogicalDetection)
  SharedDtor();
}

void LogicalDetection::SharedDtor() {
  if (this != internal_default_instance()) delete object_id_;
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete position_rmse_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete velocity_rmse_;
}

void LogicalDetection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogicalDetection& LogicalDetection::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogicalDetection_osi_5flogicaldetectiondata_2eproto.base);
  return *internal_default_instance();
}


void LogicalDetection::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.LogicalDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sensor_id_.Clear();
  if (GetArenaNoVirtual() == nullptr && object_id_ != nullptr) {
    delete object_id_;
  }
  object_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && position_rmse_ != nullptr) {
    delete position_rmse_;
  }
  position_rmse_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && velocity_rmse_ != nullptr) {
    delete velocity_rmse_;
  }
  velocity_rmse_ = nullptr;
  ::memset(&existence_probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&classification_) -
      reinterpret_cast<char*>(&existence_probability_)) + sizeof(classification_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LogicalDetection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double existence_probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          existence_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.Identifier object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_object_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d position_rmse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_position_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.Vector3d velocity_rmse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_velocity_rmse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double intensity = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double snr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          snr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double point_target_probability = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          point_target_probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.Identifier sensor_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_sensor_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // .osi3.LogicalDetectionClassification classification = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_classification(static_cast<::osi3::LogicalDetectionClassification>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LogicalDetection::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.LogicalDetection)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double existence_probability = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Identifier object_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_object_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d position = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d position_rmse = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d velocity = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.Vector3d velocity_rmse = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity_rmse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double intensity = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double snr = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (65 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &snr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double point_target_probability = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (73 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &point_target_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.Identifier sensor_id = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_sensor_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.LogicalDetectionClassification classification = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_classification(static_cast< ::osi3::LogicalDetectionClassification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.LogicalDetection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.LogicalDetection)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void LogicalDetection::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.LogicalDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->existence_probability(), output);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::object_id(this), output);
  }

  // .osi3.Vector3d position = 3;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::position(this), output);
  }

  // .osi3.Vector3d position_rmse = 4;
  if (this->has_position_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::position_rmse(this), output);
  }

  // .osi3.Vector3d velocity = 5;
  if (this->has_velocity()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::velocity(this), output);
  }

  // .osi3.Vector3d velocity_rmse = 6;
  if (this->has_velocity_rmse()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::velocity_rmse(this), output);
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->intensity(), output);
  }

  // double snr = 8;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(8, this->snr(), output);
  }

  // double point_target_probability = 9;
  if (!(this->point_target_probability() <= 0 && this->point_target_probability() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(9, this->point_target_probability(), output);
  }

  // repeated .osi3.Identifier sensor_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->sensor_id(static_cast<int>(i)),
      output);
  }

  // .osi3.LogicalDetectionClassification classification = 11;
  if (this->classification() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      11, this->classification(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.LogicalDetection)
}

::PROTOBUF_NAMESPACE_ID::uint8* LogicalDetection::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.LogicalDetection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->existence_probability(), target);
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::object_id(this), target);
  }

  // .osi3.Vector3d position = 3;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::position(this), target);
  }

  // .osi3.Vector3d position_rmse = 4;
  if (this->has_position_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::position_rmse(this), target);
  }

  // .osi3.Vector3d velocity = 5;
  if (this->has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::velocity(this), target);
  }

  // .osi3.Vector3d velocity_rmse = 6;
  if (this->has_velocity_rmse()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::velocity_rmse(this), target);
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->intensity(), target);
  }

  // double snr = 8;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->snr(), target);
  }

  // double point_target_probability = 9;
  if (!(this->point_target_probability() <= 0 && this->point_target_probability() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->point_target_probability(), target);
  }

  // repeated .osi3.Identifier sensor_id = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sensor_id_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->sensor_id(static_cast<int>(i)), target);
  }

  // .osi3.LogicalDetectionClassification classification = 11;
  if (this->classification() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->classification(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.LogicalDetection)
  return target;
}

size_t LogicalDetection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.LogicalDetection)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.Identifier sensor_id = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->sensor_id_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->sensor_id(static_cast<int>(i)));
    }
  }

  // .osi3.Identifier object_id = 2;
  if (this->has_object_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_id_);
  }

  // .osi3.Vector3d position = 3;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .osi3.Vector3d position_rmse = 4;
  if (this->has_position_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_rmse_);
  }

  // .osi3.Vector3d velocity = 5;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .osi3.Vector3d velocity_rmse = 6;
  if (this->has_velocity_rmse()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_rmse_);
  }

  // double existence_probability = 1;
  if (!(this->existence_probability() <= 0 && this->existence_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // double intensity = 7;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 8;
  }

  // double snr = 8;
  if (!(this->snr() <= 0 && this->snr() >= 0)) {
    total_size += 1 + 8;
  }

  // double point_target_probability = 9;
  if (!(this->point_target_probability() <= 0 && this->point_target_probability() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.LogicalDetectionClassification classification = 11;
  if (this->classification() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->classification());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogicalDetection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.LogicalDetection)
  GOOGLE_DCHECK_NE(&from, this);
  const LogicalDetection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogicalDetection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.LogicalDetection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.LogicalDetection)
    MergeFrom(*source);
  }
}

void LogicalDetection::MergeFrom(const LogicalDetection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.LogicalDetection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sensor_id_.MergeFrom(from.sensor_id_);
  if (from.has_object_id()) {
    mutable_object_id()->::osi3::Identifier::MergeFrom(from.object_id());
  }
  if (from.has_position()) {
    mutable_position()->::osi3::Vector3d::MergeFrom(from.position());
  }
  if (from.has_position_rmse()) {
    mutable_position_rmse()->::osi3::Vector3d::MergeFrom(from.position_rmse());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::osi3::Vector3d::MergeFrom(from.velocity());
  }
  if (from.has_velocity_rmse()) {
    mutable_velocity_rmse()->::osi3::Vector3d::MergeFrom(from.velocity_rmse());
  }
  if (!(from.existence_probability() <= 0 && from.existence_probability() >= 0)) {
    set_existence_probability(from.existence_probability());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    set_intensity(from.intensity());
  }
  if (!(from.snr() <= 0 && from.snr() >= 0)) {
    set_snr(from.snr());
  }
  if (!(from.point_target_probability() <= 0 && from.point_target_probability() >= 0)) {
    set_point_target_probability(from.point_target_probability());
  }
  if (from.classification() != 0) {
    set_classification(from.classification());
  }
}

void LogicalDetection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.LogicalDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogicalDetection::CopyFrom(const LogicalDetection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.LogicalDetection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDetection::IsInitialized() const {
  return true;
}

void LogicalDetection::InternalSwap(LogicalDetection* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&sensor_id_)->InternalSwap(CastToBase(&other->sensor_id_));
  swap(object_id_, other->object_id_);
  swap(position_, other->position_);
  swap(position_rmse_, other->position_rmse_);
  swap(velocity_, other->velocity_);
  swap(velocity_rmse_, other->velocity_rmse_);
  swap(existence_probability_, other->existence_probability_);
  swap(intensity_, other->intensity_);
  swap(snr_, other->snr_);
  swap(point_target_probability_, other->point_target_probability_);
  swap(classification_, other->classification_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogicalDetection::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetectionData* Arena::CreateMaybeMessage< ::osi3::LogicalDetectionData >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalDetectionData >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetectionDataHeader* Arena::CreateMaybeMessage< ::osi3::LogicalDetectionDataHeader >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalDetectionDataHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::LogicalDetection* Arena::CreateMaybeMessage< ::osi3::LogicalDetection >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::LogicalDetection >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
