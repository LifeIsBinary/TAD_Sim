// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto
#pragma warning (disable : 4125)
#include "scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Action_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionAccel_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionLaneChange_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionLateralDistance_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionSpeed_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activate_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Assign_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Command_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Condition_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionEgoAttachLaneidCustom_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConditionReachPosition_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionRelativeDistance_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionRelativeSpeed_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionSimulationTime_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionSpeed_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionStoryboardElementState_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionTimeHeadway_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionTimeToCollision_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dynamic_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicConstraints_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Ego_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_environment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_EnvironmentalConditions_environment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Event_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5finfrastructure_5fgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InfrastructureGroup_scene_5finfrastructure_5fgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialCommon_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InitialEgo_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialVehicle_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialVru_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapModel_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MiscellaneousObject_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Override_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Performance_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PhysicleCommon_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PhysicleEgo_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PhysicleVehicle_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PhysicleVru_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Position_waypoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_EnvironmentEntry_DoNotUse_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_5fsensor_5fgroup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_settings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Setting_settings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5finteraction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_vehicle_5finteraction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trigger_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_basic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vec3_basic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Vehicle_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_vehicle_5fgeometry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_scene_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VulnerableRoadUser_scene_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_waypoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Waypoint_waypoint_2eproto;
namespace sim_msg {
class DynamicConstraintsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicConstraints> _instance;
} _DynamicConstraints_default_instance_;
class BoundingBoxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox> _instance;
} _BoundingBox_default_instance_;
class PerformanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Performance> _instance;
} _Performance_default_instance_;
class ConditionTimeToCollisionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionTimeToCollision> _instance;
} _ConditionTimeToCollision_default_instance_;
class ConditionSpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionSpeed> _instance;
} _ConditionSpeed_default_instance_;
class ConditionRelativeSpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionRelativeSpeed> _instance;
} _ConditionRelativeSpeed_default_instance_;
class ConditionReachPositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionReachPosition> _instance;
} _ConditionReachPosition_default_instance_;
class ConditionRelativeDistanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionRelativeDistance> _instance;
} _ConditionRelativeDistance_default_instance_;
class ConditionEgoAttachLaneidCustomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionEgoAttachLaneidCustom> _instance;
} _ConditionEgoAttachLaneidCustom_default_instance_;
class ConditionSimulationTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionSimulationTime> _instance;
} _ConditionSimulationTime_default_instance_;
class ConditionTimeHeadwayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionTimeHeadway> _instance;
} _ConditionTimeHeadway_default_instance_;
class ConditionReachDistanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionReachDistance> _instance;
} _ConditionReachDistance_default_instance_;
class ConditionStoryboardElementStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConditionStoryboardElementState> _instance;
} _ConditionStoryboardElementState_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
  const ::sim_msg::ConditionTimeToCollision* ttc_;
  const ::sim_msg::ConditionSpeed* speed_;
  const ::sim_msg::ConditionRelativeSpeed* relative_speed_;
  const ::sim_msg::ConditionReachPosition* reach_position_;
  const ::sim_msg::ConditionRelativeDistance* relative_distance_;
  const ::sim_msg::ConditionEgoAttachLaneidCustom* ego_attach_laneid_custom_;
  const ::sim_msg::ConditionTimeHeadway* time_headway_;
  const ::sim_msg::ConditionStoryboardElementState* storyboard_element_state_;
  const ::sim_msg::ConditionSimulationTime* simulation_time_;
} _Condition_default_instance_;
class ActionSpeedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionSpeed> _instance;
} _ActionSpeed_default_instance_;
class ActionAccelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionAccel> _instance;
} _ActionAccel_default_instance_;
class ActionLaneChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionLaneChange> _instance;
} _ActionLaneChange_default_instance_;
class ActionLateralDistanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActionLateralDistance> _instance;
} _ActionLateralDistance_default_instance_;
class TriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trigger> _instance;
} _Trigger_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Action> _instance;
  const ::sim_msg::ActionSpeed* speed_;
  const ::sim_msg::ActionAccel* accel_;
  const ::sim_msg::ActionLaneChange* lane_change_;
  const ::sim_msg::ActionLateralDistance* lateral_distance_;
  const ::sim_msg::Status* status_;
  const ::sim_msg::Activate* activate_;
  const ::sim_msg::Assign* assign_;
  const ::sim_msg::Override* override_;
  const ::sim_msg::Command* command_;
} _Action_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
} _Event_default_instance_;
class PhysicleCommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicleCommon> _instance;
} _PhysicleCommon_default_instance_;
class PhysicleEgoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicleEgo> _instance;
} _PhysicleEgo_default_instance_;
class PhysicleVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicleVehicle> _instance;
} _PhysicleVehicle_default_instance_;
class PhysicleVruDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PhysicleVru> _instance;
} _PhysicleVru_default_instance_;
class InitialCommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialCommon> _instance;
} _InitialCommon_default_instance_;
class InitialEgoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialEgo> _instance;
} _InitialEgo_default_instance_;
class InitialVehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialVehicle> _instance;
} _InitialVehicle_default_instance_;
class InitialVruDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitialVru> _instance;
} _InitialVru_default_instance_;
class DynamicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dynamic> _instance;
} _Dynamic_default_instance_;
class EgoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ego> _instance;
} _Ego_default_instance_;
class VehicleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vehicle> _instance;
} _Vehicle_default_instance_;
class VulnerableRoadUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VulnerableRoadUser> _instance;
} _VulnerableRoadUser_default_instance_;
class MiscellaneousObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MiscellaneousObject> _instance;
} _MiscellaneousObject_default_instance_;
class MapModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapModel> _instance;
} _MapModel_default_instance_;
class Scene_EnvironmentEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene_EnvironmentEntry_DoNotUse> _instance;
} _Scene_EnvironmentEntry_DoNotUse_default_instance_;
class SceneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scene> _instance;
} _Scene_default_instance_;
}  // namespace sim_msg
static void InitDefaultsscc_info_Action_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Action_default_instance_;
    new (ptr) ::sim_msg::Action();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Action::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Action_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsscc_info_Action_scene_2eproto}, {
      &scc_info_ActionSpeed_scene_2eproto.base,
      &scc_info_ActionAccel_scene_2eproto.base,
      &scc_info_ActionLaneChange_scene_2eproto.base,
      &scc_info_ActionLateralDistance_scene_2eproto.base,
      &scc_info_Status_vehicle_5finteraction_2eproto.base,
      &scc_info_Activate_vehicle_5finteraction_2eproto.base,
      &scc_info_Assign_vehicle_5finteraction_2eproto.base,
      &scc_info_Override_vehicle_5finteraction_2eproto.base,
      &scc_info_Command_vehicle_5finteraction_2eproto.base,}};

static void InitDefaultsscc_info_ActionAccel_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ActionAccel_default_instance_;
    new (ptr) ::sim_msg::ActionAccel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ActionAccel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionAccel_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActionAccel_scene_2eproto}, {}};

static void InitDefaultsscc_info_ActionLaneChange_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ActionLaneChange_default_instance_;
    new (ptr) ::sim_msg::ActionLaneChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ActionLaneChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionLaneChange_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActionLaneChange_scene_2eproto}, {}};

static void InitDefaultsscc_info_ActionLateralDistance_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ActionLateralDistance_default_instance_;
    new (ptr) ::sim_msg::ActionLateralDistance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ActionLateralDistance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ActionLateralDistance_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ActionLateralDistance_scene_2eproto}, {
      &scc_info_DynamicConstraints_scene_2eproto.base,}};

static void InitDefaultsscc_info_ActionSpeed_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ActionSpeed_default_instance_;
    new (ptr) ::sim_msg::ActionSpeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ActionSpeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActionSpeed_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ActionSpeed_scene_2eproto}, {}};

static void InitDefaultsscc_info_BoundingBox_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_BoundingBox_default_instance_;
    new (ptr) ::sim_msg::BoundingBox();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::BoundingBox::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_BoundingBox_scene_2eproto}, {
      &scc_info_Vec3_basic_2eproto.base,}};

static void InitDefaultsscc_info_Condition_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Condition_default_instance_;
    new (ptr) ::sim_msg::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_Condition_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, InitDefaultsscc_info_Condition_scene_2eproto}, {
      &scc_info_ConditionTimeToCollision_scene_2eproto.base,
      &scc_info_ConditionSpeed_scene_2eproto.base,
      &scc_info_ConditionRelativeSpeed_scene_2eproto.base,
      &scc_info_ConditionReachPosition_scene_2eproto.base,
      &scc_info_ConditionRelativeDistance_scene_2eproto.base,
      &scc_info_ConditionEgoAttachLaneidCustom_scene_2eproto.base,
      &scc_info_ConditionTimeHeadway_scene_2eproto.base,
      &scc_info_ConditionStoryboardElementState_scene_2eproto.base,
      &scc_info_ConditionSimulationTime_scene_2eproto.base,}};

static void InitDefaultsscc_info_ConditionEgoAttachLaneidCustom_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionEgoAttachLaneidCustom_default_instance_;
    new (ptr) ::sim_msg::ConditionEgoAttachLaneidCustom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionEgoAttachLaneidCustom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionEgoAttachLaneidCustom_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionEgoAttachLaneidCustom_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionReachDistance_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionReachDistance_default_instance_;
    new (ptr) ::sim_msg::ConditionReachDistance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionReachDistance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionReachDistance_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionReachDistance_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionReachPosition_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionReachPosition_default_instance_;
    new (ptr) ::sim_msg::ConditionReachPosition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionReachPosition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConditionReachPosition_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ConditionReachPosition_scene_2eproto}, {
      &scc_info_Position_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_ConditionRelativeDistance_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionRelativeDistance_default_instance_;
    new (ptr) ::sim_msg::ConditionRelativeDistance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionRelativeDistance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionRelativeDistance_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionRelativeDistance_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionRelativeSpeed_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionRelativeSpeed_default_instance_;
    new (ptr) ::sim_msg::ConditionRelativeSpeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionRelativeSpeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionRelativeSpeed_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionRelativeSpeed_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionSimulationTime_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionSimulationTime_default_instance_;
    new (ptr) ::sim_msg::ConditionSimulationTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionSimulationTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionSimulationTime_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionSimulationTime_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionSpeed_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionSpeed_default_instance_;
    new (ptr) ::sim_msg::ConditionSpeed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionSpeed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionSpeed_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionSpeed_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionStoryboardElementState_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionStoryboardElementState_default_instance_;
    new (ptr) ::sim_msg::ConditionStoryboardElementState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionStoryboardElementState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionStoryboardElementState_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionStoryboardElementState_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionTimeHeadway_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionTimeHeadway_default_instance_;
    new (ptr) ::sim_msg::ConditionTimeHeadway();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionTimeHeadway::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionTimeHeadway_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionTimeHeadway_scene_2eproto}, {}};

static void InitDefaultsscc_info_ConditionTimeToCollision_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_ConditionTimeToCollision_default_instance_;
    new (ptr) ::sim_msg::ConditionTimeToCollision();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::ConditionTimeToCollision::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConditionTimeToCollision_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ConditionTimeToCollision_scene_2eproto}, {}};

static void InitDefaultsscc_info_Dynamic_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Dynamic_default_instance_;
    new (ptr) ::sim_msg::Dynamic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Dynamic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dynamic_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Dynamic_scene_2eproto}, {
      &scc_info_Event_scene_2eproto.base,}};

static void InitDefaultsscc_info_DynamicConstraints_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_DynamicConstraints_default_instance_;
    new (ptr) ::sim_msg::DynamicConstraints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::DynamicConstraints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicConstraints_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DynamicConstraints_scene_2eproto}, {}};

static void InitDefaultsscc_info_Ego_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Ego_default_instance_;
    new (ptr) ::sim_msg::Ego();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Ego::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Ego_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Ego_scene_2eproto}, {
      &scc_info_PhysicleEgo_scene_2eproto.base,
      &scc_info_InitialEgo_scene_2eproto.base,
      &scc_info_Dynamic_scene_2eproto.base,
      &scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto.base,}};

static void InitDefaultsscc_info_Event_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Event_default_instance_;
    new (ptr) ::sim_msg::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Event_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_Event_scene_2eproto}, {
      &scc_info_Trigger_scene_2eproto.base,
      &scc_info_Action_scene_2eproto.base,}};

static void InitDefaultsscc_info_InitialCommon_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_InitialCommon_default_instance_;
    new (ptr) ::sim_msg::InitialCommon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::InitialCommon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialCommon_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InitialCommon_scene_2eproto}, {
      &scc_info_Waypoint_waypoint_2eproto.base,}};

static void InitDefaultsscc_info_InitialEgo_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_InitialEgo_default_instance_;
    new (ptr) ::sim_msg::InitialEgo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::InitialEgo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_InitialEgo_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_InitialEgo_scene_2eproto}, {
      &scc_info_InitialCommon_scene_2eproto.base,
      &scc_info_Assign_vehicle_5finteraction_2eproto.base,
      &scc_info_Activate_vehicle_5finteraction_2eproto.base,}};

static void InitDefaultsscc_info_InitialVehicle_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_InitialVehicle_default_instance_;
    new (ptr) ::sim_msg::InitialVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::InitialVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialVehicle_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InitialVehicle_scene_2eproto}, {
      &scc_info_InitialCommon_scene_2eproto.base,}};

static void InitDefaultsscc_info_InitialVru_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_InitialVru_default_instance_;
    new (ptr) ::sim_msg::InitialVru();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::InitialVru::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitialVru_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InitialVru_scene_2eproto}, {
      &scc_info_InitialCommon_scene_2eproto.base,}};

static void InitDefaultsscc_info_MapModel_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_MapModel_default_instance_;
    new (ptr) ::sim_msg::MapModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::MapModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapModel_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MapModel_scene_2eproto}, {
      &scc_info_PhysicleCommon_scene_2eproto.base,}};

static void InitDefaultsscc_info_MiscellaneousObject_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_MiscellaneousObject_default_instance_;
    new (ptr) ::sim_msg::MiscellaneousObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::MiscellaneousObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_MiscellaneousObject_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_MiscellaneousObject_scene_2eproto}, {
      &scc_info_PhysicleCommon_scene_2eproto.base,
      &scc_info_InitialCommon_scene_2eproto.base,
      &scc_info_Dynamic_scene_2eproto.base,
      &scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto.base,}};

static void InitDefaultsscc_info_Performance_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Performance_default_instance_;
    new (ptr) ::sim_msg::Performance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Performance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Performance_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Performance_scene_2eproto}, {}};

static void InitDefaultsscc_info_PhysicleCommon_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PhysicleCommon_default_instance_;
    new (ptr) ::sim_msg::PhysicleCommon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PhysicleCommon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PhysicleCommon_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_PhysicleCommon_scene_2eproto}, {
      &scc_info_BoundingBox_scene_2eproto.base,}};

static void InitDefaultsscc_info_PhysicleEgo_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PhysicleEgo_default_instance_;
    new (ptr) ::sim_msg::PhysicleEgo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PhysicleEgo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PhysicleEgo_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PhysicleEgo_scene_2eproto}, {
      &scc_info_PhysicleCommon_scene_2eproto.base,
      &scc_info_Performance_scene_2eproto.base,
      &scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_PhysicleVehicle_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PhysicleVehicle_default_instance_;
    new (ptr) ::sim_msg::PhysicleVehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PhysicleVehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PhysicleVehicle_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_PhysicleVehicle_scene_2eproto}, {
      &scc_info_PhysicleCommon_scene_2eproto.base,
      &scc_info_Performance_scene_2eproto.base,
      &scc_info_VehicleGeometory_vehicle_5fgeometry_2eproto.base,}};

static void InitDefaultsscc_info_PhysicleVru_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_PhysicleVru_default_instance_;
    new (ptr) ::sim_msg::PhysicleVru();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::PhysicleVru::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PhysicleVru_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_PhysicleVru_scene_2eproto}, {
      &scc_info_PhysicleCommon_scene_2eproto.base,
      &scc_info_Performance_scene_2eproto.base,}};

static void InitDefaultsscc_info_Scene_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Scene_default_instance_;
    new (ptr) ::sim_msg::Scene();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Scene::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Scene_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, InitDefaultsscc_info_Scene_scene_2eproto}, {
      &scc_info_Setting_settings_2eproto.base,
      &scc_info_Ego_scene_2eproto.base,
      &scc_info_Vehicle_scene_2eproto.base,
      &scc_info_VulnerableRoadUser_scene_2eproto.base,
      &scc_info_MiscellaneousObject_scene_2eproto.base,
      &scc_info_Scene_EnvironmentEntry_DoNotUse_scene_2eproto.base,
      &scc_info_InfrastructureGroup_scene_5finfrastructure_5fgroup_2eproto.base,
      &scc_info_MapModel_scene_2eproto.base,}};

static void InitDefaultsscc_info_Scene_EnvironmentEntry_DoNotUse_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Scene_EnvironmentEntry_DoNotUse_default_instance_;
    new (ptr) ::sim_msg::Scene_EnvironmentEntry_DoNotUse();
  }
  ::sim_msg::Scene_EnvironmentEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Scene_EnvironmentEntry_DoNotUse_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Scene_EnvironmentEntry_DoNotUse_scene_2eproto}, {
      &scc_info_EnvironmentalConditions_environment_2eproto.base,}};

static void InitDefaultsscc_info_Trigger_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Trigger_default_instance_;
    new (ptr) ::sim_msg::Trigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Trigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trigger_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_Trigger_scene_2eproto}, {
      &scc_info_Condition_scene_2eproto.base,}};

static void InitDefaultsscc_info_Vehicle_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_Vehicle_default_instance_;
    new (ptr) ::sim_msg::Vehicle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::Vehicle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Vehicle_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_Vehicle_scene_2eproto}, {
      &scc_info_PhysicleVehicle_scene_2eproto.base,
      &scc_info_InitialVehicle_scene_2eproto.base,
      &scc_info_Dynamic_scene_2eproto.base,
      &scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto.base,}};

static void InitDefaultsscc_info_VulnerableRoadUser_scene_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sim_msg::_VulnerableRoadUser_default_instance_;
    new (ptr) ::sim_msg::VulnerableRoadUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::sim_msg::VulnerableRoadUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VulnerableRoadUser_scene_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_VulnerableRoadUser_scene_2eproto}, {
      &scc_info_PhysicleVru_scene_2eproto.base,
      &scc_info_InitialVru_scene_2eproto.base,
      &scc_info_Dynamic_scene_2eproto.base,
      &scc_info_SensorGroup_scene_5fsensor_5fgroup_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_scene_2eproto[37];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_scene_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_scene_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_scene_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicConstraints, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicConstraints, max_deceleration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicConstraints, max_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::BoundingBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::BoundingBox, center_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::BoundingBox, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::BoundingBox, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::BoundingBox, higth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Performance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Performance, max_speed_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Performance, max_accel_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Performance, max_decel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeToCollision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeToCollision, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeToCollision, distance_type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeToCollision, rule_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeToCollision, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionSpeed, direction_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionSpeed, rule_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionSpeed, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeSpeed, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeSpeed, direction_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeSpeed, rule_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeSpeed, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachPosition, radius_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachPosition, position_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeDistance, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeDistance, distance_type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeDistance, rule_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionRelativeDistance, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionEgoAttachLaneidCustom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionEgoAttachLaneidCustom, road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionEgoAttachLaneidCustom, section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionEgoAttachLaneidCustom, lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionSimulationTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionSimulationTime, rule_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionSimulationTime, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeHeadway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeHeadway, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeHeadway, value_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeHeadway, freespace_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeHeadway, along_route_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionTimeHeadway, rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachDistance, entity_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachDistance, value_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachDistance, freespace_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachDistance, along_route_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionReachDistance, rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionStoryboardElementState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionStoryboardElementState, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionStoryboardElementState, storyboard_ref_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ConditionStoryboardElementState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Condition, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Condition, edge_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Condition, delay_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Condition, count_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, ttc_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, speed_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, relative_speed_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, reach_position_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, relative_distance_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, ego_attach_laneid_custom_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, time_headway_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, storyboard_element_state_),
  offsetof(::sim_msg::ConditionDefaultTypeInternal, simulation_time_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Condition, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionSpeed, value_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionSpeed, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionAccel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionAccel, value_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionAccel, angle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionAccel, end_type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionAccel, end_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLaneChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLaneChange, dir_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLaneChange, duration_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLaneChange, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLateralDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLateralDistance, distance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLateralDistance, freespace_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLateralDistance, continuous_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ActionLateralDistance, dynamic_constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trigger, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trigger, conditions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Action, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Action, entity_ref_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, speed_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, accel_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, lane_change_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, lateral_distance_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, status_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, activate_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, assign_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, override_),
  offsetof(::sim_msg::ActionDefaultTypeInternal, command_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Action, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Event, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Event, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Event, trigger_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Event, actions_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Event, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleCommon, bounding_box_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleCommon, color_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleCommon, mass_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleCommon, model_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleCommon, model_3d_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleEgo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleEgo, common_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleEgo, performance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleEgo, geometory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleVehicle, common_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleVehicle, performance_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleVehicle, geometory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleVru, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleVru, common_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::PhysicleVru, performance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialCommon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialCommon, waypoints_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialCommon, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialEgo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialEgo, common_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialEgo, assign_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialEgo, activate_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialEgo, trajectory_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVehicle, common_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVehicle, behavior_type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVehicle, aggress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVru, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVru, common_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVru, behavior_type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::InitialVru, aggress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Dynamic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Dynamic, events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, objectname_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, category_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, physicles_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, initial_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, dynamic_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, sensor_group_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Ego, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, objectname_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, category_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, physicle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, initial_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, dynamic_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, sensor_group_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Vehicle, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, objectname_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, category_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, physicle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, initial_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, dynamic_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::VulnerableRoadUser, sensor_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, objectname_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, category_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, physicle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, initial_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, dynamic_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MiscellaneousObject, sensor_group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::MapModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::MapModel, name_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::MapModel, common_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene_EnvironmentEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene_EnvironmentEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene_EnvironmentEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene_EnvironmentEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, setting_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, egos_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, vehicles_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, vrus_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, miscs_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, environment_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, infrastructure_group_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Scene, map_models_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::DynamicConstraints)},
  { 8, -1, sizeof(::sim_msg::BoundingBox)},
  { 17, -1, sizeof(::sim_msg::Performance)},
  { 25, -1, sizeof(::sim_msg::ConditionTimeToCollision)},
  { 34, -1, sizeof(::sim_msg::ConditionSpeed)},
  { 42, -1, sizeof(::sim_msg::ConditionRelativeSpeed)},
  { 51, -1, sizeof(::sim_msg::ConditionReachPosition)},
  { 58, -1, sizeof(::sim_msg::ConditionRelativeDistance)},
  { 67, -1, sizeof(::sim_msg::ConditionEgoAttachLaneidCustom)},
  { 75, -1, sizeof(::sim_msg::ConditionSimulationTime)},
  { 82, -1, sizeof(::sim_msg::ConditionTimeHeadway)},
  { 92, -1, sizeof(::sim_msg::ConditionReachDistance)},
  { 102, -1, sizeof(::sim_msg::ConditionStoryboardElementState)},
  { 110, -1, sizeof(::sim_msg::Condition)},
  { 128, -1, sizeof(::sim_msg::ActionSpeed)},
  { 135, -1, sizeof(::sim_msg::ActionAccel)},
  { 144, -1, sizeof(::sim_msg::ActionLaneChange)},
  { 152, -1, sizeof(::sim_msg::ActionLateralDistance)},
  { 161, -1, sizeof(::sim_msg::Trigger)},
  { 168, -1, sizeof(::sim_msg::Action)},
  { 184, -1, sizeof(::sim_msg::Event)},
  { 194, -1, sizeof(::sim_msg::PhysicleCommon)},
  { 204, -1, sizeof(::sim_msg::PhysicleEgo)},
  { 212, -1, sizeof(::sim_msg::PhysicleVehicle)},
  { 220, -1, sizeof(::sim_msg::PhysicleVru)},
  { 227, -1, sizeof(::sim_msg::InitialCommon)},
  { 234, -1, sizeof(::sim_msg::InitialEgo)},
  { 243, -1, sizeof(::sim_msg::InitialVehicle)},
  { 251, -1, sizeof(::sim_msg::InitialVru)},
  { 259, -1, sizeof(::sim_msg::Dynamic)},
  { 265, -1, sizeof(::sim_msg::Ego)},
  { 279, -1, sizeof(::sim_msg::Vehicle)},
  { 293, -1, sizeof(::sim_msg::VulnerableRoadUser)},
  { 306, -1, sizeof(::sim_msg::MiscellaneousObject)},
  { 319, -1, sizeof(::sim_msg::MapModel)},
  { 326, 333, sizeof(::sim_msg::Scene_EnvironmentEntry_DoNotUse)},
  { 335, -1, sizeof(::sim_msg::Scene)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_DynamicConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_BoundingBox_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Performance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionTimeToCollision_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionRelativeSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionReachPosition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionRelativeDistance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionEgoAttachLaneidCustom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionSimulationTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionTimeHeadway_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionReachDistance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ConditionStoryboardElementState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ActionSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ActionAccel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ActionLaneChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ActionLateralDistance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Trigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PhysicleCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PhysicleEgo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PhysicleVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_PhysicleVru_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_InitialCommon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_InitialEgo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_InitialVehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_InitialVru_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Dynamic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Ego_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Vehicle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_VulnerableRoadUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_MiscellaneousObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_MapModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Scene_EnvironmentEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Scene_default_instance_),
};

const char descriptor_table_protodef_scene_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013scene.proto\022\007sim_msg\032\013basic.proto\032\016set"
  "tings.proto\032\016waypoint.proto\032\021environment"
  ".proto\032\031vehicle_interaction.proto\032\026vehic"
  "le_geometry.proto\032\030scene_sensor_group.pr"
  "oto\032 scene_infrastructure_group.proto\"[\n"
  "\022DynamicConstraints\022\030\n\020max_acceleration\030"
  "\001 \001(\001\022\030\n\020max_deceleration\030\002 \001(\001\022\021\n\tmax_s"
  "peed\030\003 \001(\001\"Z\n\013BoundingBox\022\035\n\006center\030\001 \001("
  "\0132\r.sim_msg.Vec3\022\016\n\006length\030\002 \001(\001\022\r\n\005widt"
  "h\030\003 \001(\001\022\r\n\005higth\030\004 \001(\001\"F\n\013Performance\022\021\n"
  "\tmax_speed\030\001 \001(\001\022\021\n\tmax_accel\030\002 \001(\001\022\021\n\tm"
  "ax_decel\030\003 \001(\001\"\210\001\n\030ConditionTimeToCollis"
  "ion\022\022\n\nentity_ref\030\001 \001(\t\022,\n\rdistance_type"
  "\030\002 \001(\0162\025.sim_msg.DistanceType\022\033\n\004rule\030\003 "
  "\001(\0162\r.sim_msg.Rule\022\r\n\005value\030\004 \001(\001\"f\n\016Con"
  "ditionSpeed\022(\n\tdirection\030\001 \001(\0162\025.sim_msg"
  ".DirDimension\022\033\n\004rule\030\002 \001(\0162\r.sim_msg.Ru"
  "le\022\r\n\005value\030\003 \001(\001\"\202\001\n\026ConditionRelativeS"
  "peed\022\022\n\nentity_ref\030\001 \001(\t\022(\n\tdirection\030\002 "
  "\001(\0162\025.sim_msg.DirDimension\022\033\n\004rule\030\003 \001(\016"
  "2\r.sim_msg.Rule\022\r\n\005value\030\004 \001(\001\"M\n\026Condit"
  "ionReachPosition\022\016\n\006radius\030\001 \001(\001\022#\n\010posi"
  "tion\030\002 \001(\0132\021.sim_msg.Position\"\211\001\n\031Condit"
  "ionRelativeDistance\022\022\n\nentity_ref\030\001 \001(\t\022"
  ",\n\rdistance_type\030\002 \001(\0162\025.sim_msg.Distanc"
  "eType\022\033\n\004rule\030\003 \001(\0162\r.sim_msg.Rule\022\r\n\005va"
  "lue\030\004 \001(\001\"V\n\036ConditionEgoAttachLaneidCus"
  "tom\022\017\n\007road_id\030\001 \001(\004\022\022\n\nsection_id\030\002 \001(\004"
  "\022\017\n\007lane_id\030\003 \001(\003\"E\n\027ConditionSimulation"
  "Time\022\033\n\004rule\030\001 \001(\0162\r.sim_msg.Rule\022\r\n\005val"
  "ue\030\002 \001(\001\"~\n\024ConditionTimeHeadway\022\022\n\nenti"
  "ty_ref\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\022\021\n\tfreespace"
  "\030\003 \001(\010\022\023\n\013along_route\030\004 \001(\010\022\033\n\004rule\030\005 \001("
  "\0162\r.sim_msg.Rule\"\200\001\n\026ConditionReachDista"
  "nce\022\022\n\nentity_ref\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\022\021"
  "\n\tfreespace\030\003 \001(\010\022\023\n\013along_route\030\004 \001(\010\022\033"
  "\n\004rule\030\005 \001(\0162\r.sim_msg.Rule\"\227\001\n\037Conditio"
  "nStoryboardElementState\022,\n\004type\030\001 \001(\0162\036."
  "sim_msg.StoryboardElementType\022\026\n\016storybo"
  "ard_ref\030\002 \001(\t\022.\n\005state\030\003 \001(\0162\037.sim_msg.S"
  "toryboardElementState\"\371\004\n\tCondition\022$\n\004e"
  "dge\030\001 \001(\0162\026.sim_msg.ConditionEdge\022\r\n\005del"
  "ay\030\002 \001(\001\022\r\n\005count\030\003 \001(\r\0220\n\003ttc\030\004 \001(\0132!.s"
  "im_msg.ConditionTimeToCollisionH\000\022(\n\005spe"
  "ed\030\005 \001(\0132\027.sim_msg.ConditionSpeedH\000\0229\n\016r"
  "elative_speed\030\006 \001(\0132\037.sim_msg.ConditionR"
  "elativeSpeedH\000\0229\n\016reach_position\030\007 \001(\0132\037"
  ".sim_msg.ConditionReachPositionH\000\022\?\n\021rel"
  "ative_distance\030\010 \001(\0132\".sim_msg.Condition"
  "RelativeDistanceH\000\022K\n\030ego_attach_laneid_"
  "custom\030\t \001(\0132\'.sim_msg.ConditionEgoAttac"
  "hLaneidCustomH\000\0225\n\014time_headway\030\n \001(\0132\035."
  "sim_msg.ConditionTimeHeadwayH\000\022L\n\030storyb"
  "oard_element_state\030\013 \001(\0132(.sim_msg.Condi"
  "tionStoryboardElementStateH\000\022;\n\017simulati"
  "on_time\030\014 \001(\0132 .sim_msg.ConditionSimulat"
  "ionTimeH\000B\006\n\004type\"+\n\013ActionSpeed\022\r\n\005valu"
  "e\030\001 \001(\001\022\r\n\005angle\030\002 \001(\001\"\263\001\n\013ActionAccel\022\r"
  "\n\005value\030\001 \001(\001\022\r\n\005angle\030\002 \001(\001\022.\n\010end_type"
  "\030\003 \001(\0162\034.sim_msg.ActionAccel.EndType\022\021\n\t"
  "end_value\030\004 \001(\001\"C\n\007EndType\022\021\n\rEND_TYPE_N"
  "ONE\020\000\022\021\n\rEND_TYPE_TIME\020\001\022\022\n\016END_TYPE_SPE"
  "ED\020\002\"\261\001\n\020ActionLaneChange\022*\n\003dir\030\001 \001(\0162\035"
  ".sim_msg.ActionLaneChange.Dir\022\020\n\010duratio"
  "n\030\002 \001(\001\022\016\n\006offset\030\003 \001(\001\"O\n\003Dir\022\014\n\010DIR_LE"
  "FT\020\000\022\r\n\tDIR_RIGHT\020\001\022\024\n\020DIR_LEFT_IN_LANE\020"
  "\002\022\025\n\021DIR_RIGHT_IN_LANE\020\003\"\212\001\n\025ActionLater"
  "alDistance\022\020\n\010distance\030\001 \001(\001\022\021\n\tfreespac"
  "e\030\002 \001(\010\022\022\n\ncontinuous\030\003 \001(\010\0228\n\023dynamic_c"
  "onstraints\030\004 \001(\0132\033.sim_msg.DynamicConstr"
  "aints\"\?\n\007Trigger\022\014\n\004name\030\001 \001(\t\022&\n\ncondit"
  "ions\030\002 \003(\0132\022.sim_msg.Condition\"\233\003\n\006Actio"
  "n\022\022\n\nentity_ref\030\001 \001(\t\022%\n\005speed\030\002 \001(\0132\024.s"
  "im_msg.ActionSpeedH\000\022%\n\005accel\030\003 \001(\0132\024.si"
  "m_msg.ActionAccelH\000\0220\n\013lane_change\030\004 \001(\013"
  "2\031.sim_msg.ActionLaneChangeH\000\022:\n\020lateral"
  "_distance\030\005 \001(\0132\036.sim_msg.ActionLateralD"
  "istanceH\000\022!\n\006status\030\006 \001(\0132\017.sim_msg.Stat"
  "usH\000\022%\n\010activate\030\007 \001(\0132\021.sim_msg.Activat"
  "eH\000\022!\n\006assign\030\010 \001(\0132\017.sim_msg.AssignH\000\022%"
  "\n\010override\030\t \001(\0132\021.sim_msg.OverrideH\000\022#\n"
  "\007command\030\n \001(\0132\020.sim_msg.CommandH\000B\010\n\006ac"
  "tion\"t\n\005Event\022\n\n\002id\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022"
  "!\n\007trigger\030\003 \001(\0132\020.sim_msg.Trigger\022 \n\007ac"
  "tions\030\004 \003(\0132\017.sim_msg.Action\022\014\n\004info\030\005 \001"
  "(\t\"\215\001\n\016PhysicleCommon\022*\n\014bounding_box\030\001 "
  "\001(\0132\024.sim_msg.BoundingBox\022\035\n\005color\030\002 \001(\016"
  "2\016.sim_msg.Color\022\014\n\004mass\030\003 \001(\001\022\020\n\010model_"
  "id\030\004 \001(\003\022\020\n\010model_3d\030\005 \001(\t\"\217\001\n\013PhysicleE"
  "go\022\'\n\006common\030\001 \001(\0132\027.sim_msg.PhysicleCom"
  "mon\022)\n\013performance\030\002 \001(\0132\024.sim_msg.Perfo"
  "rmance\022,\n\tgeometory\030\003 \001(\0132\031.sim_msg.Vehi"
  "cleGeometory\"\223\001\n\017PhysicleVehicle\022\'\n\006comm"
  "on\030\001 \001(\0132\027.sim_msg.PhysicleCommon\022)\n\013per"
  "formance\030\002 \001(\0132\024.sim_msg.Performance\022,\n\t"
  "geometory\030\003 \001(\0132\031.sim_msg.VehicleGeometo"
  "ry\"a\n\013PhysicleVru\022\'\n\006common\030\001 \001(\0132\027.sim_"
  "msg.PhysicleCommon\022)\n\013performance\030\002 \001(\0132"
  "\024.sim_msg.Performance\"D\n\rInitialCommon\022$"
  "\n\twaypoints\030\001 \003(\0132\021.sim_msg.Waypoint\022\r\n\005"
  "speed\030\002 \001(\001\"\226\001\n\nInitialEgo\022&\n\006common\030\001 \001"
  "(\0132\026.sim_msg.InitialCommon\022\037\n\006assign\030\003 \001"
  "(\0132\017.sim_msg.Assign\022#\n\010activate\030\004 \001(\0132\021."
  "sim_msg.Activate\022\032\n\022trajectory_enabled\030\005"
  " \001(\010\"w\n\016InitialVehicle\022&\n\006common\030\001 \001(\0132\026"
  ".sim_msg.InitialCommon\022,\n\rbehavior_type\030"
  "\002 \001(\0162\025.sim_msg.BehaviorType\022\017\n\007aggress\030"
  "\003 \001(\001\"s\n\nInitialVru\022&\n\006common\030\001 \001(\0132\026.si"
  "m_msg.InitialCommon\022,\n\rbehavior_type\030\002 \001"
  "(\0162\025.sim_msg.BehaviorType\022\017\n\007aggress\030\003 \001"
  "(\001\")\n\007Dynamic\022\036\n\006events\030\001 \003(\0132\016.sim_msg."
  "Event\"\214\002\n\003Ego\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022"
  "\022\n\nobjectname\030\003 \001(\t\022*\n\010category\030\004 \001(\0162\030."
  "sim_msg.CategoryVehicle\022\'\n\tphysicles\030\005 \003"
  "(\0132\024.sim_msg.PhysicleEgo\022$\n\007initial\030\006 \001("
  "\0132\023.sim_msg.InitialEgo\022!\n\007dynamic\030\007 \001(\0132"
  "\020.sim_msg.Dynamic\022*\n\014sensor_group\030\010 \001(\0132"
  "\024.sim_msg.SensorGroup\022\r\n\005group\030\t \001(\t\"\227\002\n"
  "\007Vehicle\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\022\n\nob"
  "jectname\030\003 \001(\t\022*\n\010category\030\004 \001(\0162\030.sim_m"
  "sg.CategoryVehicle\022*\n\010physicle\030\005 \001(\0132\030.s"
  "im_msg.PhysicleVehicle\022(\n\007initial\030\006 \001(\0132"
  "\027.sim_msg.InitialVehicle\022!\n\007dynamic\030\007 \001("
  "\0132\020.sim_msg.Dynamic\022*\n\014sensor_group\030\010 \001("
  "\0132\024.sim_msg.SensorGroup\022\r\n\005group\030\t \001(\t\"\207"
  "\002\n\022VulnerableRoadUser\022\n\n\002id\030\001 \001(\003\022\014\n\004nam"
  "e\030\002 \001(\t\022\022\n\nobjectname\030\003 \001(\t\022&\n\010category\030"
  "\004 \001(\0162\024.sim_msg.CategoryVru\022&\n\010physicle\030"
  "\005 \001(\0132\024.sim_msg.PhysicleVru\022$\n\007initial\030\006"
  " \001(\0132\023.sim_msg.InitialVru\022!\n\007dynamic\030\007 \001"
  "(\0132\020.sim_msg.Dynamic\022*\n\014sensor_group\030\010 \001"
  "(\0132\024.sim_msg.SensorGroup\"\217\002\n\023Miscellaneo"
  "usObject\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\022\n\nob"
  "jectname\030\003 \001(\t\022\'\n\010category\030\004 \001(\0162\025.sim_m"
  "sg.CategoryMisc\022)\n\010physicle\030\005 \001(\0132\027.sim_"
  "msg.PhysicleCommon\022\'\n\007initial\030\006 \001(\0132\026.si"
  "m_msg.InitialCommon\022!\n\007dynamic\030\007 \001(\0132\020.s"
  "im_msg.Dynamic\022*\n\014sensor_group\030\010 \001(\0132\024.s"
  "im_msg.SensorGroup\"A\n\010MapModel\022\014\n\004name\030\001"
  " \001(\t\022\'\n\006common\030\002 \001(\0132\027.sim_msg.PhysicleC"
  "ommon\"\261\003\n\005Scene\022!\n\007setting\030\001 \001(\0132\020.sim_m"
  "sg.Setting\022\032\n\004egos\030\002 \003(\0132\014.sim_msg.Ego\022\""
  "\n\010vehicles\030\003 \003(\0132\020.sim_msg.Vehicle\022)\n\004vr"
  "us\030\004 \003(\0132\033.sim_msg.VulnerableRoadUser\022+\n"
  "\005miscs\030\005 \003(\0132\034.sim_msg.MiscellaneousObje"
  "ct\0224\n\013environment\030\006 \003(\0132\037.sim_msg.Scene."
  "EnvironmentEntry\022:\n\024infrastructure_group"
  "\030\007 \001(\0132\034.sim_msg.InfrastructureGroup\022%\n\n"
  "map_models\030\010 \003(\0132\021.sim_msg.MapModel\032T\n\020E"
  "nvironmentEntry\022\013\n\003key\030\001 \001(\003\022/\n\005value\030\002 "
  "\001(\0132 .sim_msg.EnvironmentalConditions:\0028"
  "\001*\327\002\n\017CategoryVehicle\022\030\n\024CATEGORY_VEHICL"
  "E_CAR\020\000\022\030\n\024CATEGORY_VEHICLE_BUS\020\001\022\032\n\026CAT"
  "EGORY_VEHICLE_TRUCK\020\002\022\034\n\030CATEGORY_VEHICL"
  "E_TRALLER\020\003\022\031\n\025CATEGORY_VEHICLE_BIKE\020\004\022\""
  "\n\036CATEGORY_VEHICLE_ELECTRIC_BIKE\020\005\022\036\n\032CA"
  "TEGORY_VEHICLE_MOTORBIKE\020\006\022\'\n#CATEGORY_V"
  "EHICLE_ELECTRIC_MOTORBIKE\020\007\022)\n%CATEGORY_"
  "VEHICLE_ELECTRIC_SEMITRAILER\020\010\022#\n\037CATEGO"
  "RY_VEHICLE_ELECTRIC_CRANE\020\t*`\n\013CategoryV"
  "ru\022\027\n\023CATEGORY_VRU_ANIMAL\020\000\022\033\n\027CATEGORY_"
  "VRU_PEDESTRIAN\020\001\022\033\n\027CATEGORY_VRU_WHEELCH"
  "AIR\020\002*\321\003\n\014CategoryMisc\022\031\n\025CATEGORY_MISC_"
  "BARRIER\020\000\022\032\n\026CATEGORY_MISC_BUILDING\020\001\022\032\n"
  "\026CATEGORY_MISC_CROSSING\020\002\022\030\n\024CATEGORY_MI"
  "SC_GANTRY\020\003\022\032\n\026CATEGORY_MISC_OBSTACLE\020\004\022"
  "\037\n\033CATEGORY_MISC_PARKING_SPACE\020\005\022\027\n\023CATE"
  "GORY_MISC_PATCH\020\006\022\026\n\022CATEGORY_MISC_POLE\020"
  "\007\022\031\n\025CATEGORY_MISC_RAILING\020\010\022\032\n\026CATEGORY"
  "_MISC_ROADMARK\020\t\022\037\n\033CATEGORY_MISC_SOUND_"
  "BARRIER\020\n\022\035\n\031CATEGORY_MISC_STREET_LAMP\020\013"
  "\022!\n\035CATEGORY_MISC_TRAFFIC_IS_LAND\020\014\022\026\n\022C"
  "ATEGORY_MISC_TREE\020\r\022\034\n\030CATEGORY_MISC_VEG"
  "ETATION\020\016\022\026\n\022CATEGORY_MISC_NONE\020\017*\225\002\n\005Co"
  "lor\022\017\n\013COLOR_WHITE\020\000\022\020\n\014COLOR_SILVER\020\001\022\016"
  "\n\nCOLOR_GRAY\020\002\022\017\n\013COLOR_BLACK\020\003\022\r\n\tCOLOR"
  "_RED\020\004\022\020\n\014COLOR_MAROON\020\005\022\020\n\014COLOR_YELLOW"
  "\020\006\022\017\n\013COLOR_OLIVE\020\007\022\016\n\nCOLOR_LIME\020\010\022\017\n\013C"
  "OLOR_GREEN\020\t\022\016\n\nCOLOR_AQUA\020\n\022\016\n\nCOLOR_TE"
  "AL\020\013\022\016\n\nCOLOR_BLUE\020\014\022\016\n\nCOLOR_NAVY\020\r\022\021\n\r"
  "COLOR_FUCHSIA\020\016\022\020\n\014COLOR_PURPLE\020\017*\241\001\n\014Be"
  "haviorType\022\035\n\031BEHAVIOR_TYPE_USER_DEFINE\020"
  "\000\022!\n\035BEHAVIOR_TYPE_TRAFFIC_VEHICLE\020\001\022*\n&"
  "BEHAVIOR_TYPE_TRAFFIC_VEHICLE_ARTERIAL\020\002"
  "\022#\n\037BEHAVIOR_TYPE_TRAJECTORY_FOLLOW\020\003*\222\001"
  "\n\004Rule\022\021\n\rRULE_EQUAL_TO\020\000\022\025\n\021RULE_GREATE"
  "R_THEN\020\001\022\033\n\027RULE_GREATER_THEN_EQUAL\020\002\022\022\n"
  "\016RULE_LESS_THEN\020\003\022\030\n\024RULE_LESS_THEN_EQUA"
  "L\020\004\022\025\n\021RULE_NOT_EQUAL_TO\020\005*e\n\014DirDimensi"
  "on\022\036\n\032DIR_DIMENSION_LONGITUDINAL\020\000\022\031\n\025DI"
  "R_DIMENSION_LATERAL\020\001\022\032\n\026DIR_DIMENSION_V"
  "ERTICAL\020\002*x\n\rConditionEdge\022\027\n\023CONDITION_"
  "EDGE_NONE\020\000\022\031\n\025CONDITION_EDGE_RISING\020\001\022\032"
  "\n\026CONDITION_EDGE_FALLING\020\002\022\027\n\023CONDITION_"
  "EDGE_BOTH\020\003*M\n\014DistanceType\022\033\n\027DISTANCE_"
  "TYPE_EUCLIDEAN\020\000\022 \n\034DISTANCE_TYPE_LANEPR"
  "OJECTION\020\001*\364\001\n\025StoryboardElementType\022!\n\035"
  "STORYBOARD_ELEMENT_TYPE_STORY\020\000\022\037\n\033STORY"
  "BOARD_ELEMENT_TYPE_ACT\020\001\022$\n STORYBOARD_E"
  "LEMENT_TYPE_MANEUVER\020\002\022!\n\035STORYBOARD_ELE"
  "MENT_TYPE_EVENT\020\003\022\"\n\036STORYBOARD_ELEMENT_"
  "TYPE_ACTION\020\004\022*\n&STORYBOARD_ELEMENT_TYPE"
  "_MANEUVER_GROUP\020\005*\325\002\n\026StoryboardElementS"
  "tate\022-\n)STORYBOARD_ELEMENT_STATE_START_T"
  "RANSITION\020\000\022+\n\'STORYBOARD_ELEMENT_STATE_"
  "END_TRANSITION\020\001\022,\n(STORYBOARD_ELEMENT_S"
  "TATE_STOP_TRANSITION\020\002\022,\n(STORYBOARD_ELE"
  "MENT_STATE_SKIP_TRANSITION\020\003\022+\n\'STORYBOA"
  "RD_ELEMENT_STATE_COMPLETE_STATE\020\004\022*\n&STO"
  "RYBOARD_ELEMENT_STATE_RUNNING_STATE\020\005\022*\n"
  "&STORYBOARD_ELEMENT_STATE_STANDBY_STATE\020"
  "\006b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_scene_2eproto_deps[8] = {
  &::descriptor_table_basic_2eproto,
  &::descriptor_table_environment_2eproto,
  &::descriptor_table_scene_5finfrastructure_5fgroup_2eproto,
  &::descriptor_table_scene_5fsensor_5fgroup_2eproto,
  &::descriptor_table_settings_2eproto,
  &::descriptor_table_vehicle_5fgeometry_2eproto,
  &::descriptor_table_vehicle_5finteraction_2eproto,
  &::descriptor_table_waypoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_scene_2eproto_sccs[37] = {
  &scc_info_Action_scene_2eproto.base,
  &scc_info_ActionAccel_scene_2eproto.base,
  &scc_info_ActionLaneChange_scene_2eproto.base,
  &scc_info_ActionLateralDistance_scene_2eproto.base,
  &scc_info_ActionSpeed_scene_2eproto.base,
  &scc_info_BoundingBox_scene_2eproto.base,
  &scc_info_Condition_scene_2eproto.base,
  &scc_info_ConditionEgoAttachLaneidCustom_scene_2eproto.base,
  &scc_info_ConditionReachDistance_scene_2eproto.base,
  &scc_info_ConditionReachPosition_scene_2eproto.base,
  &scc_info_ConditionRelativeDistance_scene_2eproto.base,
  &scc_info_ConditionRelativeSpeed_scene_2eproto.base,
  &scc_info_ConditionSimulationTime_scene_2eproto.base,
  &scc_info_ConditionSpeed_scene_2eproto.base,
  &scc_info_ConditionStoryboardElementState_scene_2eproto.base,
  &scc_info_ConditionTimeHeadway_scene_2eproto.base,
  &scc_info_ConditionTimeToCollision_scene_2eproto.base,
  &scc_info_Dynamic_scene_2eproto.base,
  &scc_info_DynamicConstraints_scene_2eproto.base,
  &scc_info_Ego_scene_2eproto.base,
  &scc_info_Event_scene_2eproto.base,
  &scc_info_InitialCommon_scene_2eproto.base,
  &scc_info_InitialEgo_scene_2eproto.base,
  &scc_info_InitialVehicle_scene_2eproto.base,
  &scc_info_InitialVru_scene_2eproto.base,
  &scc_info_MapModel_scene_2eproto.base,
  &scc_info_MiscellaneousObject_scene_2eproto.base,
  &scc_info_Performance_scene_2eproto.base,
  &scc_info_PhysicleCommon_scene_2eproto.base,
  &scc_info_PhysicleEgo_scene_2eproto.base,
  &scc_info_PhysicleVehicle_scene_2eproto.base,
  &scc_info_PhysicleVru_scene_2eproto.base,
  &scc_info_Scene_scene_2eproto.base,
  &scc_info_Scene_EnvironmentEntry_DoNotUse_scene_2eproto.base,
  &scc_info_Trigger_scene_2eproto.base,
  &scc_info_Vehicle_scene_2eproto.base,
  &scc_info_VulnerableRoadUser_scene_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_scene_2eproto_once;
static bool descriptor_table_scene_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_scene_2eproto = {
  &descriptor_table_scene_2eproto_initialized, descriptor_table_protodef_scene_2eproto, "scene.proto", 8449,
  &descriptor_table_scene_2eproto_once, descriptor_table_scene_2eproto_sccs, descriptor_table_scene_2eproto_deps, 37, 8,
  schemas, file_default_instances, TableStruct_scene_2eproto::offsets,
  file_level_metadata_scene_2eproto, 37, file_level_enum_descriptors_scene_2eproto, file_level_service_descriptors_scene_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_scene_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_scene_2eproto), true);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionAccel_EndType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[0];
}
bool ActionAccel_EndType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionAccel_EndType ActionAccel::END_TYPE_NONE;
constexpr ActionAccel_EndType ActionAccel::END_TYPE_TIME;
constexpr ActionAccel_EndType ActionAccel::END_TYPE_SPEED;
constexpr ActionAccel_EndType ActionAccel::EndType_MIN;
constexpr ActionAccel_EndType ActionAccel::EndType_MAX;
constexpr int ActionAccel::EndType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionLaneChange_Dir_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[1];
}
bool ActionLaneChange_Dir_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ActionLaneChange_Dir ActionLaneChange::DIR_LEFT;
constexpr ActionLaneChange_Dir ActionLaneChange::DIR_RIGHT;
constexpr ActionLaneChange_Dir ActionLaneChange::DIR_LEFT_IN_LANE;
constexpr ActionLaneChange_Dir ActionLaneChange::DIR_RIGHT_IN_LANE;
constexpr ActionLaneChange_Dir ActionLaneChange::Dir_MIN;
constexpr ActionLaneChange_Dir ActionLaneChange::Dir_MAX;
constexpr int ActionLaneChange::Dir_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CategoryVehicle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[2];
}
bool CategoryVehicle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CategoryVru_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[3];
}
bool CategoryVru_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CategoryMisc_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[4];
}
bool CategoryMisc_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Color_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[5];
}
bool Color_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BehaviorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[6];
}
bool BehaviorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Rule_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[7];
}
bool Rule_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DirDimension_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[8];
}
bool DirDimension_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConditionEdge_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[9];
}
bool ConditionEdge_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[10];
}
bool DistanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoryboardElementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[11];
}
bool StoryboardElementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StoryboardElementState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_scene_2eproto);
  return file_level_enum_descriptors_scene_2eproto[12];
}
bool StoryboardElementState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void DynamicConstraints::InitAsDefaultInstance() {
}
class DynamicConstraints::_Internal {
 public:
};

DynamicConstraints::DynamicConstraints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.DynamicConstraints)
}
DynamicConstraints::DynamicConstraints(const DynamicConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_acceleration_, &from.max_acceleration_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_speed_) -
    reinterpret_cast<char*>(&max_acceleration_)) + sizeof(max_speed_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.DynamicConstraints)
}

void DynamicConstraints::SharedCtor() {
  ::memset(&max_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_speed_) -
      reinterpret_cast<char*>(&max_acceleration_)) + sizeof(max_speed_));
}

DynamicConstraints::~DynamicConstraints() {
  // @@protoc_insertion_point(destructor:sim_msg.DynamicConstraints)
  SharedDtor();
}

void DynamicConstraints::SharedDtor() {
}

void DynamicConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicConstraints& DynamicConstraints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicConstraints_scene_2eproto.base);
  return *internal_default_instance();
}


void DynamicConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.DynamicConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_acceleration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_speed_) -
      reinterpret_cast<char*>(&max_acceleration_)) + sizeof(max_speed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DynamicConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_acceleration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_deceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_deceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DynamicConstraints::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.DynamicConstraints)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_acceleration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_deceleration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_deceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_speed = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.DynamicConstraints)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.DynamicConstraints)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DynamicConstraints::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.DynamicConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_acceleration = 1;
  if (!(this->max_acceleration() <= 0 && this->max_acceleration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->max_acceleration(), output);
  }

  // double max_deceleration = 2;
  if (!(this->max_deceleration() <= 0 && this->max_deceleration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->max_deceleration(), output);
  }

  // double max_speed = 3;
  if (!(this->max_speed() <= 0 && this->max_speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->max_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.DynamicConstraints)
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicConstraints::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.DynamicConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_acceleration = 1;
  if (!(this->max_acceleration() <= 0 && this->max_acceleration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->max_acceleration(), target);
  }

  // double max_deceleration = 2;
  if (!(this->max_deceleration() <= 0 && this->max_deceleration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->max_deceleration(), target);
  }

  // double max_speed = 3;
  if (!(this->max_speed() <= 0 && this->max_speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->max_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.DynamicConstraints)
  return target;
}

size_t DynamicConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.DynamicConstraints)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_acceleration = 1;
  if (!(this->max_acceleration() <= 0 && this->max_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_deceleration = 2;
  if (!(this->max_deceleration() <= 0 && this->max_deceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_speed = 3;
  if (!(this->max_speed() <= 0 && this->max_speed() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicConstraints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.DynamicConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicConstraints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicConstraints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.DynamicConstraints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.DynamicConstraints)
    MergeFrom(*source);
  }
}

void DynamicConstraints::MergeFrom(const DynamicConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.DynamicConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_acceleration() <= 0 && from.max_acceleration() >= 0)) {
    set_max_acceleration(from.max_acceleration());
  }
  if (!(from.max_deceleration() <= 0 && from.max_deceleration() >= 0)) {
    set_max_deceleration(from.max_deceleration());
  }
  if (!(from.max_speed() <= 0 && from.max_speed() >= 0)) {
    set_max_speed(from.max_speed());
  }
}

void DynamicConstraints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.DynamicConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicConstraints::CopyFrom(const DynamicConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.DynamicConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicConstraints::IsInitialized() const {
  return true;
}

void DynamicConstraints::InternalSwap(DynamicConstraints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_acceleration_, other->max_acceleration_);
  swap(max_deceleration_, other->max_deceleration_);
  swap(max_speed_, other->max_speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicConstraints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingBox::InitAsDefaultInstance() {
  ::sim_msg::_BoundingBox_default_instance_._instance.get_mutable()->center_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}
class BoundingBox::_Internal {
 public:
  static const ::sim_msg::Vec3& center(const BoundingBox* msg);
};

const ::sim_msg::Vec3&
BoundingBox::_Internal::center(const BoundingBox* msg) {
  return *msg->center_;
}
void BoundingBox::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
BoundingBox::BoundingBox()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.BoundingBox)
}
BoundingBox::BoundingBox(const BoundingBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::sim_msg::Vec3(*from.center_);
  } else {
    center_ = nullptr;
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&higth_) -
    reinterpret_cast<char*>(&length_)) + sizeof(higth_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.BoundingBox)
}

void BoundingBox::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox_scene_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&higth_) -
      reinterpret_cast<char*>(&center_)) + sizeof(higth_));
}

BoundingBox::~BoundingBox() {
  // @@protoc_insertion_point(destructor:sim_msg.BoundingBox)
  SharedDtor();
}

void BoundingBox::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void BoundingBox::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox& BoundingBox::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox_scene_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&higth_) -
      reinterpret_cast<char*>(&length_)) + sizeof(higth_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* BoundingBox::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Vec3 center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double higth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          higth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool BoundingBox::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.BoundingBox)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Vec3 center = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double higth = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &higth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.BoundingBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.BoundingBox)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void BoundingBox::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Vec3 center = 1;
  if (this->has_center()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::center(this), output);
  }

  // double length = 2;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // double width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // double higth = 4;
  if (!(this->higth() <= 0 && this->higth() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->higth(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.BoundingBox)
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.BoundingBox)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Vec3 center = 1;
  if (this->has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::center(this), target);
  }

  // double length = 2;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // double width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // double higth = 4;
  if (!(this->higth() <= 0 && this->higth() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->higth(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.BoundingBox)
  return target;
}

size_t BoundingBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.BoundingBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // double length = 2;
  if (!(this->length() <= 0 && this->length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 3;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double higth = 4;
  if (!(this->higth() <= 0 && this->higth() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.BoundingBox)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.BoundingBox)
    MergeFrom(*source);
  }
}

void BoundingBox::MergeFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.BoundingBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    mutable_center()->::sim_msg::Vec3::MergeFrom(from.center());
  }
  if (!(from.length() <= 0 && from.length() >= 0)) {
    set_length(from.length());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    set_width(from.width());
  }
  if (!(from.higth() <= 0 && from.higth() >= 0)) {
    set_higth(from.higth());
  }
}

void BoundingBox::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox::CopyFrom(const BoundingBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.BoundingBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox::IsInitialized() const {
  return true;
}

void BoundingBox::InternalSwap(BoundingBox* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(center_, other->center_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(higth_, other->higth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Performance::InitAsDefaultInstance() {
}
class Performance::_Internal {
 public:
};

Performance::Performance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Performance)
}
Performance::Performance(const Performance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_speed_, &from.max_speed_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_decel_) -
    reinterpret_cast<char*>(&max_speed_)) + sizeof(max_decel_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Performance)
}

void Performance::SharedCtor() {
  ::memset(&max_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_decel_) -
      reinterpret_cast<char*>(&max_speed_)) + sizeof(max_decel_));
}

Performance::~Performance() {
  // @@protoc_insertion_point(destructor:sim_msg.Performance)
  SharedDtor();
}

void Performance::SharedDtor() {
}

void Performance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Performance& Performance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Performance_scene_2eproto.base);
  return *internal_default_instance();
}


void Performance::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_speed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_decel_) -
      reinterpret_cast<char*>(&max_speed_)) + sizeof(max_decel_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Performance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_speed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_accel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_accel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_decel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_decel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Performance::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Performance)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double max_speed = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_accel = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_accel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double max_decel = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_decel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Performance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Performance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Performance::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_speed = 1;
  if (!(this->max_speed() <= 0 && this->max_speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->max_speed(), output);
  }

  // double max_accel = 2;
  if (!(this->max_accel() <= 0 && this->max_accel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->max_accel(), output);
  }

  // double max_decel = 3;
  if (!(this->max_decel() <= 0 && this->max_decel() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->max_decel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Performance)
}

::PROTOBUF_NAMESPACE_ID::uint8* Performance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Performance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_speed = 1;
  if (!(this->max_speed() <= 0 && this->max_speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->max_speed(), target);
  }

  // double max_accel = 2;
  if (!(this->max_accel() <= 0 && this->max_accel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->max_accel(), target);
  }

  // double max_decel = 3;
  if (!(this->max_decel() <= 0 && this->max_decel() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->max_decel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Performance)
  return target;
}

size_t Performance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Performance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double max_speed = 1;
  if (!(this->max_speed() <= 0 && this->max_speed() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_accel = 2;
  if (!(this->max_accel() <= 0 && this->max_accel() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_decel = 3;
  if (!(this->max_decel() <= 0 && this->max_decel() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Performance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  const Performance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Performance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Performance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Performance)
    MergeFrom(*source);
  }
}

void Performance::MergeFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Performance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_speed() <= 0 && from.max_speed() >= 0)) {
    set_max_speed(from.max_speed());
  }
  if (!(from.max_accel() <= 0 && from.max_accel() >= 0)) {
    set_max_accel(from.max_accel());
  }
  if (!(from.max_decel() <= 0 && from.max_decel() >= 0)) {
    set_max_decel(from.max_decel());
  }
}

void Performance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Performance::CopyFrom(const Performance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Performance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Performance::IsInitialized() const {
  return true;
}

void Performance::InternalSwap(Performance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_speed_, other->max_speed_);
  swap(max_accel_, other->max_accel_);
  swap(max_decel_, other->max_decel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Performance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionTimeToCollision::InitAsDefaultInstance() {
}
class ConditionTimeToCollision::_Internal {
 public:
};

ConditionTimeToCollision::ConditionTimeToCollision()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionTimeToCollision)
}
ConditionTimeToCollision::ConditionTimeToCollision(const ConditionTimeToCollision& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  ::memcpy(&distance_type_, &from.distance_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&distance_type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionTimeToCollision)
}

void ConditionTimeToCollision::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionTimeToCollision_scene_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&distance_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&distance_type_)) + sizeof(value_));
}

ConditionTimeToCollision::~ConditionTimeToCollision() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionTimeToCollision)
  SharedDtor();
}

void ConditionTimeToCollision::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConditionTimeToCollision::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionTimeToCollision& ConditionTimeToCollision::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionTimeToCollision_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionTimeToCollision::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionTimeToCollision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&distance_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&distance_type_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionTimeToCollision::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.ConditionTimeToCollision.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.DistanceType distance_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_distance_type(static_cast<::sim_msg::DistanceType>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Rule rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rule(static_cast<::sim_msg::Rule>(val));
        } else goto handle_unusual;
        continue;
      // double value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionTimeToCollision::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionTimeToCollision)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ConditionTimeToCollision.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.DistanceType distance_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_distance_type(static_cast< ::sim_msg::DistanceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Rule rule = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rule(static_cast< ::sim_msg::Rule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionTimeToCollision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionTimeToCollision)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionTimeToCollision::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionTimeToCollision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionTimeToCollision.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // .sim_msg.DistanceType distance_type = 2;
  if (this->distance_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->distance_type(), output);
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->rule(), output);
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionTimeToCollision)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionTimeToCollision::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionTimeToCollision)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionTimeToCollision.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // .sim_msg.DistanceType distance_type = 2;
  if (this->distance_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->distance_type(), target);
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->rule(), target);
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionTimeToCollision)
  return target;
}

size_t ConditionTimeToCollision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionTimeToCollision)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // .sim_msg.DistanceType distance_type = 2;
  if (this->distance_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->distance_type());
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule());
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionTimeToCollision::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionTimeToCollision)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionTimeToCollision* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionTimeToCollision>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionTimeToCollision)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionTimeToCollision)
    MergeFrom(*source);
  }
}

void ConditionTimeToCollision::MergeFrom(const ConditionTimeToCollision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionTimeToCollision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.distance_type() != 0) {
    set_distance_type(from.distance_type());
  }
  if (from.rule() != 0) {
    set_rule(from.rule());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void ConditionTimeToCollision::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionTimeToCollision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionTimeToCollision::CopyFrom(const ConditionTimeToCollision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionTimeToCollision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionTimeToCollision::IsInitialized() const {
  return true;
}

void ConditionTimeToCollision::InternalSwap(ConditionTimeToCollision* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(distance_type_, other->distance_type_);
  swap(rule_, other->rule_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionTimeToCollision::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionSpeed::InitAsDefaultInstance() {
}
class ConditionSpeed::_Internal {
 public:
};

ConditionSpeed::ConditionSpeed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionSpeed)
}
ConditionSpeed::ConditionSpeed(const ConditionSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionSpeed)
}

void ConditionSpeed::SharedCtor() {
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(value_));
}

ConditionSpeed::~ConditionSpeed() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionSpeed)
  SharedDtor();
}

void ConditionSpeed::SharedDtor() {
}

void ConditionSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionSpeed& ConditionSpeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionSpeed_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.DirDimension direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_direction(static_cast<::sim_msg::DirDimension>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Rule rule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rule(static_cast<::sim_msg::Rule>(val));
        } else goto handle_unusual;
        continue;
      // double value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionSpeed::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionSpeed)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.DirDimension direction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::sim_msg::DirDimension >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Rule rule = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rule(static_cast< ::sim_msg::Rule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionSpeed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionSpeed::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.DirDimension direction = 1;
  if (this->direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }

  // .sim_msg.Rule rule = 2;
  if (this->rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->rule(), output);
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionSpeed)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionSpeed::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.DirDimension direction = 1;
  if (this->direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }

  // .sim_msg.Rule rule = 2;
  if (this->rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->rule(), target);
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionSpeed)
  return target;
}

size_t ConditionSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionSpeed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.DirDimension direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .sim_msg.Rule rule = 2;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule());
  }

  // double value = 3;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionSpeed)
    MergeFrom(*source);
  }
}

void ConditionSpeed::MergeFrom(const ConditionSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.rule() != 0) {
    set_rule(from.rule());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void ConditionSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionSpeed::CopyFrom(const ConditionSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionSpeed::IsInitialized() const {
  return true;
}

void ConditionSpeed::InternalSwap(ConditionSpeed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(direction_, other->direction_);
  swap(rule_, other->rule_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionSpeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionRelativeSpeed::InitAsDefaultInstance() {
}
class ConditionRelativeSpeed::_Internal {
 public:
};

ConditionRelativeSpeed::ConditionRelativeSpeed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionRelativeSpeed)
}
ConditionRelativeSpeed::ConditionRelativeSpeed(const ConditionRelativeSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionRelativeSpeed)
}

void ConditionRelativeSpeed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionRelativeSpeed_scene_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(value_));
}

ConditionRelativeSpeed::~ConditionRelativeSpeed() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionRelativeSpeed)
  SharedDtor();
}

void ConditionRelativeSpeed::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConditionRelativeSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionRelativeSpeed& ConditionRelativeSpeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionRelativeSpeed_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionRelativeSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionRelativeSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&direction_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionRelativeSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.ConditionRelativeSpeed.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.DirDimension direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_direction(static_cast<::sim_msg::DirDimension>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Rule rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rule(static_cast<::sim_msg::Rule>(val));
        } else goto handle_unusual;
        continue;
      // double value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionRelativeSpeed::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionRelativeSpeed)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ConditionRelativeSpeed.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.DirDimension direction = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_direction(static_cast< ::sim_msg::DirDimension >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Rule rule = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rule(static_cast< ::sim_msg::Rule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionRelativeSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionRelativeSpeed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionRelativeSpeed::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionRelativeSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionRelativeSpeed.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // .sim_msg.DirDimension direction = 2;
  if (this->direction() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->rule(), output);
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionRelativeSpeed)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionRelativeSpeed::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionRelativeSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionRelativeSpeed.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // .sim_msg.DirDimension direction = 2;
  if (this->direction() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->rule(), target);
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionRelativeSpeed)
  return target;
}

size_t ConditionRelativeSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionRelativeSpeed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // .sim_msg.DirDimension direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->direction());
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule());
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionRelativeSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionRelativeSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionRelativeSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionRelativeSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionRelativeSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionRelativeSpeed)
    MergeFrom(*source);
  }
}

void ConditionRelativeSpeed::MergeFrom(const ConditionRelativeSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionRelativeSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
  if (from.rule() != 0) {
    set_rule(from.rule());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void ConditionRelativeSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionRelativeSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionRelativeSpeed::CopyFrom(const ConditionRelativeSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionRelativeSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionRelativeSpeed::IsInitialized() const {
  return true;
}

void ConditionRelativeSpeed::InternalSwap(ConditionRelativeSpeed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(direction_, other->direction_);
  swap(rule_, other->rule_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionRelativeSpeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionReachPosition::InitAsDefaultInstance() {
  ::sim_msg::_ConditionReachPosition_default_instance_._instance.get_mutable()->position_ = const_cast< ::sim_msg::Position*>(
      ::sim_msg::Position::internal_default_instance());
}
class ConditionReachPosition::_Internal {
 public:
  static const ::sim_msg::Position& position(const ConditionReachPosition* msg);
};

const ::sim_msg::Position&
ConditionReachPosition::_Internal::position(const ConditionReachPosition* msg) {
  return *msg->position_;
}
void ConditionReachPosition::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
ConditionReachPosition::ConditionReachPosition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionReachPosition)
}
ConditionReachPosition::ConditionReachPosition(const ConditionReachPosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::sim_msg::Position(*from.position_);
  } else {
    position_ = nullptr;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionReachPosition)
}

void ConditionReachPosition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionReachPosition_scene_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&position_)) + sizeof(radius_));
}

ConditionReachPosition::~ConditionReachPosition() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionReachPosition)
  SharedDtor();
}

void ConditionReachPosition::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void ConditionReachPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionReachPosition& ConditionReachPosition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionReachPosition_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionReachPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionReachPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  radius_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionReachPosition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double radius = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionReachPosition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionReachPosition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double radius = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Position position = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionReachPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionReachPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionReachPosition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionReachPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->radius(), output);
  }

  // .sim_msg.Position position = 2;
  if (this->has_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionReachPosition)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionReachPosition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionReachPosition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->radius(), target);
  }

  // .sim_msg.Position position = 2;
  if (this->has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionReachPosition)
  return target;
}

size_t ConditionReachPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionReachPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Position position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // double radius = 1;
  if (!(this->radius() <= 0 && this->radius() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionReachPosition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionReachPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionReachPosition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionReachPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionReachPosition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionReachPosition)
    MergeFrom(*source);
  }
}

void ConditionReachPosition::MergeFrom(const ConditionReachPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionReachPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    mutable_position()->::sim_msg::Position::MergeFrom(from.position());
  }
  if (!(from.radius() <= 0 && from.radius() >= 0)) {
    set_radius(from.radius());
  }
}

void ConditionReachPosition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionReachPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionReachPosition::CopyFrom(const ConditionReachPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionReachPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionReachPosition::IsInitialized() const {
  return true;
}

void ConditionReachPosition::InternalSwap(ConditionReachPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(radius_, other->radius_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionReachPosition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionRelativeDistance::InitAsDefaultInstance() {
}
class ConditionRelativeDistance::_Internal {
 public:
};

ConditionRelativeDistance::ConditionRelativeDistance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionRelativeDistance)
}
ConditionRelativeDistance::ConditionRelativeDistance(const ConditionRelativeDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  ::memcpy(&distance_type_, &from.distance_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&distance_type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionRelativeDistance)
}

void ConditionRelativeDistance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionRelativeDistance_scene_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&distance_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&distance_type_)) + sizeof(value_));
}

ConditionRelativeDistance::~ConditionRelativeDistance() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionRelativeDistance)
  SharedDtor();
}

void ConditionRelativeDistance::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConditionRelativeDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionRelativeDistance& ConditionRelativeDistance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionRelativeDistance_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionRelativeDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionRelativeDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&distance_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&distance_type_)) + sizeof(value_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionRelativeDistance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.ConditionRelativeDistance.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.DistanceType distance_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_distance_type(static_cast<::sim_msg::DistanceType>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Rule rule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rule(static_cast<::sim_msg::Rule>(val));
        } else goto handle_unusual;
        continue;
      // double value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionRelativeDistance::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionRelativeDistance)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ConditionRelativeDistance.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.DistanceType distance_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_distance_type(static_cast< ::sim_msg::DistanceType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Rule rule = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rule(static_cast< ::sim_msg::Rule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionRelativeDistance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionRelativeDistance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionRelativeDistance::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionRelativeDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionRelativeDistance.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // .sim_msg.DistanceType distance_type = 2;
  if (this->distance_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->distance_type(), output);
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->rule(), output);
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionRelativeDistance)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionRelativeDistance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionRelativeDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionRelativeDistance.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // .sim_msg.DistanceType distance_type = 2;
  if (this->distance_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->distance_type(), target);
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->rule(), target);
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionRelativeDistance)
  return target;
}

size_t ConditionRelativeDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionRelativeDistance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // .sim_msg.DistanceType distance_type = 2;
  if (this->distance_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->distance_type());
  }

  // .sim_msg.Rule rule = 3;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule());
  }

  // double value = 4;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionRelativeDistance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionRelativeDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionRelativeDistance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionRelativeDistance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionRelativeDistance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionRelativeDistance)
    MergeFrom(*source);
  }
}

void ConditionRelativeDistance::MergeFrom(const ConditionRelativeDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionRelativeDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (from.distance_type() != 0) {
    set_distance_type(from.distance_type());
  }
  if (from.rule() != 0) {
    set_rule(from.rule());
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
}

void ConditionRelativeDistance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionRelativeDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionRelativeDistance::CopyFrom(const ConditionRelativeDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionRelativeDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionRelativeDistance::IsInitialized() const {
  return true;
}

void ConditionRelativeDistance::InternalSwap(ConditionRelativeDistance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(distance_type_, other->distance_type_);
  swap(rule_, other->rule_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionRelativeDistance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionEgoAttachLaneidCustom::InitAsDefaultInstance() {
}
class ConditionEgoAttachLaneidCustom::_Internal {
 public:
};

ConditionEgoAttachLaneidCustom::ConditionEgoAttachLaneidCustom()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionEgoAttachLaneidCustom)
}
ConditionEgoAttachLaneidCustom::ConditionEgoAttachLaneidCustom(const ConditionEgoAttachLaneidCustom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&road_id_, &from.road_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lane_id_) -
    reinterpret_cast<char*>(&road_id_)) + sizeof(lane_id_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionEgoAttachLaneidCustom)
}

void ConditionEgoAttachLaneidCustom::SharedCtor() {
  ::memset(&road_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_id_) -
      reinterpret_cast<char*>(&road_id_)) + sizeof(lane_id_));
}

ConditionEgoAttachLaneidCustom::~ConditionEgoAttachLaneidCustom() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionEgoAttachLaneidCustom)
  SharedDtor();
}

void ConditionEgoAttachLaneidCustom::SharedDtor() {
}

void ConditionEgoAttachLaneidCustom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionEgoAttachLaneidCustom& ConditionEgoAttachLaneidCustom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionEgoAttachLaneidCustom_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionEgoAttachLaneidCustom::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionEgoAttachLaneidCustom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&road_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lane_id_) -
      reinterpret_cast<char*>(&road_id_)) + sizeof(lane_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionEgoAttachLaneidCustom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 road_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 section_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionEgoAttachLaneidCustom::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionEgoAttachLaneidCustom)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 road_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 section_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 lane_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionEgoAttachLaneidCustom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionEgoAttachLaneidCustom)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionEgoAttachLaneidCustom::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionEgoAttachLaneidCustom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->road_id(), output);
  }

  // uint64 section_id = 2;
  if (this->section_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->section_id(), output);
  }

  // int64 lane_id = 3;
  if (this->lane_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(3, this->lane_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionEgoAttachLaneidCustom)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionEgoAttachLaneidCustom::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionEgoAttachLaneidCustom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->road_id(), target);
  }

  // uint64 section_id = 2;
  if (this->section_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->section_id(), target);
  }

  // int64 lane_id = 3;
  if (this->lane_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->lane_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionEgoAttachLaneidCustom)
  return target;
}

size_t ConditionEgoAttachLaneidCustom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionEgoAttachLaneidCustom)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 road_id = 1;
  if (this->road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->road_id());
  }

  // uint64 section_id = 2;
  if (this->section_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->section_id());
  }

  // int64 lane_id = 3;
  if (this->lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->lane_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionEgoAttachLaneidCustom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionEgoAttachLaneidCustom)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionEgoAttachLaneidCustom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionEgoAttachLaneidCustom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionEgoAttachLaneidCustom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionEgoAttachLaneidCustom)
    MergeFrom(*source);
  }
}

void ConditionEgoAttachLaneidCustom::MergeFrom(const ConditionEgoAttachLaneidCustom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionEgoAttachLaneidCustom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.road_id() != 0) {
    set_road_id(from.road_id());
  }
  if (from.section_id() != 0) {
    set_section_id(from.section_id());
  }
  if (from.lane_id() != 0) {
    set_lane_id(from.lane_id());
  }
}

void ConditionEgoAttachLaneidCustom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionEgoAttachLaneidCustom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionEgoAttachLaneidCustom::CopyFrom(const ConditionEgoAttachLaneidCustom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionEgoAttachLaneidCustom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionEgoAttachLaneidCustom::IsInitialized() const {
  return true;
}

void ConditionEgoAttachLaneidCustom::InternalSwap(ConditionEgoAttachLaneidCustom* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(road_id_, other->road_id_);
  swap(section_id_, other->section_id_);
  swap(lane_id_, other->lane_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionEgoAttachLaneidCustom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionSimulationTime::InitAsDefaultInstance() {
}
class ConditionSimulationTime::_Internal {
 public:
};

ConditionSimulationTime::ConditionSimulationTime()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionSimulationTime)
}
ConditionSimulationTime::ConditionSimulationTime(const ConditionSimulationTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_) -
    reinterpret_cast<char*>(&value_)) + sizeof(rule_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionSimulationTime)
}

void ConditionSimulationTime::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_) -
      reinterpret_cast<char*>(&value_)) + sizeof(rule_));
}

ConditionSimulationTime::~ConditionSimulationTime() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionSimulationTime)
  SharedDtor();
}

void ConditionSimulationTime::SharedDtor() {
}

void ConditionSimulationTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionSimulationTime& ConditionSimulationTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionSimulationTime_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionSimulationTime::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionSimulationTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_) -
      reinterpret_cast<char*>(&value_)) + sizeof(rule_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionSimulationTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Rule rule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rule(static_cast<::sim_msg::Rule>(val));
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionSimulationTime::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionSimulationTime)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Rule rule = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rule(static_cast< ::sim_msg::Rule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionSimulationTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionSimulationTime)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionSimulationTime::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionSimulationTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Rule rule = 1;
  if (this->rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->rule(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionSimulationTime)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionSimulationTime::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionSimulationTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Rule rule = 1;
  if (this->rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->rule(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionSimulationTime)
  return target;
}

size_t ConditionSimulationTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionSimulationTime)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.Rule rule = 1;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionSimulationTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionSimulationTime)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionSimulationTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionSimulationTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionSimulationTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionSimulationTime)
    MergeFrom(*source);
  }
}

void ConditionSimulationTime::MergeFrom(const ConditionSimulationTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionSimulationTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.rule() != 0) {
    set_rule(from.rule());
  }
}

void ConditionSimulationTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionSimulationTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionSimulationTime::CopyFrom(const ConditionSimulationTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionSimulationTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionSimulationTime::IsInitialized() const {
  return true;
}

void ConditionSimulationTime::InternalSwap(ConditionSimulationTime* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(rule_, other->rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionSimulationTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionTimeHeadway::InitAsDefaultInstance() {
}
class ConditionTimeHeadway::_Internal {
 public:
};

ConditionTimeHeadway::ConditionTimeHeadway()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionTimeHeadway)
}
ConditionTimeHeadway::ConditionTimeHeadway(const ConditionTimeHeadway& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_) -
    reinterpret_cast<char*>(&value_)) + sizeof(rule_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionTimeHeadway)
}

void ConditionTimeHeadway::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionTimeHeadway_scene_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_) -
      reinterpret_cast<char*>(&value_)) + sizeof(rule_));
}

ConditionTimeHeadway::~ConditionTimeHeadway() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionTimeHeadway)
  SharedDtor();
}

void ConditionTimeHeadway::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConditionTimeHeadway::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionTimeHeadway& ConditionTimeHeadway::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionTimeHeadway_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionTimeHeadway::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionTimeHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_) -
      reinterpret_cast<char*>(&value_)) + sizeof(rule_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionTimeHeadway::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.ConditionTimeHeadway.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool freespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          freespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool along_route = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          along_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Rule rule = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rule(static_cast<::sim_msg::Rule>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionTimeHeadway::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionTimeHeadway)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ConditionTimeHeadway.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool freespace = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freespace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool along_route = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &along_route_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Rule rule = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rule(static_cast< ::sim_msg::Rule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionTimeHeadway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionTimeHeadway)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionTimeHeadway::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionTimeHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionTimeHeadway.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // bool freespace = 3;
  if (this->freespace() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->freespace(), output);
  }

  // bool along_route = 4;
  if (this->along_route() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->along_route(), output);
  }

  // .sim_msg.Rule rule = 5;
  if (this->rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->rule(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionTimeHeadway)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionTimeHeadway::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionTimeHeadway)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionTimeHeadway.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // bool freespace = 3;
  if (this->freespace() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->freespace(), target);
  }

  // bool along_route = 4;
  if (this->along_route() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->along_route(), target);
  }

  // .sim_msg.Rule rule = 5;
  if (this->rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->rule(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionTimeHeadway)
  return target;
}

size_t ConditionTimeHeadway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionTimeHeadway)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // bool freespace = 3;
  if (this->freespace() != 0) {
    total_size += 1 + 1;
  }

  // bool along_route = 4;
  if (this->along_route() != 0) {
    total_size += 1 + 1;
  }

  // .sim_msg.Rule rule = 5;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionTimeHeadway::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionTimeHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionTimeHeadway* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionTimeHeadway>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionTimeHeadway)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionTimeHeadway)
    MergeFrom(*source);
  }
}

void ConditionTimeHeadway::MergeFrom(const ConditionTimeHeadway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionTimeHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.freespace() != 0) {
    set_freespace(from.freespace());
  }
  if (from.along_route() != 0) {
    set_along_route(from.along_route());
  }
  if (from.rule() != 0) {
    set_rule(from.rule());
  }
}

void ConditionTimeHeadway::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionTimeHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionTimeHeadway::CopyFrom(const ConditionTimeHeadway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionTimeHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionTimeHeadway::IsInitialized() const {
  return true;
}

void ConditionTimeHeadway::InternalSwap(ConditionTimeHeadway* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(freespace_, other->freespace_);
  swap(along_route_, other->along_route_);
  swap(rule_, other->rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionTimeHeadway::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionReachDistance::InitAsDefaultInstance() {
}
class ConditionReachDistance::_Internal {
 public:
};

ConditionReachDistance::ConditionReachDistance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionReachDistance)
}
ConditionReachDistance::ConditionReachDistance(const ConditionReachDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&rule_) -
    reinterpret_cast<char*>(&value_)) + sizeof(rule_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionReachDistance)
}

void ConditionReachDistance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionReachDistance_scene_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_) -
      reinterpret_cast<char*>(&value_)) + sizeof(rule_));
}

ConditionReachDistance::~ConditionReachDistance() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionReachDistance)
  SharedDtor();
}

void ConditionReachDistance::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConditionReachDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionReachDistance& ConditionReachDistance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionReachDistance_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionReachDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionReachDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rule_) -
      reinterpret_cast<char*>(&value_)) + sizeof(rule_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionReachDistance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.ConditionReachDistance.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool freespace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          freespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool along_route = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          along_route_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Rule rule = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_rule(static_cast<::sim_msg::Rule>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionReachDistance::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionReachDistance)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ConditionReachDistance.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool freespace = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freespace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool along_route = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &along_route_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Rule rule = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_rule(static_cast< ::sim_msg::Rule >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionReachDistance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionReachDistance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionReachDistance::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionReachDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionReachDistance.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // bool freespace = 3;
  if (this->freespace() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->freespace(), output);
  }

  // bool along_route = 4;
  if (this->along_route() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->along_route(), output);
  }

  // .sim_msg.Rule rule = 5;
  if (this->rule() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->rule(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionReachDistance)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionReachDistance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionReachDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionReachDistance.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // bool freespace = 3;
  if (this->freespace() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->freespace(), target);
  }

  // bool along_route = 4;
  if (this->along_route() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->along_route(), target);
  }

  // .sim_msg.Rule rule = 5;
  if (this->rule() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->rule(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionReachDistance)
  return target;
}

size_t ConditionReachDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionReachDistance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  // double value = 2;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // bool freespace = 3;
  if (this->freespace() != 0) {
    total_size += 1 + 1;
  }

  // bool along_route = 4;
  if (this->along_route() != 0) {
    total_size += 1 + 1;
  }

  // .sim_msg.Rule rule = 5;
  if (this->rule() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->rule());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionReachDistance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionReachDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionReachDistance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionReachDistance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionReachDistance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionReachDistance)
    MergeFrom(*source);
  }
}

void ConditionReachDistance::MergeFrom(const ConditionReachDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionReachDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (from.freespace() != 0) {
    set_freespace(from.freespace());
  }
  if (from.along_route() != 0) {
    set_along_route(from.along_route());
  }
  if (from.rule() != 0) {
    set_rule(from.rule());
  }
}

void ConditionReachDistance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionReachDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionReachDistance::CopyFrom(const ConditionReachDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionReachDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionReachDistance::IsInitialized() const {
  return true;
}

void ConditionReachDistance::InternalSwap(ConditionReachDistance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(freespace_, other->freespace_);
  swap(along_route_, other->along_route_);
  swap(rule_, other->rule_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionReachDistance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConditionStoryboardElementState::InitAsDefaultInstance() {
}
class ConditionStoryboardElementState::_Internal {
 public:
};

ConditionStoryboardElementState::ConditionStoryboardElementState()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ConditionStoryboardElementState)
}
ConditionStoryboardElementState::ConditionStoryboardElementState(const ConditionStoryboardElementState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  storyboard_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.storyboard_ref().empty()) {
    storyboard_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storyboard_ref_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&type_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ConditionStoryboardElementState)
}

void ConditionStoryboardElementState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConditionStoryboardElementState_scene_2eproto.base);
  storyboard_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
}

ConditionStoryboardElementState::~ConditionStoryboardElementState() {
  // @@protoc_insertion_point(destructor:sim_msg.ConditionStoryboardElementState)
  SharedDtor();
}

void ConditionStoryboardElementState::SharedDtor() {
  storyboard_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConditionStoryboardElementState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConditionStoryboardElementState& ConditionStoryboardElementState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConditionStoryboardElementState_scene_2eproto.base);
  return *internal_default_instance();
}


void ConditionStoryboardElementState::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ConditionStoryboardElementState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  storyboard_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&type_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ConditionStoryboardElementState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.StoryboardElementType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_type(static_cast<::sim_msg::StoryboardElementType>(val));
        } else goto handle_unusual;
        continue;
      // string storyboard_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_storyboard_ref(), ptr, ctx, "sim_msg.ConditionStoryboardElementState.storyboard_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.StoryboardElementState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_state(static_cast<::sim_msg::StoryboardElementState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ConditionStoryboardElementState::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ConditionStoryboardElementState)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.StoryboardElementType type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::sim_msg::StoryboardElementType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string storyboard_ref = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_storyboard_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->storyboard_ref().data(), static_cast<int>(this->storyboard_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.ConditionStoryboardElementState.storyboard_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.StoryboardElementState state = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::StoryboardElementState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ConditionStoryboardElementState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ConditionStoryboardElementState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ConditionStoryboardElementState::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ConditionStoryboardElementState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.StoryboardElementType type = 1;
  if (this->type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string storyboard_ref = 2;
  if (this->storyboard_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->storyboard_ref().data(), static_cast<int>(this->storyboard_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionStoryboardElementState.storyboard_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->storyboard_ref(), output);
  }

  // .sim_msg.StoryboardElementState state = 3;
  if (this->state() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ConditionStoryboardElementState)
}

::PROTOBUF_NAMESPACE_ID::uint8* ConditionStoryboardElementState::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ConditionStoryboardElementState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.StoryboardElementType type = 1;
  if (this->type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // string storyboard_ref = 2;
  if (this->storyboard_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->storyboard_ref().data(), static_cast<int>(this->storyboard_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.ConditionStoryboardElementState.storyboard_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->storyboard_ref(), target);
  }

  // .sim_msg.StoryboardElementState state = 3;
  if (this->state() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ConditionStoryboardElementState)
  return target;
}

size_t ConditionStoryboardElementState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ConditionStoryboardElementState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string storyboard_ref = 2;
  if (this->storyboard_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->storyboard_ref());
  }

  // .sim_msg.StoryboardElementType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  // .sim_msg.StoryboardElementState state = 3;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConditionStoryboardElementState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ConditionStoryboardElementState)
  GOOGLE_DCHECK_NE(&from, this);
  const ConditionStoryboardElementState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConditionStoryboardElementState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ConditionStoryboardElementState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ConditionStoryboardElementState)
    MergeFrom(*source);
  }
}

void ConditionStoryboardElementState::MergeFrom(const ConditionStoryboardElementState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ConditionStoryboardElementState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.storyboard_ref().size() > 0) {

    storyboard_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storyboard_ref_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void ConditionStoryboardElementState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ConditionStoryboardElementState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConditionStoryboardElementState::CopyFrom(const ConditionStoryboardElementState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ConditionStoryboardElementState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConditionStoryboardElementState::IsInitialized() const {
  return true;
}

void ConditionStoryboardElementState::InternalSwap(ConditionStoryboardElementState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  storyboard_ref_.Swap(&other->storyboard_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConditionStoryboardElementState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
  ::sim_msg::_Condition_default_instance_.ttc_ = const_cast< ::sim_msg::ConditionTimeToCollision*>(
      ::sim_msg::ConditionTimeToCollision::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.speed_ = const_cast< ::sim_msg::ConditionSpeed*>(
      ::sim_msg::ConditionSpeed::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.relative_speed_ = const_cast< ::sim_msg::ConditionRelativeSpeed*>(
      ::sim_msg::ConditionRelativeSpeed::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.reach_position_ = const_cast< ::sim_msg::ConditionReachPosition*>(
      ::sim_msg::ConditionReachPosition::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.relative_distance_ = const_cast< ::sim_msg::ConditionRelativeDistance*>(
      ::sim_msg::ConditionRelativeDistance::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.ego_attach_laneid_custom_ = const_cast< ::sim_msg::ConditionEgoAttachLaneidCustom*>(
      ::sim_msg::ConditionEgoAttachLaneidCustom::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.time_headway_ = const_cast< ::sim_msg::ConditionTimeHeadway*>(
      ::sim_msg::ConditionTimeHeadway::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.storyboard_element_state_ = const_cast< ::sim_msg::ConditionStoryboardElementState*>(
      ::sim_msg::ConditionStoryboardElementState::internal_default_instance());
  ::sim_msg::_Condition_default_instance_.simulation_time_ = const_cast< ::sim_msg::ConditionSimulationTime*>(
      ::sim_msg::ConditionSimulationTime::internal_default_instance());
}
class Condition::_Internal {
 public:
  static const ::sim_msg::ConditionTimeToCollision& ttc(const Condition* msg);
  static const ::sim_msg::ConditionSpeed& speed(const Condition* msg);
  static const ::sim_msg::ConditionRelativeSpeed& relative_speed(const Condition* msg);
  static const ::sim_msg::ConditionReachPosition& reach_position(const Condition* msg);
  static const ::sim_msg::ConditionRelativeDistance& relative_distance(const Condition* msg);
  static const ::sim_msg::ConditionEgoAttachLaneidCustom& ego_attach_laneid_custom(const Condition* msg);
  static const ::sim_msg::ConditionTimeHeadway& time_headway(const Condition* msg);
  static const ::sim_msg::ConditionStoryboardElementState& storyboard_element_state(const Condition* msg);
  static const ::sim_msg::ConditionSimulationTime& simulation_time(const Condition* msg);
};

const ::sim_msg::ConditionTimeToCollision&
Condition::_Internal::ttc(const Condition* msg) {
  return *msg->type_.ttc_;
}
const ::sim_msg::ConditionSpeed&
Condition::_Internal::speed(const Condition* msg) {
  return *msg->type_.speed_;
}
const ::sim_msg::ConditionRelativeSpeed&
Condition::_Internal::relative_speed(const Condition* msg) {
  return *msg->type_.relative_speed_;
}
const ::sim_msg::ConditionReachPosition&
Condition::_Internal::reach_position(const Condition* msg) {
  return *msg->type_.reach_position_;
}
const ::sim_msg::ConditionRelativeDistance&
Condition::_Internal::relative_distance(const Condition* msg) {
  return *msg->type_.relative_distance_;
}
const ::sim_msg::ConditionEgoAttachLaneidCustom&
Condition::_Internal::ego_attach_laneid_custom(const Condition* msg) {
  return *msg->type_.ego_attach_laneid_custom_;
}
const ::sim_msg::ConditionTimeHeadway&
Condition::_Internal::time_headway(const Condition* msg) {
  return *msg->type_.time_headway_;
}
const ::sim_msg::ConditionStoryboardElementState&
Condition::_Internal::storyboard_element_state(const Condition* msg) {
  return *msg->type_.storyboard_element_state_;
}
const ::sim_msg::ConditionSimulationTime&
Condition::_Internal::simulation_time(const Condition* msg) {
  return *msg->type_.simulation_time_;
}
void Condition::set_allocated_ttc(::sim_msg::ConditionTimeToCollision* ttc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (ttc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ttc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ttc, submessage_arena);
    }
    set_has_ttc();
    type_.ttc_ = ttc;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.ttc)
}
void Condition::set_allocated_speed(::sim_msg::ConditionSpeed* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    set_has_speed();
    type_.speed_ = speed;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.speed)
}
void Condition::set_allocated_relative_speed(::sim_msg::ConditionRelativeSpeed* relative_speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (relative_speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_speed, submessage_arena);
    }
    set_has_relative_speed();
    type_.relative_speed_ = relative_speed;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.relative_speed)
}
void Condition::set_allocated_reach_position(::sim_msg::ConditionReachPosition* reach_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (reach_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reach_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reach_position, submessage_arena);
    }
    set_has_reach_position();
    type_.reach_position_ = reach_position;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.reach_position)
}
void Condition::set_allocated_relative_distance(::sim_msg::ConditionRelativeDistance* relative_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (relative_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      relative_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, relative_distance, submessage_arena);
    }
    set_has_relative_distance();
    type_.relative_distance_ = relative_distance;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.relative_distance)
}
void Condition::set_allocated_ego_attach_laneid_custom(::sim_msg::ConditionEgoAttachLaneidCustom* ego_attach_laneid_custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (ego_attach_laneid_custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ego_attach_laneid_custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ego_attach_laneid_custom, submessage_arena);
    }
    set_has_ego_attach_laneid_custom();
    type_.ego_attach_laneid_custom_ = ego_attach_laneid_custom;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.ego_attach_laneid_custom)
}
void Condition::set_allocated_time_headway(::sim_msg::ConditionTimeHeadway* time_headway) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (time_headway) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_headway = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_headway, submessage_arena);
    }
    set_has_time_headway();
    type_.time_headway_ = time_headway;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.time_headway)
}
void Condition::set_allocated_storyboard_element_state(::sim_msg::ConditionStoryboardElementState* storyboard_element_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (storyboard_element_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      storyboard_element_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storyboard_element_state, submessage_arena);
    }
    set_has_storyboard_element_state();
    type_.storyboard_element_state_ = storyboard_element_state;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.storyboard_element_state)
}
void Condition::set_allocated_simulation_time(::sim_msg::ConditionSimulationTime* simulation_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (simulation_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      simulation_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, simulation_time, submessage_arena);
    }
    set_has_simulation_time();
    type_.simulation_time_ = simulation_time;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Condition.simulation_time)
}
Condition::Condition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delay_, &from.delay_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&delay_)) + sizeof(count_));
  clear_has_type();
  switch (from.type_case()) {
    case kTtc: {
      mutable_ttc()->::sim_msg::ConditionTimeToCollision::MergeFrom(from.ttc());
      break;
    }
    case kSpeed: {
      mutable_speed()->::sim_msg::ConditionSpeed::MergeFrom(from.speed());
      break;
    }
    case kRelativeSpeed: {
      mutable_relative_speed()->::sim_msg::ConditionRelativeSpeed::MergeFrom(from.relative_speed());
      break;
    }
    case kReachPosition: {
      mutable_reach_position()->::sim_msg::ConditionReachPosition::MergeFrom(from.reach_position());
      break;
    }
    case kRelativeDistance: {
      mutable_relative_distance()->::sim_msg::ConditionRelativeDistance::MergeFrom(from.relative_distance());
      break;
    }
    case kEgoAttachLaneidCustom: {
      mutable_ego_attach_laneid_custom()->::sim_msg::ConditionEgoAttachLaneidCustom::MergeFrom(from.ego_attach_laneid_custom());
      break;
    }
    case kTimeHeadway: {
      mutable_time_headway()->::sim_msg::ConditionTimeHeadway::MergeFrom(from.time_headway());
      break;
    }
    case kStoryboardElementState: {
      mutable_storyboard_element_state()->::sim_msg::ConditionStoryboardElementState::MergeFrom(from.storyboard_element_state());
      break;
    }
    case kSimulationTime: {
      mutable_simulation_time()->::sim_msg::ConditionSimulationTime::MergeFrom(from.simulation_time());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Condition)
}

void Condition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Condition_scene_2eproto.base);
  ::memset(&delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&delay_)) + sizeof(count_));
  clear_has_type();
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:sim_msg.Condition)
  SharedDtor();
}

void Condition::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_scene_2eproto.base);
  return *internal_default_instance();
}


void Condition::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:sim_msg.Condition)
  switch (type_case()) {
    case kTtc: {
      delete type_.ttc_;
      break;
    }
    case kSpeed: {
      delete type_.speed_;
      break;
    }
    case kRelativeSpeed: {
      delete type_.relative_speed_;
      break;
    }
    case kReachPosition: {
      delete type_.reach_position_;
      break;
    }
    case kRelativeDistance: {
      delete type_.relative_distance_;
      break;
    }
    case kEgoAttachLaneidCustom: {
      delete type_.ego_attach_laneid_custom_;
      break;
    }
    case kTimeHeadway: {
      delete type_.time_headway_;
      break;
    }
    case kStoryboardElementState: {
      delete type_.storyboard_element_state_;
      break;
    }
    case kSimulationTime: {
      delete type_.simulation_time_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&delay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&delay_)) + sizeof(count_));
  clear_type();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.ConditionEdge edge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_edge(static_cast<::sim_msg::ConditionEdge>(val));
        } else goto handle_unusual;
        continue;
      // double delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionTimeToCollision ttc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_ttc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionSpeed speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionRelativeSpeed relative_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_relative_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionReachPosition reach_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_reach_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionRelativeDistance relative_distance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_relative_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionEgoAttachLaneidCustom ego_attach_laneid_custom = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_ego_attach_laneid_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionTimeHeadway time_headway = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_time_headway(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionStoryboardElementState storyboard_element_state = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_storyboard_element_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ConditionSimulationTime simulation_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_simulation_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Condition::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Condition)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.ConditionEdge edge = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_edge(static_cast< ::sim_msg::ConditionEdge >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double delay = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionTimeToCollision ttc = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ttc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionSpeed speed = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionRelativeSpeed relative_speed = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionReachPosition reach_position = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reach_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionRelativeDistance relative_distance = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_relative_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionEgoAttachLaneidCustom ego_attach_laneid_custom = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ego_attach_laneid_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionTimeHeadway time_headway = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_headway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionStoryboardElementState storyboard_element_state = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_storyboard_element_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ConditionSimulationTime simulation_time = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_simulation_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Condition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Condition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Condition::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.ConditionEdge edge = 1;
  if (this->edge() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->edge(), output);
  }

  // double delay = 2;
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->delay(), output);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // .sim_msg.ConditionTimeToCollision ttc = 4;
  if (has_ttc()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::ttc(this), output);
  }

  // .sim_msg.ConditionSpeed speed = 5;
  if (has_speed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::speed(this), output);
  }

  // .sim_msg.ConditionRelativeSpeed relative_speed = 6;
  if (has_relative_speed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::relative_speed(this), output);
  }

  // .sim_msg.ConditionReachPosition reach_position = 7;
  if (has_reach_position()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::reach_position(this), output);
  }

  // .sim_msg.ConditionRelativeDistance relative_distance = 8;
  if (has_relative_distance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::relative_distance(this), output);
  }

  // .sim_msg.ConditionEgoAttachLaneidCustom ego_attach_laneid_custom = 9;
  if (has_ego_attach_laneid_custom()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::ego_attach_laneid_custom(this), output);
  }

  // .sim_msg.ConditionTimeHeadway time_headway = 10;
  if (has_time_headway()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::time_headway(this), output);
  }

  // .sim_msg.ConditionStoryboardElementState storyboard_element_state = 11;
  if (has_storyboard_element_state()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::storyboard_element_state(this), output);
  }

  // .sim_msg.ConditionSimulationTime simulation_time = 12;
  if (has_simulation_time()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::simulation_time(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Condition)
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.ConditionEdge edge = 1;
  if (this->edge() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->edge(), target);
  }

  // double delay = 2;
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->delay(), target);
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // .sim_msg.ConditionTimeToCollision ttc = 4;
  if (has_ttc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::ttc(this), target);
  }

  // .sim_msg.ConditionSpeed speed = 5;
  if (has_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::speed(this), target);
  }

  // .sim_msg.ConditionRelativeSpeed relative_speed = 6;
  if (has_relative_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::relative_speed(this), target);
  }

  // .sim_msg.ConditionReachPosition reach_position = 7;
  if (has_reach_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::reach_position(this), target);
  }

  // .sim_msg.ConditionRelativeDistance relative_distance = 8;
  if (has_relative_distance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::relative_distance(this), target);
  }

  // .sim_msg.ConditionEgoAttachLaneidCustom ego_attach_laneid_custom = 9;
  if (has_ego_attach_laneid_custom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::ego_attach_laneid_custom(this), target);
  }

  // .sim_msg.ConditionTimeHeadway time_headway = 10;
  if (has_time_headway()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::time_headway(this), target);
  }

  // .sim_msg.ConditionStoryboardElementState storyboard_element_state = 11;
  if (has_storyboard_element_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::storyboard_element_state(this), target);
  }

  // .sim_msg.ConditionSimulationTime simulation_time = 12;
  if (has_simulation_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::simulation_time(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Condition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double delay = 2;
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.ConditionEdge edge = 1;
  if (this->edge() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->edge());
  }

  // uint32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  switch (type_case()) {
    // .sim_msg.ConditionTimeToCollision ttc = 4;
    case kTtc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.ttc_);
      break;
    }
    // .sim_msg.ConditionSpeed speed = 5;
    case kSpeed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.speed_);
      break;
    }
    // .sim_msg.ConditionRelativeSpeed relative_speed = 6;
    case kRelativeSpeed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.relative_speed_);
      break;
    }
    // .sim_msg.ConditionReachPosition reach_position = 7;
    case kReachPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.reach_position_);
      break;
    }
    // .sim_msg.ConditionRelativeDistance relative_distance = 8;
    case kRelativeDistance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.relative_distance_);
      break;
    }
    // .sim_msg.ConditionEgoAttachLaneidCustom ego_attach_laneid_custom = 9;
    case kEgoAttachLaneidCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.ego_attach_laneid_custom_);
      break;
    }
    // .sim_msg.ConditionTimeHeadway time_headway = 10;
    case kTimeHeadway: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.time_headway_);
      break;
    }
    // .sim_msg.ConditionStoryboardElementState storyboard_element_state = 11;
    case kStoryboardElementState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.storyboard_element_state_);
      break;
    }
    // .sim_msg.ConditionSimulationTime simulation_time = 12;
    case kSimulationTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.simulation_time_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.delay() <= 0 && from.delay() >= 0)) {
    set_delay(from.delay());
  }
  if (from.edge() != 0) {
    set_edge(from.edge());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  switch (from.type_case()) {
    case kTtc: {
      mutable_ttc()->::sim_msg::ConditionTimeToCollision::MergeFrom(from.ttc());
      break;
    }
    case kSpeed: {
      mutable_speed()->::sim_msg::ConditionSpeed::MergeFrom(from.speed());
      break;
    }
    case kRelativeSpeed: {
      mutable_relative_speed()->::sim_msg::ConditionRelativeSpeed::MergeFrom(from.relative_speed());
      break;
    }
    case kReachPosition: {
      mutable_reach_position()->::sim_msg::ConditionReachPosition::MergeFrom(from.reach_position());
      break;
    }
    case kRelativeDistance: {
      mutable_relative_distance()->::sim_msg::ConditionRelativeDistance::MergeFrom(from.relative_distance());
      break;
    }
    case kEgoAttachLaneidCustom: {
      mutable_ego_attach_laneid_custom()->::sim_msg::ConditionEgoAttachLaneidCustom::MergeFrom(from.ego_attach_laneid_custom());
      break;
    }
    case kTimeHeadway: {
      mutable_time_headway()->::sim_msg::ConditionTimeHeadway::MergeFrom(from.time_headway());
      break;
    }
    case kStoryboardElementState: {
      mutable_storyboard_element_state()->::sim_msg::ConditionStoryboardElementState::MergeFrom(from.storyboard_element_state());
      break;
    }
    case kSimulationTime: {
      mutable_simulation_time()->::sim_msg::ConditionSimulationTime::MergeFrom(from.simulation_time());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(delay_, other->delay_);
  swap(edge_, other->edge_);
  swap(count_, other->count_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionSpeed::InitAsDefaultInstance() {
}
class ActionSpeed::_Internal {
 public:
};

ActionSpeed::ActionSpeed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ActionSpeed)
}
ActionSpeed::ActionSpeed(const ActionSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&value_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ActionSpeed)
}

void ActionSpeed::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&value_)) + sizeof(angle_));
}

ActionSpeed::~ActionSpeed() {
  // @@protoc_insertion_point(destructor:sim_msg.ActionSpeed)
  SharedDtor();
}

void ActionSpeed::SharedDtor() {
}

void ActionSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionSpeed& ActionSpeed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionSpeed_scene_2eproto.base);
  return *internal_default_instance();
}


void ActionSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ActionSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&value_)) + sizeof(angle_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionSpeed::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ActionSpeed)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ActionSpeed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ActionSpeed)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionSpeed::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ActionSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ActionSpeed)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionSpeed::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ActionSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ActionSpeed)
  return target;
}

size_t ActionSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ActionSpeed)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionSpeed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ActionSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionSpeed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionSpeed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ActionSpeed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ActionSpeed)
    MergeFrom(*source);
  }
}

void ActionSpeed::MergeFrom(const ActionSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ActionSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
}

void ActionSpeed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ActionSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpeed::CopyFrom(const ActionSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ActionSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpeed::IsInitialized() const {
  return true;
}

void ActionSpeed::InternalSwap(ActionSpeed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionSpeed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionAccel::InitAsDefaultInstance() {
}
class ActionAccel::_Internal {
 public:
};

ActionAccel::ActionAccel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ActionAccel)
}
ActionAccel::ActionAccel(const ActionAccel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_type_) -
    reinterpret_cast<char*>(&value_)) + sizeof(end_type_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ActionAccel)
}

void ActionAccel::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(end_type_));
}

ActionAccel::~ActionAccel() {
  // @@protoc_insertion_point(destructor:sim_msg.ActionAccel)
  SharedDtor();
}

void ActionAccel::SharedDtor() {
}

void ActionAccel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionAccel& ActionAccel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionAccel_scene_2eproto.base);
  return *internal_default_instance();
}


void ActionAccel::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ActionAccel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_type_) -
      reinterpret_cast<char*>(&value_)) + sizeof(end_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionAccel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ActionAccel.EndType end_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_end_type(static_cast<::sim_msg::ActionAccel_EndType>(val));
        } else goto handle_unusual;
        continue;
      // double end_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          end_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionAccel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ActionAccel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double value = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double angle = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ActionAccel.EndType end_type = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_end_type(static_cast< ::sim_msg::ActionAccel_EndType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double end_value = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ActionAccel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ActionAccel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionAccel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ActionAccel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->value(), output);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->angle(), output);
  }

  // .sim_msg.ActionAccel.EndType end_type = 3;
  if (this->end_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->end_type(), output);
  }

  // double end_value = 4;
  if (!(this->end_value() <= 0 && this->end_value() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->end_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ActionAccel)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionAccel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ActionAccel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->value(), target);
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->angle(), target);
  }

  // .sim_msg.ActionAccel.EndType end_type = 3;
  if (this->end_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->end_type(), target);
  }

  // double end_value = 4;
  if (!(this->end_value() <= 0 && this->end_value() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->end_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ActionAccel)
  return target;
}

size_t ActionAccel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ActionAccel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // double angle = 2;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 8;
  }

  // double end_value = 4;
  if (!(this->end_value() <= 0 && this->end_value() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.ActionAccel.EndType end_type = 3;
  if (this->end_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->end_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionAccel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ActionAccel)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionAccel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionAccel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ActionAccel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ActionAccel)
    MergeFrom(*source);
  }
}

void ActionAccel::MergeFrom(const ActionAccel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ActionAccel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    set_value(from.value());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    set_angle(from.angle());
  }
  if (!(from.end_value() <= 0 && from.end_value() >= 0)) {
    set_end_value(from.end_value());
  }
  if (from.end_type() != 0) {
    set_end_type(from.end_type());
  }
}

void ActionAccel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ActionAccel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionAccel::CopyFrom(const ActionAccel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ActionAccel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionAccel::IsInitialized() const {
  return true;
}

void ActionAccel::InternalSwap(ActionAccel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(angle_, other->angle_);
  swap(end_value_, other->end_value_);
  swap(end_type_, other->end_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionAccel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionLaneChange::InitAsDefaultInstance() {
}
class ActionLaneChange::_Internal {
 public:
};

ActionLaneChange::ActionLaneChange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ActionLaneChange)
}
ActionLaneChange::ActionLaneChange(const ActionLaneChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ActionLaneChange)
}

void ActionLaneChange::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(dir_));
}

ActionLaneChange::~ActionLaneChange() {
  // @@protoc_insertion_point(destructor:sim_msg.ActionLaneChange)
  SharedDtor();
}

void ActionLaneChange::SharedDtor() {
}

void ActionLaneChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionLaneChange& ActionLaneChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionLaneChange_scene_2eproto.base);
  return *internal_default_instance();
}


void ActionLaneChange::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ActionLaneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(dir_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionLaneChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.ActionLaneChange.Dir dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_dir(static_cast<::sim_msg::ActionLaneChange_Dir>(val));
        } else goto handle_unusual;
        continue;
      // double duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionLaneChange::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ActionLaneChange)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.ActionLaneChange.Dir dir = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dir(static_cast< ::sim_msg::ActionLaneChange_Dir >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double duration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double offset = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ActionLaneChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ActionLaneChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionLaneChange::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ActionLaneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.ActionLaneChange.Dir dir = 1;
  if (this->dir() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->dir(), output);
  }

  // double duration = 2;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->duration(), output);
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ActionLaneChange)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionLaneChange::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ActionLaneChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.ActionLaneChange.Dir dir = 1;
  if (this->dir() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->dir(), target);
  }

  // double duration = 2;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->duration(), target);
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ActionLaneChange)
  return target;
}

size_t ActionLaneChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ActionLaneChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double duration = 2;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    total_size += 1 + 8;
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.ActionLaneChange.Dir dir = 1;
  if (this->dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dir());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionLaneChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ActionLaneChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionLaneChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionLaneChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ActionLaneChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ActionLaneChange)
    MergeFrom(*source);
  }
}

void ActionLaneChange::MergeFrom(const ActionLaneChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ActionLaneChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.duration() <= 0 && from.duration() >= 0)) {
    set_duration(from.duration());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    set_offset(from.offset());
  }
  if (from.dir() != 0) {
    set_dir(from.dir());
  }
}

void ActionLaneChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ActionLaneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionLaneChange::CopyFrom(const ActionLaneChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ActionLaneChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionLaneChange::IsInitialized() const {
  return true;
}

void ActionLaneChange::InternalSwap(ActionLaneChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
  swap(offset_, other->offset_);
  swap(dir_, other->dir_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionLaneChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActionLateralDistance::InitAsDefaultInstance() {
  ::sim_msg::_ActionLateralDistance_default_instance_._instance.get_mutable()->dynamic_constraints_ = const_cast< ::sim_msg::DynamicConstraints*>(
      ::sim_msg::DynamicConstraints::internal_default_instance());
}
class ActionLateralDistance::_Internal {
 public:
  static const ::sim_msg::DynamicConstraints& dynamic_constraints(const ActionLateralDistance* msg);
};

const ::sim_msg::DynamicConstraints&
ActionLateralDistance::_Internal::dynamic_constraints(const ActionLateralDistance* msg) {
  return *msg->dynamic_constraints_;
}
ActionLateralDistance::ActionLateralDistance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ActionLateralDistance)
}
ActionLateralDistance::ActionLateralDistance(const ActionLateralDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dynamic_constraints()) {
    dynamic_constraints_ = new ::sim_msg::DynamicConstraints(*from.dynamic_constraints_);
  } else {
    dynamic_constraints_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&continuous_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(continuous_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ActionLateralDistance)
}

void ActionLateralDistance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActionLateralDistance_scene_2eproto.base);
  ::memset(&dynamic_constraints_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuous_) -
      reinterpret_cast<char*>(&dynamic_constraints_)) + sizeof(continuous_));
}

ActionLateralDistance::~ActionLateralDistance() {
  // @@protoc_insertion_point(destructor:sim_msg.ActionLateralDistance)
  SharedDtor();
}

void ActionLateralDistance::SharedDtor() {
  if (this != internal_default_instance()) delete dynamic_constraints_;
}

void ActionLateralDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActionLateralDistance& ActionLateralDistance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActionLateralDistance_scene_2eproto.base);
  return *internal_default_instance();
}


void ActionLateralDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ActionLateralDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && dynamic_constraints_ != nullptr) {
    delete dynamic_constraints_;
  }
  dynamic_constraints_ = nullptr;
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&continuous_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(continuous_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ActionLateralDistance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool freespace = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          freespace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool continuous = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          continuous_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.DynamicConstraints dynamic_constraints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_dynamic_constraints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ActionLateralDistance::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ActionLateralDistance)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double distance = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool freespace = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &freespace_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool continuous = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &continuous_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.DynamicConstraints dynamic_constraints = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic_constraints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ActionLateralDistance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ActionLateralDistance)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ActionLateralDistance::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ActionLateralDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->distance(), output);
  }

  // bool freespace = 2;
  if (this->freespace() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->freespace(), output);
  }

  // bool continuous = 3;
  if (this->continuous() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->continuous(), output);
  }

  // .sim_msg.DynamicConstraints dynamic_constraints = 4;
  if (this->has_dynamic_constraints()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::dynamic_constraints(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.ActionLateralDistance)
}

::PROTOBUF_NAMESPACE_ID::uint8* ActionLateralDistance::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ActionLateralDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->distance(), target);
  }

  // bool freespace = 2;
  if (this->freespace() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->freespace(), target);
  }

  // bool continuous = 3;
  if (this->continuous() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->continuous(), target);
  }

  // .sim_msg.DynamicConstraints dynamic_constraints = 4;
  if (this->has_dynamic_constraints()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::dynamic_constraints(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ActionLateralDistance)
  return target;
}

size_t ActionLateralDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ActionLateralDistance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.DynamicConstraints dynamic_constraints = 4;
  if (this->has_dynamic_constraints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_constraints_);
  }

  // double distance = 1;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // bool freespace = 2;
  if (this->freespace() != 0) {
    total_size += 1 + 1;
  }

  // bool continuous = 3;
  if (this->continuous() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionLateralDistance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ActionLateralDistance)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionLateralDistance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActionLateralDistance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ActionLateralDistance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ActionLateralDistance)
    MergeFrom(*source);
  }
}

void ActionLateralDistance::MergeFrom(const ActionLateralDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ActionLateralDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dynamic_constraints()) {
    mutable_dynamic_constraints()->::sim_msg::DynamicConstraints::MergeFrom(from.dynamic_constraints());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    set_distance(from.distance());
  }
  if (from.freespace() != 0) {
    set_freespace(from.freespace());
  }
  if (from.continuous() != 0) {
    set_continuous(from.continuous());
  }
}

void ActionLateralDistance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ActionLateralDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionLateralDistance::CopyFrom(const ActionLateralDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ActionLateralDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionLateralDistance::IsInitialized() const {
  return true;
}

void ActionLateralDistance::InternalSwap(ActionLateralDistance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(dynamic_constraints_, other->dynamic_constraints_);
  swap(distance_, other->distance_);
  swap(freespace_, other->freespace_);
  swap(continuous_, other->continuous_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActionLateralDistance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trigger::InitAsDefaultInstance() {
}
class Trigger::_Internal {
 public:
};

Trigger::Trigger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Trigger)
}
Trigger::Trigger(const Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Trigger)
}

void Trigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trigger_scene_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Trigger::~Trigger() {
  // @@protoc_insertion_point(destructor:sim_msg.Trigger)
  SharedDtor();
}

void Trigger::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trigger& Trigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trigger_scene_2eproto.base);
  return *internal_default_instance();
}


void Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Trigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.Trigger.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Condition conditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Trigger::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Trigger)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Trigger.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Condition conditions = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Trigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Trigger)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Trigger::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Trigger.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .sim_msg.Condition conditions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->conditions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Trigger)
}

::PROTOBUF_NAMESPACE_ID::uint8* Trigger::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Trigger.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .sim_msg.Condition conditions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->conditions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Trigger)
  return target;
}

size_t Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Trigger)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Condition conditions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->conditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->conditions(static_cast<int>(i)));
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const Trigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Trigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Trigger)
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Trigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  return true;
}

void Trigger::InternalSwap(Trigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&conditions_)->InternalSwap(CastToBase(&other->conditions_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Trigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Action::InitAsDefaultInstance() {
  ::sim_msg::_Action_default_instance_.speed_ = const_cast< ::sim_msg::ActionSpeed*>(
      ::sim_msg::ActionSpeed::internal_default_instance());
  ::sim_msg::_Action_default_instance_.accel_ = const_cast< ::sim_msg::ActionAccel*>(
      ::sim_msg::ActionAccel::internal_default_instance());
  ::sim_msg::_Action_default_instance_.lane_change_ = const_cast< ::sim_msg::ActionLaneChange*>(
      ::sim_msg::ActionLaneChange::internal_default_instance());
  ::sim_msg::_Action_default_instance_.lateral_distance_ = const_cast< ::sim_msg::ActionLateralDistance*>(
      ::sim_msg::ActionLateralDistance::internal_default_instance());
  ::sim_msg::_Action_default_instance_.status_ = const_cast< ::sim_msg::Status*>(
      ::sim_msg::Status::internal_default_instance());
  ::sim_msg::_Action_default_instance_.activate_ = const_cast< ::sim_msg::Activate*>(
      ::sim_msg::Activate::internal_default_instance());
  ::sim_msg::_Action_default_instance_.assign_ = const_cast< ::sim_msg::Assign*>(
      ::sim_msg::Assign::internal_default_instance());
  ::sim_msg::_Action_default_instance_.override_ = const_cast< ::sim_msg::Override*>(
      ::sim_msg::Override::internal_default_instance());
  ::sim_msg::_Action_default_instance_.command_ = const_cast< ::sim_msg::Command*>(
      ::sim_msg::Command::internal_default_instance());
}
class Action::_Internal {
 public:
  static const ::sim_msg::ActionSpeed& speed(const Action* msg);
  static const ::sim_msg::ActionAccel& accel(const Action* msg);
  static const ::sim_msg::ActionLaneChange& lane_change(const Action* msg);
  static const ::sim_msg::ActionLateralDistance& lateral_distance(const Action* msg);
  static const ::sim_msg::Status& status(const Action* msg);
  static const ::sim_msg::Activate& activate(const Action* msg);
  static const ::sim_msg::Assign& assign(const Action* msg);
  static const ::sim_msg::Override& override(const Action* msg);
  static const ::sim_msg::Command& command(const Action* msg);
};

const ::sim_msg::ActionSpeed&
Action::_Internal::speed(const Action* msg) {
  return *msg->action_.speed_;
}
const ::sim_msg::ActionAccel&
Action::_Internal::accel(const Action* msg) {
  return *msg->action_.accel_;
}
const ::sim_msg::ActionLaneChange&
Action::_Internal::lane_change(const Action* msg) {
  return *msg->action_.lane_change_;
}
const ::sim_msg::ActionLateralDistance&
Action::_Internal::lateral_distance(const Action* msg) {
  return *msg->action_.lateral_distance_;
}
const ::sim_msg::Status&
Action::_Internal::status(const Action* msg) {
  return *msg->action_.status_;
}
const ::sim_msg::Activate&
Action::_Internal::activate(const Action* msg) {
  return *msg->action_.activate_;
}
const ::sim_msg::Assign&
Action::_Internal::assign(const Action* msg) {
  return *msg->action_.assign_;
}
const ::sim_msg::Override&
Action::_Internal::override(const Action* msg) {
  return *msg->action_.override_;
}
const ::sim_msg::Command&
Action::_Internal::command(const Action* msg) {
  return *msg->action_.command_;
}
void Action::set_allocated_speed(::sim_msg::ActionSpeed* speed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (speed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed, submessage_arena);
    }
    set_has_speed();
    action_.speed_ = speed;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.speed)
}
void Action::set_allocated_accel(::sim_msg::ActionAccel* accel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (accel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accel, submessage_arena);
    }
    set_has_accel();
    action_.accel_ = accel;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.accel)
}
void Action::set_allocated_lane_change(::sim_msg::ActionLaneChange* lane_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (lane_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change, submessage_arena);
    }
    set_has_lane_change();
    action_.lane_change_ = lane_change;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.lane_change)
}
void Action::set_allocated_lateral_distance(::sim_msg::ActionLateralDistance* lateral_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (lateral_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lateral_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lateral_distance, submessage_arena);
    }
    set_has_lateral_distance();
    action_.lateral_distance_ = lateral_distance;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.lateral_distance)
}
void Action::set_allocated_status(::sim_msg::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
    action_.status_ = status;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.status)
}
void Action::clear_status() {
  if (has_status()) {
    delete action_.status_;
    clear_has_action();
  }
}
void Action::set_allocated_activate(::sim_msg::Activate* activate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (activate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      activate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate, submessage_arena);
    }
    set_has_activate();
    action_.activate_ = activate;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.activate)
}
void Action::clear_activate() {
  if (has_activate()) {
    delete action_.activate_;
    clear_has_action();
  }
}
void Action::set_allocated_assign(::sim_msg::Assign* assign) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (assign) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      assign = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assign, submessage_arena);
    }
    set_has_assign();
    action_.assign_ = assign;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.assign)
}
void Action::clear_assign() {
  if (has_assign()) {
    delete action_.assign_;
    clear_has_action();
  }
}
void Action::set_allocated_override(::sim_msg::Override* override) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (override) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      override = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, override, submessage_arena);
    }
    set_has_override();
    action_.override_ = override;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.override)
}
void Action::clear_override() {
  if (has_override()) {
    delete action_.override_;
    clear_has_action();
  }
}
void Action::set_allocated_command(::sim_msg::Command* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_action();
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    set_has_command();
    action_.command_ = command;
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Action.command)
}
void Action::clear_command() {
  if (has_command()) {
    delete action_.command_;
    clear_has_action();
  }
}
Action::Action()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.entity_ref().empty()) {
    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  clear_has_action();
  switch (from.action_case()) {
    case kSpeed: {
      mutable_speed()->::sim_msg::ActionSpeed::MergeFrom(from.speed());
      break;
    }
    case kAccel: {
      mutable_accel()->::sim_msg::ActionAccel::MergeFrom(from.accel());
      break;
    }
    case kLaneChange: {
      mutable_lane_change()->::sim_msg::ActionLaneChange::MergeFrom(from.lane_change());
      break;
    }
    case kLateralDistance: {
      mutable_lateral_distance()->::sim_msg::ActionLateralDistance::MergeFrom(from.lateral_distance());
      break;
    }
    case kStatus: {
      mutable_status()->::sim_msg::Status::MergeFrom(from.status());
      break;
    }
    case kActivate: {
      mutable_activate()->::sim_msg::Activate::MergeFrom(from.activate());
      break;
    }
    case kAssign: {
      mutable_assign()->::sim_msg::Assign::MergeFrom(from.assign());
      break;
    }
    case kOverride: {
      mutable_override()->::sim_msg::Override::MergeFrom(from.override());
      break;
    }
    case kCommand: {
      mutable_command()->::sim_msg::Command::MergeFrom(from.command());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Action)
}

void Action::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Action_scene_2eproto.base);
  entity_ref_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:sim_msg.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  entity_ref_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_action()) {
    clear_action();
  }
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Action& Action::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Action_scene_2eproto.base);
  return *internal_default_instance();
}


void Action::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:sim_msg.Action)
  switch (action_case()) {
    case kSpeed: {
      delete action_.speed_;
      break;
    }
    case kAccel: {
      delete action_.accel_;
      break;
    }
    case kLaneChange: {
      delete action_.lane_change_;
      break;
    }
    case kLateralDistance: {
      delete action_.lateral_distance_;
      break;
    }
    case kStatus: {
      delete action_.status_;
      break;
    }
    case kActivate: {
      delete action_.activate_;
      break;
    }
    case kAssign: {
      delete action_.assign_;
      break;
    }
    case kOverride: {
      delete action_.override_;
      break;
    }
    case kCommand: {
      delete action_.command_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_ref_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_action();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_entity_ref(), ptr, ctx, "sim_msg.Action.entity_ref");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ActionSpeed speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_speed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ActionAccel accel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_accel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ActionLaneChange lane_change = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_lane_change(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ActionLateralDistance lateral_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_lateral_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Status status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Activate activate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_activate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Assign assign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_assign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Override override = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_override(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Command command = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Action::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Action)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string entity_ref = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_entity_ref()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Action.entity_ref"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ActionSpeed speed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ActionAccel accel = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_accel()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ActionLaneChange lane_change = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lane_change()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ActionLateralDistance lateral_distance = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lateral_distance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Status status = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Activate activate = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Assign assign = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Override override = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_override()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Command command = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Action)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Action::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Action.entity_ref");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->entity_ref(), output);
  }

  // .sim_msg.ActionSpeed speed = 2;
  if (has_speed()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::speed(this), output);
  }

  // .sim_msg.ActionAccel accel = 3;
  if (has_accel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::accel(this), output);
  }

  // .sim_msg.ActionLaneChange lane_change = 4;
  if (has_lane_change()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::lane_change(this), output);
  }

  // .sim_msg.ActionLateralDistance lateral_distance = 5;
  if (has_lateral_distance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::lateral_distance(this), output);
  }

  // .sim_msg.Status status = 6;
  if (has_status()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::status(this), output);
  }

  // .sim_msg.Activate activate = 7;
  if (has_activate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::activate(this), output);
  }

  // .sim_msg.Assign assign = 8;
  if (has_assign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::assign(this), output);
  }

  // .sim_msg.Override override = 9;
  if (has_override()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::override(this), output);
  }

  // .sim_msg.Command command = 10;
  if (has_command()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::command(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Action)
}

::PROTOBUF_NAMESPACE_ID::uint8* Action::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Action)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->entity_ref().data(), static_cast<int>(this->entity_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Action.entity_ref");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->entity_ref(), target);
  }

  // .sim_msg.ActionSpeed speed = 2;
  if (has_speed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::speed(this), target);
  }

  // .sim_msg.ActionAccel accel = 3;
  if (has_accel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::accel(this), target);
  }

  // .sim_msg.ActionLaneChange lane_change = 4;
  if (has_lane_change()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::lane_change(this), target);
  }

  // .sim_msg.ActionLateralDistance lateral_distance = 5;
  if (has_lateral_distance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::lateral_distance(this), target);
  }

  // .sim_msg.Status status = 6;
  if (has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::status(this), target);
  }

  // .sim_msg.Activate activate = 7;
  if (has_activate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::activate(this), target);
  }

  // .sim_msg.Assign assign = 8;
  if (has_assign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::assign(this), target);
  }

  // .sim_msg.Override override = 9;
  if (has_override()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::override(this), target);
  }

  // .sim_msg.Command command = 10;
  if (has_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::command(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity_ref = 1;
  if (this->entity_ref().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->entity_ref());
  }

  switch (action_case()) {
    // .sim_msg.ActionSpeed speed = 2;
    case kSpeed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.speed_);
      break;
    }
    // .sim_msg.ActionAccel accel = 3;
    case kAccel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.accel_);
      break;
    }
    // .sim_msg.ActionLaneChange lane_change = 4;
    case kLaneChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.lane_change_);
      break;
    }
    // .sim_msg.ActionLateralDistance lateral_distance = 5;
    case kLateralDistance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.lateral_distance_);
      break;
    }
    // .sim_msg.Status status = 6;
    case kStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.status_);
      break;
    }
    // .sim_msg.Activate activate = 7;
    case kActivate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.activate_);
      break;
    }
    // .sim_msg.Assign assign = 8;
    case kAssign: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.assign_);
      break;
    }
    // .sim_msg.Override override = 9;
    case kOverride: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.override_);
      break;
    }
    // .sim_msg.Command command = 10;
    case kCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *action_.command_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Action>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Action)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity_ref().size() > 0) {

    entity_ref_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_ref_);
  }
  switch (from.action_case()) {
    case kSpeed: {
      mutable_speed()->::sim_msg::ActionSpeed::MergeFrom(from.speed());
      break;
    }
    case kAccel: {
      mutable_accel()->::sim_msg::ActionAccel::MergeFrom(from.accel());
      break;
    }
    case kLaneChange: {
      mutable_lane_change()->::sim_msg::ActionLaneChange::MergeFrom(from.lane_change());
      break;
    }
    case kLateralDistance: {
      mutable_lateral_distance()->::sim_msg::ActionLateralDistance::MergeFrom(from.lateral_distance());
      break;
    }
    case kStatus: {
      mutable_status()->::sim_msg::Status::MergeFrom(from.status());
      break;
    }
    case kActivate: {
      mutable_activate()->::sim_msg::Activate::MergeFrom(from.activate());
      break;
    }
    case kAssign: {
      mutable_assign()->::sim_msg::Assign::MergeFrom(from.assign());
      break;
    }
    case kOverride: {
      mutable_override()->::sim_msg::Override::MergeFrom(from.override());
      break;
    }
    case kCommand: {
      mutable_command()->::sim_msg::Command::MergeFrom(from.command());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
}

void Action::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_ref_.Swap(&other->entity_ref_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::sim_msg::_Event_default_instance_._instance.get_mutable()->trigger_ = const_cast< ::sim_msg::Trigger*>(
      ::sim_msg::Trigger::internal_default_instance());
}
class Event::_Internal {
 public:
  static const ::sim_msg::Trigger& trigger(const Event* msg);
};

const ::sim_msg::Trigger&
Event::_Internal::trigger(const Event* msg) {
  return *msg->trigger_;
}
Event::Event()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.info().empty()) {
    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_trigger()) {
    trigger_ = new ::sim_msg::Trigger(*from.trigger_);
  } else {
    trigger_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_scene_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&trigger_)) + sizeof(id_));
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:sim_msg.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trigger_;
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_scene_2eproto.base);
  return *internal_default_instance();
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && trigger_ != nullptr) {
    delete trigger_;
  }
  trigger_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.Event.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Trigger trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Action actions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // string info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_info(), ptr, ctx, "sim_msg.Event.info");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Event::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Event)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Event.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Trigger trigger = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trigger()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Action actions = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string info = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->info().data(), static_cast<int>(this->info().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Event.info"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Event)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Event)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Event::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Event.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // .sim_msg.Trigger trigger = 3;
  if (this->has_trigger()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::trigger(this), output);
  }

  // repeated .sim_msg.Action actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->actions(static_cast<int>(i)),
      output);
  }

  // string info = 5;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Event.info");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->info(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Event)
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Event.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // .sim_msg.Trigger trigger = 3;
  if (this->has_trigger()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::trigger(this), target);
  }

  // repeated .sim_msg.Action actions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->actions_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->actions(static_cast<int>(i)), target);
  }

  // string info = 5;
  if (this->info().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->info().data(), static_cast<int>(this->info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Event.info");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->info(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Event)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Action actions = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->actions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->actions(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string info = 5;
  if (this->info().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->info());
  }

  // .sim_msg.Trigger trigger = 3;
  if (this->has_trigger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trigger_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.info().size() > 0) {

    info_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.info_);
  }
  if (from.has_trigger()) {
    mutable_trigger()->::sim_msg::Trigger::MergeFrom(from.trigger());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&actions_)->InternalSwap(CastToBase(&other->actions_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  info_.Swap(&other->info_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trigger_, other->trigger_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicleCommon::InitAsDefaultInstance() {
  ::sim_msg::_PhysicleCommon_default_instance_._instance.get_mutable()->bounding_box_ = const_cast< ::sim_msg::BoundingBox*>(
      ::sim_msg::BoundingBox::internal_default_instance());
}
class PhysicleCommon::_Internal {
 public:
  static const ::sim_msg::BoundingBox& bounding_box(const PhysicleCommon* msg);
};

const ::sim_msg::BoundingBox&
PhysicleCommon::_Internal::bounding_box(const PhysicleCommon* msg) {
  return *msg->bounding_box_;
}
PhysicleCommon::PhysicleCommon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PhysicleCommon)
}
PhysicleCommon::PhysicleCommon(const PhysicleCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  model_3d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.model_3d().empty()) {
    model_3d_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_3d_);
  }
  if (from.has_bounding_box()) {
    bounding_box_ = new ::sim_msg::BoundingBox(*from.bounding_box_);
  } else {
    bounding_box_ = nullptr;
  }
  ::memcpy(&mass_, &from.mass_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&mass_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PhysicleCommon)
}

void PhysicleCommon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhysicleCommon_scene_2eproto.base);
  model_3d_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bounding_box_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&bounding_box_)) + sizeof(color_));
}

PhysicleCommon::~PhysicleCommon() {
  // @@protoc_insertion_point(destructor:sim_msg.PhysicleCommon)
  SharedDtor();
}

void PhysicleCommon::SharedDtor() {
  model_3d_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bounding_box_;
}

void PhysicleCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicleCommon& PhysicleCommon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicleCommon_scene_2eproto.base);
  return *internal_default_instance();
}


void PhysicleCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PhysicleCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_3d_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && bounding_box_ != nullptr) {
    delete bounding_box_;
  }
  bounding_box_ = nullptr;
  ::memset(&mass_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&mass_)) + sizeof(color_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PhysicleCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.BoundingBox bounding_box = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_bounding_box(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Color color = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_color(static_cast<::sim_msg::Color>(val));
        } else goto handle_unusual;
        continue;
      // double mass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 model_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string model_3d = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_model_3d(), ptr, ctx, "sim_msg.PhysicleCommon.model_3d");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PhysicleCommon::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PhysicleCommon)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.BoundingBox bounding_box = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bounding_box()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Color color = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_color(static_cast< ::sim_msg::Color >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mass = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 model_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &model_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model_3d = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_model_3d()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->model_3d().data(), static_cast<int>(this->model_3d().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.PhysicleCommon.model_3d"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PhysicleCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PhysicleCommon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PhysicleCommon::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PhysicleCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.BoundingBox bounding_box = 1;
  if (this->has_bounding_box()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::bounding_box(this), output);
  }

  // .sim_msg.Color color = 2;
  if (this->color() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->color(), output);
  }

  // double mass = 3;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->mass(), output);
  }

  // int64 model_id = 4;
  if (this->model_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(4, this->model_id(), output);
  }

  // string model_3d = 5;
  if (this->model_3d().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_3d().data(), static_cast<int>(this->model_3d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PhysicleCommon.model_3d");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->model_3d(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PhysicleCommon)
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicleCommon::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PhysicleCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.BoundingBox bounding_box = 1;
  if (this->has_bounding_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::bounding_box(this), target);
  }

  // .sim_msg.Color color = 2;
  if (this->color() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->color(), target);
  }

  // double mass = 3;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->mass(), target);
  }

  // int64 model_id = 4;
  if (this->model_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->model_id(), target);
  }

  // string model_3d = 5;
  if (this->model_3d().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->model_3d().data(), static_cast<int>(this->model_3d().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.PhysicleCommon.model_3d");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        5, this->model_3d(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PhysicleCommon)
  return target;
}

size_t PhysicleCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PhysicleCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model_3d = 5;
  if (this->model_3d().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->model_3d());
  }

  // .sim_msg.BoundingBox bounding_box = 1;
  if (this->has_bounding_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bounding_box_);
  }

  // double mass = 3;
  if (!(this->mass() <= 0 && this->mass() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 model_id = 4;
  if (this->model_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->model_id());
  }

  // .sim_msg.Color color = 2;
  if (this->color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->color());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicleCommon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PhysicleCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicleCommon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicleCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PhysicleCommon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PhysicleCommon)
    MergeFrom(*source);
  }
}

void PhysicleCommon::MergeFrom(const PhysicleCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PhysicleCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.model_3d().size() > 0) {

    model_3d_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.model_3d_);
  }
  if (from.has_bounding_box()) {
    mutable_bounding_box()->::sim_msg::BoundingBox::MergeFrom(from.bounding_box());
  }
  if (!(from.mass() <= 0 && from.mass() >= 0)) {
    set_mass(from.mass());
  }
  if (from.model_id() != 0) {
    set_model_id(from.model_id());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
}

void PhysicleCommon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PhysicleCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicleCommon::CopyFrom(const PhysicleCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PhysicleCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicleCommon::IsInitialized() const {
  return true;
}

void PhysicleCommon::InternalSwap(PhysicleCommon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  model_3d_.Swap(&other->model_3d_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bounding_box_, other->bounding_box_);
  swap(mass_, other->mass_);
  swap(model_id_, other->model_id_);
  swap(color_, other->color_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicleCommon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicleEgo::InitAsDefaultInstance() {
  ::sim_msg::_PhysicleEgo_default_instance_._instance.get_mutable()->common_ = const_cast< ::sim_msg::PhysicleCommon*>(
      ::sim_msg::PhysicleCommon::internal_default_instance());
  ::sim_msg::_PhysicleEgo_default_instance_._instance.get_mutable()->performance_ = const_cast< ::sim_msg::Performance*>(
      ::sim_msg::Performance::internal_default_instance());
  ::sim_msg::_PhysicleEgo_default_instance_._instance.get_mutable()->geometory_ = const_cast< ::sim_msg::VehicleGeometory*>(
      ::sim_msg::VehicleGeometory::internal_default_instance());
}
class PhysicleEgo::_Internal {
 public:
  static const ::sim_msg::PhysicleCommon& common(const PhysicleEgo* msg);
  static const ::sim_msg::Performance& performance(const PhysicleEgo* msg);
  static const ::sim_msg::VehicleGeometory& geometory(const PhysicleEgo* msg);
};

const ::sim_msg::PhysicleCommon&
PhysicleEgo::_Internal::common(const PhysicleEgo* msg) {
  return *msg->common_;
}
const ::sim_msg::Performance&
PhysicleEgo::_Internal::performance(const PhysicleEgo* msg) {
  return *msg->performance_;
}
const ::sim_msg::VehicleGeometory&
PhysicleEgo::_Internal::geometory(const PhysicleEgo* msg) {
  return *msg->geometory_;
}
void PhysicleEgo::clear_geometory() {
  if (GetArenaNoVirtual() == nullptr && geometory_ != nullptr) {
    delete geometory_;
  }
  geometory_ = nullptr;
}
PhysicleEgo::PhysicleEgo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PhysicleEgo)
}
PhysicleEgo::PhysicleEgo(const PhysicleEgo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::sim_msg::PhysicleCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from.has_performance()) {
    performance_ = new ::sim_msg::Performance(*from.performance_);
  } else {
    performance_ = nullptr;
  }
  if (from.has_geometory()) {
    geometory_ = new ::sim_msg::VehicleGeometory(*from.geometory_);
  } else {
    geometory_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.PhysicleEgo)
}

void PhysicleEgo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhysicleEgo_scene_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geometory_) -
      reinterpret_cast<char*>(&common_)) + sizeof(geometory_));
}

PhysicleEgo::~PhysicleEgo() {
  // @@protoc_insertion_point(destructor:sim_msg.PhysicleEgo)
  SharedDtor();
}

void PhysicleEgo::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete performance_;
  if (this != internal_default_instance()) delete geometory_;
}

void PhysicleEgo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicleEgo& PhysicleEgo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicleEgo_scene_2eproto.base);
  return *internal_default_instance();
}


void PhysicleEgo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PhysicleEgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && performance_ != nullptr) {
    delete performance_;
  }
  performance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geometory_ != nullptr) {
    delete geometory_;
  }
  geometory_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PhysicleEgo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.PhysicleCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Performance performance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_performance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.VehicleGeometory geometory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_geometory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PhysicleEgo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PhysicleEgo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.PhysicleCommon common = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Performance performance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_performance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.VehicleGeometory geometory = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geometory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PhysicleEgo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PhysicleEgo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PhysicleEgo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PhysicleEgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::common(this), output);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::performance(this), output);
  }

  // .sim_msg.VehicleGeometory geometory = 3;
  if (this->has_geometory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::geometory(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PhysicleEgo)
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicleEgo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PhysicleEgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::performance(this), target);
  }

  // .sim_msg.VehicleGeometory geometory = 3;
  if (this->has_geometory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::geometory(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PhysicleEgo)
  return target;
}

size_t PhysicleEgo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PhysicleEgo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *performance_);
  }

  // .sim_msg.VehicleGeometory geometory = 3;
  if (this->has_geometory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometory_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicleEgo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PhysicleEgo)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicleEgo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicleEgo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PhysicleEgo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PhysicleEgo)
    MergeFrom(*source);
  }
}

void PhysicleEgo::MergeFrom(const PhysicleEgo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PhysicleEgo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::sim_msg::PhysicleCommon::MergeFrom(from.common());
  }
  if (from.has_performance()) {
    mutable_performance()->::sim_msg::Performance::MergeFrom(from.performance());
  }
  if (from.has_geometory()) {
    mutable_geometory()->::sim_msg::VehicleGeometory::MergeFrom(from.geometory());
  }
}

void PhysicleEgo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PhysicleEgo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicleEgo::CopyFrom(const PhysicleEgo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PhysicleEgo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicleEgo::IsInitialized() const {
  return true;
}

void PhysicleEgo::InternalSwap(PhysicleEgo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(performance_, other->performance_);
  swap(geometory_, other->geometory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicleEgo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicleVehicle::InitAsDefaultInstance() {
  ::sim_msg::_PhysicleVehicle_default_instance_._instance.get_mutable()->common_ = const_cast< ::sim_msg::PhysicleCommon*>(
      ::sim_msg::PhysicleCommon::internal_default_instance());
  ::sim_msg::_PhysicleVehicle_default_instance_._instance.get_mutable()->performance_ = const_cast< ::sim_msg::Performance*>(
      ::sim_msg::Performance::internal_default_instance());
  ::sim_msg::_PhysicleVehicle_default_instance_._instance.get_mutable()->geometory_ = const_cast< ::sim_msg::VehicleGeometory*>(
      ::sim_msg::VehicleGeometory::internal_default_instance());
}
class PhysicleVehicle::_Internal {
 public:
  static const ::sim_msg::PhysicleCommon& common(const PhysicleVehicle* msg);
  static const ::sim_msg::Performance& performance(const PhysicleVehicle* msg);
  static const ::sim_msg::VehicleGeometory& geometory(const PhysicleVehicle* msg);
};

const ::sim_msg::PhysicleCommon&
PhysicleVehicle::_Internal::common(const PhysicleVehicle* msg) {
  return *msg->common_;
}
const ::sim_msg::Performance&
PhysicleVehicle::_Internal::performance(const PhysicleVehicle* msg) {
  return *msg->performance_;
}
const ::sim_msg::VehicleGeometory&
PhysicleVehicle::_Internal::geometory(const PhysicleVehicle* msg) {
  return *msg->geometory_;
}
void PhysicleVehicle::clear_geometory() {
  if (GetArenaNoVirtual() == nullptr && geometory_ != nullptr) {
    delete geometory_;
  }
  geometory_ = nullptr;
}
PhysicleVehicle::PhysicleVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PhysicleVehicle)
}
PhysicleVehicle::PhysicleVehicle(const PhysicleVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::sim_msg::PhysicleCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from.has_performance()) {
    performance_ = new ::sim_msg::Performance(*from.performance_);
  } else {
    performance_ = nullptr;
  }
  if (from.has_geometory()) {
    geometory_ = new ::sim_msg::VehicleGeometory(*from.geometory_);
  } else {
    geometory_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.PhysicleVehicle)
}

void PhysicleVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhysicleVehicle_scene_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geometory_) -
      reinterpret_cast<char*>(&common_)) + sizeof(geometory_));
}

PhysicleVehicle::~PhysicleVehicle() {
  // @@protoc_insertion_point(destructor:sim_msg.PhysicleVehicle)
  SharedDtor();
}

void PhysicleVehicle::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete performance_;
  if (this != internal_default_instance()) delete geometory_;
}

void PhysicleVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicleVehicle& PhysicleVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicleVehicle_scene_2eproto.base);
  return *internal_default_instance();
}


void PhysicleVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PhysicleVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && performance_ != nullptr) {
    delete performance_;
  }
  performance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geometory_ != nullptr) {
    delete geometory_;
  }
  geometory_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PhysicleVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.PhysicleCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Performance performance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_performance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.VehicleGeometory geometory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_geometory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PhysicleVehicle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PhysicleVehicle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.PhysicleCommon common = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Performance performance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_performance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.VehicleGeometory geometory = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_geometory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PhysicleVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PhysicleVehicle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PhysicleVehicle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PhysicleVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::common(this), output);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::performance(this), output);
  }

  // .sim_msg.VehicleGeometory geometory = 3;
  if (this->has_geometory()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::geometory(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PhysicleVehicle)
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicleVehicle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PhysicleVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::performance(this), target);
  }

  // .sim_msg.VehicleGeometory geometory = 3;
  if (this->has_geometory()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::geometory(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PhysicleVehicle)
  return target;
}

size_t PhysicleVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PhysicleVehicle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *performance_);
  }

  // .sim_msg.VehicleGeometory geometory = 3;
  if (this->has_geometory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometory_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicleVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PhysicleVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicleVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicleVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PhysicleVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PhysicleVehicle)
    MergeFrom(*source);
  }
}

void PhysicleVehicle::MergeFrom(const PhysicleVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PhysicleVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::sim_msg::PhysicleCommon::MergeFrom(from.common());
  }
  if (from.has_performance()) {
    mutable_performance()->::sim_msg::Performance::MergeFrom(from.performance());
  }
  if (from.has_geometory()) {
    mutable_geometory()->::sim_msg::VehicleGeometory::MergeFrom(from.geometory());
  }
}

void PhysicleVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PhysicleVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicleVehicle::CopyFrom(const PhysicleVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PhysicleVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicleVehicle::IsInitialized() const {
  return true;
}

void PhysicleVehicle::InternalSwap(PhysicleVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(performance_, other->performance_);
  swap(geometory_, other->geometory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicleVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PhysicleVru::InitAsDefaultInstance() {
  ::sim_msg::_PhysicleVru_default_instance_._instance.get_mutable()->common_ = const_cast< ::sim_msg::PhysicleCommon*>(
      ::sim_msg::PhysicleCommon::internal_default_instance());
  ::sim_msg::_PhysicleVru_default_instance_._instance.get_mutable()->performance_ = const_cast< ::sim_msg::Performance*>(
      ::sim_msg::Performance::internal_default_instance());
}
class PhysicleVru::_Internal {
 public:
  static const ::sim_msg::PhysicleCommon& common(const PhysicleVru* msg);
  static const ::sim_msg::Performance& performance(const PhysicleVru* msg);
};

const ::sim_msg::PhysicleCommon&
PhysicleVru::_Internal::common(const PhysicleVru* msg) {
  return *msg->common_;
}
const ::sim_msg::Performance&
PhysicleVru::_Internal::performance(const PhysicleVru* msg) {
  return *msg->performance_;
}
PhysicleVru::PhysicleVru()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PhysicleVru)
}
PhysicleVru::PhysicleVru(const PhysicleVru& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::sim_msg::PhysicleCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from.has_performance()) {
    performance_ = new ::sim_msg::Performance(*from.performance_);
  } else {
    performance_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.PhysicleVru)
}

void PhysicleVru::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PhysicleVru_scene_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&performance_) -
      reinterpret_cast<char*>(&common_)) + sizeof(performance_));
}

PhysicleVru::~PhysicleVru() {
  // @@protoc_insertion_point(destructor:sim_msg.PhysicleVru)
  SharedDtor();
}

void PhysicleVru::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete performance_;
}

void PhysicleVru::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PhysicleVru& PhysicleVru::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PhysicleVru_scene_2eproto.base);
  return *internal_default_instance();
}


void PhysicleVru::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PhysicleVru)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && performance_ != nullptr) {
    delete performance_;
  }
  performance_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* PhysicleVru::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.PhysicleCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Performance performance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_performance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool PhysicleVru::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PhysicleVru)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.PhysicleCommon common = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Performance performance = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_performance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PhysicleVru)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PhysicleVru)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void PhysicleVru::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PhysicleVru)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::common(this), output);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::performance(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.PhysicleVru)
}

::PROTOBUF_NAMESPACE_ID::uint8* PhysicleVru::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PhysicleVru)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::performance(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PhysicleVru)
  return target;
}

size_t PhysicleVru::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PhysicleVru)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.PhysicleCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .sim_msg.Performance performance = 2;
  if (this->has_performance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *performance_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhysicleVru::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PhysicleVru)
  GOOGLE_DCHECK_NE(&from, this);
  const PhysicleVru* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PhysicleVru>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PhysicleVru)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PhysicleVru)
    MergeFrom(*source);
  }
}

void PhysicleVru::MergeFrom(const PhysicleVru& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PhysicleVru)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::sim_msg::PhysicleCommon::MergeFrom(from.common());
  }
  if (from.has_performance()) {
    mutable_performance()->::sim_msg::Performance::MergeFrom(from.performance());
  }
}

void PhysicleVru::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PhysicleVru)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhysicleVru::CopyFrom(const PhysicleVru& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PhysicleVru)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhysicleVru::IsInitialized() const {
  return true;
}

void PhysicleVru::InternalSwap(PhysicleVru* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(performance_, other->performance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PhysicleVru::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialCommon::InitAsDefaultInstance() {
}
class InitialCommon::_Internal {
 public:
};

void InitialCommon::clear_waypoints() {
  waypoints_.Clear();
}
InitialCommon::InitialCommon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.InitialCommon)
}
InitialCommon::InitialCommon(const InitialCommon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  speed_ = from.speed_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.InitialCommon)
}

void InitialCommon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialCommon_scene_2eproto.base);
  speed_ = 0;
}

InitialCommon::~InitialCommon() {
  // @@protoc_insertion_point(destructor:sim_msg.InitialCommon)
  SharedDtor();
}

void InitialCommon::SharedDtor() {
}

void InitialCommon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialCommon& InitialCommon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialCommon_scene_2eproto.base);
  return *internal_default_instance();
}


void InitialCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.InitialCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  speed_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitialCommon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.Waypoint waypoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitialCommon::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.InitialCommon)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Waypoint waypoints = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_waypoints()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.InitialCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.InitialCommon)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitialCommon::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.InitialCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Waypoint waypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->waypoints(static_cast<int>(i)),
      output);
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.InitialCommon)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialCommon::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.InitialCommon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Waypoint waypoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->waypoints_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->waypoints(static_cast<int>(i)), target);
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.InitialCommon)
  return target;
}

size_t InitialCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.InitialCommon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Waypoint waypoints = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->waypoints_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->waypoints(static_cast<int>(i)));
    }
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialCommon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.InitialCommon)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialCommon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialCommon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.InitialCommon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.InitialCommon)
    MergeFrom(*source);
  }
}

void InitialCommon::MergeFrom(const InitialCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.InitialCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
}

void InitialCommon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.InitialCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialCommon::CopyFrom(const InitialCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.InitialCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialCommon::IsInitialized() const {
  return true;
}

void InitialCommon::InternalSwap(InitialCommon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&waypoints_)->InternalSwap(CastToBase(&other->waypoints_));
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialCommon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialEgo::InitAsDefaultInstance() {
  ::sim_msg::_InitialEgo_default_instance_._instance.get_mutable()->common_ = const_cast< ::sim_msg::InitialCommon*>(
      ::sim_msg::InitialCommon::internal_default_instance());
  ::sim_msg::_InitialEgo_default_instance_._instance.get_mutable()->assign_ = const_cast< ::sim_msg::Assign*>(
      ::sim_msg::Assign::internal_default_instance());
  ::sim_msg::_InitialEgo_default_instance_._instance.get_mutable()->activate_ = const_cast< ::sim_msg::Activate*>(
      ::sim_msg::Activate::internal_default_instance());
}
class InitialEgo::_Internal {
 public:
  static const ::sim_msg::InitialCommon& common(const InitialEgo* msg);
  static const ::sim_msg::Assign& assign(const InitialEgo* msg);
  static const ::sim_msg::Activate& activate(const InitialEgo* msg);
};

const ::sim_msg::InitialCommon&
InitialEgo::_Internal::common(const InitialEgo* msg) {
  return *msg->common_;
}
const ::sim_msg::Assign&
InitialEgo::_Internal::assign(const InitialEgo* msg) {
  return *msg->assign_;
}
const ::sim_msg::Activate&
InitialEgo::_Internal::activate(const InitialEgo* msg) {
  return *msg->activate_;
}
void InitialEgo::clear_assign() {
  if (GetArenaNoVirtual() == nullptr && assign_ != nullptr) {
    delete assign_;
  }
  assign_ = nullptr;
}
void InitialEgo::clear_activate() {
  if (GetArenaNoVirtual() == nullptr && activate_ != nullptr) {
    delete activate_;
  }
  activate_ = nullptr;
}
InitialEgo::InitialEgo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.InitialEgo)
}
InitialEgo::InitialEgo(const InitialEgo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::sim_msg::InitialCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  if (from.has_assign()) {
    assign_ = new ::sim_msg::Assign(*from.assign_);
  } else {
    assign_ = nullptr;
  }
  if (from.has_activate()) {
    activate_ = new ::sim_msg::Activate(*from.activate_);
  } else {
    activate_ = nullptr;
  }
  trajectory_enabled_ = from.trajectory_enabled_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.InitialEgo)
}

void InitialEgo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialEgo_scene_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trajectory_enabled_) -
      reinterpret_cast<char*>(&common_)) + sizeof(trajectory_enabled_));
}

InitialEgo::~InitialEgo() {
  // @@protoc_insertion_point(destructor:sim_msg.InitialEgo)
  SharedDtor();
}

void InitialEgo::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
  if (this != internal_default_instance()) delete assign_;
  if (this != internal_default_instance()) delete activate_;
}

void InitialEgo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialEgo& InitialEgo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialEgo_scene_2eproto.base);
  return *internal_default_instance();
}


void InitialEgo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.InitialEgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && assign_ != nullptr) {
    delete assign_;
  }
  assign_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && activate_ != nullptr) {
    delete activate_;
  }
  activate_ = nullptr;
  trajectory_enabled_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitialEgo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.InitialCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Assign assign = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_assign(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Activate activate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_activate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trajectory_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          trajectory_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitialEgo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.InitialEgo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.InitialCommon common = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Assign assign = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_assign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Activate activate = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_activate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool trajectory_enabled = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trajectory_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.InitialEgo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.InitialEgo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitialEgo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.InitialEgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::common(this), output);
  }

  // .sim_msg.Assign assign = 3;
  if (this->has_assign()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::assign(this), output);
  }

  // .sim_msg.Activate activate = 4;
  if (this->has_activate()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::activate(this), output);
  }

  // bool trajectory_enabled = 5;
  if (this->trajectory_enabled() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->trajectory_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.InitialEgo)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialEgo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.InitialEgo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target);
  }

  // .sim_msg.Assign assign = 3;
  if (this->has_assign()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::assign(this), target);
  }

  // .sim_msg.Activate activate = 4;
  if (this->has_activate()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::activate(this), target);
  }

  // bool trajectory_enabled = 5;
  if (this->trajectory_enabled() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->trajectory_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.InitialEgo)
  return target;
}

size_t InitialEgo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.InitialEgo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // .sim_msg.Assign assign = 3;
  if (this->has_assign()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assign_);
  }

  // .sim_msg.Activate activate = 4;
  if (this->has_activate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activate_);
  }

  // bool trajectory_enabled = 5;
  if (this->trajectory_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialEgo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.InitialEgo)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialEgo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialEgo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.InitialEgo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.InitialEgo)
    MergeFrom(*source);
  }
}

void InitialEgo::MergeFrom(const InitialEgo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.InitialEgo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::sim_msg::InitialCommon::MergeFrom(from.common());
  }
  if (from.has_assign()) {
    mutable_assign()->::sim_msg::Assign::MergeFrom(from.assign());
  }
  if (from.has_activate()) {
    mutable_activate()->::sim_msg::Activate::MergeFrom(from.activate());
  }
  if (from.trajectory_enabled() != 0) {
    set_trajectory_enabled(from.trajectory_enabled());
  }
}

void InitialEgo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.InitialEgo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialEgo::CopyFrom(const InitialEgo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.InitialEgo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialEgo::IsInitialized() const {
  return true;
}

void InitialEgo::InternalSwap(InitialEgo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(assign_, other->assign_);
  swap(activate_, other->activate_);
  swap(trajectory_enabled_, other->trajectory_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialEgo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialVehicle::InitAsDefaultInstance() {
  ::sim_msg::_InitialVehicle_default_instance_._instance.get_mutable()->common_ = const_cast< ::sim_msg::InitialCommon*>(
      ::sim_msg::InitialCommon::internal_default_instance());
}
class InitialVehicle::_Internal {
 public:
  static const ::sim_msg::InitialCommon& common(const InitialVehicle* msg);
};

const ::sim_msg::InitialCommon&
InitialVehicle::_Internal::common(const InitialVehicle* msg) {
  return *msg->common_;
}
InitialVehicle::InitialVehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.InitialVehicle)
}
InitialVehicle::InitialVehicle(const InitialVehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::sim_msg::InitialCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&aggress_, &from.aggress_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_type_) -
    reinterpret_cast<char*>(&aggress_)) + sizeof(behavior_type_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.InitialVehicle)
}

void InitialVehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialVehicle_scene_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_type_) -
      reinterpret_cast<char*>(&common_)) + sizeof(behavior_type_));
}

InitialVehicle::~InitialVehicle() {
  // @@protoc_insertion_point(destructor:sim_msg.InitialVehicle)
  SharedDtor();
}

void InitialVehicle::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
}

void InitialVehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialVehicle& InitialVehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialVehicle_scene_2eproto.base);
  return *internal_default_instance();
}


void InitialVehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.InitialVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&aggress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_type_) -
      reinterpret_cast<char*>(&aggress_)) + sizeof(behavior_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitialVehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.InitialCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.BehaviorType behavior_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_behavior_type(static_cast<::sim_msg::BehaviorType>(val));
        } else goto handle_unusual;
        continue;
      // double aggress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          aggress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitialVehicle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.InitialVehicle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.InitialCommon common = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.BehaviorType behavior_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_behavior_type(static_cast< ::sim_msg::BehaviorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double aggress = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aggress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.InitialVehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.InitialVehicle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitialVehicle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.InitialVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::common(this), output);
  }

  // .sim_msg.BehaviorType behavior_type = 2;
  if (this->behavior_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->behavior_type(), output);
  }

  // double aggress = 3;
  if (!(this->aggress() <= 0 && this->aggress() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->aggress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.InitialVehicle)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialVehicle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.InitialVehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target);
  }

  // .sim_msg.BehaviorType behavior_type = 2;
  if (this->behavior_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->behavior_type(), target);
  }

  // double aggress = 3;
  if (!(this->aggress() <= 0 && this->aggress() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->aggress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.InitialVehicle)
  return target;
}

size_t InitialVehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.InitialVehicle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double aggress = 3;
  if (!(this->aggress() <= 0 && this->aggress() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.BehaviorType behavior_type = 2;
  if (this->behavior_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->behavior_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialVehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.InitialVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialVehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialVehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.InitialVehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.InitialVehicle)
    MergeFrom(*source);
  }
}

void InitialVehicle::MergeFrom(const InitialVehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.InitialVehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::sim_msg::InitialCommon::MergeFrom(from.common());
  }
  if (!(from.aggress() <= 0 && from.aggress() >= 0)) {
    set_aggress(from.aggress());
  }
  if (from.behavior_type() != 0) {
    set_behavior_type(from.behavior_type());
  }
}

void InitialVehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.InitialVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialVehicle::CopyFrom(const InitialVehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.InitialVehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialVehicle::IsInitialized() const {
  return true;
}

void InitialVehicle::InternalSwap(InitialVehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(aggress_, other->aggress_);
  swap(behavior_type_, other->behavior_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialVehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitialVru::InitAsDefaultInstance() {
  ::sim_msg::_InitialVru_default_instance_._instance.get_mutable()->common_ = const_cast< ::sim_msg::InitialCommon*>(
      ::sim_msg::InitialCommon::internal_default_instance());
}
class InitialVru::_Internal {
 public:
  static const ::sim_msg::InitialCommon& common(const InitialVru* msg);
};

const ::sim_msg::InitialCommon&
InitialVru::_Internal::common(const InitialVru* msg) {
  return *msg->common_;
}
InitialVru::InitialVru()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.InitialVru)
}
InitialVru::InitialVru(const InitialVru& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_common()) {
    common_ = new ::sim_msg::InitialCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&aggress_, &from.aggress_,
    static_cast<size_t>(reinterpret_cast<char*>(&behavior_type_) -
    reinterpret_cast<char*>(&aggress_)) + sizeof(behavior_type_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.InitialVru)
}

void InitialVru::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitialVru_scene_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_type_) -
      reinterpret_cast<char*>(&common_)) + sizeof(behavior_type_));
}

InitialVru::~InitialVru() {
  // @@protoc_insertion_point(destructor:sim_msg.InitialVru)
  SharedDtor();
}

void InitialVru::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
}

void InitialVru::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitialVru& InitialVru::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitialVru_scene_2eproto.base);
  return *internal_default_instance();
}


void InitialVru::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.InitialVru)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&aggress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&behavior_type_) -
      reinterpret_cast<char*>(&aggress_)) + sizeof(behavior_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitialVru::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.InitialCommon common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.BehaviorType behavior_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_behavior_type(static_cast<::sim_msg::BehaviorType>(val));
        } else goto handle_unusual;
        continue;
      // double aggress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          aggress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitialVru::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.InitialVru)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.InitialCommon common = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.BehaviorType behavior_type = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_behavior_type(static_cast< ::sim_msg::BehaviorType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double aggress = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &aggress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.InitialVru)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.InitialVru)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitialVru::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.InitialVru)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::common(this), output);
  }

  // .sim_msg.BehaviorType behavior_type = 2;
  if (this->behavior_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->behavior_type(), output);
  }

  // double aggress = 3;
  if (!(this->aggress() <= 0 && this->aggress() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->aggress(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.InitialVru)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitialVru::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.InitialVru)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::common(this), target);
  }

  // .sim_msg.BehaviorType behavior_type = 2;
  if (this->behavior_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->behavior_type(), target);
  }

  // double aggress = 3;
  if (!(this->aggress() <= 0 && this->aggress() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->aggress(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.InitialVru)
  return target;
}

size_t InitialVru::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.InitialVru)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.InitialCommon common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double aggress = 3;
  if (!(this->aggress() <= 0 && this->aggress() >= 0)) {
    total_size += 1 + 8;
  }

  // .sim_msg.BehaviorType behavior_type = 2;
  if (this->behavior_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->behavior_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitialVru::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.InitialVru)
  GOOGLE_DCHECK_NE(&from, this);
  const InitialVru* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitialVru>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.InitialVru)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.InitialVru)
    MergeFrom(*source);
  }
}

void InitialVru::MergeFrom(const InitialVru& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.InitialVru)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    mutable_common()->::sim_msg::InitialCommon::MergeFrom(from.common());
  }
  if (!(from.aggress() <= 0 && from.aggress() >= 0)) {
    set_aggress(from.aggress());
  }
  if (from.behavior_type() != 0) {
    set_behavior_type(from.behavior_type());
  }
}

void InitialVru::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.InitialVru)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialVru::CopyFrom(const InitialVru& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.InitialVru)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialVru::IsInitialized() const {
  return true;
}

void InitialVru::InternalSwap(InitialVru* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(aggress_, other->aggress_);
  swap(behavior_type_, other->behavior_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitialVru::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dynamic::InitAsDefaultInstance() {
}
class Dynamic::_Internal {
 public:
};

Dynamic::Dynamic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Dynamic)
}
Dynamic::Dynamic(const Dynamic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      events_(from.events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.Dynamic)
}

void Dynamic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dynamic_scene_2eproto.base);
}

Dynamic::~Dynamic() {
  // @@protoc_insertion_point(destructor:sim_msg.Dynamic)
  SharedDtor();
}

void Dynamic::SharedDtor() {
}

void Dynamic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dynamic& Dynamic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dynamic_scene_2eproto.base);
  return *internal_default_instance();
}


void Dynamic::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Dynamic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Dynamic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .sim_msg.Event events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Dynamic::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Dynamic)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Event events = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Dynamic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Dynamic)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Dynamic::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Dynamic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Event events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->events(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Dynamic)
}

::PROTOBUF_NAMESPACE_ID::uint8* Dynamic::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Dynamic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Event events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->events(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Dynamic)
  return target;
}

size_t Dynamic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Dynamic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Event events = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dynamic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  const Dynamic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dynamic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Dynamic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Dynamic)
    MergeFrom(*source);
  }
}

void Dynamic::MergeFrom(const Dynamic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Dynamic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
}

void Dynamic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dynamic::CopyFrom(const Dynamic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Dynamic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dynamic::IsInitialized() const {
  return true;
}

void Dynamic::InternalSwap(Dynamic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&events_)->InternalSwap(CastToBase(&other->events_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dynamic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ego::InitAsDefaultInstance() {
  ::sim_msg::_Ego_default_instance_._instance.get_mutable()->initial_ = const_cast< ::sim_msg::InitialEgo*>(
      ::sim_msg::InitialEgo::internal_default_instance());
  ::sim_msg::_Ego_default_instance_._instance.get_mutable()->dynamic_ = const_cast< ::sim_msg::Dynamic*>(
      ::sim_msg::Dynamic::internal_default_instance());
  ::sim_msg::_Ego_default_instance_._instance.get_mutable()->sensor_group_ = const_cast< ::sim_msg::SensorGroup*>(
      ::sim_msg::SensorGroup::internal_default_instance());
}
class Ego::_Internal {
 public:
  static const ::sim_msg::InitialEgo& initial(const Ego* msg);
  static const ::sim_msg::Dynamic& dynamic(const Ego* msg);
  static const ::sim_msg::SensorGroup& sensor_group(const Ego* msg);
};

const ::sim_msg::InitialEgo&
Ego::_Internal::initial(const Ego* msg) {
  return *msg->initial_;
}
const ::sim_msg::Dynamic&
Ego::_Internal::dynamic(const Ego* msg) {
  return *msg->dynamic_;
}
const ::sim_msg::SensorGroup&
Ego::_Internal::sensor_group(const Ego* msg) {
  return *msg->sensor_group_;
}
void Ego::clear_sensor_group() {
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
}
Ego::Ego()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Ego)
}
Ego::Ego(const Ego& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      physicles_(from.physicles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.objectname().empty()) {
    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.group().empty()) {
    group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.has_initial()) {
    initial_ = new ::sim_msg::InitialEgo(*from.initial_);
  } else {
    initial_ = nullptr;
  }
  if (from.has_dynamic()) {
    dynamic_ = new ::sim_msg::Dynamic(*from.dynamic_);
  } else {
    dynamic_ = nullptr;
  }
  if (from.has_sensor_group()) {
    sensor_group_ = new ::sim_msg::SensorGroup(*from.sensor_group_);
  } else {
    sensor_group_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Ego)
}

void Ego::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ego_scene_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&initial_)) + sizeof(category_));
}

Ego::~Ego() {
  // @@protoc_insertion_point(destructor:sim_msg.Ego)
  SharedDtor();
}

void Ego::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete initial_;
  if (this != internal_default_instance()) delete dynamic_;
  if (this != internal_default_instance()) delete sensor_group_;
}

void Ego::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ego& Ego::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ego_scene_2eproto.base);
  return *internal_default_instance();
}


void Ego::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Ego)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  physicles_.Clear();
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && initial_ != nullptr) {
    delete initial_;
  }
  initial_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamic_ != nullptr) {
    delete dynamic_;
  }
  dynamic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Ego::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.Ego.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string objectname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_objectname(), ptr, ctx, "sim_msg.Ego.objectname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.CategoryVehicle category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_category(static_cast<::sim_msg::CategoryVehicle>(val));
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.PhysicleEgo physicles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_physicles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // .sim_msg.InitialEgo initial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_initial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Dynamic dynamic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_dynamic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.SensorGroup sensor_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sensor_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_group(), ptr, ctx, "sim_msg.Ego.group");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Ego::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Ego)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Ego.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objectname = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->objectname().data(), static_cast<int>(this->objectname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Ego.objectname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.CategoryVehicle category = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::sim_msg::CategoryVehicle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.PhysicleEgo physicles = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_physicles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.InitialEgo initial = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Dynamic dynamic = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorGroup sensor_group = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Ego.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Ego)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Ego)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Ego::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Ego)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Ego.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Ego.objectname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->objectname(), output);
  }

  // .sim_msg.CategoryVehicle category = 4;
  if (this->category() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->category(), output);
  }

  // repeated .sim_msg.PhysicleEgo physicles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physicles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->physicles(static_cast<int>(i)),
      output);
  }

  // .sim_msg.InitialEgo initial = 6;
  if (this->has_initial()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::initial(this), output);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::dynamic(this), output);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::sensor_group(this), output);
  }

  // string group = 9;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Ego.group");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Ego)
}

::PROTOBUF_NAMESPACE_ID::uint8* Ego::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Ego)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Ego.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Ego.objectname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->objectname(), target);
  }

  // .sim_msg.CategoryVehicle category = 4;
  if (this->category() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->category(), target);
  }

  // repeated .sim_msg.PhysicleEgo physicles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->physicles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->physicles(static_cast<int>(i)), target);
  }

  // .sim_msg.InitialEgo initial = 6;
  if (this->has_initial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::initial(this), target);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::dynamic(this), target);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::sensor_group(this), target);
  }

  // string group = 9;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Ego.group");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Ego)
  return target;
}

size_t Ego::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Ego)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.PhysicleEgo physicles = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->physicles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->physicles(static_cast<int>(i)));
    }
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->objectname());
  }

  // string group = 9;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->group());
  }

  // .sim_msg.InitialEgo initial = 6;
  if (this->has_initial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_group_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .sim_msg.CategoryVehicle category = 4;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->category());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ego::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Ego)
  GOOGLE_DCHECK_NE(&from, this);
  const Ego* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ego>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Ego)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Ego)
    MergeFrom(*source);
  }
}

void Ego::MergeFrom(const Ego& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Ego)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  physicles_.MergeFrom(from.physicles_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.objectname().size() > 0) {

    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.has_initial()) {
    mutable_initial()->::sim_msg::InitialEgo::MergeFrom(from.initial());
  }
  if (from.has_dynamic()) {
    mutable_dynamic()->::sim_msg::Dynamic::MergeFrom(from.dynamic());
  }
  if (from.has_sensor_group()) {
    mutable_sensor_group()->::sim_msg::SensorGroup::MergeFrom(from.sensor_group());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
}

void Ego::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Ego)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ego::CopyFrom(const Ego& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Ego)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ego::IsInitialized() const {
  return true;
}

void Ego::InternalSwap(Ego* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&physicles_)->InternalSwap(CastToBase(&other->physicles_));
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectname_.Swap(&other->objectname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(initial_, other->initial_);
  swap(dynamic_, other->dynamic_);
  swap(sensor_group_, other->sensor_group_);
  swap(id_, other->id_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ego::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vehicle::InitAsDefaultInstance() {
  ::sim_msg::_Vehicle_default_instance_._instance.get_mutable()->physicle_ = const_cast< ::sim_msg::PhysicleVehicle*>(
      ::sim_msg::PhysicleVehicle::internal_default_instance());
  ::sim_msg::_Vehicle_default_instance_._instance.get_mutable()->initial_ = const_cast< ::sim_msg::InitialVehicle*>(
      ::sim_msg::InitialVehicle::internal_default_instance());
  ::sim_msg::_Vehicle_default_instance_._instance.get_mutable()->dynamic_ = const_cast< ::sim_msg::Dynamic*>(
      ::sim_msg::Dynamic::internal_default_instance());
  ::sim_msg::_Vehicle_default_instance_._instance.get_mutable()->sensor_group_ = const_cast< ::sim_msg::SensorGroup*>(
      ::sim_msg::SensorGroup::internal_default_instance());
}
class Vehicle::_Internal {
 public:
  static const ::sim_msg::PhysicleVehicle& physicle(const Vehicle* msg);
  static const ::sim_msg::InitialVehicle& initial(const Vehicle* msg);
  static const ::sim_msg::Dynamic& dynamic(const Vehicle* msg);
  static const ::sim_msg::SensorGroup& sensor_group(const Vehicle* msg);
};

const ::sim_msg::PhysicleVehicle&
Vehicle::_Internal::physicle(const Vehicle* msg) {
  return *msg->physicle_;
}
const ::sim_msg::InitialVehicle&
Vehicle::_Internal::initial(const Vehicle* msg) {
  return *msg->initial_;
}
const ::sim_msg::Dynamic&
Vehicle::_Internal::dynamic(const Vehicle* msg) {
  return *msg->dynamic_;
}
const ::sim_msg::SensorGroup&
Vehicle::_Internal::sensor_group(const Vehicle* msg) {
  return *msg->sensor_group_;
}
void Vehicle::clear_sensor_group() {
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
}
Vehicle::Vehicle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Vehicle)
}
Vehicle::Vehicle(const Vehicle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.objectname().empty()) {
    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.group().empty()) {
    group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.has_physicle()) {
    physicle_ = new ::sim_msg::PhysicleVehicle(*from.physicle_);
  } else {
    physicle_ = nullptr;
  }
  if (from.has_initial()) {
    initial_ = new ::sim_msg::InitialVehicle(*from.initial_);
  } else {
    initial_ = nullptr;
  }
  if (from.has_dynamic()) {
    dynamic_ = new ::sim_msg::Dynamic(*from.dynamic_);
  } else {
    dynamic_ = nullptr;
  }
  if (from.has_sensor_group()) {
    sensor_group_ = new ::sim_msg::SensorGroup(*from.sensor_group_);
  } else {
    sensor_group_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Vehicle)
}

void Vehicle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Vehicle_scene_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&physicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&physicle_)) + sizeof(category_));
}

Vehicle::~Vehicle() {
  // @@protoc_insertion_point(destructor:sim_msg.Vehicle)
  SharedDtor();
}

void Vehicle::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete physicle_;
  if (this != internal_default_instance()) delete initial_;
  if (this != internal_default_instance()) delete dynamic_;
  if (this != internal_default_instance()) delete sensor_group_;
}

void Vehicle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vehicle& Vehicle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vehicle_scene_2eproto.base);
  return *internal_default_instance();
}


void Vehicle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Vehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && physicle_ != nullptr) {
    delete physicle_;
  }
  physicle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && initial_ != nullptr) {
    delete initial_;
  }
  initial_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamic_ != nullptr) {
    delete dynamic_;
  }
  dynamic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Vehicle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.Vehicle.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string objectname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_objectname(), ptr, ctx, "sim_msg.Vehicle.objectname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.CategoryVehicle category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_category(static_cast<::sim_msg::CategoryVehicle>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.PhysicleVehicle physicle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_physicle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.InitialVehicle initial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_initial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Dynamic dynamic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_dynamic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.SensorGroup sensor_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sensor_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string group = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_group(), ptr, ctx, "sim_msg.Vehicle.group");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Vehicle::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Vehicle)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Vehicle.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objectname = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->objectname().data(), static_cast<int>(this->objectname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Vehicle.objectname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.CategoryVehicle category = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::sim_msg::CategoryVehicle >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PhysicleVehicle physicle = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_physicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.InitialVehicle initial = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Dynamic dynamic = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorGroup sensor_group = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), static_cast<int>(this->group().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.Vehicle.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Vehicle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Vehicle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Vehicle::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Vehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Vehicle.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Vehicle.objectname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->objectname(), output);
  }

  // .sim_msg.CategoryVehicle category = 4;
  if (this->category() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->category(), output);
  }

  // .sim_msg.PhysicleVehicle physicle = 5;
  if (this->has_physicle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::physicle(this), output);
  }

  // .sim_msg.InitialVehicle initial = 6;
  if (this->has_initial()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::initial(this), output);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::dynamic(this), output);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::sensor_group(this), output);
  }

  // string group = 9;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Vehicle.group");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Vehicle)
}

::PROTOBUF_NAMESPACE_ID::uint8* Vehicle::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Vehicle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Vehicle.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Vehicle.objectname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->objectname(), target);
  }

  // .sim_msg.CategoryVehicle category = 4;
  if (this->category() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->category(), target);
  }

  // .sim_msg.PhysicleVehicle physicle = 5;
  if (this->has_physicle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::physicle(this), target);
  }

  // .sim_msg.InitialVehicle initial = 6;
  if (this->has_initial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::initial(this), target);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::dynamic(this), target);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::sensor_group(this), target);
  }

  // string group = 9;
  if (this->group().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), static_cast<int>(this->group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Vehicle.group");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        9, this->group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Vehicle)
  return target;
}

size_t Vehicle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Vehicle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->objectname());
  }

  // string group = 9;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->group());
  }

  // .sim_msg.PhysicleVehicle physicle = 5;
  if (this->has_physicle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *physicle_);
  }

  // .sim_msg.InitialVehicle initial = 6;
  if (this->has_initial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_group_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .sim_msg.CategoryVehicle category = 4;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->category());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vehicle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  const Vehicle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vehicle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Vehicle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Vehicle)
    MergeFrom(*source);
  }
}

void Vehicle::MergeFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Vehicle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.objectname().size() > 0) {

    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.has_physicle()) {
    mutable_physicle()->::sim_msg::PhysicleVehicle::MergeFrom(from.physicle());
  }
  if (from.has_initial()) {
    mutable_initial()->::sim_msg::InitialVehicle::MergeFrom(from.initial());
  }
  if (from.has_dynamic()) {
    mutable_dynamic()->::sim_msg::Dynamic::MergeFrom(from.dynamic());
  }
  if (from.has_sensor_group()) {
    mutable_sensor_group()->::sim_msg::SensorGroup::MergeFrom(from.sensor_group());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
}

void Vehicle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vehicle::CopyFrom(const Vehicle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Vehicle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vehicle::IsInitialized() const {
  return true;
}

void Vehicle::InternalSwap(Vehicle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectname_.Swap(&other->objectname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  group_.Swap(&other->group_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(physicle_, other->physicle_);
  swap(initial_, other->initial_);
  swap(dynamic_, other->dynamic_);
  swap(sensor_group_, other->sensor_group_);
  swap(id_, other->id_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vehicle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VulnerableRoadUser::InitAsDefaultInstance() {
  ::sim_msg::_VulnerableRoadUser_default_instance_._instance.get_mutable()->physicle_ = const_cast< ::sim_msg::PhysicleVru*>(
      ::sim_msg::PhysicleVru::internal_default_instance());
  ::sim_msg::_VulnerableRoadUser_default_instance_._instance.get_mutable()->initial_ = const_cast< ::sim_msg::InitialVru*>(
      ::sim_msg::InitialVru::internal_default_instance());
  ::sim_msg::_VulnerableRoadUser_default_instance_._instance.get_mutable()->dynamic_ = const_cast< ::sim_msg::Dynamic*>(
      ::sim_msg::Dynamic::internal_default_instance());
  ::sim_msg::_VulnerableRoadUser_default_instance_._instance.get_mutable()->sensor_group_ = const_cast< ::sim_msg::SensorGroup*>(
      ::sim_msg::SensorGroup::internal_default_instance());
}
class VulnerableRoadUser::_Internal {
 public:
  static const ::sim_msg::PhysicleVru& physicle(const VulnerableRoadUser* msg);
  static const ::sim_msg::InitialVru& initial(const VulnerableRoadUser* msg);
  static const ::sim_msg::Dynamic& dynamic(const VulnerableRoadUser* msg);
  static const ::sim_msg::SensorGroup& sensor_group(const VulnerableRoadUser* msg);
};

const ::sim_msg::PhysicleVru&
VulnerableRoadUser::_Internal::physicle(const VulnerableRoadUser* msg) {
  return *msg->physicle_;
}
const ::sim_msg::InitialVru&
VulnerableRoadUser::_Internal::initial(const VulnerableRoadUser* msg) {
  return *msg->initial_;
}
const ::sim_msg::Dynamic&
VulnerableRoadUser::_Internal::dynamic(const VulnerableRoadUser* msg) {
  return *msg->dynamic_;
}
const ::sim_msg::SensorGroup&
VulnerableRoadUser::_Internal::sensor_group(const VulnerableRoadUser* msg) {
  return *msg->sensor_group_;
}
void VulnerableRoadUser::clear_sensor_group() {
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
}
VulnerableRoadUser::VulnerableRoadUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.VulnerableRoadUser)
}
VulnerableRoadUser::VulnerableRoadUser(const VulnerableRoadUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.objectname().empty()) {
    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.has_physicle()) {
    physicle_ = new ::sim_msg::PhysicleVru(*from.physicle_);
  } else {
    physicle_ = nullptr;
  }
  if (from.has_initial()) {
    initial_ = new ::sim_msg::InitialVru(*from.initial_);
  } else {
    initial_ = nullptr;
  }
  if (from.has_dynamic()) {
    dynamic_ = new ::sim_msg::Dynamic(*from.dynamic_);
  } else {
    dynamic_ = nullptr;
  }
  if (from.has_sensor_group()) {
    sensor_group_ = new ::sim_msg::SensorGroup(*from.sensor_group_);
  } else {
    sensor_group_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.VulnerableRoadUser)
}

void VulnerableRoadUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VulnerableRoadUser_scene_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&physicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&physicle_)) + sizeof(category_));
}

VulnerableRoadUser::~VulnerableRoadUser() {
  // @@protoc_insertion_point(destructor:sim_msg.VulnerableRoadUser)
  SharedDtor();
}

void VulnerableRoadUser::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete physicle_;
  if (this != internal_default_instance()) delete initial_;
  if (this != internal_default_instance()) delete dynamic_;
  if (this != internal_default_instance()) delete sensor_group_;
}

void VulnerableRoadUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VulnerableRoadUser& VulnerableRoadUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VulnerableRoadUser_scene_2eproto.base);
  return *internal_default_instance();
}


void VulnerableRoadUser::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.VulnerableRoadUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && physicle_ != nullptr) {
    delete physicle_;
  }
  physicle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && initial_ != nullptr) {
    delete initial_;
  }
  initial_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamic_ != nullptr) {
    delete dynamic_;
  }
  dynamic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* VulnerableRoadUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.VulnerableRoadUser.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string objectname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_objectname(), ptr, ctx, "sim_msg.VulnerableRoadUser.objectname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.CategoryVru category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_category(static_cast<::sim_msg::CategoryVru>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.PhysicleVru physicle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_physicle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.InitialVru initial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_initial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Dynamic dynamic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_dynamic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.SensorGroup sensor_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sensor_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool VulnerableRoadUser::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.VulnerableRoadUser)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.VulnerableRoadUser.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objectname = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->objectname().data(), static_cast<int>(this->objectname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.VulnerableRoadUser.objectname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.CategoryVru category = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::sim_msg::CategoryVru >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PhysicleVru physicle = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_physicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.InitialVru initial = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Dynamic dynamic = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorGroup sensor_group = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.VulnerableRoadUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.VulnerableRoadUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void VulnerableRoadUser::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.VulnerableRoadUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.VulnerableRoadUser.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.VulnerableRoadUser.objectname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->objectname(), output);
  }

  // .sim_msg.CategoryVru category = 4;
  if (this->category() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->category(), output);
  }

  // .sim_msg.PhysicleVru physicle = 5;
  if (this->has_physicle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::physicle(this), output);
  }

  // .sim_msg.InitialVru initial = 6;
  if (this->has_initial()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::initial(this), output);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::dynamic(this), output);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::sensor_group(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.VulnerableRoadUser)
}

::PROTOBUF_NAMESPACE_ID::uint8* VulnerableRoadUser::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.VulnerableRoadUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.VulnerableRoadUser.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.VulnerableRoadUser.objectname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->objectname(), target);
  }

  // .sim_msg.CategoryVru category = 4;
  if (this->category() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->category(), target);
  }

  // .sim_msg.PhysicleVru physicle = 5;
  if (this->has_physicle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::physicle(this), target);
  }

  // .sim_msg.InitialVru initial = 6;
  if (this->has_initial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::initial(this), target);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::dynamic(this), target);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::sensor_group(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.VulnerableRoadUser)
  return target;
}

size_t VulnerableRoadUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.VulnerableRoadUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->objectname());
  }

  // .sim_msg.PhysicleVru physicle = 5;
  if (this->has_physicle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *physicle_);
  }

  // .sim_msg.InitialVru initial = 6;
  if (this->has_initial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_group_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .sim_msg.CategoryVru category = 4;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->category());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VulnerableRoadUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.VulnerableRoadUser)
  GOOGLE_DCHECK_NE(&from, this);
  const VulnerableRoadUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VulnerableRoadUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.VulnerableRoadUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.VulnerableRoadUser)
    MergeFrom(*source);
  }
}

void VulnerableRoadUser::MergeFrom(const VulnerableRoadUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.VulnerableRoadUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.objectname().size() > 0) {

    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.has_physicle()) {
    mutable_physicle()->::sim_msg::PhysicleVru::MergeFrom(from.physicle());
  }
  if (from.has_initial()) {
    mutable_initial()->::sim_msg::InitialVru::MergeFrom(from.initial());
  }
  if (from.has_dynamic()) {
    mutable_dynamic()->::sim_msg::Dynamic::MergeFrom(from.dynamic());
  }
  if (from.has_sensor_group()) {
    mutable_sensor_group()->::sim_msg::SensorGroup::MergeFrom(from.sensor_group());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
}

void VulnerableRoadUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.VulnerableRoadUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VulnerableRoadUser::CopyFrom(const VulnerableRoadUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.VulnerableRoadUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VulnerableRoadUser::IsInitialized() const {
  return true;
}

void VulnerableRoadUser::InternalSwap(VulnerableRoadUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectname_.Swap(&other->objectname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(physicle_, other->physicle_);
  swap(initial_, other->initial_);
  swap(dynamic_, other->dynamic_);
  swap(sensor_group_, other->sensor_group_);
  swap(id_, other->id_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VulnerableRoadUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MiscellaneousObject::InitAsDefaultInstance() {
  ::sim_msg::_MiscellaneousObject_default_instance_._instance.get_mutable()->physicle_ = const_cast< ::sim_msg::PhysicleCommon*>(
      ::sim_msg::PhysicleCommon::internal_default_instance());
  ::sim_msg::_MiscellaneousObject_default_instance_._instance.get_mutable()->initial_ = const_cast< ::sim_msg::InitialCommon*>(
      ::sim_msg::InitialCommon::internal_default_instance());
  ::sim_msg::_MiscellaneousObject_default_instance_._instance.get_mutable()->dynamic_ = const_cast< ::sim_msg::Dynamic*>(
      ::sim_msg::Dynamic::internal_default_instance());
  ::sim_msg::_MiscellaneousObject_default_instance_._instance.get_mutable()->sensor_group_ = const_cast< ::sim_msg::SensorGroup*>(
      ::sim_msg::SensorGroup::internal_default_instance());
}
class MiscellaneousObject::_Internal {
 public:
  static const ::sim_msg::PhysicleCommon& physicle(const MiscellaneousObject* msg);
  static const ::sim_msg::InitialCommon& initial(const MiscellaneousObject* msg);
  static const ::sim_msg::Dynamic& dynamic(const MiscellaneousObject* msg);
  static const ::sim_msg::SensorGroup& sensor_group(const MiscellaneousObject* msg);
};

const ::sim_msg::PhysicleCommon&
MiscellaneousObject::_Internal::physicle(const MiscellaneousObject* msg) {
  return *msg->physicle_;
}
const ::sim_msg::InitialCommon&
MiscellaneousObject::_Internal::initial(const MiscellaneousObject* msg) {
  return *msg->initial_;
}
const ::sim_msg::Dynamic&
MiscellaneousObject::_Internal::dynamic(const MiscellaneousObject* msg) {
  return *msg->dynamic_;
}
const ::sim_msg::SensorGroup&
MiscellaneousObject::_Internal::sensor_group(const MiscellaneousObject* msg) {
  return *msg->sensor_group_;
}
void MiscellaneousObject::clear_sensor_group() {
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
}
MiscellaneousObject::MiscellaneousObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.MiscellaneousObject)
}
MiscellaneousObject::MiscellaneousObject(const MiscellaneousObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.objectname().empty()) {
    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.has_physicle()) {
    physicle_ = new ::sim_msg::PhysicleCommon(*from.physicle_);
  } else {
    physicle_ = nullptr;
  }
  if (from.has_initial()) {
    initial_ = new ::sim_msg::InitialCommon(*from.initial_);
  } else {
    initial_ = nullptr;
  }
  if (from.has_dynamic()) {
    dynamic_ = new ::sim_msg::Dynamic(*from.dynamic_);
  } else {
    dynamic_ = nullptr;
  }
  if (from.has_sensor_group()) {
    sensor_group_ = new ::sim_msg::SensorGroup(*from.sensor_group_);
  } else {
    sensor_group_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&category_) -
    reinterpret_cast<char*>(&id_)) + sizeof(category_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.MiscellaneousObject)
}

void MiscellaneousObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MiscellaneousObject_scene_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&physicle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&physicle_)) + sizeof(category_));
}

MiscellaneousObject::~MiscellaneousObject() {
  // @@protoc_insertion_point(destructor:sim_msg.MiscellaneousObject)
  SharedDtor();
}

void MiscellaneousObject::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete physicle_;
  if (this != internal_default_instance()) delete initial_;
  if (this != internal_default_instance()) delete dynamic_;
  if (this != internal_default_instance()) delete sensor_group_;
}

void MiscellaneousObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MiscellaneousObject& MiscellaneousObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MiscellaneousObject_scene_2eproto.base);
  return *internal_default_instance();
}


void MiscellaneousObject::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.MiscellaneousObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  objectname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && physicle_ != nullptr) {
    delete physicle_;
  }
  physicle_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && initial_ != nullptr) {
    delete initial_;
  }
  initial_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dynamic_ != nullptr) {
    delete dynamic_;
  }
  dynamic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sensor_group_ != nullptr) {
    delete sensor_group_;
  }
  sensor_group_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&category_) -
      reinterpret_cast<char*>(&id_)) + sizeof(category_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MiscellaneousObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.MiscellaneousObject.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string objectname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_objectname(), ptr, ctx, "sim_msg.MiscellaneousObject.objectname");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.CategoryMisc category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_category(static_cast<::sim_msg::CategoryMisc>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.PhysicleCommon physicle = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_physicle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.InitialCommon initial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_initial(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Dynamic dynamic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_dynamic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.SensorGroup sensor_group = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_sensor_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MiscellaneousObject::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.MiscellaneousObject)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.MiscellaneousObject.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string objectname = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_objectname()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->objectname().data(), static_cast<int>(this->objectname().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.MiscellaneousObject.objectname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.CategoryMisc category = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_category(static_cast< ::sim_msg::CategoryMisc >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PhysicleCommon physicle = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_physicle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.InitialCommon initial = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_initial()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Dynamic dynamic = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dynamic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SensorGroup sensor_group = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.MiscellaneousObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.MiscellaneousObject)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MiscellaneousObject::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.MiscellaneousObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.MiscellaneousObject.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.MiscellaneousObject.objectname");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->objectname(), output);
  }

  // .sim_msg.CategoryMisc category = 4;
  if (this->category() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->category(), output);
  }

  // .sim_msg.PhysicleCommon physicle = 5;
  if (this->has_physicle()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::physicle(this), output);
  }

  // .sim_msg.InitialCommon initial = 6;
  if (this->has_initial()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::initial(this), output);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::dynamic(this), output);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::sensor_group(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.MiscellaneousObject)
}

::PROTOBUF_NAMESPACE_ID::uint8* MiscellaneousObject::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.MiscellaneousObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.MiscellaneousObject.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->objectname().data(), static_cast<int>(this->objectname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.MiscellaneousObject.objectname");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->objectname(), target);
  }

  // .sim_msg.CategoryMisc category = 4;
  if (this->category() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->category(), target);
  }

  // .sim_msg.PhysicleCommon physicle = 5;
  if (this->has_physicle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::physicle(this), target);
  }

  // .sim_msg.InitialCommon initial = 6;
  if (this->has_initial()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::initial(this), target);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::dynamic(this), target);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::sensor_group(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.MiscellaneousObject)
  return target;
}

size_t MiscellaneousObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.MiscellaneousObject)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string objectname = 3;
  if (this->objectname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->objectname());
  }

  // .sim_msg.PhysicleCommon physicle = 5;
  if (this->has_physicle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *physicle_);
  }

  // .sim_msg.InitialCommon initial = 6;
  if (this->has_initial()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_);
  }

  // .sim_msg.Dynamic dynamic = 7;
  if (this->has_dynamic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dynamic_);
  }

  // .sim_msg.SensorGroup sensor_group = 8;
  if (this->has_sensor_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sensor_group_);
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->id());
  }

  // .sim_msg.CategoryMisc category = 4;
  if (this->category() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->category());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MiscellaneousObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.MiscellaneousObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MiscellaneousObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MiscellaneousObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.MiscellaneousObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.MiscellaneousObject)
    MergeFrom(*source);
  }
}

void MiscellaneousObject::MergeFrom(const MiscellaneousObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.MiscellaneousObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.objectname().size() > 0) {

    objectname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.objectname_);
  }
  if (from.has_physicle()) {
    mutable_physicle()->::sim_msg::PhysicleCommon::MergeFrom(from.physicle());
  }
  if (from.has_initial()) {
    mutable_initial()->::sim_msg::InitialCommon::MergeFrom(from.initial());
  }
  if (from.has_dynamic()) {
    mutable_dynamic()->::sim_msg::Dynamic::MergeFrom(from.dynamic());
  }
  if (from.has_sensor_group()) {
    mutable_sensor_group()->::sim_msg::SensorGroup::MergeFrom(from.sensor_group());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.category() != 0) {
    set_category(from.category());
  }
}

void MiscellaneousObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.MiscellaneousObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiscellaneousObject::CopyFrom(const MiscellaneousObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.MiscellaneousObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiscellaneousObject::IsInitialized() const {
  return true;
}

void MiscellaneousObject::InternalSwap(MiscellaneousObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  objectname_.Swap(&other->objectname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(physicle_, other->physicle_);
  swap(initial_, other->initial_);
  swap(dynamic_, other->dynamic_);
  swap(sensor_group_, other->sensor_group_);
  swap(id_, other->id_);
  swap(category_, other->category_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MiscellaneousObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapModel::InitAsDefaultInstance() {
  ::sim_msg::_MapModel_default_instance_._instance.get_mutable()->common_ = const_cast< ::sim_msg::PhysicleCommon*>(
      ::sim_msg::PhysicleCommon::internal_default_instance());
}
class MapModel::_Internal {
 public:
  static const ::sim_msg::PhysicleCommon& common(const MapModel* msg);
};

const ::sim_msg::PhysicleCommon&
MapModel::_Internal::common(const MapModel* msg) {
  return *msg->common_;
}
MapModel::MapModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.MapModel)
}
MapModel::MapModel(const MapModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_common()) {
    common_ = new ::sim_msg::PhysicleCommon(*from.common_);
  } else {
    common_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.MapModel)
}

void MapModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapModel_scene_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  common_ = nullptr;
}

MapModel::~MapModel() {
  // @@protoc_insertion_point(destructor:sim_msg.MapModel)
  SharedDtor();
}

void MapModel::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete common_;
}

void MapModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapModel& MapModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapModel_scene_2eproto.base);
  return *internal_default_instance();
}


void MapModel::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.MapModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MapModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "sim_msg.MapModel.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.PhysicleCommon common = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MapModel::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.MapModel)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "sim_msg.MapModel.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PhysicleCommon common = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_common()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.MapModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.MapModel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MapModel::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.MapModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.MapModel.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .sim_msg.PhysicleCommon common = 2;
  if (this->has_common()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::common(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.MapModel)
}

::PROTOBUF_NAMESPACE_ID::uint8* MapModel::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.MapModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sim_msg.MapModel.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .sim_msg.PhysicleCommon common = 2;
  if (this->has_common()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::common(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.MapModel)
  return target;
}

size_t MapModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.MapModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .sim_msg.PhysicleCommon common = 2;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.MapModel)
  GOOGLE_DCHECK_NE(&from, this);
  const MapModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.MapModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.MapModel)
    MergeFrom(*source);
  }
}

void MapModel::MergeFrom(const MapModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.MapModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_common()) {
    mutable_common()->::sim_msg::PhysicleCommon::MergeFrom(from.common());
  }
}

void MapModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.MapModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapModel::CopyFrom(const MapModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.MapModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapModel::IsInitialized() const {
  return true;
}

void MapModel::InternalSwap(MapModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(common_, other->common_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapModel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Scene_EnvironmentEntry_DoNotUse::Scene_EnvironmentEntry_DoNotUse() {}
Scene_EnvironmentEntry_DoNotUse::Scene_EnvironmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Scene_EnvironmentEntry_DoNotUse::MergeFrom(const Scene_EnvironmentEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Scene_EnvironmentEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Scene_EnvironmentEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Scene::InitAsDefaultInstance() {
  ::sim_msg::_Scene_default_instance_._instance.get_mutable()->setting_ = const_cast< ::sim_msg::Setting*>(
      ::sim_msg::Setting::internal_default_instance());
  ::sim_msg::_Scene_default_instance_._instance.get_mutable()->infrastructure_group_ = const_cast< ::sim_msg::InfrastructureGroup*>(
      ::sim_msg::InfrastructureGroup::internal_default_instance());
}
class Scene::_Internal {
 public:
  static const ::sim_msg::Setting& setting(const Scene* msg);
  static const ::sim_msg::InfrastructureGroup& infrastructure_group(const Scene* msg);
};

const ::sim_msg::Setting&
Scene::_Internal::setting(const Scene* msg) {
  return *msg->setting_;
}
const ::sim_msg::InfrastructureGroup&
Scene::_Internal::infrastructure_group(const Scene* msg) {
  return *msg->infrastructure_group_;
}
void Scene::clear_setting() {
  if (GetArenaNoVirtual() == nullptr && setting_ != nullptr) {
    delete setting_;
  }
  setting_ = nullptr;
}
void Scene::clear_environment() {
  environment_.Clear();
}
void Scene::clear_infrastructure_group() {
  if (GetArenaNoVirtual() == nullptr && infrastructure_group_ != nullptr) {
    delete infrastructure_group_;
  }
  infrastructure_group_ = nullptr;
}
Scene::Scene()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Scene)
}
Scene::Scene(const Scene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      egos_(from.egos_),
      vehicles_(from.vehicles_),
      vrus_(from.vrus_),
      miscs_(from.miscs_),
      map_models_(from.map_models_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  environment_.MergeFrom(from.environment_);
  if (from.has_setting()) {
    setting_ = new ::sim_msg::Setting(*from.setting_);
  } else {
    setting_ = nullptr;
  }
  if (from.has_infrastructure_group()) {
    infrastructure_group_ = new ::sim_msg::InfrastructureGroup(*from.infrastructure_group_);
  } else {
    infrastructure_group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Scene)
}

void Scene::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Scene_scene_2eproto.base);
  ::memset(&setting_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&infrastructure_group_) -
      reinterpret_cast<char*>(&setting_)) + sizeof(infrastructure_group_));
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:sim_msg.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  if (this != internal_default_instance()) delete setting_;
  if (this != internal_default_instance()) delete infrastructure_group_;
}

void Scene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scene& Scene::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scene_scene_2eproto.base);
  return *internal_default_instance();
}


void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  egos_.Clear();
  vehicles_.Clear();
  vrus_.Clear();
  miscs_.Clear();
  environment_.Clear();
  map_models_.Clear();
  if (GetArenaNoVirtual() == nullptr && setting_ != nullptr) {
    delete setting_;
  }
  setting_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && infrastructure_group_ != nullptr) {
    delete infrastructure_group_;
  }
  infrastructure_group_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Scene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .sim_msg.Setting setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_setting(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Ego egos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_egos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Vehicle vehicles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vehicles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.VulnerableRoadUser vrus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_vrus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.MiscellaneousObject miscs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_miscs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // map<int64, .sim_msg.EnvironmentalConditions> environment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&environment_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // .sim_msg.InfrastructureGroup infrastructure_group = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_infrastructure_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.MapModel map_models = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_map_models(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Scene::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Scene)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Setting setting = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_setting()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Ego egos = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_egos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Vehicle vehicles = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vehicles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.VulnerableRoadUser vrus = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_vrus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.MiscellaneousObject miscs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_miscs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<int64, .sim_msg.EnvironmentalConditions> environment = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          Scene_EnvironmentEntry_DoNotUse::Parser< ::PROTOBUF_NAMESPACE_ID::internal::MapField<
              Scene_EnvironmentEntry_DoNotUse,
              ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
              ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions > > parser(&environment_);
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.InfrastructureGroup infrastructure_group = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_infrastructure_group()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.MapModel map_models = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_map_models()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Scene)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Scene::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Setting setting = 1;
  if (this->has_setting()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::setting(this), output);
  }

  // repeated .sim_msg.Ego egos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->egos_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->egos(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.Vehicle vehicles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->vehicles(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.VulnerableRoadUser vrus = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vrus_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->vrus(static_cast<int>(i)),
      output);
  }

  // repeated .sim_msg.MiscellaneousObject miscs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->miscs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->miscs(static_cast<int>(i)),
      output);
  }

  // map<int64, .sim_msg.EnvironmentalConditions> environment = 6;
  if (!this->environment().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->environment().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->environment().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        Scene_EnvironmentEntry_DoNotUse::Funcs::SerializeToCodedStream(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, output);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it) {
        Scene_EnvironmentEntry_DoNotUse::Funcs::SerializeToCodedStream(6, it->first, it->second, output);
      }
    }
  }

  // .sim_msg.InfrastructureGroup infrastructure_group = 7;
  if (this->has_infrastructure_group()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::infrastructure_group(this), output);
  }

  // repeated .sim_msg.MapModel map_models = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_models_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->map_models(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:sim_msg.Scene)
}

::PROTOBUF_NAMESPACE_ID::uint8* Scene::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Scene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Setting setting = 1;
  if (this->has_setting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::setting(this), target);
  }

  // repeated .sim_msg.Ego egos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->egos_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->egos(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.Vehicle vehicles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vehicles_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->vehicles(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.VulnerableRoadUser vrus = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vrus_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->vrus(static_cast<int>(i)), target);
  }

  // repeated .sim_msg.MiscellaneousObject miscs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->miscs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->miscs(static_cast<int>(i)), target);
  }

  // map<int64, .sim_msg.EnvironmentalConditions> environment = 6;
  if (!this->environment().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (false &&
        this->environment().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->environment().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Scene_EnvironmentEntry_DoNotUse::Funcs::SerializeToArray(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::const_iterator
          it = this->environment().begin();
          it != this->environment().end(); ++it) {
        target = Scene_EnvironmentEntry_DoNotUse::Funcs::SerializeToArray(6, it->first, it->second, target);
      }
    }
  }

  // .sim_msg.InfrastructureGroup infrastructure_group = 7;
  if (this->has_infrastructure_group()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::infrastructure_group(this), target);
  }

  // repeated .sim_msg.MapModel map_models = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->map_models_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->map_models(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Scene)
  return target;
}

size_t Scene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Scene)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Ego egos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->egos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->egos(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.Vehicle vehicles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->vehicles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vehicles(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.VulnerableRoadUser vrus = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->vrus_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->vrus(static_cast<int>(i)));
    }
  }

  // repeated .sim_msg.MiscellaneousObject miscs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->miscs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->miscs(static_cast<int>(i)));
    }
  }

  // map<int64, .sim_msg.EnvironmentalConditions> environment = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->environment_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::sim_msg::EnvironmentalConditions >::const_iterator
      it = this->environment().begin();
      it != this->environment().end(); ++it) {
    total_size += Scene_EnvironmentEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .sim_msg.MapModel map_models = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->map_models_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->map_models(static_cast<int>(i)));
    }
  }

  // .sim_msg.Setting setting = 1;
  if (this->has_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *setting_);
  }

  // .sim_msg.InfrastructureGroup infrastructure_group = 7;
  if (this->has_infrastructure_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *infrastructure_group_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  const Scene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Scene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Scene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  egos_.MergeFrom(from.egos_);
  vehicles_.MergeFrom(from.vehicles_);
  vrus_.MergeFrom(from.vrus_);
  miscs_.MergeFrom(from.miscs_);
  environment_.MergeFrom(from.environment_);
  map_models_.MergeFrom(from.map_models_);
  if (from.has_setting()) {
    mutable_setting()->::sim_msg::Setting::MergeFrom(from.setting());
  }
  if (from.has_infrastructure_group()) {
    mutable_infrastructure_group()->::sim_msg::InfrastructureGroup::MergeFrom(from.infrastructure_group());
  }
}

void Scene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  return true;
}

void Scene::InternalSwap(Scene* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&egos_)->InternalSwap(CastToBase(&other->egos_));
  CastToBase(&vehicles_)->InternalSwap(CastToBase(&other->vehicles_));
  CastToBase(&vrus_)->InternalSwap(CastToBase(&other->vrus_));
  CastToBase(&miscs_)->InternalSwap(CastToBase(&other->miscs_));
  environment_.Swap(&other->environment_);
  CastToBase(&map_models_)->InternalSwap(CastToBase(&other->map_models_));
  swap(setting_, other->setting_);
  swap(infrastructure_group_, other->infrastructure_group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scene::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::DynamicConstraints* Arena::CreateMaybeMessage< ::sim_msg::DynamicConstraints >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::DynamicConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::BoundingBox* Arena::CreateMaybeMessage< ::sim_msg::BoundingBox >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::BoundingBox >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Performance* Arena::CreateMaybeMessage< ::sim_msg::Performance >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Performance >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionTimeToCollision* Arena::CreateMaybeMessage< ::sim_msg::ConditionTimeToCollision >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionTimeToCollision >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionSpeed* Arena::CreateMaybeMessage< ::sim_msg::ConditionSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionRelativeSpeed* Arena::CreateMaybeMessage< ::sim_msg::ConditionRelativeSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionRelativeSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionReachPosition* Arena::CreateMaybeMessage< ::sim_msg::ConditionReachPosition >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionReachPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionRelativeDistance* Arena::CreateMaybeMessage< ::sim_msg::ConditionRelativeDistance >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionRelativeDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionEgoAttachLaneidCustom* Arena::CreateMaybeMessage< ::sim_msg::ConditionEgoAttachLaneidCustom >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionEgoAttachLaneidCustom >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionSimulationTime* Arena::CreateMaybeMessage< ::sim_msg::ConditionSimulationTime >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionSimulationTime >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionTimeHeadway* Arena::CreateMaybeMessage< ::sim_msg::ConditionTimeHeadway >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionTimeHeadway >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionReachDistance* Arena::CreateMaybeMessage< ::sim_msg::ConditionReachDistance >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionReachDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ConditionStoryboardElementState* Arena::CreateMaybeMessage< ::sim_msg::ConditionStoryboardElementState >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ConditionStoryboardElementState >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Condition* Arena::CreateMaybeMessage< ::sim_msg::Condition >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ActionSpeed* Arena::CreateMaybeMessage< ::sim_msg::ActionSpeed >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ActionSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ActionAccel* Arena::CreateMaybeMessage< ::sim_msg::ActionAccel >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ActionAccel >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ActionLaneChange* Arena::CreateMaybeMessage< ::sim_msg::ActionLaneChange >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ActionLaneChange >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ActionLateralDistance* Arena::CreateMaybeMessage< ::sim_msg::ActionLateralDistance >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::ActionLateralDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Trigger* Arena::CreateMaybeMessage< ::sim_msg::Trigger >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Action* Arena::CreateMaybeMessage< ::sim_msg::Action >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Event* Arena::CreateMaybeMessage< ::sim_msg::Event >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PhysicleCommon* Arena::CreateMaybeMessage< ::sim_msg::PhysicleCommon >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PhysicleCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PhysicleEgo* Arena::CreateMaybeMessage< ::sim_msg::PhysicleEgo >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PhysicleEgo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PhysicleVehicle* Arena::CreateMaybeMessage< ::sim_msg::PhysicleVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PhysicleVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::PhysicleVru* Arena::CreateMaybeMessage< ::sim_msg::PhysicleVru >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::PhysicleVru >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::InitialCommon* Arena::CreateMaybeMessage< ::sim_msg::InitialCommon >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::InitialCommon >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::InitialEgo* Arena::CreateMaybeMessage< ::sim_msg::InitialEgo >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::InitialEgo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::InitialVehicle* Arena::CreateMaybeMessage< ::sim_msg::InitialVehicle >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::InitialVehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::InitialVru* Arena::CreateMaybeMessage< ::sim_msg::InitialVru >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::InitialVru >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Dynamic* Arena::CreateMaybeMessage< ::sim_msg::Dynamic >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Dynamic >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Ego* Arena::CreateMaybeMessage< ::sim_msg::Ego >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Ego >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Vehicle* Arena::CreateMaybeMessage< ::sim_msg::Vehicle >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Vehicle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::VulnerableRoadUser* Arena::CreateMaybeMessage< ::sim_msg::VulnerableRoadUser >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::VulnerableRoadUser >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::MiscellaneousObject* Arena::CreateMaybeMessage< ::sim_msg::MiscellaneousObject >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::MiscellaneousObject >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::MapModel* Arena::CreateMaybeMessage< ::sim_msg::MapModel >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::MapModel >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Scene_EnvironmentEntry_DoNotUse* Arena::CreateMaybeMessage< ::sim_msg::Scene_EnvironmentEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Scene_EnvironmentEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Scene* Arena::CreateMaybeMessage< ::sim_msg::Scene >(Arena* arena) {
  return Arena::CreateInternal< ::sim_msg::Scene >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
