// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_environment.proto
#pragma warning (disable : 4125)

#include "osi_environment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_osi_5fenvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_CloudLayer_osi_5fenvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fenvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Sun_osi_5fenvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fenvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_TimeOfDay_osi_5fenvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fenvironment_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Wind_osi_5fenvironment_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExternalReference_osi_5fcommon_2eproto;
namespace osi3 {
class EnvironmentalConditions_TimeOfDayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_TimeOfDay> _instance;
} _EnvironmentalConditions_TimeOfDay_default_instance_;
class EnvironmentalConditions_CloudLayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_CloudLayer> _instance;
} _EnvironmentalConditions_CloudLayer_default_instance_;
class EnvironmentalConditions_WindDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_Wind> _instance;
} _EnvironmentalConditions_Wind_default_instance_;
class EnvironmentalConditions_SunDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions_Sun> _instance;
} _EnvironmentalConditions_Sun_default_instance_;
class EnvironmentalConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EnvironmentalConditions> _instance;
} _EnvironmentalConditions_default_instance_;
}  // namespace osi3
static void InitDefaultsscc_info_EnvironmentalConditions_osi_5fenvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_EnvironmentalConditions_default_instance_;
    new (ptr) ::osi3::EnvironmentalConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::EnvironmentalConditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_EnvironmentalConditions_osi_5fenvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, InitDefaultsscc_info_EnvironmentalConditions_osi_5fenvironment_2eproto}, {
      &scc_info_EnvironmentalConditions_TimeOfDay_osi_5fenvironment_2eproto.base,
      &scc_info_ExternalReference_osi_5fcommon_2eproto.base,
      &scc_info_EnvironmentalConditions_CloudLayer_osi_5fenvironment_2eproto.base,
      &scc_info_EnvironmentalConditions_Wind_osi_5fenvironment_2eproto.base,
      &scc_info_EnvironmentalConditions_Sun_osi_5fenvironment_2eproto.base,}};

static void InitDefaultsscc_info_EnvironmentalConditions_CloudLayer_osi_5fenvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_EnvironmentalConditions_CloudLayer_default_instance_;
    new (ptr) ::osi3::EnvironmentalConditions_CloudLayer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::EnvironmentalConditions_CloudLayer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_CloudLayer_osi_5fenvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_CloudLayer_osi_5fenvironment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_Sun_osi_5fenvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_EnvironmentalConditions_Sun_default_instance_;
    new (ptr) ::osi3::EnvironmentalConditions_Sun();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::EnvironmentalConditions_Sun::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Sun_osi_5fenvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_Sun_osi_5fenvironment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_TimeOfDay_osi_5fenvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_EnvironmentalConditions_TimeOfDay_default_instance_;
    new (ptr) ::osi3::EnvironmentalConditions_TimeOfDay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::EnvironmentalConditions_TimeOfDay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_TimeOfDay_osi_5fenvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_TimeOfDay_osi_5fenvironment_2eproto}, {}};

static void InitDefaultsscc_info_EnvironmentalConditions_Wind_osi_5fenvironment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osi3::_EnvironmentalConditions_Wind_default_instance_;
    new (ptr) ::osi3::EnvironmentalConditions_Wind();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::osi3::EnvironmentalConditions_Wind::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EnvironmentalConditions_Wind_osi_5fenvironment_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_EnvironmentalConditions_Wind_osi_5fenvironment_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_osi_5fenvironment_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_osi_5fenvironment_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_osi_5fenvironment_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_osi_5fenvironment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_TimeOfDay, seconds_since_midnight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_CloudLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_CloudLayer, fractional_cloud_cover_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Wind, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Wind, origin_direction_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Wind, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, azimuth_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, elevation_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions_Sun, intensity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, ambient_illumination_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, time_of_day_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, unix_timestamp_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, atmospheric_pressure_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, temperature_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, relative_humidity_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, precipitation_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, fog_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, source_reference_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, clouds_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, wind_),
  PROTOBUF_FIELD_OFFSET(::osi3::EnvironmentalConditions, sun_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osi3::EnvironmentalConditions_TimeOfDay)},
  { 6, -1, sizeof(::osi3::EnvironmentalConditions_CloudLayer)},
  { 12, -1, sizeof(::osi3::EnvironmentalConditions_Wind)},
  { 19, -1, sizeof(::osi3::EnvironmentalConditions_Sun)},
  { 27, -1, sizeof(::osi3::EnvironmentalConditions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_EnvironmentalConditions_TimeOfDay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_EnvironmentalConditions_CloudLayer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_EnvironmentalConditions_Wind_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_EnvironmentalConditions_Sun_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osi3::_EnvironmentalConditions_default_instance_),
};

const char descriptor_table_protodef_osi_5fenvironment_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025osi_environment.proto\022\004osi3\032\020osi_commo"
  "n.proto\"\230\021\n\027EnvironmentalConditions\022O\n\024a"
  "mbient_illumination\030\001 \001(\01621.osi3.Environ"
  "mentalConditions.AmbientIllumination\022<\n\013"
  "time_of_day\030\002 \001(\0132\'.osi3.EnvironmentalCo"
  "nditions.TimeOfDay\022\026\n\016unix_timestamp\030\010 \001"
  "(\003\022\034\n\024atmospheric_pressure\030\003 \001(\001\022\023\n\013temp"
  "erature\030\004 \001(\001\022\031\n\021relative_humidity\030\005 \001(\001"
  "\022B\n\rprecipitation\030\006 \001(\0162+.osi3.Environme"
  "ntalConditions.Precipitation\022.\n\003fog\030\007 \001("
  "\0162!.osi3.EnvironmentalConditions.Fog\0221\n\020"
  "source_reference\030\t \003(\0132\027.osi3.ExternalRe"
  "ference\0228\n\006clouds\030\n \001(\0132(.osi3.Environme"
  "ntalConditions.CloudLayer\0220\n\004wind\030\013 \001(\0132"
  "\".osi3.EnvironmentalConditions.Wind\022.\n\003s"
  "un\030\014 \001(\0132!.osi3.EnvironmentalConditions."
  "Sun\032+\n\tTimeOfDay\022\036\n\026seconds_since_midnig"
  "ht\030\001 \001(\r\032\322\004\n\nCloudLayer\022]\n\026fractional_cl"
  "oud_cover\030\001 \001(\0162=.osi3.EnvironmentalCond"
  "itions.CloudLayer.FractionalCloudCover\"\344"
  "\003\n\024FractionalCloudCover\022\"\n\036FRACTIONAL_CL"
  "OUD_COVER_UNKNOWN\020\000\022 \n\034FRACTIONAL_CLOUD_"
  "COVER_OTHER\020\001\022%\n!FRACTIONAL_CLOUD_COVER_"
  "ZERO_OKTAS\020\002\022$\n FRACTIONAL_CLOUD_COVER_O"
  "NE_OKTAS\020\003\022$\n FRACTIONAL_CLOUD_COVER_TWO"
  "_OKTAS\020\004\022&\n\"FRACTIONAL_CLOUD_COVER_THREE"
  "_OKTAS\020\005\022%\n!FRACTIONAL_CLOUD_COVER_FOUR_"
  "OKTAS\020\006\022%\n!FRACTIONAL_CLOUD_COVER_FIVE_O"
  "KTAS\020\007\022$\n FRACTIONAL_CLOUD_COVER_SIX_OKT"
  "AS\020\010\022&\n\"FRACTIONAL_CLOUD_COVER_SEVEN_OKT"
  "AS\020\t\022&\n\"FRACTIONAL_CLOUD_COVER_EIGHT_OKT"
  "AS\020\n\022\'\n#FRACTIONAL_CLOUD_COVER_SKY_OBSCU"
  "RED\020\013\032/\n\004Wind\022\030\n\020origin_direction\030\001 \001(\001\022"
  "\r\n\005speed\030\002 \001(\001\032<\n\003Sun\022\017\n\007azimuth\030\001 \001(\001\022\021"
  "\n\televation\030\002 \001(\001\022\021\n\tintensity\030\003 \001(\001\"\200\002\n"
  "\rPrecipitation\022\031\n\025PRECIPITATION_UNKNOWN\020"
  "\000\022\027\n\023PRECIPITATION_OTHER\020\001\022\026\n\022PRECIPITAT"
  "ION_NONE\020\002\022\034\n\030PRECIPITATION_VERY_LIGHT\020\003"
  "\022\027\n\023PRECIPITATION_LIGHT\020\004\022\032\n\026PRECIPITATI"
  "ON_MODERATE\020\005\022\027\n\023PRECIPITATION_HEAVY\020\006\022\034"
  "\n\030PRECIPITATION_VERY_HEAVY\020\007\022\031\n\025PRECIPIT"
  "ATION_EXTREME\020\010\"\315\001\n\003Fog\022\017\n\013FOG_UNKNOWN\020\000"
  "\022\r\n\tFOG_OTHER\020\001\022\034\n\030FOG_EXCELLENT_VISIBIL"
  "ITY\020\002\022\027\n\023FOG_GOOD_VISIBILITY\020\003\022\033\n\027FOG_MO"
  "DERATE_VISIBILITY\020\004\022\027\n\023FOG_POOR_VISIBILI"
  "TY\020\005\022\014\n\010FOG_MIST\020\006\022\r\n\tFOG_LIGHT\020\007\022\r\n\tFOG"
  "_THICK\020\010\022\r\n\tFOG_DENSE\020\t\"\200\003\n\023AmbientIllum"
  "ination\022 \n\034AMBIENT_ILLUMINATION_UNKNOWN\020"
  "\000\022\036\n\032AMBIENT_ILLUMINATION_OTHER\020\001\022\037\n\033AMB"
  "IENT_ILLUMINATION_LEVEL1\020\002\022\037\n\033AMBIENT_IL"
  "LUMINATION_LEVEL2\020\003\022\037\n\033AMBIENT_ILLUMINAT"
  "ION_LEVEL3\020\004\022\037\n\033AMBIENT_ILLUMINATION_LEV"
  "EL4\020\005\022\037\n\033AMBIENT_ILLUMINATION_LEVEL5\020\006\022\037"
  "\n\033AMBIENT_ILLUMINATION_LEVEL6\020\007\022\037\n\033AMBIE"
  "NT_ILLUMINATION_LEVEL7\020\010\022\037\n\033AMBIENT_ILLU"
  "MINATION_LEVEL8\020\t\022\037\n\033AMBIENT_ILLUMINATIO"
  "N_LEVEL9\020\nB\002H\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_osi_5fenvironment_2eproto_deps[1] = {
  &::descriptor_table_osi_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_osi_5fenvironment_2eproto_sccs[5] = {
  &scc_info_EnvironmentalConditions_osi_5fenvironment_2eproto.base,
  &scc_info_EnvironmentalConditions_CloudLayer_osi_5fenvironment_2eproto.base,
  &scc_info_EnvironmentalConditions_Sun_osi_5fenvironment_2eproto.base,
  &scc_info_EnvironmentalConditions_TimeOfDay_osi_5fenvironment_2eproto.base,
  &scc_info_EnvironmentalConditions_Wind_osi_5fenvironment_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_osi_5fenvironment_2eproto_once;
static bool descriptor_table_osi_5fenvironment_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fenvironment_2eproto = {
  &descriptor_table_osi_5fenvironment_2eproto_initialized, descriptor_table_protodef_osi_5fenvironment_2eproto, "osi_environment.proto", 2262,
  &descriptor_table_osi_5fenvironment_2eproto_once, descriptor_table_osi_5fenvironment_2eproto_sccs, descriptor_table_osi_5fenvironment_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_osi_5fenvironment_2eproto::offsets,
  file_level_metadata_osi_5fenvironment_2eproto, 5, file_level_enum_descriptors_osi_5fenvironment_2eproto, file_level_service_descriptors_osi_5fenvironment_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_osi_5fenvironment_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_osi_5fenvironment_2eproto), true);
namespace osi3 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_CloudLayer_FractionalCloudCover_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[0];
}
bool EnvironmentalConditions_CloudLayer_FractionalCloudCover_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_UNKNOWN;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_OTHER;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_ZERO_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_ONE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_TWO_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_THREE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_FOUR_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_FIVE_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SIX_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SEVEN_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_EIGHT_OKTAS;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FRACTIONAL_CLOUD_COVER_SKY_OBSCURED;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FractionalCloudCover_MIN;
constexpr EnvironmentalConditions_CloudLayer_FractionalCloudCover EnvironmentalConditions_CloudLayer::FractionalCloudCover_MAX;
constexpr int EnvironmentalConditions_CloudLayer::FractionalCloudCover_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Precipitation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[1];
}
bool EnvironmentalConditions_Precipitation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_UNKNOWN;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_OTHER;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_NONE;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_LIGHT;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_LIGHT;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_MODERATE;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_HEAVY;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_VERY_HEAVY;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::PRECIPITATION_EXTREME;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MIN;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions::Precipitation_MAX;
constexpr int EnvironmentalConditions::Precipitation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Fog_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[2];
}
bool EnvironmentalConditions_Fog_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_UNKNOWN;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_OTHER;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_EXCELLENT_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_GOOD_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MODERATE_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_POOR_VISIBILITY;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_MIST;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_LIGHT;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_THICK;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::FOG_DENSE;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MIN;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions::Fog_MAX;
constexpr int EnvironmentalConditions::Fog_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_osi_5fenvironment_2eproto);
  return file_level_enum_descriptors_osi_5fenvironment_2eproto[3];
}
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_UNKNOWN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_OTHER;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL1;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL2;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL3;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL4;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL5;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL6;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL7;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL8;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AMBIENT_ILLUMINATION_LEVEL9;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MIN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::AmbientIllumination_MAX;
constexpr int EnvironmentalConditions::AmbientIllumination_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void EnvironmentalConditions_TimeOfDay::InitAsDefaultInstance() {
}
class EnvironmentalConditions_TimeOfDay::_Internal {
 public:
};

EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions.TimeOfDay)
}
EnvironmentalConditions_TimeOfDay::EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seconds_since_midnight_ = from.seconds_since_midnight_;
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.TimeOfDay)
}

void EnvironmentalConditions_TimeOfDay::SharedCtor() {
  seconds_since_midnight_ = 0u;
}

EnvironmentalConditions_TimeOfDay::~EnvironmentalConditions_TimeOfDay() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.TimeOfDay)
  SharedDtor();
}

void EnvironmentalConditions_TimeOfDay::SharedDtor() {
}

void EnvironmentalConditions_TimeOfDay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_TimeOfDay& EnvironmentalConditions_TimeOfDay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_TimeOfDay_osi_5fenvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_TimeOfDay::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seconds_since_midnight_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_TimeOfDay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 seconds_since_midnight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seconds_since_midnight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_TimeOfDay::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions.TimeOfDay)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seconds_since_midnight = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_since_midnight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions.TimeOfDay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions.TimeOfDay)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_TimeOfDay::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->seconds_since_midnight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions.TimeOfDay)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_TimeOfDay::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.TimeOfDay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->seconds_since_midnight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.TimeOfDay)
  return target;
}

size_t EnvironmentalConditions_TimeOfDay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.TimeOfDay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 seconds_since_midnight = 1;
  if (this->seconds_since_midnight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->seconds_since_midnight());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_TimeOfDay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_TimeOfDay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions.TimeOfDay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions.TimeOfDay)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_TimeOfDay::MergeFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seconds_since_midnight() != 0) {
    set_seconds_since_midnight(from.seconds_since_midnight());
  }
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_TimeOfDay::CopyFrom(const EnvironmentalConditions_TimeOfDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.TimeOfDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_TimeOfDay::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_TimeOfDay::InternalSwap(EnvironmentalConditions_TimeOfDay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(seconds_since_midnight_, other->seconds_since_midnight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_TimeOfDay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_CloudLayer::InitAsDefaultInstance() {
}
class EnvironmentalConditions_CloudLayer::_Internal {
 public:
};

EnvironmentalConditions_CloudLayer::EnvironmentalConditions_CloudLayer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions.CloudLayer)
}
EnvironmentalConditions_CloudLayer::EnvironmentalConditions_CloudLayer(const EnvironmentalConditions_CloudLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fractional_cloud_cover_ = from.fractional_cloud_cover_;
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.CloudLayer)
}

void EnvironmentalConditions_CloudLayer::SharedCtor() {
  fractional_cloud_cover_ = 0;
}

EnvironmentalConditions_CloudLayer::~EnvironmentalConditions_CloudLayer() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.CloudLayer)
  SharedDtor();
}

void EnvironmentalConditions_CloudLayer::SharedDtor() {
}

void EnvironmentalConditions_CloudLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_CloudLayer& EnvironmentalConditions_CloudLayer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_CloudLayer_osi_5fenvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_CloudLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.CloudLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fractional_cloud_cover_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_CloudLayer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_fractional_cloud_cover(static_cast<::osi3::EnvironmentalConditions_CloudLayer_FractionalCloudCover>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_CloudLayer::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions.CloudLayer)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fractional_cloud_cover(static_cast< ::osi3::EnvironmentalConditions_CloudLayer_FractionalCloudCover >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions.CloudLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions.CloudLayer)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_CloudLayer::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions.CloudLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  if (this->fractional_cloud_cover() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->fractional_cloud_cover(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions.CloudLayer)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_CloudLayer::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.CloudLayer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  if (this->fractional_cloud_cover() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->fractional_cloud_cover(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.CloudLayer)
  return target;
}

size_t EnvironmentalConditions_CloudLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.CloudLayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osi3.EnvironmentalConditions.CloudLayer.FractionalCloudCover fractional_cloud_cover = 1;
  if (this->fractional_cloud_cover() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fractional_cloud_cover());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_CloudLayer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions.CloudLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_CloudLayer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_CloudLayer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions.CloudLayer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions.CloudLayer)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_CloudLayer::MergeFrom(const EnvironmentalConditions_CloudLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.CloudLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fractional_cloud_cover() != 0) {
    set_fractional_cloud_cover(from.fractional_cloud_cover());
  }
}

void EnvironmentalConditions_CloudLayer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions.CloudLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_CloudLayer::CopyFrom(const EnvironmentalConditions_CloudLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.CloudLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_CloudLayer::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_CloudLayer::InternalSwap(EnvironmentalConditions_CloudLayer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fractional_cloud_cover_, other->fractional_cloud_cover_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_CloudLayer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_Wind::InitAsDefaultInstance() {
}
class EnvironmentalConditions_Wind::_Internal {
 public:
};

EnvironmentalConditions_Wind::EnvironmentalConditions_Wind()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions.Wind)
}
EnvironmentalConditions_Wind::EnvironmentalConditions_Wind(const EnvironmentalConditions_Wind& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&origin_direction_, &from.origin_direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&origin_direction_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.Wind)
}

void EnvironmentalConditions_Wind::SharedCtor() {
  ::memset(&origin_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&origin_direction_)) + sizeof(speed_));
}

EnvironmentalConditions_Wind::~EnvironmentalConditions_Wind() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.Wind)
  SharedDtor();
}

void EnvironmentalConditions_Wind::SharedDtor() {
}

void EnvironmentalConditions_Wind::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_Wind& EnvironmentalConditions_Wind::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_Wind_osi_5fenvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_Wind::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.Wind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&origin_direction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&origin_direction_)) + sizeof(speed_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_Wind::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double origin_direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          origin_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double speed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_Wind::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions.Wind)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double origin_direction = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &origin_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double speed = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions.Wind)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions.Wind)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_Wind::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions.Wind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double origin_direction = 1;
  if (!(this->origin_direction() <= 0 && this->origin_direction() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->origin_direction(), output);
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions.Wind)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_Wind::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.Wind)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double origin_direction = 1;
  if (!(this->origin_direction() <= 0 && this->origin_direction() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->origin_direction(), target);
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.Wind)
  return target;
}

size_t EnvironmentalConditions_Wind::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.Wind)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double origin_direction = 1;
  if (!(this->origin_direction() <= 0 && this->origin_direction() >= 0)) {
    total_size += 1 + 8;
  }

  // double speed = 2;
  if (!(this->speed() <= 0 && this->speed() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_Wind::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions.Wind)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_Wind* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_Wind>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions.Wind)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions.Wind)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_Wind::MergeFrom(const EnvironmentalConditions_Wind& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.Wind)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.origin_direction() <= 0 && from.origin_direction() >= 0)) {
    set_origin_direction(from.origin_direction());
  }
  if (!(from.speed() <= 0 && from.speed() >= 0)) {
    set_speed(from.speed());
  }
}

void EnvironmentalConditions_Wind::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions.Wind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_Wind::CopyFrom(const EnvironmentalConditions_Wind& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.Wind)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Wind::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Wind::InternalSwap(EnvironmentalConditions_Wind* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(origin_direction_, other->origin_direction_);
  swap(speed_, other->speed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Wind::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions_Sun::InitAsDefaultInstance() {
}
class EnvironmentalConditions_Sun::_Internal {
 public:
};

EnvironmentalConditions_Sun::EnvironmentalConditions_Sun()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions.Sun)
}
EnvironmentalConditions_Sun::EnvironmentalConditions_Sun(const EnvironmentalConditions_Sun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&intensity_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(intensity_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions.Sun)
}

void EnvironmentalConditions_Sun::SharedCtor() {
  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(intensity_));
}

EnvironmentalConditions_Sun::~EnvironmentalConditions_Sun() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions.Sun)
  SharedDtor();
}

void EnvironmentalConditions_Sun::SharedDtor() {
}

void EnvironmentalConditions_Sun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions_Sun& EnvironmentalConditions_Sun::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_Sun_osi_5fenvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions_Sun::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions.Sun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&intensity_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(intensity_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions_Sun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double elevation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          elevation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double intensity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          intensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions_Sun::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions.Sun)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double azimuth = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double elevation = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double intensity = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intensity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions.Sun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions.Sun)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions_Sun::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions.Sun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->azimuth(), output);
  }

  // double elevation = 2;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->elevation(), output);
  }

  // double intensity = 3;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->intensity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions.Sun)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions_Sun::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions.Sun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->azimuth(), target);
  }

  // double elevation = 2;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->elevation(), target);
  }

  // double intensity = 3;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->intensity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions.Sun)
  return target;
}

size_t EnvironmentalConditions_Sun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions.Sun)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth = 1;
  if (!(this->azimuth() <= 0 && this->azimuth() >= 0)) {
    total_size += 1 + 8;
  }

  // double elevation = 2;
  if (!(this->elevation() <= 0 && this->elevation() >= 0)) {
    total_size += 1 + 8;
  }

  // double intensity = 3;
  if (!(this->intensity() <= 0 && this->intensity() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions_Sun::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions.Sun)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions_Sun* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions_Sun>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions.Sun)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions.Sun)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions_Sun::MergeFrom(const EnvironmentalConditions_Sun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions.Sun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.azimuth() <= 0 && from.azimuth() >= 0)) {
    set_azimuth(from.azimuth());
  }
  if (!(from.elevation() <= 0 && from.elevation() >= 0)) {
    set_elevation(from.elevation());
  }
  if (!(from.intensity() <= 0 && from.intensity() >= 0)) {
    set_intensity(from.intensity());
  }
}

void EnvironmentalConditions_Sun::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions.Sun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions_Sun::CopyFrom(const EnvironmentalConditions_Sun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions.Sun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions_Sun::IsInitialized() const {
  return true;
}

void EnvironmentalConditions_Sun::InternalSwap(EnvironmentalConditions_Sun* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(azimuth_, other->azimuth_);
  swap(elevation_, other->elevation_);
  swap(intensity_, other->intensity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions_Sun::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EnvironmentalConditions::InitAsDefaultInstance() {
  ::osi3::_EnvironmentalConditions_default_instance_._instance.get_mutable()->time_of_day_ = const_cast< ::osi3::EnvironmentalConditions_TimeOfDay*>(
      ::osi3::EnvironmentalConditions_TimeOfDay::internal_default_instance());
  ::osi3::_EnvironmentalConditions_default_instance_._instance.get_mutable()->clouds_ = const_cast< ::osi3::EnvironmentalConditions_CloudLayer*>(
      ::osi3::EnvironmentalConditions_CloudLayer::internal_default_instance());
  ::osi3::_EnvironmentalConditions_default_instance_._instance.get_mutable()->wind_ = const_cast< ::osi3::EnvironmentalConditions_Wind*>(
      ::osi3::EnvironmentalConditions_Wind::internal_default_instance());
  ::osi3::_EnvironmentalConditions_default_instance_._instance.get_mutable()->sun_ = const_cast< ::osi3::EnvironmentalConditions_Sun*>(
      ::osi3::EnvironmentalConditions_Sun::internal_default_instance());
}
class EnvironmentalConditions::_Internal {
 public:
  static const ::osi3::EnvironmentalConditions_TimeOfDay& time_of_day(const EnvironmentalConditions* msg);
  static const ::osi3::EnvironmentalConditions_CloudLayer& clouds(const EnvironmentalConditions* msg);
  static const ::osi3::EnvironmentalConditions_Wind& wind(const EnvironmentalConditions* msg);
  static const ::osi3::EnvironmentalConditions_Sun& sun(const EnvironmentalConditions* msg);
};

const ::osi3::EnvironmentalConditions_TimeOfDay&
EnvironmentalConditions::_Internal::time_of_day(const EnvironmentalConditions* msg) {
  return *msg->time_of_day_;
}
const ::osi3::EnvironmentalConditions_CloudLayer&
EnvironmentalConditions::_Internal::clouds(const EnvironmentalConditions* msg) {
  return *msg->clouds_;
}
const ::osi3::EnvironmentalConditions_Wind&
EnvironmentalConditions::_Internal::wind(const EnvironmentalConditions* msg) {
  return *msg->wind_;
}
const ::osi3::EnvironmentalConditions_Sun&
EnvironmentalConditions::_Internal::sun(const EnvironmentalConditions* msg) {
  return *msg->sun_;
}
void EnvironmentalConditions::clear_source_reference() {
  source_reference_.Clear();
}
EnvironmentalConditions::EnvironmentalConditions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:osi3.EnvironmentalConditions)
}
EnvironmentalConditions::EnvironmentalConditions(const EnvironmentalConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      source_reference_(from.source_reference_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_time_of_day()) {
    time_of_day_ = new ::osi3::EnvironmentalConditions_TimeOfDay(*from.time_of_day_);
  } else {
    time_of_day_ = nullptr;
  }
  if (from.has_clouds()) {
    clouds_ = new ::osi3::EnvironmentalConditions_CloudLayer(*from.clouds_);
  } else {
    clouds_ = nullptr;
  }
  if (from.has_wind()) {
    wind_ = new ::osi3::EnvironmentalConditions_Wind(*from.wind_);
  } else {
    wind_ = nullptr;
  }
  if (from.has_sun()) {
    sun_ = new ::osi3::EnvironmentalConditions_Sun(*from.sun_);
  } else {
    sun_ = nullptr;
  }
  ::memcpy(&atmospheric_pressure_, &from.atmospheric_pressure_,
    static_cast<size_t>(reinterpret_cast<char*>(&fog_) -
    reinterpret_cast<char*>(&atmospheric_pressure_)) + sizeof(fog_));
  // @@protoc_insertion_point(copy_constructor:osi3.EnvironmentalConditions)
}

void EnvironmentalConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EnvironmentalConditions_osi_5fenvironment_2eproto.base);
  ::memset(&time_of_day_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fog_) -
      reinterpret_cast<char*>(&time_of_day_)) + sizeof(fog_));
}

EnvironmentalConditions::~EnvironmentalConditions() {
  // @@protoc_insertion_point(destructor:osi3.EnvironmentalConditions)
  SharedDtor();
}

void EnvironmentalConditions::SharedDtor() {
  if (this != internal_default_instance()) delete time_of_day_;
  if (this != internal_default_instance()) delete clouds_;
  if (this != internal_default_instance()) delete wind_;
  if (this != internal_default_instance()) delete sun_;
}

void EnvironmentalConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EnvironmentalConditions& EnvironmentalConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EnvironmentalConditions_osi_5fenvironment_2eproto.base);
  return *internal_default_instance();
}


void EnvironmentalConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:osi3.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_reference_.Clear();
  if (GetArenaNoVirtual() == nullptr && time_of_day_ != nullptr) {
    delete time_of_day_;
  }
  time_of_day_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clouds_ != nullptr) {
    delete clouds_;
  }
  clouds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && wind_ != nullptr) {
    delete wind_;
  }
  wind_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sun_ != nullptr) {
    delete sun_;
  }
  sun_ = nullptr;
  ::memset(&atmospheric_pressure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fog_) -
      reinterpret_cast<char*>(&atmospheric_pressure_)) + sizeof(fog_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* EnvironmentalConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_ambient_illumination(static_cast<::osi3::EnvironmentalConditions_AmbientIllumination>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_time_of_day(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double atmospheric_pressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          atmospheric_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double temperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double relative_humidity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          relative_humidity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_precipitation(static_cast<::osi3::EnvironmentalConditions_Precipitation>(val));
        } else goto handle_unusual;
        continue;
      // .osi3.EnvironmentalConditions.Fog fog = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_fog(static_cast<::osi3::EnvironmentalConditions_Fog>(val));
        } else goto handle_unusual;
        continue;
      // int64 unix_timestamp = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          unix_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osi3.ExternalReference source_reference = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_source_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_clouds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.EnvironmentalConditions.Wind wind = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_wind(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osi3.EnvironmentalConditions.Sun sun = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_sun(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool EnvironmentalConditions::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:osi3.EnvironmentalConditions)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ambient_illumination(static_cast< ::osi3::EnvironmentalConditions_AmbientIllumination >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_time_of_day()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double atmospheric_pressure = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &atmospheric_pressure_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double temperature = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double relative_humidity = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &relative_humidity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_precipitation(static_cast< ::osi3::EnvironmentalConditions_Precipitation >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.Fog fog = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fog(static_cast< ::osi3::EnvironmentalConditions_Fog >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 unix_timestamp = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64>(
                 input, &unix_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .osi3.ExternalReference source_reference = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_source_reference()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_clouds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.Wind wind = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_wind()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .osi3.EnvironmentalConditions.Sun sun = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sun()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:osi3.EnvironmentalConditions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:osi3.EnvironmentalConditions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void EnvironmentalConditions::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:osi3.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (this->ambient_illumination() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ambient_illumination(), output);
  }

  // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (this->has_time_of_day()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::time_of_day(this), output);
  }

  // double atmospheric_pressure = 3;
  if (!(this->atmospheric_pressure() <= 0 && this->atmospheric_pressure() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->atmospheric_pressure(), output);
  }

  // double temperature = 4;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->temperature(), output);
  }

  // double relative_humidity = 5;
  if (!(this->relative_humidity() <= 0 && this->relative_humidity() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->relative_humidity(), output);
  }

  // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (this->precipitation() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->precipitation(), output);
  }

  // .osi3.EnvironmentalConditions.Fog fog = 7;
  if (this->fog() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      7, this->fog(), output);
  }

  // int64 unix_timestamp = 8;
  if (this->unix_timestamp() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64(8, this->unix_timestamp(), output);
  }

  // repeated .osi3.ExternalReference source_reference = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->source_reference(static_cast<int>(i)),
      output);
  }

  // .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
  if (this->has_clouds()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::clouds(this), output);
  }

  // .osi3.EnvironmentalConditions.Wind wind = 11;
  if (this->has_wind()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::wind(this), output);
  }

  // .osi3.EnvironmentalConditions.Sun sun = 12;
  if (this->has_sun()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::sun(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:osi3.EnvironmentalConditions)
}

::PROTOBUF_NAMESPACE_ID::uint8* EnvironmentalConditions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:osi3.EnvironmentalConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (this->ambient_illumination() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ambient_illumination(), target);
  }

  // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (this->has_time_of_day()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::time_of_day(this), target);
  }

  // double atmospheric_pressure = 3;
  if (!(this->atmospheric_pressure() <= 0 && this->atmospheric_pressure() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->atmospheric_pressure(), target);
  }

  // double temperature = 4;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->temperature(), target);
  }

  // double relative_humidity = 5;
  if (!(this->relative_humidity() <= 0 && this->relative_humidity() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->relative_humidity(), target);
  }

  // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (this->precipitation() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->precipitation(), target);
  }

  // .osi3.EnvironmentalConditions.Fog fog = 7;
  if (this->fog() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->fog(), target);
  }

  // int64 unix_timestamp = 8;
  if (this->unix_timestamp() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->unix_timestamp(), target);
  }

  // repeated .osi3.ExternalReference source_reference = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->source_reference_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->source_reference(static_cast<int>(i)), target);
  }

  // .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
  if (this->has_clouds()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::clouds(this), target);
  }

  // .osi3.EnvironmentalConditions.Wind wind = 11;
  if (this->has_wind()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::wind(this), target);
  }

  // .osi3.EnvironmentalConditions.Sun sun = 12;
  if (this->has_sun()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::sun(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osi3.EnvironmentalConditions)
  return target;
}

size_t EnvironmentalConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osi3.EnvironmentalConditions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osi3.ExternalReference source_reference = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->source_reference_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->source_reference(static_cast<int>(i)));
    }
  }

  // .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  if (this->has_time_of_day()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_of_day_);
  }

  // .osi3.EnvironmentalConditions.CloudLayer clouds = 10;
  if (this->has_clouds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clouds_);
  }

  // .osi3.EnvironmentalConditions.Wind wind = 11;
  if (this->has_wind()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wind_);
  }

  // .osi3.EnvironmentalConditions.Sun sun = 12;
  if (this->has_sun()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sun_);
  }

  // double atmospheric_pressure = 3;
  if (!(this->atmospheric_pressure() <= 0 && this->atmospheric_pressure() >= 0)) {
    total_size += 1 + 8;
  }

  // .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  if (this->ambient_illumination() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ambient_illumination());
  }

  // .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  if (this->precipitation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->precipitation());
  }

  // double temperature = 4;
  if (!(this->temperature() <= 0 && this->temperature() >= 0)) {
    total_size += 1 + 8;
  }

  // double relative_humidity = 5;
  if (!(this->relative_humidity() <= 0 && this->relative_humidity() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 unix_timestamp = 8;
  if (this->unix_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->unix_timestamp());
  }

  // .osi3.EnvironmentalConditions.Fog fog = 7;
  if (this->fog() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fog());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnvironmentalConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osi3.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const EnvironmentalConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EnvironmentalConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osi3.EnvironmentalConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osi3.EnvironmentalConditions)
    MergeFrom(*source);
  }
}

void EnvironmentalConditions::MergeFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osi3.EnvironmentalConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  source_reference_.MergeFrom(from.source_reference_);
  if (from.has_time_of_day()) {
    mutable_time_of_day()->::osi3::EnvironmentalConditions_TimeOfDay::MergeFrom(from.time_of_day());
  }
  if (from.has_clouds()) {
    mutable_clouds()->::osi3::EnvironmentalConditions_CloudLayer::MergeFrom(from.clouds());
  }
  if (from.has_wind()) {
    mutable_wind()->::osi3::EnvironmentalConditions_Wind::MergeFrom(from.wind());
  }
  if (from.has_sun()) {
    mutable_sun()->::osi3::EnvironmentalConditions_Sun::MergeFrom(from.sun());
  }
  if (!(from.atmospheric_pressure() <= 0 && from.atmospheric_pressure() >= 0)) {
    set_atmospheric_pressure(from.atmospheric_pressure());
  }
  if (from.ambient_illumination() != 0) {
    set_ambient_illumination(from.ambient_illumination());
  }
  if (from.precipitation() != 0) {
    set_precipitation(from.precipitation());
  }
  if (!(from.temperature() <= 0 && from.temperature() >= 0)) {
    set_temperature(from.temperature());
  }
  if (!(from.relative_humidity() <= 0 && from.relative_humidity() >= 0)) {
    set_relative_humidity(from.relative_humidity());
  }
  if (from.unix_timestamp() != 0) {
    set_unix_timestamp(from.unix_timestamp());
  }
  if (from.fog() != 0) {
    set_fog(from.fog());
  }
}

void EnvironmentalConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnvironmentalConditions::CopyFrom(const EnvironmentalConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osi3.EnvironmentalConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnvironmentalConditions::IsInitialized() const {
  return true;
}

void EnvironmentalConditions::InternalSwap(EnvironmentalConditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&source_reference_)->InternalSwap(CastToBase(&other->source_reference_));
  swap(time_of_day_, other->time_of_day_);
  swap(clouds_, other->clouds_);
  swap(wind_, other->wind_);
  swap(sun_, other->sun_);
  swap(atmospheric_pressure_, other->atmospheric_pressure_);
  swap(ambient_illumination_, other->ambient_illumination_);
  swap(precipitation_, other->precipitation_);
  swap(temperature_, other->temperature_);
  swap(relative_humidity_, other->relative_humidity_);
  swap(unix_timestamp_, other->unix_timestamp_);
  swap(fog_, other->fog_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnvironmentalConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_TimeOfDay* Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_TimeOfDay >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::EnvironmentalConditions_TimeOfDay >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_CloudLayer* Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_CloudLayer >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::EnvironmentalConditions_CloudLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_Wind* Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_Wind >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::EnvironmentalConditions_Wind >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions_Sun* Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions_Sun >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::EnvironmentalConditions_Sun >(arena);
}
template<> PROTOBUF_NOINLINE ::osi3::EnvironmentalConditions* Arena::CreateMaybeMessage< ::osi3::EnvironmentalConditions >(Arena* arena) {
  return Arena::CreateInternal< ::osi3::EnvironmentalConditions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
